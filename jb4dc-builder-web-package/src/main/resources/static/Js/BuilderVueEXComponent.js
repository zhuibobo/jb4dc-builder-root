"use strict";Vue.component("db-table-relation-comp",{data:function(){return{acInterface:{getTablesDataUrl:"/Rest/Builder/DataStorage/DataBase/Table/GetTablesForZTreeNodeList",getTableFieldsUrl:"/Rest/Builder/DataStorage/DataBase/Table/GetTableFieldsByTableId"},relationTableTree:{treeObj:null,tableTreeSetting:{view:{dblClickExpand:!1,showLine:!0,fontCss:{color:"black","font-weight":"normal"}},data:{key:{name:"text"},simpleData:{enable:!0,idKey:"id",pIdKey:"parentId",rootPId:"-1"}},callback:{onClick:function(e,t,i){window._dbtablerelationcomp.selectedRelationTableNode(i)}}},tableTreeRootData:{id:"-1",text:"数据关联",parentId:"",nodeTypeName:"根节点",icon:"../../../Themes/Png16X16/coins_add.png",_nodeExType:"root",tableId:"-1"},currentSelectedNode:null},relationTableEditorView:{isShowTableEditDetail:!1,isSubEditTr:!1,isMainEditTr:!1,selPKData:[],selSelfKeyData:[],selForeignKeyData:[]},emptyEditorData:{id:"",parentId:"",singleName:"",pkFieldName:"",desc:"",selfKeyFieldName:"",outerKeyFieldName:"",relationType:"1ToN",isSave:"true",condition:"",tableId:"",tableName:"",tableCaption:""},currentEditorData:{id:"",parentId:"",singleName:"",pkFieldName:"",desc:"",selfKeyFieldName:"",outerKeyFieldName:"",relationType:"1ToN",isSave:"true",condition:"",tableId:"",tableName:"",tableCaption:""},selectTableTree:{oldSelectedDBLinkId:"JBuild4dLocationDBLink",disabledDBLink:!1,dbLinkEntities:[],tableTreeObj:null,tableTreeSetting:{view:{dblClickExpand:!1,showLine:!0,fontCss:{color:"black","font-weight":"normal"}},check:{enable:!0,nocheckInherit:!1,chkStyle:"radio",radioType:"all"},data:{key:{name:"text"},simpleData:{enable:!0,idKey:"id",pIdKey:"parentId",rootPId:"-1"}},callback:{onClick:function(e,t,i){if("Table"==i.nodeTypeName){var a=window._dbtablerelationcomp;$("#divSelectTable").dialog("close"),a.addTableToRelationTableTree(i)}}}},tableTreeData:null,allTableTreeData:null,selectedTableName:"无"},tempDataStore:{},resultData:[],treeNodeSetting:{MainTableNodeImg:"../../../Themes/Png16X16/page_key.png",SubTableNodeImg:"../../../Themes/Png16X16/page_refresh.png"}}},mounted:function(){this.getTablesAndBindOldSelected(),this.relationTableTree.treeObj=$.fn.zTree.init($("#dataRelationZTreeUL"),this.relationTableTree.tableTreeSetting,this.relationTableTree.tableTreeRootData),this.relationTableTree.treeObj.expandAll(!0),this.relationTableTree.currentSelectedNode=this.relationTableTree.treeObj.getNodeByParam("id","-1"),window._dbtablerelationcomp=this},watch:{currentEditorData:{handler:function(e,t){for(var i=0;i<this.resultData.length;i++)this.resultData[i].id==e.id&&this.resultItemCopyEditEnableValue(this.resultData[i],e)},deep:!0}},methods:{resultItemCopyEditEnableValue:function(e,t){e.singleName=t.singleName,e.pkFieldName=t.pkFieldName,e.desc=t.desc,e.selfKeyFieldName=t.selfKeyFieldName,e.outerKeyFieldName=t.outerKeyFieldName,e.relationType=t.relationType,e.isSave=t.isSave,e.condition=t.condition},getTableFieldsByTableId:function(t){if("-1"==t)return null;if(this.tempDataStore["tableField_"+t])return this.tempDataStore["tableField_"+t];var i=this;return AjaxUtility.PostSync(this.acInterface.getTableFieldsUrl,{tableId:t},function(e){e.success?i.tempDataStore["tableField_"+t]=e.data:DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,null)},this),this.tempDataStore["tableField_"+t]?this.tempDataStore["tableField_"+t]:null},getEmptyResultItem:function(){return JsonUtility.CloneSimple(this.emptyEditorData)},getExistResultItem:function(e){for(var t=0;t<this.resultData.length;t++)if(this.resultData[t].id==e)return this.resultData[t];return null},getTablesAndBindOldSelected:function(){var t=this;AjaxUtility.Post(this.acInterface.getTablesDataUrl,{},function(e){e.success?(t.selectTableTree.dbLinkEntities=e.exKVData.dbLinkEntityList,t.selectTableTree.allTableTreeData=e.data,t.bindSelectTableTree(!0),fuzzySearchTreeObj(t.selectTableTree.tableTreeObj,t.$refs.txt_table_search_text.$refs.input,null,!0)):DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,null)},this)},bindSelectTableTree:function(e){var t=CookieUtility.GetCookie("DBTRCDBLINKID");t&&e?this.selectTableTree.oldSelectedDBLinkId=t:t=this.selectTableTree.oldSelectedDBLinkId;for(var i=[],a=0;a<this.selectTableTree.allTableTreeData.length;a++)t==this.selectTableTree.allTableTreeData[a].outerId&&i.push(this.selectTableTree.allTableTreeData[a]);this.selectTableTree.tableTreeData=i,this.selectTableTree.tableTreeObj=$.fn.zTree.init($("#selectTableZTreeUL"),this.selectTableTree.tableTreeSetting,this.selectTableTree.tableTreeData),this.selectTableTree.tableTreeObj.expandAll(!0)},changeDBLink:function(e){CookieUtility.SetCookie1Month("DBTRCDBLINKID",e),this.bindSelectTableTree(!0)},getMainTableDBLinkId:function(){for(var e=0;e<this.selectTableTree.allTableTreeData.length;e++)if(this.selectTableTree.allTableTreeData[e].id==this.getMainTableId())return this.selectTableTree.allTableTreeData[e].outerId;return""},deleteSelectedRelationTreeNode:function(){if(this.relationTableTree.currentSelectedNode)if(this.isSelectedRootRelationTableNode())DialogUtility.AlertText("不能删除根节点!");else if(this.relationTableTree.currentSelectedNode.isParent)DialogUtility.AlertText("不能删除父节点!");else{for(var e=0;e<this.resultData.length;e++)if(this.resultData[e].id==this.relationTableTree.currentSelectedNode.id){this.resultData.splice(e,1);break}this.resultItemCopyEditEnableValue(this.currentEditorData,this.emptyEditorData),this.currentEditorData.id="",this.currentEditorData.parentId="",this.$refs.sqlGeneralDesignComp.setValue(""),this.relationTableEditorView.selPKData=[],this.relationTableEditorView.selSelfKeyData=[],this.relationTableEditorView.selForeignKeyData=[],this.relationTableEditorView.isShowTableEditDetail=!1,this.relationTableTree.treeObj.removeNode(this.relationTableTree.currentSelectedNode,!1),this.relationTableTree.currentSelectedNode=null}else DialogUtility.AlertText("请选择要删除的节点!")},beginSelectTableToRelationTable:function(){if(this.relationTableTree.currentSelectedNode){$("#divSelectTable").dialog({modal:!0,height:600,width:700});var e=this.getMainTableDBLinkId();this.selectTableTree.disabledDBLink=!!e&&(this.selectTableTree.oldSelectedDBLinkId=e,this.bindSelectTableTree(!1),!0)}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},"选择一个父节点!",null)},appendMainTableNodeProp:function(e){e._nodeExType="MainNode",e.icon=this.treeNodeSetting.MainTableNodeImg},appendSubTableNodeProp:function(e){e._nodeExType="SubNode",e.icon=this.treeNodeSetting.SubTableNodeImg},buildRelationTableNode:function(e,t){return"root"==this.relationTableTree.currentSelectedNode._nodeExType?this.appendMainTableNodeProp(e):this.appendSubTableNodeProp(e),e.tableId=e.id,e.id=t||StringUtility.Guid(),e},getMainRelationTableNode:function(){var e=this.relationTableTree.treeObj.getNodeByParam("_nodeExType","MainNode");return e||null},getMainTableId:function(){return this.getMainRelationTableNode()?this.getMainRelationTableNode().tableId:""},getMainTableName:function(){return this.getMainRelationTableNode()?this.getMainRelationTableNode().value:""},getMainTableCaption:function(){return this.getMainRelationTableNode()?this.getMainRelationTableNode().attr1:""},isSelectedRootRelationTableNode:function(){return"-1"==this.relationTableTree.currentSelectedNode.id},isSelectedMainRelationTableNode:function(){return"MainNode"==this.relationTableTree.currentSelectedNode._nodeExType},addTableToRelationTableTree:function(e){if(e=this.buildRelationTableNode(e),null!=this.getMainRelationTableNode()&&this.isSelectedRootRelationTableNode())DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},"只允许存在一个主记录!",null);else{this.relationTableTree.treeObj.addNodes(this.relationTableTree.currentSelectedNode,-1,e,!1);var t=this.getEmptyResultItem();t.id=e.id,t.parentId=this.relationTableTree.currentSelectedNode.id,t.tableId=e.tableId,t.tableName=e.value,t.tableCaption=e.attr1,t.tableCode=e.code,this.resultData.push(t)}},selectedRelationTableNode:function(e){if(this.relationTableTree.currentSelectedNode=e,this.relationTableEditorView.isShowTableEditDetail=!this.isSelectedRootRelationTableNode(),this.relationTableEditorView.isMainEditTr=this.isSelectedMainRelationTableNode(),this.relationTableEditorView.isSubEditTr=!this.isSelectedMainRelationTableNode(),!this.isSelectedRootRelationTableNode()){this.relationTableEditorView.selPKData=null!=this.getTableFieldsByTableId(e.tableId)?this.getTableFieldsByTableId(e.tableId):[],this.relationTableEditorView.selSelfKeyData=null!=this.getTableFieldsByTableId(e.tableId)?this.getTableFieldsByTableId(e.tableId):[];var t=e.getParentNode();this.relationTableEditorView.selForeignKeyData=null!=this.getTableFieldsByTableId(t.tableId)?this.getTableFieldsByTableId(t.tableId):[],this.currentEditorData.id=this.relationTableTree.currentSelectedNode.id,this.currentEditorData.parentId=t.id;var i=this.getExistResultItem(e.id);if(null!=i){this.resultItemCopyEditEnableValue(this.currentEditorData,i);var a=this;window.setTimeout(function(){a.$refs.sqlGeneralDesignComp.setValue(a.currentEditorData.condition),a.$refs.sqlGeneralDesignComp.setAboutTableFields(a.relationTableEditorView.selSelfKeyData,a.relationTableEditorView.selForeignKeyData)},300)}else alert("通过getExistResultItem获取不到数据!")}},getResultData:function(){return this.resultData},serializeRelation:function(e){alert("serializeRelation已经停用")},deserializeRelation:function(e){alert("deserializeRelation已经停用")},getValue:function(){return{mainTableId:this.getMainTableId(),mainTableName:this.getMainTableName(),mainTableCaption:this.getMainTableCaption(),relationData:this.resultData}},setValue:function(e){var t=JsonUtility.StringToJson(e);this.resultData=t;for(var i=new Array,a=0;a<t.length;a++){var l={value:t[a].tableName,attr1:t[a].tableCaption,text:"【"+t[a].tableCode+"】"+t[a].tableCaption+"【"+t[a].tableName+"】",id:t[a].id,parentId:t[a].parentId};"-1"==t[a].parentId?this.appendMainTableNodeProp(l):this.appendSubTableNodeProp(l),i.push(l)}i.push(this.relationTableTree.tableTreeRootData),this.relationTableTree.treeObj=$.fn.zTree.init($("#dataRelationZTreeUL"),this.relationTableTree.tableTreeSetting,i),this.relationTableTree.treeObj.expandAll(!0)},alertSerializeRelation:function(){DialogUtility.AlertJsonCode(this.resultData)},inputDeserializeRelation:function(){DialogUtility.Prompt(window,{width:900,height:600},DialogUtility.DialogPromptId,"请贴入数据关联Json设置字符串",function(e){try{window._dbtablerelationcomp.setValue(e)}catch(e){alert("反序列化失败:"+e)}})}},template:'<div class="db-table-relation-comp">\n                <divider orientation="left" :dashed="true" style="font-size: 12px;margin-top: 0px;margin-bottom: 10px">数据关系关联设置</divider>\n                <div style="float: left;width: 350px;height: 330px;border: #ddddf1 1px solid;border-radius: 4px;padding: 10px 10px 10px 10px;">\n                    <button-group shape="circle" style="margin: auto">\n                        <i-button type="success" @click="beginSelectTableToRelationTable">&nbsp;添加&nbsp;</i-button>\n                        <i-button @click="deleteSelectedRelationTreeNode">&nbsp;删除&nbsp;</i-button>\n                        <i-button @click="alertSerializeRelation">序列化</i-button>\n                        <i-button @click="inputDeserializeRelation">反序列化</i-button>\n                        <i-button>说明</i-button>\n                    </button-group>\n                    <ul id="dataRelationZTreeUL" class="ztree" style="overflow-x: hidden"></ul>\n                </div>\n                <div style="float: right;width: 630px;height: 330px;border: #ddddf1 1px solid;border-radius: 4px;padding: 10px 10px 10px 10px;">\n                    <table class="light-gray-table" cellpadding="0" cellspacing="0" border="0" v-if="relationTableEditorView.isShowTableEditDetail">\n                        <colgroup>\n                            <col style="width: 17%" />\n                            <col style="width: 33%" />\n                            <col style="width: 15%" />\n                            <col style="width: 35%" />\n                        </colgroup>\n                        <tbody>\n                            <tr>\n                                <td class="label">SingleName：</td>\n                                <td>\n                                    <i-input v-model="currentEditorData.singleName" size="small" placeholder="本关联中的唯一名称,可以为空" />\n                                </td>\n                                <td class="label">PKKey：</td>\n                                <td>\n                                    <i-select placeholder="默认使用Id字段" v-model="currentEditorData.pkFieldName" size="small" style="width:199px">\n                                        <i-option v-for="item in relationTableEditorView.selPKData" :value="item.fieldName" :key="item.fieldName">{{item.fieldCaption}}</i-option>\n                                    </i-select>\n                                </td>\n                            </tr>\n                            <tr v-if="relationTableEditorView.isSubEditTr">\n                                <td class="label">数据关系：</td>\n                                <td>\n                                    <radio-group v-model="currentEditorData.relationType" type="button" size="small">\n                                        <radio label="1To1">1:1</radio>\n                                        <radio label="1ToN">1:N</radio>\n                                    </radio-group>\n                                </td>\n                                <td class="label">是否保存：</td>\n                                <td>\n                                    <radio-group v-model="currentEditorData.isSave" type="button" size="small">\n                                        <radio label="true">是</radio>\n                                        <radio label="false">否</radio>\n                                    </radio-group>\n                                </td>\n                            </tr>\n                            <tr v-if="relationTableEditorView.isSubEditTr">\n                                <td class="label">本身关联字段：</td>\n                                <td>\n                                     <i-select placeholder="默认使用Id字段" v-model="currentEditorData.selfKeyFieldName" size="small" style="width:199px">\n                                        <i-option v-for="item in relationTableEditorView.selSelfKeyData" :value="item.fieldName" :key="item.fieldName">{{item.fieldCaption}}</i-option>\n                                    </i-select>\n                                </td>\n                                <td class="label">外联字段：</td>\n                                <td>\n                                     <i-select placeholder="默认使用Id字段" v-model="currentEditorData.outerKeyFieldName" size="small" style="width:199px">\n                                        <i-option v-for="item in relationTableEditorView.selPKData" :value="item.fieldName" :key="item.fieldName">{{item.fieldCaption}}</i-option>\n                                    </i-select>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td class="label">Desc：</td>\n                                <td colspan="3">\n                                    <i-input v-model="currentEditorData.desc" size="small" placeholder="说明" />\n                                </td>\n                            </tr>\n                            <tr>\n                                <td class="label">加载条件：</td>\n                                <td colspan="3">\n                                    <sql-general-design-comp ref="sqlGeneralDesignComp" :sqlDesignerHeight="74" v-model="currentEditorData.condition"></sql-general-design-comp>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div id="divSelectTable" title="请选择表" style="display: none">\n                    <i-input search class="input_border_bottom" ref="txt_table_search_text" placeholder="请输入表名或者标题">\n                        <i-select v-model="selectTableTree.oldSelectedDBLinkId" slot="prepend" style="width: 280px" @on-change="changeDBLink" :disabled="selectTableTree.disabledDBLink">\n                            <i-option :value="item.dbId" v-for="item in selectTableTree.dbLinkEntities">{{item.dbLinkName}}</i-option>\n                        </i-select>\n                    </i-input>\n                    <ul id="selectTableZTreeUL" class="ztree div-custom-scroll" style="height: 500px;overflow-y:scroll;overflow-x:hidden"></ul>\n                </div>\n              </div>'}),Vue.component("design-html-elem-list",{data:function(){return{}},mounted:function(){},methods:{},template:'<div class="design-html-elem-list-wrap">            <div class="design-html-elem-list-item">格式化</div>            <div class="design-html-elem-list-item">说明</div>        </div>'}),Vue.component("fd-control-base-info",{props:["value"],data:function(){return{baseInfo:{id:"",serialize:"",name:"",className:"",placeholder:"",custReadonly:"",custDisabled:"",style:"",desc:"",status:""}}},watch:{baseInfo:function(e){this.$emit("input",e)},value:function(e){this.baseInfo=e}},mounted:function(){this.baseInfo=this.value,this.baseInfo.status||(this.baseInfo.status="enable")},methods:{},template:'<table class="html-design-plugin-dialog-table-wraper" cellpadding="0" cellspacing="0" border="0">\n                    <colgroup>\n                        <col style="width: 100px" />\n                        <col style="width: 240px" />\n                        <col style="width: 90px" />\n                        <col style="width: 120px" />\n                        <col style="width: 90px" />\n                        <col />\n                    </colgroup>\n                    <tbody>\n                        <tr>\n                            <td>ID：</td>\n                            <td>\n                                <input type="text" v-model="baseInfo.id" />\n                            </td>\n                            <td>Serialize：</td>\n                            <td style="text-align: center">\n                                <radio-group type="button" style="margin: auto" v-model="baseInfo.serialize">\n                                    <radio label="true">是</radio>\n                                    <radio label="false">否</radio>\n                                </radio-group>\n                            </td>\n                            <td>启用：</td>\n                            <td style="text-align: center">\n                                <radio-group type="button" style="margin: auto" v-model="baseInfo.status">\n                                    <radio label="enable">是</radio>\n                                    <radio label="disable">否</radio>\n                                </radio-group>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Name：</td>\n                            <td>\n                                <input type="text" v-model="baseInfo.name" />\n                            </td>\n                            <td>ClassName：</td>\n                            <td colspan="3">\n                                <input type="text" v-model="baseInfo.className" />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Placeholder</td>\n                            <td>\n                                <input type="text" v-model="baseInfo.placeholder" />\n                            </td>\n                            <td>Readonly：</td>\n                            <td style="text-align: center">\n                                <radio-group type="button" style="margin: auto" v-model="baseInfo.custReadonly">\n                                    <radio label="readonly">是</radio>\n                                    <radio label="noreadonly">否</radio>\n                                </radio-group>\n                            </td>\n                            <td>Disabled：</td>\n                            <td style="text-align: center">\n                                <radio-group type="button" style="margin: auto" v-model="baseInfo.custDisabled">\n                                    <radio label="disabled">是</radio>\n                                    <radio label="nodisabled">否</radio>\n                                </radio-group>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>样式：</td>\n                            <td colspan="5">\n                                <textarea rows="7" v-model="baseInfo.style"></textarea>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>备注：</td>\n                            <td colspan="5">\n                                <textarea rows="8" v-model="baseInfo.desc"></textarea>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>'}),Vue.component("fd-control-bind-to",{props:["bindToFieldProp","defaultValueProp","validateRulesProp"],data:function(){return{bindToField:{tableId:"",tableName:"",tableCaption:"",fieldName:"",fieldCaption:"",fieldDataType:"",fieldLength:""},validateRules:{msg:"",rules:[]},defaultValue:{defaultType:"",defaultValue:"",defaultText:""},tempData:{defaultDisplayText:""}}},watch:{bindToProp:function(e){console.log(e)},bindToFieldProp:function(e){this.bindToField=e},defaultValueProp:function(e){this.defaultValue=e,StringUtility.IsNullOrEmpty(this.defaultValue.defaultType)||(this.tempData.defaultDisplayText=DefaultValueUtility.formatText(this.defaultValue.defaultType,this.defaultValue.defaultText))},validateRulesProp:function(e){this.validateRules=e}},mounted:function(){this.bindToField=this.bindToFieldProp},methods:{setCompleted:function(){this.$emit("on-set-completed",this.bindToField,this.defaultValue,this.validateRules)},selectBindFieldView:function(){window._SelectBindObj=this,window.parent.appForm.selectBindToSingleFieldDialogBegin(window,this.getSelectFieldResultValue())},setSelectFieldResultValue:function(e){this.bindToField={},this.bindToField.fieldLength=null!=e?(this.bindToField.fieldName=e.fieldName,this.bindToField.tableId=e.tableId,this.bindToField.tableName=e.tableName,this.bindToField.tableCaption=e.tableCaption,this.bindToField.fieldCaption=e.fieldCaption,this.bindToField.fieldDataType=e.fieldDataType,e.fieldLength):(this.bindToField.fieldName="",this.bindToField.tableId="",this.bindToField.tableName="",this.bindToField.tableCaption="",this.bindToField.fieldCaption="",this.bindToField.fieldDataType=""),this.setCompleted()},getSelectFieldResultValue:function(){return JsonUtility.CloneSimple(this.bindToField)},selectDefaultValueView:function(){window._SelectBindObj=this,window.parent.appForm.selectDefaultValueDialogBegin(window,null)},setSelectEnvVariableResultValue:function(e){this.tempData.defaultDisplayText=null!=e?(this.defaultValue.defaultType=e.Type,this.defaultValue.defaultValue=e.Value,this.defaultValue.defaultText=e.Text,DefaultValueUtility.formatText(this.defaultValue.defaultType,this.defaultValue.defaultText)):(this.defaultValue.defaultType="",this.defaultValue.defaultValue="",this.defaultValue.defaultText=""),this.setCompleted()},selectValidateRuleView:function(){window._SelectBindObj=this,window.parent.appForm.selectValidateRuleDialogBegin(window,this.getSelectValidateRuleResultValue())},setSelectValidateRuleResultValue:function(e){null!=e?(this.validateRules=e,this.setCompleted()):(this.validateRules.msg="",this.validateRules.rules=[])},getSelectValidateRuleResultValue:function(){return this.validateRules}},template:'<table cellpadding="0" cellspacing="0" border="0" class="html-design-plugin-dialog-table-wraper">\n                    <colgroup>\n                        <col style="width: 100px" />\n                        <col style="width: 280px" />\n                        <col style="width: 100px" />\n                        <col />\n                    </colgroup>\n                    <tbody>\n                        <tr>\n                            <td colspan="4">\n                                绑定到表<button class="btn-select fright" v-on:click="selectBindFieldView">...</button>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>表编号：</td>\n                            <td colspan="3">{{bindToField.tableId}}</td>\n                        </tr>\n                        <tr>\n                            <td>表名：</td>\n                            <td>{{bindToField.tableName}}</td>\n                            <td>表标题：</td>\n                            <td>{{bindToField.tableCaption}}</td>\n                        </tr>\n                        <tr>\n                            <td>字段名：</td>\n                            <td>{{bindToField.fieldName}}</td>\n                            <td>字段标题：</td>\n                            <td>{{bindToField.fieldCaption}}</td>\n                        </tr>\n                        <tr>\n                            <td>类型：</td>\n                            <td>{{bindToField.fieldDataType}}</td>\n                            <td>长度：</td>\n                            <td>{{bindToField.fieldLength}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan="4">默认值<button class="btn-select fright" v-on:click="selectDefaultValueView">...</button></td>\n                        </tr>\n                        <tr style="height: 35px">\n                            <td colspan="4" style="background-color: #ffffff;">\n                            {{tempData.defaultDisplayText}}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td colspan="4">\n                                校验规则<button class="btn-select fright" v-on:click="selectValidateRuleView">...</button>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td colspan="4" style="background-color: #ffffff">\n                                <table class="html-design-plugin-dialog-table-wraper">\n                                    <colgroup>\n                                        <col style="width: 100px" />\n                                        <col />\n                                    </colgroup>\n                                    <tbody>\n                                        <tr>\n                                            <td style="text-align: center;">提示消息：</td>\n                                            <td>{{validateRules.msg}}</td>\n                                        </tr>\n                                        <tr>\n                                            <td style="text-align: center;">验证类型</td>\n                                            <td style="background: #e8eaec;text-align: center;">参数</td>\n                                        </tr>\n                                        <tr v-for="ruleItem in validateRules.rules">\n                                            <td style="background: #ffffff;text-align: center;color: #ad9361">{{ruleItem.validateType}}</td>\n                                            <td style="background: #ffffff;text-align: center;"><p v-if="ruleItem.validateParas === \'\'">无参数</p><p v-else>{{ruleItem.validateParas}}</p></td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>'}),Vue.component("fd-control-select-bind-to-single-field-dialog",{data:function(){var a=this;return{acInterface:{getTablesDataUrl:"/Rest/Builder/DataStorage/DataBase/Table/GetTablesForZTreeNodeList",getTableFieldsDataUrl:"/Rest/Builder/DataStorage/DataBase/Table/GetTableFieldsByTableId",getTablesFieldsByTableIds:"/Rest/Builder/DataStorage/DataBase/Table/GetTablesFieldsByTableIds"},selectedData:{tableId:"",tableName:"",tableCaption:"",fieldName:"",fieldCaption:"",fieldDataType:"",fieldLength:""},tableTree:{tableTreeObj:null,tableTreeSetting:{view:{dblClickExpand:!1,showLine:!0,fontCss:{color:"black","font-weight":"normal"}},check:{enable:!1,nocheckInherit:!1,chkStyle:"radio",radioType:"all"},data:{key:{name:"displayText"},simpleData:{enable:!0,idKey:"id",pIdKey:"parentId",rootPId:"-1"}},callback:{onClick:function(e,t,i){a.selectedData.tableId=i.tableId,a.selectedData.tableName=i.tableName,a.selectedData.tableCaption=i.tableCaption,a.selectedData.fieldName="",a.selectedData.fieldCaption="",a.selectedData.fieldDataType="",a.selectedData.fieldLength="",a.fieldTable.fieldData=[],a.filterAllFieldsToTable(a.selectedData.tableId)},onDblClick:function(e,t,i){},onAsyncSuccess:function(e,t,i,a){}}},tableTreeData:null,selectedTableName:"无"},fieldTable:{fieldData:[],tableHeight:470,columnsConfig:[{title:" ",width:60,key:"isSelectedToBind",render:function(e,t){return"1"==t.row.isSelectedToBind?e("div",{class:"list-row-button-wrap"},[e("div",{class:"list-row-button selected"})]):e("div",{class:""},"")}},{title:"名称",key:"fieldName",align:"center"},{title:"标题",key:"fieldCaption",align:"center"}]},oldRelationDataString:"",relationData:null,allFields:null,oldBindFieldData:null}},mounted:function(){},methods:{beginSelect:function(e,t){if(console.log("关联表数据："),console.log(e),console.log("已经绑定了的数据："),console.log(t),null==e||""==e||0==e.length)return DialogUtility.AlertText("请先设置表单的数据关联！"),$(window.document).find(".ui-widget-overlay").css("zIndex",10100),void $(window.document).find(".ui-dialog").css("zIndex",10101);var i=this.$refs.fdControlSelectBindToSingleFieldDialogWrap;if(DialogUtility.DialogElemObj(i,{modal:!0,height:680,width:980,title:"选择绑定字段"}),$(window.document).find(".ui-widget-overlay").css("zIndex",10100),$(window.document).find(".ui-dialog").css("zIndex",10101),this.oldBindFieldData=t,this.selectedData=JsonUtility.CloneSimple(t),JsonUtility.JsonToString(e)!=this.oldRelationDataString){for(var a=0;a<e.length;a++)e[a].displayText=e[a].tableName+"["+e[a].tableCaption+"]("+e[a].relationType+")","-1"==e[a].parentId&&(e[a].displayText=e[a].tableName+"["+e[a].tableCaption+"]"),e[a].icon="../../../Themes/Png16X16/table.png";this.tableTree.tableTreeObj=$.fn.zTree.init($("#tableZTreeUL"),this.tableTree.tableTreeSetting,e),this.tableTree.tableTreeObj.expandAll(!0),this.oldRelationDataString=JsonUtility.JsonToString(e),this.relationData=e,this.getAllTablesFields(e)}else this.resetFieldToSelectedStatus(this.allFields);if(t&&t.tableId&&""!=t.tableId){var l=this.tableTree.tableTreeObj.getNodeByParam("tableId",t.tableId);this.tableTree.tableTreeObj.selectNode(l,!1,!0)}},resetFieldToSelectedStatus:function(e){for(var t=0;t<this.fieldTable.fieldData.length;t++)this.fieldTable.fieldData[t].isSelectedToBind="0";if(e){for(t=0;t<e.length;t++)e[t].isSelectedToBind="0",e[t].fieldTableId==this.oldBindFieldData.tableId&&e[t].fieldName==this.oldBindFieldData.fieldName&&(e[t].isSelectedToBind="1");this.allFields=e}this.filterAllFieldsToTable(this.oldBindFieldData.tableId)},getAllTablesFields:function(e){for(var t=[],i=0;i<e.length;i++)t.push(e[i].tableId);var a=this;AjaxUtility.Post(this.acInterface.getTablesFieldsByTableIds,{tableIds:t},function(e){if(e.success){var t=e.data;e.exKVData.Tables[0];console.log("重新获取数据"),console.log(t),a.resetFieldToSelectedStatus(t)}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,null)},this)},filterAllFieldsToTable:function(e){if(e){for(var t=[],i=0;i<this.allFields.length;i++)this.allFields[i].fieldTableId==e&&t.push(this.allFields[i]);this.fieldTable.fieldData=t,console.log(this.fieldTable.fieldData)}},selectedField:function(e,t){this.selectedData.fieldName=e.fieldName,this.selectedData.fieldCaption=e.fieldCaption,this.selectedData.fieldDataType=e.fieldDataType,this.selectedData.fieldLength=e.fieldDataLength;var i=this.tableTree.tableTreeObj.getNodeByParam("tableId",e.fieldTableId);this.selectedData.tableId=i.tableId,this.selectedData.tableName=i.tableName,this.selectedData.tableCaption=i.tableCaption},selectComplete:function(){var e=this.selectedData;StringUtility.IsNullOrEmpty(e.tableId)||StringUtility.IsNullOrEmpty(e.fieldName)?DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},"请选择需要绑定的字段!",null):(this.$emit("on-selected-bind-to-single-field",e),this.handleClose())},clearComplete:function(){window.OpenerWindowObj[this.getSelectInstanceName()].setSelectFieldResultValue(null),this.handleClose()},handleClose:function(){DialogUtility.CloseDialogElem(this.$refs.fdControlSelectBindToSingleFieldDialogWrap)}},template:'<div ref="fdControlSelectBindToSingleFieldDialogWrap" class="general-edit-page-wrap design-dialog-wraper-single-dialog" style="display: none">\n                    <div class="select-table-wraper">\n                        <divider orientation="left" :dashed="true" style="font-size: 12px">选择表</divider>\n                        \x3c!--<input type="text" id="txtSearchTableTree" style="width: 100%;height: 32px;margin-top: 2px" />--\x3e\n                        <ul id="tableZTreeUL" class="ztree"></ul>\n                    </div>\n                    <div class="select-field-wraper iv-list-page-wrap">\n                        <divider orientation="left" :dashed="true" style="font-size: 12px">选择字段</divider>\n                        <i-table border :columns="fieldTable.columnsConfig" :data="fieldTable.fieldData"\n                                 class="iv-list-table" :highlight-row="true"\n                                 @on-row-click="selectedField" :height="fieldTable.tableHeight" size="small" no-data-text="请选择表"></i-table>\n                    </div>\n                    <div class="button-outer-wrap">\n                        <div class="button-inner-wrap">\n                            <button-group>\n                                <i-button type="primary" @click="selectComplete()"> 确 认 </i-button>\n                                <i-button type="primary" @click="clearComplete()"> 清 空 </i-button>\n                                <i-button @click="handleClose()">关 闭</i-button>\n                            </button-group>\n                        </div>\n                    </div>\n                </div>'}),Vue.component("inner-form-button-list-comp",{props:["formId"],data:function(){var a=this;return{columnsConfig:[{title:"标题",key:"caption",align:"center"},{title:"类型",key:"buttonType",align:"center"},{title:"操作",key:"id",width:200,align:"center",render:function(e,t){var i=[];return"保存按钮"==t.row.buttonType&&i.push(ListPageUtility.IViewTableInnerButton.EditButton(e,t,"id",a)),i.push(ListPageUtility.IViewTableInnerButton.DeleteButton(e,t,"id",a)),i.push(ListPageUtility.IViewTableInnerButton.MoveUpButton(e,t,"id",a)),i.push(ListPageUtility.IViewTableInnerButton.MoveDownButton(e,t,"id",a)),e("div",{class:"list-row-button-wrap"},i)}}],tableData:[],innerSaveButtonEditData:{caption:"",saveAndClose:"true",apis:[],fields:[],id:"",buttonType:"保存按钮",custServerResolveMethod:"",custServerResolveMethodPara:"",custClientRendererMethod:"",custClientRendererMethodPara:"",custClientRendererAfterMethod:"",custClientRendererAfterMethodPara:"",custClientClickBeforeMethod:"",custClientClickBeforeMethodPara:""},api:{acInterface:{getButtonApiConfig:"/Rest/Builder/Button/ButtonApi/GetButtonApiConfig"},apiSelectData:null,editTableObject:null,editTableConfig:{Status:"Edit",AddAfterRowEvent:null,DataField:"fieldName",Templates:[{Title:"API名称",BindName:"Value",Renderer:"EditTable_Select",TitleCellClassName:"TitleCell"},{Title:"调用顺序",BindName:"RunTime",Renderer:"EditTable_Select",ClientDataSource:[{Text:"之前",Value:"之前"},{Text:"之后",Value:"之后"}],Width:100}],RowIdCreater:function(){},TableClass:"edit-table",RendererTo:"apiContainer",TableId:"apiContainerTable",TableAttrs:{cellpadding:"1",cellspacing:"1",border:"1"}}},field:{acInterface:{getFormMainTableFields:"/Rest/Builder/Form/GetFormMainTableFields"},editTableObject:null,editTableConfig:{Status:"Edit",AddAfterRowEvent:null,DataField:"fieldName",Templates:[{Title:"表名标题",BindName:"TableName",Renderer:"EditTable_Label"},{Title:"字段标题",BindName:"FieldName",Renderer:"EditTable_Select"},{Title:"默认值",BindName:"DefaultValue",Renderer:"EditTable_SelectDefaultValue",Hidden:!1}],RowIdCreater:function(){},TableClass:"edit-table",RendererTo:"fieldContainer",TableId:"fieldContainerTable",TableAttrs:{cellpadding:"1",cellspacing:"1",border:"1"}}}}},mounted:function(){this.getApiConfigAndBindToTable()},methods:{getJson:function(){return JsonUtility.JsonToString(this.tableData)},setJson:function(e){null!=e&&""!=e&&(this.tableData=JsonUtility.StringToJson(e))},handleClose:function(e){DialogUtility.CloseDialogElem(this.$refs[e])},edit:function(e,t){"保存按钮"==t.row.buttonType&&this.editInnerFormSaveButton(t)},del:function(e,t){for(var i=0;i<this.tableData.length;i++)this.tableData[i].id==e&&ArrayUtility.Delete(this.tableData,i)},moveUp:function(e,t){for(var i=0;i<this.tableData.length;i++)if(this.tableData[i].id==e)return void ArrayUtility.MoveUp(this.tableData,i)},moveDown:function(e,t){for(var i=0;i<this.tableData.length;i++)if(this.tableData[i].id==e)return void ArrayUtility.MoveDown(this.tableData,i)},addInnerFormSaveButton:function(){if(null!=this.formId&&""!=this.formId){this.editSaveButtonStatuc="add",this.resetInnerSaveButtonData();var e=this.$refs.innerFormButtonEdit;DialogUtility.DialogElemObj(e,{modal:!0,height:520,width:720,title:"窗体内按钮"}),$(window.document).find(".ui-widget-overlay").css("zIndex",10100),$(window.document).find(".ui-dialog").css("zIndex",10101),this.innerSaveButtonEditData.id="inner_form_button_"+StringUtility.Timestamp(),this.isLoadTableField&&this.formId==this.oldformId||(this.getTableFieldsAndBindToTable(),this.oldformId=this.formId,this.isLoadTableField=!0)}else DialogUtility.AlertText("请先设置绑定的窗体!")},editInnerFormSaveButton:function(e){this.addInnerFormSaveButton(),this.editSaveButtonStatuc="edit",this.innerSaveButtonEditData=JsonUtility.CloneStringify(e.row),this.api.editTableObject.LoadJsonData(this.innerSaveButtonEditData.apis),this.field.editTableObject.LoadJsonData(this.innerSaveButtonEditData.fields)},resetInnerSaveButtonData:function(){this.innerSaveButtonEditData={caption:"",saveAndClose:"true",apis:[],fields:[],id:"",buttonType:"保存按钮",custServerResolveMethod:"",custServerResolveMethodPara:"",custClientRendererMethod:"",custClientRendererMethodPara:"",custClientRendererAfterMethod:"",custClientRendererAfterMethodPara:"",custClientClickBeforeMethod:"",custClientClickBeforeMethodPara:""},this.api.editTableObject.RemoveAllRow(),this.field.editTableObject&&this.field.editTableObject.RemoveAllRow()},saveInnerSaveButtonToList:function(){var e=JsonUtility.CloneSimple(this.innerSaveButtonEditData);if(this.api.editTableObject.CompletedEditingRow(),e.apis=this.api.editTableObject.GetSerializeJson(),this.field.editTableObject.CompletedEditingRow(),e.fields=this.field.editTableObject.GetSerializeJson(),"add"==this.editSaveButtonStatuc)this.tableData.push(e);else for(var t=0;t<this.tableData.length;t++)this.tableData[t].id==e.id&&Vue.set(this.tableData,t,e);this.handleClose("innerFormButtonEdit")},getTableFieldsAndBindToTable:function(){var a=this;AjaxUtility.Post(this.field.acInterface.getFormMainTableFields,{formId:this.formId},function(e){for(var t=[],i=0;i<e.data.length;i++)t.push({Value:e.data[i].fieldName,Text:e.data[i].fieldCaption});a.field.editTableConfig.Templates[0].DefaultValue={Type:"Const",Value:e.data[0].tableName},a.field.editTableConfig.Templates[1].ClientDataSource=t,a.field.editTableObject=Object.create(EditTable),a.field.editTableObject.Initialization(a.field.editTableConfig)},this)},addField:function(){this.field.editTableObject.AddEditingRowByTemplate()},removeField:function(){this.field.editTableObject.AddEditingRowByTemplate()},addInnerFormCloseButton:function(){var e={caption:"关闭",id:"inner_close_button_"+StringUtility.Timestamp(),buttonType:"关闭按钮"};this.tableData.push(e)},getApiConfigAndBindToTable:function(){var o=this;AjaxUtility.Post(this.api.acInterface.getButtonApiConfig,{},function(e){for(var t=[],i=0;i<e.data.length;i++){for(var a={Group:e.data[i].name},l=[],n=0;n<e.data[i].buttonAPIVoList.length;n++)l.push({Value:e.data[i].buttonAPIVoList[n].id,Text:e.data[i].buttonAPIVoList[n].name});a.Options=l,t.push(a)}o.api.editTableConfig.Templates[0].ClientDataSource=t,o.api.editTableObject=Object.create(EditTable),o.api.editTableObject.Initialization(o.api.editTableConfig)},this)},addAPI:function(){this.api.editTableObject.AddEditingRowByTemplate()},removeAPI:function(){this.api.editTableObject.RemoveRow()}},template:'<div style="height: 210px" class="iv-list-page-wrap">\n                    <div ref="innerFormButtonEdit" class="html-design-plugin-dialog-wraper general-edit-page-wrap" style="display: none">\n                        <tabs size="small">\n                            <tab-pane label="绑定信息">\n                                <table cellpadding="0" cellspacing="0" border="0" class="html-design-plugin-dialog-table-wraper">\n                                    <colgroup>\n                                        <col style="width: 60px" />\n                                        <col style="width: 220px" />\n                                        <col style="width: 100px" />\n                                        <col />\n                                    </colgroup>\n                                    <tbody>\n                                        <tr>\n                                            <td>标题：</td>\n                                            <td>\n                                                <i-input v-model="innerSaveButtonEditData.caption" />\n                                            </td>\n                                            <td>保存并关闭：</td>\n                                            <td>\n                                                <radio-group type="button" style="margin: auto" v-model="innerSaveButtonEditData.saveAndClose">\n                                                    <radio label="true">是</radio>\n                                                    <radio label="false">否</radio>\n                                                </radio-group>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>API：</td>\n                                            <td colspan="3">\n                                                <div style="height: 140px">\n                                                    <div style="float: left;width: 94%">\n                                                        <div id="apiContainer" class="edit-table-wrap" style="height: 140px;overflow: auto;width: 98%;margin: auto"></div>\n                                                    </div>\n                                                    <div style="float: right;width: 5%">\n                                                        <button-group vertical>\n                                                            <i-button size="small" type="success" icon="md-add" @click="addAPI"></i-button>\n                                                            <i-button size="small" type="primary" icon="md-close" @click="removeAPI"></i-button>\n                                                        </button-group>\n                                                    </div>\n                                                </div>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>字段：</td>\n                                            <td colspan="3">\n                                                <div style="height: 140px">\n                                                    <div style="float: left;width: 94%">\n                                                        <div id="fieldContainer" class="edit-table-wrap" style="height: 140px;overflow: auto;width: 98%;margin: auto"></div>\n                                                    </div>\n                                                    <div style="float: right;width: 5%">\n                                                        <button-group vertical>\n                                                            <i-button size="small" type="success" icon="md-add" @click="addField"></i-button>\n                                                            <i-button size="small" type="primary" icon="md-close" @click="removeField"></i-button>\n                                                        </button-group>\n                                                    </div>\n                                                </div>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </tab-pane>\n                            <tab-pane label="开发扩展">\n                                <table cellpadding="0" cellspacing="0" border="0" class="html-design-plugin-dialog-table-wraper">\n                                    <colgroup>\n                                        <col style="width: 150px" />\n                                        <col />\n                                    </colgroup>\n                                    <tbody>\n                                        <tr>\n                                            <td>\n                                                ID：\n                                            </td>\n                                            <td>\n                                                <i-input v-model="innerSaveButtonEditData.id" size="small" placeholder="" />\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                服务端解析类：\n                                            </td>\n                                            <td>\n                                                <i-input v-model="innerSaveButtonEditData.custServerResolveMethod" size="small" placeholder="按钮进行服务端解析时,类全称,将调用该类,需要实现接口IFormButtonCustResolve" />\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                参数：\n                                            </td>\n                                            <td>\n                                                <i-input v-model="innerSaveButtonEditData.custServerResolveMethodPara" size="small" placeholder="服务端解析类的参数" />\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                客户端渲染方法：\n                                            </td>\n                                            <td>\n                                                <i-input v-model="innerSaveButtonEditData.custClientRendererMethod" size="small" placeholder="客户端渲染方法,按钮将经由该方法渲染,最终形成页面元素,需要返回最终元素的HTML对象" />\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                参数：\n                                            </td>\n                                            <td>\n                                                <i-input v-model="innerSaveButtonEditData.custClientRendererMethodPara" size="small" placeholder="客户端渲染方法的参数" />\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                客户端渲染后方法：\n                                            </td>\n                                            <td>\n                                                <i-input v-model="innerSaveButtonEditData.custClientRendererAfterMethod" size="small" placeholder="客户端渲染后调用方法,经过默认的渲染,无返回值" />\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                参数：\n                                            </td>\n                                            <td>\n                                                <i-input v-model="innerSaveButtonEditData.custClientRendererAfterMethodPara" size="small" placeholder="客户端渲染后方法的参数" />\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                客户端点击前方法：\n                                            </td>\n                                            <td>\n                                                <i-input v-model="innerSaveButtonEditData.custClientClickBeforeMethod" size="small" placeholder="客户端点击该按钮时的前置方法,如果返回false将阻止默认调用" />\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                参数：\n                                            </td>\n                                            <td>\n                                                <i-input v-model="innerSaveButtonEditData.custClientClickBeforeMethodPara" size="small" placeholder="客户端点击前方法的参数" />\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </tab-pane>\n                        </tabs>\n                        <div class="button-outer-wrap">\n                            <div class="button-inner-wrap">\n                                <button-group>\n                                    <i-button type="primary" @click="saveInnerSaveButtonToList()"> 保 存</i-button>\n                                    <i-button @click="handleClose(\'innerFormButtonEdit\')">关 闭</i-button>\n                                </button-group>\n                            </div>\n                        </div>\n                    </div>\n                    <div style="height: 210px;width: 100%">\n                        <div style="float: left;width: 84%">\n                            <i-table :height="210" width="100%" stripe border :columns="columnsConfig" :data="tableData"\n                                                     class="iv-list-table" :highlight-row="true"\n                                                     size="small"></i-table>\n                        </div>\n                        <div style="float: right;width: 15%">\n                            <ButtonGroup vertical>\n                                <i-button type="success" @click="addInnerFormSaveButton()" icon="md-add">保存按钮</i-button>\n                                <i-button icon="md-add" disabled>意见按钮</i-button>\n                                <i-button type="primary" @click="addInnerFormCloseButton()" icon="md-add">关闭按钮</i-button>\n                            </ButtonGroup>\n                        </div>\n                    </div>\n                </div>'}),Vue.component("list-search-control-bind-to-comp",{props:["bindToSearchFieldProp","dataSetId"],data:function(){var a=this;return{bindToSearchField:{columnTitle:"",columnTableName:"",columnName:"",columnCaption:"",columnDataTypeName:"",columnOperator:"匹配"},defaultValue:{defaultType:"",defaultValue:"",defaultText:""},tree:{treeObj:null,treeSetting:{view:{dblClickExpand:!1,showLine:!0,fontCss:{color:"black","font-weight":"normal"}},check:{enable:!1,nocheckInherit:!1,chkStyle:"radio",radioType:"all"},data:{key:{name:"text"},simpleData:{enable:!0,idKey:"id",pIdKey:"pid",rootPId:"-1"}},callback:{onClick:function(e,t,i){a.selectColumn(i)},onDblClick:function(e,t,i){},onAsyncSuccess:function(e,t,i,a){}}},treeData:null},tempData:{defaultDisplayText:""}}},watch:{bindToSearchFieldProp:function(e){console.log(e)},defaultValueProp:function(e){this.defaultValue=e,StringUtility.IsNullOrEmpty(this.defaultValue.defaultType)||(this.tempData.defaultDisplayText=DefaultValueUtility.formatText(this.defaultValue.defaultType,this.defaultValue.defaultText))}},mounted:function(){this.bindToField=this.bindToFieldProp},methods:{init:function(e){console.log(e);var t=[],i={pid:"-1",text:e.dsName,id:e.dsId,nodeType:"DataSet"};t.push(i);for(var a=0;a<e.relatedTableVoList.length;a++){t.push({pid:e.dsId,text:e.relatedTableVoList[a].rtTableCaption,id:e.relatedTableVoList[a].rtTableId,nodeType:"Table"});for(var l=0;l<e.relatedTableVoList[a].tableFieldPOList.length;l++){var n=e.relatedTableVoList[a].tableFieldPOList[l];n.pid=e.relatedTableVoList[a].rtTableId,n.text=n.fieldCaption+"["+n.fieldName+"]",n.nodeType="TableField",n.id=n.fieldId,n.icon=BaseUtility.GetRootPath()+"/Themes/Png16X16/page.png",t.push(n)}}this.tree.treeObj=$.fn.zTree.init($(this.$refs.zTreeUL),this.tree.treeSetting,t),this.tree.treeObj.expandAll(!0),fuzzySearchTreeObj(this.tree.treeObj,this.$refs.txt_search_text.$refs.input,null,!0)},selectColumn:function(e){"TableField"==e.nodeType&&(this.bindToSearchField.columnTableName=e.tableName,this.bindToSearchField.columnName=e.fieldName,this.bindToSearchField.columnCaption=e.fieldCaption,this.bindToSearchField.columnDataTypeName=e.fieldDataType)},getData:function(){return console.log(this.bindToSearchField),{bindToSearchField:this.bindToSearchField,defaultValue:this.defaultValue}},setData:function(e,t){console.log(e),this.bindToSearchField=e,this.defaultValue=t,this.tempData.defaultDisplayText=DefaultValueUtility.formatText(this.defaultValue.defaultType,this.defaultValue.defaultText)},selectDefaultValueView:function(){window._SelectBindObj=this,window.parent.listDesign.selectDefaultValueDialogBegin(window,null)},setSelectEnvVariableResultValue:function(e){this.tempData.defaultDisplayText=null!=e?(this.defaultValue.defaultType=e.Type,this.defaultValue.defaultValue=e.Value,this.defaultValue.defaultText=e.Text,DefaultValueUtility.formatText(this.defaultValue.defaultType,this.defaultValue.defaultText)):(this.defaultValue.defaultType="",this.defaultValue.defaultValue="",this.defaultValue.defaultText="")}},template:'<table cellpadding="0" cellspacing="0" border="0" class="html-design-plugin-dialog-table-wraper">\n                    <colgroup>\n                        <col style="width: 100px" />\n                        <col style="width: 280px" />\n                        <col />\n                    </colgroup>\n                    <tbody>\n                        <tr>\n                            <td>\n                                标题：\n                            </td>\n                            <td>\n                                <input type="text" v-model="bindToSearchField.columnTitle" />\n                            </td>\n                            <td rowspan="9" valign="top">\n                                <i-input search class="input_border_bottom" ref="txt_search_text" placeholder="请输入列名或者标题"></i-input>                                <ul ref="zTreeUL" class="ztree div-custom-scroll" style="height: 430px;overflow-x:hidden;overflow-y: scroll"></ul>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                所属表：\n                            </td>\n                            <td>\n                                {{bindToSearchField.columnTableName}}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                绑定字段：\n                            </td>\n                            <td>\n                                {{bindToSearchField.columnCaption}}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                字段名称：\n                            </td>\n                            <td>\n                                {{bindToSearchField.columnName}}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                字段类型：\n                            </td>\n                            <td>\n                                {{bindToSearchField.columnDataTypeName}}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                运算符：\n                            </td>\n                            <td>\n                                <i-select v-model="bindToSearchField.columnOperator" style="width:260px">\n                                    <i-option value="eq">等于</i-option>\n                                    <i-option value="like">匹配</i-option>\n                                    <i-option value="not_eq">不等于</i-option>\n                                    <i-option value="gt">大于</i-option>\n                                    <i-option value="gt_eq">大于等于</i-option>\n                                    <i-option value="lt">小于</i-option>\n                                    <i-option value="lt_eq">小于等于</i-option>\n                                    <i-option value="left_like">左匹配</i-option>\n                                    <i-option value="right_like">右匹配</i-option>\n                                    <i-option value="include">包含[暂时不支持]</i-option>\n                                </i-select>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td colspan="2">默认值<button class="btn-select fright" v-on:click="selectDefaultValueView">...</button></td>\n                        </tr>\n                        <tr style="height: 35px">\n                            <td colspan="2" style="background-color: #ffffff;">\n                                {{tempData.defaultDisplayText}}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                备注：\n                            </td>\n                            <td>\n                                <textarea rows="8"></textarea>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>'}),Vue.component("list-table-label-bind-to-comp",{props:["bindPropProp","dataSetId"],data:function(){var a=this;return{bindProp:{columnTableName:"",columnName:"",columnCaption:"",columnDataTypeName:"",targetButtonId:"",columnAlign:"居中对齐"},defaultValue:{defaultType:"",defaultValue:"",defaultText:""},tree:{treeObj:null,treeSetting:{view:{dblClickExpand:!1,showLine:!0,fontCss:{color:"black","font-weight":"normal"}},check:{enable:!1,nocheckInherit:!1,chkStyle:"radio",radioType:"all"},data:{key:{name:"text"},simpleData:{enable:!0,idKey:"id",pIdKey:"pid",rootPId:"-1"}},callback:{onClick:function(e,t,i){a.selectColumn(i)},onDblClick:function(e,t,i){},onAsyncSuccess:function(e,t,i,a){}}},treeData:null},tempData:{defaultDisplayText:""},buttons:[]}},watch:{bindPropProp:function(e){console.log(e)},defaultValueProp:function(e){this.defaultValue=e,StringUtility.IsNullOrEmpty(this.defaultValue.defaultType)||(this.tempData.defaultDisplayText=DefaultValueUtility.formatText(this.defaultValue.defaultType,this.defaultValue.defaultText))}},mounted:function(){this.bindToField=this.bindToFieldProp},methods:{init:function(e,t){console.log(e);for(var i=[],a=e.columnVoList,l=0;l<a.length;l++){var n=a[l];n.pid=e.dsId,n.text=n.columnCaption+"["+n.columnName+"]",n.nodeType="DataSetColumn",n.id=n.columnId,n.icon=BaseUtility.GetRootPath()+"/Themes/Png16X16/page.png",i.push(n)}var o={pid:"-1",text:e.dsName,id:e.dsId,nodeType:"DataSet"};i.push(o),this.tree.treeObj=$.fn.zTree.init($(this.$refs.zTreeUL),this.tree.treeSetting,i),this.tree.treeObj.expandAll(!0),this.buttons=t},selectColumn:function(e){this.bindProp.columnTableName=e.columnTableName,this.bindProp.columnName=e.columnName,this.bindProp.columnCaption=e.columnCaption,this.bindProp.columnDataTypeName=e.columnDataTypeName},getData:function(){return console.log(this.bindProp),this.bindProp.targetButtonId||(this.bindProp.targetButtonId=""),{bindProp:this.bindProp,defaultValue:this.defaultValue}},setData:function(e,t){console.log(e),this.bindProp=e,this.defaultValue=t,this.tempData.defaultDisplayText=DefaultValueUtility.formatText(this.defaultValue.defaultType,this.defaultValue.defaultText)},selectDefaultValueView:function(){window._SelectBindObj=this,window.parent.listDesign.selectDefaultValueDialogBegin(window,null)},setSelectEnvVariableResultValue:function(e){this.tempData.defaultDisplayText=null!=e?(this.defaultValue.defaultType=e.Type,this.defaultValue.defaultValue=e.Value,this.defaultValue.defaultText=e.Text,DefaultValueUtility.formatText(this.defaultValue.defaultType,this.defaultValue.defaultText)):(this.defaultValue.defaultType="",this.defaultValue.defaultValue="",this.defaultValue.defaultText="")}},template:'<table cellpadding="0" cellspacing="0" border="0" class="html-design-plugin-dialog-table-wraper">\n                    <colgroup>\n                        <col style="width: 100px" />\n                        <col style="width: 280px" />\n                        <col />\n                    </colgroup>\n                    <tbody>\n                        <tr>\n                            <td>\n                                对齐方式：\n                            </td>\n                            <td>\n                                <i-select v-model="bindProp.columnAlign" style="width:260px">\n                                    <i-option value="左对齐">左对齐</i-option>\n                                    <i-option value="居中对齐">居中对齐</i-option>\n                                    <i-option value="右对齐">右对齐</i-option>\n                                </i-select>\n                            </td>\n                            <td rowspan="9" valign="top">\n                                <ul ref="zTreeUL" class="ztree"></ul>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                所属表：\n                            </td>\n                            <td>\n                                {{bindProp.columnTableName}}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                绑定字段：\n                            </td>\n                            <td>\n                                {{bindProp.columnCaption}}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                字段名称：\n                            </td>\n                            <td>\n                                {{bindProp.columnName}}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                字段类型： \n                            </td>\n                            <td>\n                                {{bindProp.columnDataTypeName}}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                触发按钮：\n                            </td>\n                            <td>\n                                <i-select v-model="bindProp.targetButtonId" style="width:260px" :clearable="true">\n                                    <i-option :value="item.buttonId" v-for="item in buttons">{{item.buttonCaption}}</i-option>\n                                </i-select>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td colspan="2">默认值<button class="btn-select fright" v-on:click="selectDefaultValueView">...</button></td>\n                        </tr>\n                        <tr style="height: 35px">\n                            <td colspan="2" style="background-color: #ffffff;">\n                                {{tempData.defaultDisplayText}}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                备注：\n                            </td>\n                            <td>\n                                <textarea rows="8"></textarea>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>'}),Vue.component("module-list-webform-comp",{props:["listHeight","moduleData","activeTabName"],data:function(){var i=this;return{acInterface:{editView:"/HTML/Builder/Form/FormDesign.html",reloadData:"/Rest/Builder/Form/GetListData",delete:"/Rest/Builder/Form/Delete",move:"/Rest/Builder/Form/Move"},idFieldName:"formId",searchCondition:{formModuleId:{value:"",type:SearchUtility.SearchFieldType.StringType}},columnsConfig:[{type:"selection",width:60,align:"center"},{title:"编号",key:"formCode",align:"center",width:80},{title:"表单名称",key:"formName",align:"center"},{title:"唯一名",key:"formSingleName",align:"center"},{title:"备注",key:"formDesc",align:"center"},{title:"编辑时间",key:"formUpdateTime",width:100,align:"center",render:function(e,t){return ListPageUtility.IViewTableRenderer.ToDateYYYY_MM_DD(e,t.row.formUpdateTime)}},{title:"操作",key:"formId",width:120,align:"center",render:function(e,t){return e("div",{class:"list-row-button-wrap"},[ListPageUtility.IViewTableInnerButton.EditButton(e,t,i.idFieldName,i),ListPageUtility.IViewTableInnerButton.DeleteButton(e,t,i.idFieldName,i)])}}],tableData:[],tableDataOriginal:[],selectionRows:null,pageTotal:0,pageSize:500,pageNum:1,searchText:""}},mounted:function(){window._modulelistwebformcomp=this},watch:{moduleData:function(e){this.reloadData()},activeTabName:function(e){this.reloadData()},searchText:function(e){if(e){for(var t=[],i=0;i<this.tableData.length;i++){var a=this.tableData[i];0<=a.formCode.indexOf(e)?t.push(a):0<=a.formName.indexOf(e)&&t.push(a)}this.tableData=t}else this.tableData=this.tableDataOriginal}},methods:{getModuleName:function(){return null==this.moduleData?"请选中模块":this.moduleData.moduleText},selectionChange:function(e){this.selectionRows=e},reloadData:function(){null!=this.moduleData&&"list-webform"==this.activeTabName&&(this.searchCondition.formModuleId.value=this.moduleData.moduleId,ListPageUtility.IViewTableBindDataBySearch({url:this.acInterface.reloadData,pageNum:this.pageNum,pageSize:this.pageSize,searchCondition:this.searchCondition,pageAppObj:this,tableList:this,idField:this.idFieldName,autoSelectedOldRows:!0,successFunc:function(e,t){t.tableDataOriginal=e.data.list},loadDict:!1,custParas:{}}))},add:function(){if(null!=this.moduleData){var e=BaseUtility.BuildView(this.acInterface.editView,{op:"add",moduleId:this.moduleData.moduleId});DialogUtility.OpenNewWindow(window,DialogUtility.DialogId,e,{width:0,height:0},2)}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},"请选择模块!",null)},edit:function(e){var t=BaseUtility.BuildView(this.acInterface.editView,{op:"update",recordId:e});DialogUtility.OpenNewWindow(window,DialogUtility.DialogId,t,{width:0,height:0},2)},del:function(e){ListPageUtility.IViewTableDeleteRow(this.acInterface.delete,e,this)},statusEnable:function(e){ListPageUtility.IViewChangeServerStatusFace(this.acInterface.statusChange,this.selectionRows,appList.idFieldName,e,appList)},move:function(e){ListPageUtility.IViewMoveFace(this.acInterface.move,this.selectionRows,this.idFieldName,e,this)}},template:'<div class="module-list-wrap">\n                    <div id="list-button-wrap" class="list-button-outer-wrap">\n                        <div class="module-list-name"><Icon type="ios-arrow-dropright-circle" />&nbsp;模块【{{getModuleName()}}】</div>\n                        <div class="list-button-inner-wrap">\n                            <ButtonGroup>\n                                <i-button  type="success" @click="add()" icon="md-add">新增</i-button>\n                                <i-button type="primary" disabled icon="md-add">引入URL </i-button>\n                                <i-button type="primary" disabled icon="md-albums">复制</i-button>\n                                <i-button type="primary" disabled icon="md-pricetag">预览</i-button>\n                                <i-button type="primary" disabled icon="md-bookmarks">历史版本</i-button>\n                                <i-button type="primary" disabled icon="md-brush">复制ID</i-button>\n                                <i-button type="primary" @click="move(\'up\')" icon="md-arrow-up">上移</i-button>\n                                <i-button type="primary" @click="move(\'down\')" icon="md-arrow-down">下移</i-button>\n                            </ButtonGroup>\n                        </div>\n                         <div style="float: right;width: 200px;margin-right: 10px;">\n                            <i-input search class="input_border_bottom" v-model="searchText">\n                            </i-input>\n                        </div>                        <div style="clear: both"></div>\n                    </div>\n                    <i-table :height="listHeight" stripe border :columns="columnsConfig" :data="tableData"\n                             class="iv-list-table" :highlight-row="true"\n                             @on-selection-change="selectionChange"></i-table>\n                </div>'}),Vue.component("module-list-weblist-comp",{props:["listHeight","moduleData","activeTabName"],data:function(){var i=this;return{acInterface:{editView:"/HTML/Builder/List/ListDesign.html",reloadData:"/Rest/Builder/List/GetListData",delete:"/Rest/Builder/List/Delete",move:"/Rest/Builder/List/Move"},idFieldName:"listId",searchCondition:{listModuleId:{value:"",type:SearchUtility.SearchFieldType.StringType}},columnsConfig:[{type:"selection",width:60,align:"center"},{title:"编号",key:"listCode",align:"center",width:80},{title:"列表名称",key:"listName",align:"center"},{title:"唯一名",key:"listSingleName",align:"center"},{title:"备注",key:"listDesc",align:"center"},{title:"编辑时间",key:"listUpdateTime",width:100,align:"center",render:function(e,t){return ListPageUtility.IViewTableRenderer.ToDateYYYY_MM_DD(e,t.row.listUpdateTime)}},{title:"操作",key:"listId",width:120,align:"center",render:function(e,t){return e("div",{class:"list-row-button-wrap"},[ListPageUtility.IViewTableInnerButton.EditButton(e,t,i.idFieldName,i),ListPageUtility.IViewTableInnerButton.DeleteButton(e,t,i.idFieldName,i)])}}],tableData:[],tableDataOriginal:[],selectionRows:null,pageTotal:0,pageSize:500,pageNum:1,searchText:""}},mounted:function(){window._modulelistweblistcomp=this},watch:{moduleData:function(e){this.reloadData()},activeTabName:function(e){this.reloadData()},searchText:function(e){if(e){for(var t=[],i=0;i<this.tableData.length;i++){var a=this.tableData[i];0<=a.formCode.indexOf(e)?t.push(a):0<=a.formName.indexOf(e)&&t.push(a)}this.tableData=t}else this.tableData=this.tableDataOriginal}},methods:{getModuleName:function(){return null==this.moduleData?"请选中模块":this.moduleData.moduleText},selectionChange:function(e){this.selectionRows=e},reloadData:function(){null!=this.moduleData&&"list-weblist"==this.activeTabName&&(this.searchCondition.listModuleId.value=this.moduleData.moduleId,ListPageUtility.IViewTableBindDataBySearch({url:this.acInterface.reloadData,pageNum:this.pageNum,pageSize:this.pageSize,searchCondition:this.searchCondition,pageAppObj:this,tableList:this,idField:this.idFieldName,autoSelectedOldRows:!0,successFunc:function(e,t){t.tableDataOriginal=e.data.list},loadDict:!1,custParas:{}}))},add:function(){if(null!=this.moduleData){var e=BaseUtility.BuildView(this.acInterface.editView,{op:"add",moduleId:this.moduleData.moduleId});DialogUtility.OpenNewWindow(window,DialogUtility.DialogId,e,{width:0,height:0},2)}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},"请选择模块!",null)},edit:function(e){var t=BaseUtility.BuildView(this.acInterface.editView,{op:"update",recordId:e});DialogUtility.OpenNewWindow(window,DialogUtility.DialogId,t,{width:0,height:0},2)},del:function(e){ListPageUtility.IViewTableDeleteRow(this.acInterface.delete,e,this)},statusEnable:function(e){ListPageUtility.IViewChangeServerStatusFace(this.acInterface.statusChange,this.selectionRows,appList.idFieldName,e,appList)},move:function(e){ListPageUtility.IViewMoveFace(this.acInterface.move,this.selectionRows,this.idFieldName,e,this)}},template:'<div class="module-list-wrap">                    <div id="list-button-wrap" class="list-button-outer-wrap">                        <div class="module-list-name"><Icon type="ios-arrow-dropright-circle" />&nbsp;模块【{{getModuleName()}}】</div>                        <div class="list-button-inner-wrap">                            <ButtonGroup>                                <i-button  type="success" @click="add()" icon="md-add">新增</i-button>                                <i-button type="error" icon="md-albums">复制</i-button>                                <i-button type="error" icon="md-pricetag">预览</i-button>                                <i-button type="error" icon="md-bookmarks">历史版本</i-button>                                <i-button type="error" icon="md-brush">复制ID</i-button>                                <i-button type="primary" @click="move(\'up\')" icon="md-arrow-up">上移</i-button>                                <i-button type="primary" @click="move(\'down\')" icon="md-arrow-down">下移</i-button>                            </ButtonGroup>                        </div>                         <div style="float: right;width: 200px;margin-right: 10px;">                            <i-input search class="input_border_bottom" v-model="searchText">                            </i-input>                        </div>                        <div style="clear: both"></div>                    </div>                    <i-table :height="listHeight" stripe border :columns="columnsConfig" :data="tableData"                             class="iv-list-table" :highlight-row="true"                             @on-selection-change="selectionChange"></i-table>                </div>'}),Vue.component("select-default-value-dialog",{data:function(){var i=this;return{acInterface:{getGroupTreeData:"/Rest/Builder/EnvVariableGroup/GetTreeData",reloadListData:"/Rest/Builder/EnvVariable/GetListData"},selectType:"Const",selectValue:"",selectText:"",constValue:"",listHeight:470,tree:{treeIdFieldName:"envGroupId",treeObj:null,treeSelectedNode:null,treeSetting:{async:{enable:!0,url:""},data:{key:{name:"envGroupText"},simpleData:{enable:!0,idKey:"envGroupId",pIdKey:"envGroupParentId",rootId:0}},callback:{onClick:function(e,t,i){this.getZTreeObj(t)._host.treeNodeSelected(e,t,i)},onAsyncSuccess:function(e,t,i,a){appList.treeObj.expandAll(!0)}}}},tableData:[],columnsConfig:[{title:"变量名称",key:"envVarText",align:"center"},{title:"变量值",key:"envVarValue",align:"center"},{title:"操作",key:"envVarId",width:120,align:"center",render:function(e,t){return e("div",{class:"list-row-button-wrap"},[ListPageUtility.IViewTableInnerButton.SelectedButton(e,t,"envVarId",i)])}}],searchCondition:{envVarGroupId:{value:"",type:SearchUtility.SearchFieldType.StringType}},pageTotal:0,pageSize:100,pageNum:1}},mounted:function(){this.loadData()},methods:{beginSelect:function(e){console.log(e);var t=this.$refs.selectDefaultValueDialogWrap;DialogUtility.DialogElemObj(t,{modal:!0,height:680,width:980,title:"设置默认值"}),$(window.document).find(".ui-widget-overlay").css("zIndex",10100),$(window.document).find(".ui-dialog").css("zIndex",10101),null==e&&(this.selectValue="",this.selectText="",this.constValue="")},loadData:function(){AjaxUtility.Post(this.acInterface.getGroupTreeData,{},function(e){if(console.log(e),e.success){if(null!=e.data&&0<e.data.length)for(var t=0;t<e.data.length;t++);this.tree.treeObj=$.fn.zTree.init($("#zTreeUL"),this.tree.treeSetting,e.data),this.tree.treeObj.expandAll(!0),this.tree.treeObj._host=this}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,function(){})},this)},getSelectInstanceName:function(){return BaseUtility.GetUrlParaValue("instanceName")},selectComplete:function(){var e={};if("Const"==this.selectType){if(""==this.constValue)return void DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},"请设置常量默认值！",null);e.Type="Const",e.Value=this.constValue,e.Text=this.constValue}else e.Type="EnvVar",e.Value=this.selectValue,e.Text=this.selectText;this.$emit("on-selected-default-value",e),this.handleClose()},clearComplete:function(){this.$emit("on-selected-default-value",null),this.handleClose()},handleClose:function(){DialogUtility.CloseDialogElem(this.$refs.selectDefaultValueDialogWrap)},selectionChange:function(){},clearSearchCondition:function(){for(var e in this.searchCondition)this.searchCondition[e].value=""},treeNodeSelected:function(e,t,i){this.pageNum=1,this.clearSearchCondition(),this.searchCondition.envVarGroupId.value=i[this.tree.treeIdFieldName],this.reloadData()},reloadData:function(){ListPageUtility.IViewTableBindDataBySearch({url:this.acInterface.reloadListData,pageNum:this.pageNum,pageSize:this.pageSize,searchCondition:this.searchCondition,pageAppObj:this,tableList:this,idField:"envVarId",autoSelectedOldRows:!0,successFunc:null,loadDict:!1,custParas:{}})},selected:function(e,t){console.log(t),this.selectValue=t.row.envVarValue,this.selectText=t.row.envVarText}},template:'<div  ref="selectDefaultValueDialogWrap" class="general-edit-page-wrap" style="display: none;margin-top: 0px">\n                    <tabs :value="selectType" v-model="selectType">\n                        <tab-pane label="常量" name="Const" >\n                            <i-form :label-width="80" style="width: 80%;margin: 50px auto auto;">\n                                <form-item label="常量：">\n                                    <i-input v-model="constValue"></i-input>\n                                </form-item>\n                            </i-form>\n                        </tab-pane>\n                        <tab-pane label="环境变量" name="EnvVar">\n                            <div style="height: 45px;border-bottom: dotted 1px #8a8a8a;margin-bottom: 10px;">\n                                <div style="float: right;padding: 8px;border-radius: 8px;color:orangered;border: solid 1px #adbed8;">已经选择：{{selectText}}</div>\n                            </div>\n                            <div>\n                                <div style="width: 30%;float: left;height: 514px">\n                                    <div class="inner-wrap">\n                                        <div>\n                                            <ul id="zTreeUL" class="ztree"></ul>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style="width: 68%;float: left;height: 514px" class="iv-list-page-wrap">\n                                    <i-table :height="listHeight" stripe border :columns="columnsConfig" :data="tableData"\n                                             class="iv-list-table" :highlight-row="true"\n                                             @on-selection-change="selectionChange"></i-table>\n                                </div>\n                            </div>\n                        </tab-pane>\n                    </tabs>\n                    <div class="button-outer-wrap">\n                        <div class="button-inner-wrap">\n                            <button-group>\n                                <i-button type="primary" @click="selectComplete()"> 确 认 </i-button>\n                                <i-button type="primary" @click="clearComplete()"> 清 空 </i-button>\n                                <i-button @click="handleClose()">关 闭</i-button>\n                            </button-group>\n                        </div>\n                    </div>\n                </div>'});var DefaultValueUtility={formatText:function(e,t){return"Const"==e?"静态值:【"+t+"】":"EnvVar"==e?"环境变量:【"+t+"】":""==e?"【无】":"未知类型"+t}};Vue.component("select-single-table-dialog",{data:function(){return{acInterface:{getTableDataUrl:"/Rest/Builder/DataStorage/DataBase/Table/GetTablesForZTreeNodeList"},jsEditorInstance:null,tableTree:{treeObj:null,treeSetting:{view:{dblClickExpand:!1,showLine:!0,fontCss:{color:"black","font-weight":"normal"}},check:{enable:!1,nocheckInherit:!1,radioType:"all"},data:{key:{name:"text"},simpleData:{enable:!0,idKey:"id",pIdKey:"parentId",rootPId:"-1"}},callback:{onClick:function(e,t,i){var a=this.getZTreeObj(t)._host;"Table"==i.nodeTypeName?a.selectedTable(e,t,i):a.selectedTable(e,t,null)}}},treeData:null,clickNode:null},selectedTableData:null}},mounted:function(){},methods:{handleClose:function(){DialogUtility.CloseDialogElem(this.$refs.selectTableModelDialogWrap)},beginSelectTable:function(){var e=this.$refs.selectTableModelDialogWrap;this.getTableDataInitTree();var t=450;550<PageStyleUtility.GetPageHeight()&&(t=600),DialogUtility.DialogElemObj(e,{modal:!0,width:570,height:t,title:"选择表"})},getTableDataInitTree:function(){var t=this;AjaxUtility.Post(this.acInterface.getTableDataUrl,{},function(e){e.success?(t.tableTree.treeData=e.data,t.$refs.tableZTreeUL.setAttribute("id","select-table-single-comp-"+StringUtility.Guid()),t.tableTree.treeObj=$.fn.zTree.init($(t.$refs.tableZTreeUL),t.tableTree.treeSetting,t.tableTree.treeData),t.tableTree.treeObj.expandAll(!0),t.tableTree.treeObj._host=t,fuzzySearchTreeObj(t.tableTree.treeObj,t.$refs.txt_table_search_text.$refs.input,null,!0)):DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,null)},this)},selectedTable:function(e,t,i){this.selectedTableData=i},completed:function(){this.selectedTableData?(this.$emit("on-selected-table",this.selectedTableData),this.handleClose()):DialogUtility.AlertText("请选择表!")}},template:'<div ref="selectTableModelDialogWrap" class="c1-select-model-wrap general-edit-page-wrap" style="display: none">\n                    <div class="c1-select-model-source-wrap c1-select-model-source-has-buttons-wrap">\n                        <i-input search class="input_border_bottom" ref="txt_table_search_text" placeholder="请输入表名或者标题">\n                        </i-input>\n                        <div class="inner-wrap div-custom-scroll">\n                            <ul ref="tableZTreeUL" class="ztree"></ul>\n                        </div>\n                    </div>\n                    <div class="button-outer-wrap" style="bottom: 12px;right: 12px">\n                        <div class="button-inner-wrap">\n                            <button-group>\n                                <i-button type="primary" @click="completed()" icon="md-checkmark">确认</i-button>\n                                <i-button @click="handleClose()" icon="md-close">关闭</i-button>\n                            </button-group>\n                        </div>\n                    </div>\n               </div>'}),Vue.component("select-single-webform-dialog",{data:function(){return{acInterface:{getTableDataUrl:"/Rest/Builder/Form/GetWebFormForZTreeNodeList"},jsEditorInstance:null,tree:{treeObj:null,treeSetting:{view:{dblClickExpand:!1,showLine:!0,fontCss:{color:"black","font-weight":"normal"}},check:{enable:!1,nocheckInherit:!1,radioType:"all"},data:{key:{name:"text"},simpleData:{enable:!0,idKey:"id",pIdKey:"parentId",rootPId:"-1"}},callback:{onClick:function(e,t,i){var a=this.getZTreeObj(t)._host;"WebForm"==i.nodeTypeName&&a.selectedForm(e,t,i)}}},treeData:null},selectedFormData:null,oldSelectedFormId:""}},mounted:function(){},methods:{handleClose:function(){DialogUtility.CloseDialogElem(this.$refs.selectModelDialogWrap)},beginSelectForm:function(e){var t=this.$refs.selectModelDialogWrap;this.getFormDataInitTree(),this.oldSelectedFormId=e;DialogUtility.DialogElemObj(t,{modal:!0,width:570,height:500,title:"选择窗体"})},getFormDataInitTree:function(){var a=this;AjaxUtility.Post(this.acInterface.getTableDataUrl,{},function(e){if(e.success){a.tree.treeData=e.data;for(var t=0;t<a.tree.treeData.length;t++)"WebForm"==a.tree.treeData[t].nodeTypeName?a.tree.treeData[t].icon=BaseUtility.GetRootPath()+"/Themes/Png16X16/table.png":"Module"==a.tree.treeData[t].nodeTypeName&&(a.tree.treeData[t].icon=BaseUtility.GetRootPath()+"/Themes/Png16X16/folder-table.png");if(a.$refs.formZTreeUL.setAttribute("id","select-form-single-comp-"+StringUtility.Guid()),a.tree.treeObj=$.fn.zTree.init($(a.$refs.formZTreeUL),a.tree.treeSetting,a.tree.treeData),a.tree.treeObj.expandAll(!0),a.tree.treeObj._host=a,fuzzySearchTreeObj(a.tree.treeObj,a.$refs.txt_form_search_text.$refs.input,null,!0),null!=a.oldSelectedFormId&&""!=a.oldSelectedFormId){var i=a.tree.treeObj.getNodeByParam("id",a.oldSelectedFormId);a.tree.treeObj.selectNode(i)}}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,null)},this)},selectedForm:function(e,t,i){this.selectedFormData=i},completed:function(){if(this.selectedFormData){var e={formModuleId:this.selectedFormData.attr4,formModuleName:this.selectedFormData.attr3,formId:this.selectedFormData.id,formName:this.selectedFormData.attr1,formCode:this.selectedFormData.attr2};this.$emit("on-selected-form",e),this.handleClose()}else DialogUtility.AlertText("请选择窗体!")}},template:'<div ref="selectModelDialogWrap" class="c1-select-model-wrap general-edit-page-wrap" style="display: none;">\n                    <div class="c1-select-model-source-wrap c1-select-model-source-has-buttons-wrap">\n                        <i-input search class="input_border_bottom" ref="txt_form_search_text" placeholder="请输入表单名称">\n                        </i-input>\n                        <div class="inner-wrap div-custom-scroll">\n                            <ul ref="formZTreeUL" class="ztree"></ul>\n                        </div>\n                    </div>\n                    <div class="button-outer-wrap" style="bottom: 12px;right: 12px">\n                        <div class="button-inner-wrap">\n                            <button-group>\n                                <i-button type="primary" @click="completed()" icon="md-checkmark">确认</i-button>\n                                <i-button @click="handleClose()" icon="md-close">关闭</i-button>\n                            </button-group>\n                        </div>\n                    </div>\n               </div>'}),Vue.component("select-validate-rule-dialog",{data:function(){var i=this;return{selectValidateType:"NoEmpty",ruleParas:{msg:"字段",numLength:4,decimalLength:0,jsMethodName:"",regularText:"",regularMsg:""},addedValidateRule:[],validateColumnsConfig:[{title:"类型",key:"validateType",width:150,align:"center"},{title:"参数",key:"validateParas",align:"center"},{title:"删除",key:"validateId",width:120,align:"center",render:function(e,t){return e("div",{class:"list-row-button-wrap"},[e("div",{class:"list-row-button del",on:{click:function(){i.delValidate(t.row.validateId)}}})])}}]}},mounted:function(){},methods:{beginSelect:function(e){var t=this.$refs.selectValidateRuleDialogWrap;DialogUtility.DialogElemObj(t,{modal:!0,height:680,width:980,title:"设置验证规则"}),$(window.document).find(".ui-widget-overlay").css("zIndex",10100),$(window.document).find(".ui-dialog").css("zIndex",10101),this.ruleParas.msg="字段",this.ruleParas.numLength=4,this.ruleParas.decimalLength=0,this.ruleParas.jsMethodName="",this.ruleParas.regularText="",this.ruleParas.regularMsg="",this.addedValidateRule=[],this.bindOldSelectedValue(e)},bindOldSelectedValue:function(e){var t=e;0<t.rules.length&&(this.addedValidateRule=t.rules,this.msg=t.msg)},getSelectInstanceName:function(){return BaseUtility.GetUrlParaValue("instanceName")},selectComplete:function(){var e=this.addedValidateRule;if(0<this.addedValidateRule.length){e={msg:this.ruleParas.msg,rules:this.addedValidateRule};this.$emit("on-selected-validate-rule",JsonUtility.CloneSimple(e)),this.handleClose()}else this.clearComplete()},clearComplete:function(){window.OpenerWindowObj[this.getSelectInstanceName()].setSelectValidateRuleResultValue(null),this.handleClose()},handleClose:function(){DialogUtility.CloseDialogElem(this.$refs.selectValidateRuleDialogWrap)},addValidateRule:function(){var e="";"Number"==this.selectValidateType?e=JsonUtility.JsonToString({numLength:this.ruleParas.numLength,decimalLength:this.ruleParas.decimalLength}):"Regular"==this.selectValidateType?e=JsonUtility.JsonToString({regularText:this.ruleParas.regularText,regularMsg:this.ruleParas.regularMsg}):"JsMethod"==this.selectValidateType&&(e=JsonUtility.JsonToString({jsMethodName:this.ruleParas.jsMethodName}));var t={validateId:StringUtility.Timestamp(),validateType:this.selectValidateType,validateParas:e};this.addedValidateRule.push(t)},delValidate:function(e){for(var t=0;t<this.addedValidateRule.length;t++)this.addedValidateRule[t].validateId==e&&this.addedValidateRule.splice(t,1)}},template:'<div ref="selectValidateRuleDialogWrap" v-cloak class="general-edit-page-wrap" style="display: none">\n                    <card style="margin-top: 10px" >\n                        <p slot="title">设置验证规则</p>\n                        <div>\n                            <radio-group type="button" style="margin: auto" v-model="selectValidateType">\n                                <radio label="NoEmpty">不能为空</radio>\n                                <radio label="Number">数字</radio>\n                                <radio label="Mobile">手机</radio>\n                                <radio label="Date">日期</radio>\n                                <radio label="Time">时间</radio>\n                                <radio label="DateTime">日期时间</radio>\n                                <radio label="EMail">邮件</radio>\n                                <radio label="IDCard">身份证</radio>\n                                <radio label="URL">URL</radio>\n                                <radio label="ENCode">英文</radio>\n                                <radio label="SimpleCode">特殊字符</radio>\n                                <radio label="Regular">正则表达式</radio>\n                                <radio label="JsMethod">JS方法</radio>\n                            </radio-group>\n                            <i-button type="success" shape="circle" icon="md-add" style="margin-left: 15px;cursor: pointer" @click="addValidateRule"></i-button>\n                        </div>\n                        <div>\n                            <divider orientation="left" :dashed="true" style="font-size: 12px">参数设置</divider>\n                            \x3c!--数字类型参数设置--\x3e\n                            <div v-if="selectValidateType==\'Number\'">\n                                <i-form :label-width="80">\n                                    <form-item label="长度：">\n                                        <row>\n                                            <i-col span="10">\n                                                <form-item>\n                                                    <input-number :max="10" :min="1" v-model="ruleParas.numLength" size="small" style="width: 80%"></input-number>\n                                                </form-item>\n                                            </i-col>\n                                            <i-col span="4" style="text-align: center">小数位数：</i-col>\n                                            <i-col span="10">\n                                                <form-item>\n                                                    <input-number :max="10" :min="0" v-model="ruleParas.decimalLength" size="small" style="width: 80%"></input-number>\n                                                </form-item>\n                                            </i-col>\n                                        </row>\n                                    </form-item>\n                                </i-form>\n                            </div>\n                            \x3c!--正则表达式类型参数设置--\x3e\n                            <div v-if="selectValidateType==\'Regular\'">\n                                <i-form :label-width="80">\n                                    <form-item label="表达式：">\n                                        <row>\n                                            <i-col span="10">\n                                                <form-item>\n                                                    <i-input size="small" placeholder="Enter something..." v-model="ruleParas.regularText" style="width: 80%"></i-input>\n                                                </form-item>\n                                            </i-col>\n                                            <i-col span="4" style="text-align: center">提示信息：</i-col>\n                                            <i-col span="10">\n                                                <form-item>\n                                                    <i-input size="small" placeholder="Enter something..." v-model="ruleParas.regularMsg" style="width: 80%"></i-input>\n                                                </form-item>\n                                            </i-col>\n                                        </row>\n                                    </form-item>\n                                </i-form>\n                            </div>\n                            \x3c!--JS方法类型参数设置--\x3e\n                            <div v-if="selectValidateType==\'JsMethod\'">\n                                <i-form :label-width="80">\n                                    <form-item label="方法名：">\n                                        <i-input size="small" placeholder="Enter something..." v-model="ruleParas.jsMethodName" style="width: 90%"></i-input>\n                                    </form-item>\n                                </i-form>\n                            </div>\n                        </div>\n                    </card>\n                    <card style="margin-top: 10px">\n                        <p slot="title">已添加规则</p>\n                        <div>\n                            <divider orientation="left" :dashed="true" style="font-size: 12px;margin-top: 0px;margin-bottom: 6px">提示信息</divider>\n                            <i-form :label-width="0">\n                                <form-item label="">\n                                    <i-input  placeholder="请输入提示信息..."  v-model="ruleParas.msg"></i-input>\n                                </form-item>\n                            </i-form>\n                        </div>\n                        <div style="margin-bottom: 10px;max-height: 220px;overflow: auto" class="iv-list-page-wrap">\n                            <divider orientation="left" :dashed="true" style="font-size: 12px;margin-top: 0px;margin-bottom: 6px">验证规则</divider>\n                            <i-table border :columns="validateColumnsConfig" :data="addedValidateRule"\n                                     class="iv-list-table" :highlight-row="true" size="small" no-data-text="请添加验证规则"></i-table>\n                        </div>\n                    </card>\n                    <div class="button-outer-wrap">\n                        <div class="button-inner-wrap">\n                            <button-group>\n                                <i-button type="primary" @click="selectComplete()"> 确 认 </i-button>\n                                <i-button type="primary" @click="clearComplete()"> 清 空 </i-button>\n                                <i-button @click="handleClose()">关 闭</i-button>\n                            </button-group>\n                        </div>\n                    </div>\n                </div>'}),Vue.component("table-relation-connect-two-table-dialog",{data:function(){return{acInterface:{getTablesFieldsByTableIds:"/Rest/Builder/DataStorage/DataBase/Table/GetTablesFieldsByTableIds"},fromTableField:{fieldData:[],columnsConfig:[{title:"字段名称",key:"fieldName",align:"center"},{title:"标题",key:"fieldCaption",align:"center"}]},toTableField:{fieldData:[],columnsConfig:[{title:"字段名称",key:"fieldName",align:"center"},{title:"标题",key:"fieldCaption",align:"center"}]},dialogHeight:0,resultData:{from:{tableId:"",text:""},to:{tableId:"",text:""}}}},mounted:function(){},methods:{handleClose:function(){DialogUtility.CloseDialogElem(this.$refs.connectTableFieldModelDialogWrap)},completed:function(){""!=this.resultData.from.text&&""!=this.resultData.to.text?(this.$emit("on-completed-connect",this.resultData),this.handleClose()):DialogUtility.AlertText("请设置关联字段")},getFieldsAndBind:function(l,n){var e=[l,n],o=this;AjaxUtility.Post(this.acInterface.getTablesFieldsByTableIds,{tableIds:e},function(e){if(e.success){var t=e.data,i=(e.exKVData.Tables,o.getSingleTableFieldsData(t,l)),a=o.getSingleTableFieldsData(t,n);o.fromTableField.fieldData=i,o.toTableField.fieldData=a}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,null)},this)},beginSelectConnect:function(e,t){var i=this.$refs.connectTableFieldModelDialogWrap;this.resultData.from.tableId=e,this.resultData.to.tableId=t,this.resultData.from.text="",this.resultData.to.text="",this.getFieldsAndBind(e,t);var a=450;550<PageStyleUtility.GetPageHeight()&&(a=600),this.dialogHeight=a,DialogUtility.DialogElemObj(i,{modal:!0,width:870,height:a,title:"设置关联"})},getSingleTableFieldsData:function(e,t){for(var i=[],a=0;a<e.length;a++)e[a].fieldTableId==t&&i.push(e[a]);return i},selectedFromField:function(e,t){this.resultData.from.text=e.fieldName+"[1]"},selectedToField:function(e,t){this.resultData.to.text=e.fieldName+"[0..N]"}},template:'<div ref="connectTableFieldModelDialogWrap" class="c1-select-model-wrap general-edit-page-wrap" style="display: none">\n                    <div class="c1-select-model-source-wrap c1-select-model-source-has-buttons-wrap" style="padding: 10px">\n                        <div style="float: left;width: 49%;height: 100%;">\n                            <i-input v-model="resultData.from.text" suffix="md-done-all" placeholder="开始关联字段" style="margin-bottom: 10px">\n                            </i-input>\n                            <i-table @on-row-click="selectedFromField" size="small" :height="dialogHeight-180" stripe border :columns="fromTableField.columnsConfig" :data="fromTableField.fieldData"\n                                         class="iv-list-table" :highlight-row="true"></i-table>\n                        </div>\n                        <div style="float:right;width: 49%;height: 100%;">\n                            <i-input v-model="resultData.to.text" suffix="md-done-all" placeholder="结束关联字段" style="margin-bottom: 10px">\n                            </i-input>\n                            <i-table @on-row-click="selectedToField" size="small" :height="dialogHeight-180" stripe border :columns="toTableField.columnsConfig" :data="toTableField.fieldData"\n                                         class="iv-list-table" :highlight-row="true"></i-table>\n                        </div>\n                    </div>\n                    <div class="button-outer-wrap" style="bottom: 12px;right: 12px">\n                        <div class="button-inner-wrap">\n                            <button-group>\n                                <i-button type="primary" @click="completed()" icon="md-checkmark">确认</i-button>\n                                <i-button @click="handleClose()" icon="md-close">关闭</i-button>\n                            </button-group>\n                        </div>\n                    </div>\n               </div>'}),Vue.component("dataset-simple-select-comp",{data:function(){var a=this;return{acInterface:{getDataSetData:"/Rest/Builder/DataSet/DataSetMain/GetDataSetsForZTreeNodeList"},dataSetTree:{treeObj:null,treeSetting:{view:{dblClickExpand:!1,showLine:!0,fontCss:{color:"black","font-weight":"normal"}},check:{enable:!1,nocheckInherit:!1,chkStyle:"radio",radioType:"all"},data:{key:{name:"text"},simpleData:{enable:!0,idKey:"id",pIdKey:"parentId",rootPId:"-1"}},callback:{onClick:function(e,t,i){"DataSet"==i.nodeTypeName&&a.selectedNode(i)}}},treeData:null,selectedTableName:"无"}}},mounted:function(){this.bindDataSetTree()},methods:{bindDataSetTree:function(){var i=this;AjaxUtility.Post(this.acInterface.getDataSetData,{},function(e){if(e.success){if(null!=e.data&&0<e.data.length)for(var t=0;t<e.data.length;t++)"DataSetGroup"==e.data[t].nodeTypeName?e.data[t].icon=BaseUtility.GetRootPath()+"/Themes/Png16X16/package.png":e.data[t].icon=BaseUtility.GetRootPath()+"/Themes/Png16X16/application_view_columns.png";i.dataSetTree.treeData=e.data,i.dataSetTree.treeObj=$.fn.zTree.init($("#dataSetZTreeUL"),i.dataSetTree.treeSetting,i.dataSetTree.treeData),i.dataSetTree.treeObj.expandAll(!0),fuzzySearchTreeObj(i.dataSetTree.treeObj,i.$refs.txt_search_text.$refs.input,null,!0)}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,null)},this)},selectedNode:function(e){this.$emit("on-selected-dataset",e)}},template:'<div class="js-code-fragment-wrap">                    <i-input search class="input_border_bottom" ref="txt_search_text" placeholder="请输入表名或者标题"></i-input>                    <ul id="dataSetZTreeUL" class="ztree"></ul>                </div>'}),Vue.component("js-design-code-fragment",{data:function(){return{jsEditorInstance:null}},mounted:function(){},methods:{setJSEditorInstance:function(e){this.jsEditorInstance=e},getJsEditorInst:function(){return this.jsEditorInstance},insertJs:function(e){var t=this.getJsEditorInst().getDoc(),i=t.getCursor();t.replaceRange(e,i)},formatJS:function(){CodeMirror.commands.selectAll(this.getJsEditorInst());var e={from:this.getJsEditorInst().getCursor(!0),to:this.getJsEditorInst().getCursor(!1)};this.getJsEditorInst().autoFormatRange(e.from,e.to)},alertDesc:function(){},refScript:function(){this.insertJs('<script type="text/javascript" src="${contextPath}/UIComponent/TreeTable/Js/TreeTable.js"><\/script>')},callServiceMethod:function(){}},template:'<div class="js-code-fragment-wrap">            <div class="js-code-fragment-item" @click="formatJS">格式化</div>            <div class="js-code-fragment-item">说明</div>            <div class="js-code-fragment-item" @click="refScript">引入脚本</div>            <div class="js-code-fragment-item">获取URL参数</div>            <div class="js-code-fragment-item">调用服务方法</div>            <div class="js-code-fragment-item">加载数据字典</div>        </div>'}),Vue.component("table-relation-content-comp",{props:["relation"],data:function(){return{acInterface:{getTablesFieldsByTableIds:"/Rest/Builder/DataStorage/DataBase/Table/GetTablesFieldsByTableIds",saveDiagram:"/Rest/Builder/DataStorage/TableRelation/TableRelation/SaveDiagram",getSingleDiagramData:"/Rest/Builder/DataStorage/TableRelation/TableRelation/GetDetailData",tableView:"/HTML/Builder/DataStorage/DataBase/TableEdit.html"},tableRelationDiagram:null,displayDesc:!0,formatJson:null,recordId:this.relation.relationId}},mounted:function(){$(this.$refs.relationContentOuterWrap).css("height",PageStyleUtility.GetPageHeight()-75),PageStyleUtility.GetPageWidth()<1e3&&(this.displayDesc=!1,$(".table-relation-op-buttons-outer-wrap").css("width","100%")),this.initDiagram(),this.loadRelationDetailData()},methods:{init:function(){window.goSamples&&goSamples();var e=go.GraphObject.make,t=e(go.Diagram,"tableRelationDiagramDiv",{allowDelete:!1,allowCopy:!1,layout:e(go.ForceDirectedLayout),"undoManager.isEnabled":!0}),i=e(go.Brush,"Linear",{0:"rgb(150, 150, 250)",.5:"rgb(86, 86, 186)",1:"rgb(86, 86, 186)"}),a=e(go.Brush,"Linear",{0:"rgb(158, 209, 159)",1:"rgb(67, 101, 56)"}),l=e(go.Brush,"Linear",{0:"rgb(206, 106, 100)",1:"rgb(180, 56, 50)"}),n=e(go.Brush,"Linear",{0:"rgb(254, 221, 50)",1:"rgb(254, 182, 50)"}),o=e(go.Brush,"Linear",{1:"#E6E6FA",0:"#FFFAF0"}),d=e(go.Panel,"Horizontal",e(go.Shape,{desiredSize:new go.Size(10,10)},new go.Binding("figure","figure"),new go.Binding("fill","color")),e(go.TextBlock,{stroke:"#333333",font:"bold 14px sans-serif"},new go.Binding("text","name")));t.nodeTemplate=e(go.Node,"Auto",{selectionAdorned:!0,resizable:!0,layoutConditions:go.Part.LayoutStandard&~go.Part.LayoutNodeSized,fromSpot:go.Spot.AllSides,toSpot:go.Spot.AllSides,isShadowed:!0,shadowColor:"#C5C1AA"},new go.Binding("location","location").makeTwoWay(),new go.Binding("desiredSize","visible",function(e){return new go.Size(NaN,NaN)}).ofObject("LIST"),e(go.Shape,"Rectangle",{fill:o,stroke:"#756875",strokeWidth:3}),e(go.Panel,"Table",{margin:8,stretch:go.GraphObject.Fill},e(go.RowColumnDefinition,{row:0,sizing:go.RowColumnDefinition.None}),e(go.TextBlock,{row:0,alignment:go.Spot.Center,margin:new go.Margin(0,14,0,2),font:"bold 16px sans-serif"},new go.Binding("text","key")),e("PanelExpanderButton","LIST",{row:0,alignment:go.Spot.TopRight}),e(go.Panel,"Vertical",{name:"LIST",row:1,padding:3,alignment:go.Spot.TopLeft,defaultAlignment:go.Spot.Left,stretch:go.GraphObject.Horizontal,itemTemplate:d},new go.Binding("itemArray","items")))),t.linkTemplate=e(go.Link,{selectionAdorned:!0,layerName:"Foreground",reshapable:!0,routing:go.Link.AvoidsNodes,corner:5,curve:go.Link.JumpOver},e(go.Shape,{stroke:"#303B45",strokeWidth:2.5}),e(go.TextBlock,{textAlign:"center",font:"bold 14px sans-serif",stroke:"#1967B3",segmentIndex:0,segmentOffset:new go.Point(NaN,NaN),segmentOrientation:go.Link.OrientUpright},new go.Binding("text","text")),e(go.TextBlock,{textAlign:"center",font:"bold 14px sans-serif",stroke:"#1967B3",segmentIndex:-1,segmentOffset:new go.Point(NaN,NaN),segmentOrientation:go.Link.OrientUpright},new go.Binding("text","toText")));var r=[{key:"Products",items:[{name:"ProductID",iskey:!0,figure:"Decision",color:n},{name:"ProductName",iskey:!1,figure:"Cube1",color:i},{name:"SupplierID",iskey:!1,figure:"Decision",color:"purple"},{name:"CategoryID",iskey:!1,figure:"Decision",color:"purple"}]},{key:"Suppliers",items:[{name:"SupplierID",iskey:!0,figure:"Decision",color:n},{name:"CompanyName",iskey:!1,figure:"Cube1",color:i},{name:"ContactName",iskey:!1,figure:"Cube1",color:i},{name:"Address",iskey:!1,figure:"Cube1",color:i}]},{key:"Categories",items:[{name:"CategoryID",iskey:!0,figure:"Decision",color:n},{name:"CategoryName",iskey:!1,figure:"Cube1",color:i},{name:"Description",iskey:!1,figure:"Cube1",color:i},{name:"Picture",iskey:!1,figure:"TriangleUp",color:l}]},{key:"Order Details",items:[{name:"OrderID",iskey:!0,figure:"Decision",color:n},{name:"ProductID",iskey:!0,figure:"Decision",color:n},{name:"UnitPrice",iskey:!1,figure:"MagneticData",color:a},{name:"Quantity",iskey:!1,figure:"MagneticData",color:a},{name:"Discount",iskey:!1,figure:"MagneticData",color:a}]}];t.model=e(go.GraphLinksModel,{copiesArrays:!0,copiesArrayObjects:!0,nodeDataArray:r,linkDataArray:[{from:"Products",to:"Suppliers",text:"0..N",toText:"1"},{from:"Products",to:"Categories",text:"0..N",toText:"1"},{from:"Order Details",to:"Products",text:"0..N",toText:"1"}]})},showSelectTableDialog:function(){this.$refs.selectSingleTableDialog.beginSelectTable()},showSelectFieldConnectDialog:function(){var t="",i="",a=0;this.tableRelationDiagram.selection.each(function(e){e instanceof go.Node&&(0==a?(t=e.data.tableId,a++):i=e.data.tableId)}),i||(i=t),""!=t&&""!=i?this.$refs.tableRelationConnectTwoTableDialog.beginSelectConnect(t,i):DialogUtility.AlertText("请先选中2个节点")},addTableToDiagram:function(e){var o=e.id,t=[o],d=this;this.tableIsExistInDiagram(o)?DialogUtility.AlertText("该画布中已经存在表:"+e.text):AjaxUtility.Post(this.acInterface.getTablesFieldsByTableIds,{tableIds:t},function(e){if(e.success){for(var t=e.data,i=e.exKVData.Tables[0],a=[],l=0;l<t.length;l++)t[l].displayText=t[l].fieldName+"["+t[l].fieldCaption+"]",a.push(d.rendererFieldStyle(t[l]));var n={tableId:o,loc:"0 0",fields:a,tableData:i,tableName:i.tableName,tableCaption:i.tableCaption,tableDisplayText:i.tableName+"["+i.tableCaption+"]",key:i.tableId};d.tableRelationDiagram.model.startTransaction("flash"),d.tableRelationDiagram.model.addNodeData(n),d.tableRelationDiagram.model.commitTransaction("flash")}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,null)},this)},deleteSelection:function(){this.tableRelationDiagram.commandHandler.canDeleteSelection()&&this.tableRelationDiagram.commandHandler.deleteSelection()},connectSelectionNode:function(e){this.tableRelationDiagram.model.startTransaction("flash");var t={lineId:StringUtility.Guid(),from:e.from.tableId,to:e.to.tableId,fromText:e.from.text,toText:e.to.text};this.tableRelationDiagram.model.addLinkData(t),this.tableRelationDiagram.model.commitTransaction("flash")},saveModelToServer:function(){if(this.recordId){var e={recordId:this.recordId,relationContent:JsonUtility.JsonToString(this.getDataJson()),relationDiagramJson:this.getDiagramJson()};AjaxUtility.Post(this.acInterface.saveDiagram,e,function(e){DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,null)},this)}},initDiagram:function(){var a=this;window.goSamples&&goSamples();var e=go.GraphObject.make;this.tableRelationDiagram=e(go.Diagram,"tableRelationDiagramDiv",{allowDelete:!0,allowCopy:!1,layout:e(go.ForceDirectedLayout,{isOngoing:!1}),"undoManager.isEnabled":!0});var t=this.tableRelationDiagram,i=e(go.Brush,"Linear",{1:"#E6E6FA",0:"#FFFAF0"}),l=e(go.Panel,"Horizontal",e(go.Shape,{desiredSize:new go.Size(10,10)},new go.Binding("figure","figure"),new go.Binding("fill","color")),e(go.TextBlock,{stroke:"#333333",font:"bold 14px sans-serif"},new go.Binding("text","displayText")));t.nodeTemplate=e(go.Node,"Auto",{selectionAdorned:!0,resizable:!0,layoutConditions:go.Part.LayoutStandard&~go.Part.LayoutNodeSized,fromSpot:go.Spot.AllSides,toSpot:go.Spot.AllSides,isShadowed:!0,shadowColor:"#C5C1AA",doubleClick:function(e,t){var i=BaseUtility.BuildView(a.acInterface.tableView,{op:"view",recordId:t.data.tableId});DialogUtility.Frame_OpenIframeWindow(window,DialogUtility.DialogId,i,{title:"表设计"},0)}},new go.Binding("location","loc",go.Point.parse),new go.Binding("desiredSize","visible",function(e){return new go.Size(NaN,NaN)}).ofObject("LIST"),e(go.Shape,"RoundedRectangle",{fill:i,stroke:"#756875",strokeWidth:1}),e(go.Panel,"Table",{margin:8,stretch:go.GraphObject.Fill},e(go.RowColumnDefinition,{row:0,sizing:go.RowColumnDefinition.None}),e(go.TextBlock,{row:0,alignment:go.Spot.Center,margin:new go.Margin(0,14,0,2),font:"bold 16px sans-serif"},new go.Binding("text","tableDisplayText")),e("PanelExpanderButton","LIST",{row:0,alignment:go.Spot.TopRight}),e(go.Panel,"Vertical",{name:"LIST",row:1,padding:3,alignment:go.Spot.TopLeft,defaultAlignment:go.Spot.Left,stretch:go.GraphObject.Horizontal,itemTemplate:l},new go.Binding("itemArray","fields")))),t.linkTemplate=e(go.Link,{selectionAdorned:!0,layerName:"Foreground",reshapable:!0,routing:go.Link.AvoidsNodes,corner:5,curve:go.Link.JumpOver},e(go.Shape,{stroke:"#303B45",strokeWidth:1.5}),e(go.TextBlock,{textAlign:"center",font:"bold 14px sans-serif",stroke:"#1967B3",segmentIndex:0,segmentOffset:new go.Point(NaN,NaN),segmentOrientation:go.Link.OrientUpright},new go.Binding("text","fromText")),e(go.TextBlock,{textAlign:"center",font:"bold 14px sans-serif",stroke:"#1967B3",segmentIndex:-1,segmentOffset:new go.Point(NaN,NaN),segmentOrientation:go.Link.OrientUpright},new go.Binding("text","toText")))},loadRelationDetailData:function(){var i=this;AjaxUtility.Post(this.acInterface.getSingleDiagramData,{recordId:this.recordId,op:"Edit"},function(e){if(e.success){if(e.data.relationContent){var t=JsonUtility.StringToJson(e.data.relationContent);console.log(t),i.setDataJson(t),i.convertToFullJson(t,i.drawObjInDiagram)}}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,null)},this)},drawObjInDiagram:function(i){var e=go.GraphObject.make;e(go.Brush,"Linear",{0:"rgb(150, 150, 250)",.5:"rgb(86, 86, 186)",1:"rgb(86, 86, 186)"}),e(go.Brush,"Linear",{0:"rgb(158, 209, 159)",1:"rgb(67, 101, 56)"}),e(go.Brush,"Linear",{0:"rgb(206, 106, 100)",1:"rgb(180, 56, 50)"}),e(go.Brush,"Linear",{0:"rgb(254, 221, 50)",1:"rgb(254, 182, 50)"}),i.lineList;this.tableRelationDiagram.model=e(go.GraphLinksModel,{copiesArrays:!0,copiesArrayObjects:!0,nodeDataArray:i.tableList});var a=this;window.setTimeout(function(){a.tableRelationDiagram.model.startTransaction("flash");for(var e=0;e<i.lineList.length;e++){var t=i.lineList[e];a.tableRelationDiagram.model.addLinkData(t)}a.tableRelationDiagram.model.commitTransaction("flash")},500)},convertToFullJson:function(e,t){for(var o=JsonUtility.CloneSimple(e),i=new Array,a=0;a<e.tableList.length;a++)i.push(e.tableList[a].tableId);var d=this;AjaxUtility.Post(this.acInterface.getTablesFieldsByTableIds,{tableIds:i},function(e){if(e.success){for(var t=e.data,i=e.exKVData.Tables,a=0;a<o.tableList.length;a++){var l=d.getSingleTableData(i,o.tableList[a].tableId);o.tableList[a].tableData=l,o.tableList[a].tableName=l.tableName,o.tableList[a].tableCaption=l.tableCaption,o.tableList[a].tableDisplayText=l.displayText;var n=d.getSingleTableFieldsData(t,o.tableList[a].tableId);o.tableList[a].fields=n,o.tableList[a].key=o.tableList[a].tableId}d.drawObjInDiagram(o)}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,null)},this)},getSingleTableData:function(e,t){for(var i=0;i<e.length;i++)if(e[i].tableId==t)return e[i].displayText=e[i].tableName+"["+e[i].tableCaption+"]",e[i];return null},getSingleTableFieldsData:function(e,t){for(var i=[],a=0;a<e.length;a++)e[a].fieldTableId==t&&(e[a].displayText=e[a].fieldName+"["+e[a].fieldCaption+"]",i.push(this.rendererFieldStyle(e[a])));return i},rendererFieldStyle:function(e){return"是"==e.fieldIsPk?(e.color=this.getKeyFieldBrush(),e.figure="Decision"):(e.color=this.getNorFieldBrush(),e.figure="Cube1"),e},getKeyFieldBrush:function(){return go.GraphObject.make(go.Brush,"Linear",{0:"rgb(254, 221, 50)",1:"rgb(254, 182, 50)"})},getNorFieldBrush:function(){return go.GraphObject.make(go.Brush,"Linear",{0:"rgb(150, 150, 250)",.5:"rgb(86, 86, 186)",1:"rgb(86, 86, 186)"})},getDataJson:function(){var t={tableList:[],lineList:[]};return this.tableRelationDiagram.nodes.each(function(e){e instanceof go.Node?t.tableList.push({tableId:e.data.tableId,loc:e.location.x+" "+e.location.y}):e instanceof go.Link&&alert("line")}),this.tableRelationDiagram.links.each(function(e){e instanceof go.Link&&t.lineList.push({lineId:e.data.lineId,from:e.data.from,to:e.data.to,fromText:e.data.fromText,toText:e.data.toText})}),t},setDataJson:function(e){this.formatJson=e},getDiagramJson:function(){return this.tableRelationDiagram.model.toJson()},alertDataJson:function(){var e=this.getDataJson();DialogUtility.AlertJsonCode(e)},alertDiagramJson:function(){var e=this.getDiagramJson();DialogUtility.AlertJsonCode(e)},tableIsExistInDiagram:function(t){var i=!1;return this.tableRelationDiagram.nodes.each(function(e){e instanceof go.Node&&e.data.tableId==t&&(i=!0)}),i},downLoadModelPNG:function(){this.tableRelationDiagram.makeImageData({background:"white",returnType:"blob",scale:1,callback:function(e){var t=window.URL.createObjectURL(e),i="myBlobFile1.png",a=document.createElement("a");a.style="display: none",a.href=t,a.download=i,void 0===window.navigator.msSaveBlob?(document.body.appendChild(a),requestAnimationFrame(function(){a.click(),window.URL.revokeObjectURL(t),document.body.removeChild(a)})):window.navigator.msSaveBlob(e,i)}})}},template:'<div ref="relationContentOuterWrap" class="table-relation-content-outer-wrap">\n                    <div class="table-relation-content-header-wrap">\n                        <div class="table-relation-desc-outer-wrap" v-if="displayDesc">\n                            <div class="table-relation-desc">\n                                备注：{{relation.relationDesc}}\n                            </div>\n                        </div>\n                        <div class="table-relation-op-buttons-outer-wrap">\n                            <div class="table-relation-op-buttons-inner-wrap">\n                                <button-group shape="circle">\n                                    <i-button @click="showSelectTableDialog" type="success" icon="md-add"></i-button>\n                                    <i-button @click="showSelectFieldConnectDialog" type="primary" icon="logo-steam">连接</i-button>\n                                    <i-button disabled type="primary" icon="md-return-left">引入</i-button>\n                                    <i-button disabled type="primary" icon="md-qr-scanner">全屏</i-button>\n                                    <i-button disabled type="primary" icon="md-git-compare">历史</i-button>\n                                    <i-button @click="alertDataJson" type="primary" icon="md-code">数据Json</i-button>\n                                    <i-button @click="alertDiagramJson" type="primary" icon="md-code-working">图形Json</i-button>\n                                    <i-button @click="downLoadModelPNG" type="primary" icon="md-cloud-download">下载</i-button>\n                                    <i-button @click="saveModelToServer" type="primary" icon="logo-instagram">保存</i-button>\n                                    <i-button @click="deleteSelection" type="primary" icon="md-close"></i-button>\n                                </button-group>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="table-relation-content-wrap" id="tableRelationDiagramDiv"></div>\n                    <select-single-table-dialog ref="selectSingleTableDialog" @on-selected-table="addTableToDiagram"></select-single-table-dialog>\n                    <table-relation-connect-two-table-dialog ref="tableRelationConnectTwoTableDialog" @on-completed-connect="connectSelectionNode"></table-relation-connect-two-table-dialog>\n                </div>'}),Vue.component("select-dblink-single-comp",{data:function(){return{acInterface:{getDBLinkDataUrl:"/Rest/Builder/DataStorage/DBLink/GetFullDBLink",getSingleDBLinkDataUrl:"/Rest/Builder/DataStorage/DBLink/GetDetailData"},jsEditorInstance:null,dbLinkTree:{treeObj:null,treeSetting:{view:{dblClickExpand:!1,showLine:!0,fontCss:{color:"black","font-weight":"normal"}},check:{enable:!1,nocheckInherit:!1,chkStyle:"radio",radioType:"all"},data:{key:{name:"dbLinkName"},simpleData:{enable:!0,idKey:"dbId",pIdKey:"dbOrderNum",rootPId:"-1"}},callback:{onClick:function(e,t,i){var a=this.getZTreeObj(t)._host;a.selectedDBLink(i),a.handleClose()}}},treeData:null,clickNode:null},selectedDBLinkData:null}},mounted:function(){},methods:{handleClose:function(){DialogUtility.CloseDialogElem(this.$refs.selectDBLinkModelDialogWrap)},beginSelectDBLink:function(){var e=this.$refs.selectDBLinkModelDialogWrap;this.getDBLinkDataInitTree(),DialogUtility.DialogElemObj(e,{modal:!0,width:470,height:500,title:"选择数据库连接"})},getDBLinkDataInitTree:function(){var i=this;AjaxUtility.Post(this.acInterface.getDBLinkDataUrl,{},function(e){if(e.success){i.dbLinkTree.treeData=e.data;for(var t=0;t<i.dbLinkTree.treeData.length;t++)i.dbLinkTree.treeData[t].icon="../../../../Themes/Png16X16/database_connect.png";i.$refs.dbLinkZTreeUL.setAttribute("id","select-dbLink-single-comp-"+StringUtility.Guid()),i.dbLinkTree.treeObj=$.fn.zTree.init($(i.$refs.dbLinkZTreeUL),i.dbLinkTree.treeSetting,i.dbLinkTree.treeData),i.dbLinkTree.treeObj.expandAll(!0),i.dbLinkTree.treeObj._host=i,fuzzySearchTreeObj(i.dbLinkTree.treeObj,i.$refs.txt_dbLink_search_text.$refs.input,null,!0)}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,null)},this)},selectedDBLink:function(e){this.selectedDBLinkData=e,this.$emit("on-selected-dblink",e)},getSelectedDBLinkName:function(){return null==this.selectedDBLinkData?"请选择数据库连接":this.selectedDBLinkData.dbLinkName},setOldSelectedDBLink:function(e){var t=this;AjaxUtility.Post(this.acInterface.getSingleDBLinkDataUrl,{recordId:e},function(e){e.success?t.selectedDBLinkData=e.data:DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,null)},this)}},template:'<div>\n                    <div class="select-view-dblink-wrap">\n                        <div class="text">{{getSelectedDBLinkName()}}</div>\n                        <div class="value"></div>\n                        <div class="id"></div>\n                        <div class="button" @click="beginSelectDBLink()"><Icon type="ios-funnel" />&nbsp;选择</div>\n                    </div>\n                    <div ref="selectDBLinkModelDialogWrap" class="c1-select-model-wrap general-edit-page-wrap" style="display: none">\n                        <div class="c1-select-model-source-wrap">\n                            <i-input search class="input_border_bottom" ref="txt_dbLink_search_text" placeholder="请输入数据库连接名称">\n                            </i-input>\n                            <div class="inner-wrap div-custom-scroll">\n                                <ul ref="dbLinkZTreeUL" class="ztree"></ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>'});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
