"use strict";var FormRelationPOUtility={_FieldPOCache:null,BuildRecord:function(e,t,a,n,i,r){if(null==t||null==t)throw"方法需要提供desc参数!";if(null==a||null==a)throw"方法需要提供recordId参数!";if(null==n||null==n)throw"方法需要提供outerFieldName参数!";if(null==i||null==i)throw"方法需要提供outerFieldValue参数!";if(null==r||null==r)throw"方法需要提供selfFieldName参数!";return{recordId:a,desc:t,recordFieldPOList:e,outerFieldName:n,outerFieldValue:i,selfFieldName:r}},FindRecordFieldPOArray:function(e){return e.recordFieldPOList},Add1To1DataRecordFieldPOList:function(e,t,a,n,i,r,o){return e.oneDataRecord=this.BuildRecord(t,a,n,i,r,o),e},Add1To1DataRecord:function(e,t){return e.oneDataRecord=t,e},Get1To1DataRecord:function(e){return e.oneDataRecord},Get1To1DataRecordFieldPOArray:function(e){return e.oneDataRecord?this.FindRecordFieldPOArray(e.oneDataRecord):null},Add1ToNDataRecord:function(e,t){for(var a=0;a<t.length;a++){if(null==t[a].desc||null==t[a].desc)throw"arrayData中的数据对象需要包含desc属性!";if(null==t[a].recordId||null==t[a].recordId)throw"arrayData中的数据对象需要包含recordId属性!";if(null==t[a].recordFieldPOList||null==t[a].recordFieldPOList)throw"arrayData中的数据对象需要包含recordFieldPOList属性!";if(null==t[a].outerFieldName||null==t[a].outerFieldName)throw"arrayData中的数据对象需要包含outerFieldName属性!";if(null==t[a].outerFieldValue||null==t[a].outerFieldValue)throw"arrayData中的数据对象需要包含outerFieldValue属性!";if(null==t[a].selfFieldName||null==t[a].selfFieldName)throw"arrayData中的数据对象需要包含selfFieldName属性!"}return e.listDataRecord=t,e},Get1ToNDataRecord:function(e){return e.listDataRecord},FindFieldPOInOneDataRecord:function(e,t){var a=this.FindRecordFieldPOArray(e),n=ArrayUtility.WhereSingle(a,function(e){return e.fieldName==t});if(n)return n;throw"FormRuntime.FindFieldPOInOneDataRecord:找不到字段"+t+"的数据值!"},FindFieldValueInOneDataRecord:function(e,t){var a=this.FindRecordFieldPOArray(e),n=ArrayUtility.WhereSingle(a,function(e){return e.fieldName==t});if(n)return n.value;throw"FormRuntime.FindFieldPOByRelationPO:找不到字段"+t+"的数据值!"},FindIDFieldPOInOneDataRecord:function(e){return this.FindFieldPOInOneDataRecord(e,"ID")},FindFieldPOByRelationPO:function(e,t){var a=FormRelationPOUtility.Get1To1DataRecordFieldPOArray(e),n=ArrayUtility.WhereSingle(a,function(e){return e.fieldName==t});if(n)return n;throw"FormRuntime.FindFieldPOByRelationPO:找不到字段"+t+"的数据值!"},FindIdFieldPOByRelationPO:function(e){return this.FindFieldPOByRelationPO(e,"ID")},FindMainRelationPO:function(e){return ArrayUtility.WhereSingle(e,function(e){return FormRelationPOUtility.IsMainRelationPO(e)})},IsMainRelationPO:function(e){return 1==e.isMain||"-1"==e.parentId},FindNotMainRelationPO:function(e){return ArrayUtility.Where(e,function(e){return 1!=e.isMain||"-1"!=e.parentId})},FindRelationPOById:function(e,t){return ArrayUtility.WhereSingle(e,function(e){return e.id==t})},FindRelationPOByTableName:function(e,t){return ArrayUtility.WhereSingle(e,function(e){return e.tableName==t})},FindFieldPOInRelationFormRecordComplexPoOneDataRecord:function(e,t,a,n){if(null==this._FieldPOCache){this._FieldPOCache={};for(var i=e.formRecordDataRelationPOList,r=0;r<i.length;r++){var o=i[r],l=o.id,s=this.Get1To1DataRecordFieldPOArray(o);if(s)for(var d=0;d<s.length;d++){var u=s[d],c=u.fieldName;this._FieldPOCache[l+"_"+c]=u}}}return this._FieldPOCache[t+"_"+n]},FindRelationPOInRelationFormRecordComplexPo:function(e,t){return ArrayUtility.WhereSingle(e.formRecordDataRelationPOList,function(e){return e.id==t})},FindParentFieldValueInFormDataRelationListWith1To1DataRecord:function(e,t,a,n){ArrayUtility.WhereSingle(this._FormDataRelationList,function(e){return e.id==relationPO.parentId})},CreateFieldInRecordFieldPOArray:function(e,t,a){var n=JsonUtility.CloneSimple(e[0]);n.fieldName=t,n.value=a,e.push(n)},CreateIdFieldInRecordFieldPOArray:function(e,t){t||(t=StringUtility.Guid()),this.CreateFieldInRecordFieldPOArray(e,"ID",t)}},FormRuntimeSinglePageObject={_webFormRTParas:null,_formRuntimeInst:null,getWebFormRTParas:function(){return this._webFormRTParas||(this._webFormRTParas={FormId:BaseUtility.GetUrlParaValue("FormId"),ButtonId:BaseUtility.GetUrlParaValue("ButtonId"),OperationType:BaseUtility.GetUrlParaValue("OperationType"),ListFormButtonElemId:BaseUtility.GetUrlParaValue("ListFormButtonElemId"),RecordId:BaseUtility.GetUrlParaValue("RecordId")},this._webFormRTParas.RecordId||(this._webFormRTParas.RecordId=StringUtility.Guid())),this._webFormRTParas},pageReady:function(e,t){this._formRuntimeInst=Object.create(FormRuntime);var a=this.getWebFormRTParas();return this._formRuntimeInst.Initialization({RendererToId:"htmlDesignRuntimeWrap",FormId:a.FormId,RecordId:a.RecordId,ButtonId:a.ButtonId,OperationType:a.OperationType,IsPreview:e,RendererChainCompletedFunc:t,ListFormButtonElemId:a.ListFormButtonElemId}),this._formRuntimeInst}},FormRuntime={_Prop_Config:{RendererToId:null,FormId:"",RecordId:"",ButtonId:"",IsPreview:!1,OperationType:"",ListFormButtonElemId:""},_$RendererToElem:null,_FormPO:null,_FormDataRelationList:null,Initialization:function(e){this._Prop_Config=$.extend(!0,{},this._Prop_Config,e),this._$RendererToElem=$("#"+this._Prop_Config.RendererToId),this._LoadHTMLToEl()},_RendererChainIsCompleted:!0,_RendererDataChainIsCompleted:!0,_LoadHTMLToEl:function(){var e=BaseUtility.BuildAction("/Rest/Builder/RunTime/FormRuntime/LoadHTML",{});this._Prop_Config.IsPreview&&(e=BaseUtility.BuildAction("/Rest/Builder/RunTime/FormRuntime/LoadHTMLForPreView",{})),RuntimeGeneralInstance.LoadHtmlDesignContent(e,this._Prop_Config.RendererTo,{formId:this._Prop_Config.FormId,recordId:this._Prop_Config.RecordId,buttonId:this._Prop_Config.ButtonId,operationType:this.GetOperationType()},function(e){if(console.log(e),this._FormPO=e.data,this._FormDataRelationList=JsonUtility.StringToJson(this._FormPO.formDataRelation),this._$RendererToElem.append(e.data.formHtmlRuntime),VirtualBodyControl.RendererChain({po:e.data,sourceHTML:e.data.formHtmlRuntime,$rootElem:this._$RendererToElem,$parentControlElem:this._$RendererToElem,$singleControlElem:this._$RendererToElem,formRuntimeInstance:this}),this.IsPreview()?this.CallRendererChainCompletedFunc():RuntimeGeneralInstance.LoadInnerFormButton(this._Prop_Config.ButtonId,{},function(e){e.data&&this.CreateALLInnerFormButton(e.data),this.CallRendererChainCompletedFunc()},this),BaseUtility.IsUpdateOperation(this.GetOperationType())||BaseUtility.IsViewOperation(this.GetOperationType())){var t=e.data.formRecordComplexPO;this.DeSerializationFormData(t)}},this)},CallRendererChainCompletedFunc:function(){"function"==typeof this._Prop_Config.RendererChainCompletedFunc&&this._Prop_Config.RendererChainCompletedFunc.call(this)},IsPreview:function(){return this._Prop_Config.IsPreview},GetRecordId:function(){return this._Prop_Config.RecordId},GetOperationType:function(){return this._Prop_Config.OperationType},GetOpenedListFormButtonId:function(){return this._Prop_Config.ListFormButtonElemId},GetOriginalFormDataRelation:function(){return JsonUtility.StringToJson(this._FormPO.formDataRelation)},SerializationFormData:function(){for(var e={recordId:this._Prop_Config.RecordId,formId:this._Prop_Config.FormId,buttonId:this._Prop_Config.ButtonId,formRecordDataRelationPOList:null,exData:null},t=this.GetOriginalFormDataRelation(),a=0;a<t.length;a++){var n=t[a],i=n.singleName,r=n.tableName,o="-1"==n.parentId;(n.isMain=o)&&(n.relationType="1To1");var l=n.relationType;if("1To1"==l){for(var s=$("[tablename='"+r+"'][serialize='true']").not($("[control_category='DynamicContainer']").find("[jbuild4dc_custom='true']")),d=[],u=0;u<s.length;u++){var c=$(s[u]),f=HTMLControl.TryGetFieldTransferPO(c,n.id,i,l);d.push(f)}var h="",p="",m="",T="";T=o?(FormRelationPOUtility.CreateIdFieldInRecordFieldPOArray(d,e.recordId),h=e.recordId,m=p="NotOuterField"):(h=FormRelationPOUtility.FindIDFieldPOInOneDataRecord(d).value,p=n.outerKeyFieldName,m=n.outerKeyFieldName,n.selfKeyFieldName),FormRelationPOUtility.Add1To1DataRecordFieldPOList(n,d,"",h,p,m,T)}else{var g=$("[serialize='true'][control_category='DynamicContainer'][relation_po_id='"+n.id+"']");if(0<g.length)HTMLControl.GetControlInstanceByElem(g).SerializationValue(t,n,g)}}return e.formRecordDataRelationPOList=t,e},DeSerializationFormData:function(e){VirtualBodyControl.RendererDataChain({$rootElem:this._$RendererToElem,$parentControlElem:this._$RendererToElem,$singleControlElem:this._$RendererToElem,formRuntimeInstance:this,relationFormRecordComplexPo:e,callToViewStatusFunc:BaseUtility.IsViewOperation(this.GetOperationType())})},CreateALLInnerFormButton:function(e){if(!StringUtility.IsNullOrEmpty(e.buttonInnerConfig))for(var t=JsonUtility.StringToJson(e.buttonInnerConfig),a=0;a<t.length;a++){var n=t[a],i=InnerFormButtonRuntime.RendererSingleInnerFormButton(n,this,e);$("#innerButtonWrapOuter").append(i)}}},FormRuntimeMockDataPool={mockDataPool:{},SaveData:function(e,t,a){var n=e+"-"+t;this.mockDataPool[n]=a},GetData:function(e,t){var a=e+"-"+t;return this.mockDataPool[a]?this.mockDataPool[a]:null},SaveDataToParentPool:function(e,t,a){window.parent.FormRuntimeMockDataPool.SaveData(e,t,a)},GetDataFromParentPool:function(e,t){return window.parent.FormRuntimeMockDataPool.GetData(e,t)},GetMockData:function(){return{recordId:"",formId:"34db0d6f-7978-4acf-8a45-13a6ee5f63e2",buttonId:"",formRecordDataRelationPOList:[{id:"d9bc9332-3c94-28bb-1c11-049764c69eb5",parentId:"-1",singleName:"",pkFieldName:"",desc:"",selfKeyFieldName:"",outerKeyFieldName:"",relationType:"1To1",isSave:"true",condition:"",tableId:"TDEV_TEST_1",tableName:"TDEV_TEST_1",tableCaption:"开发测试表11",tableCode:"T_10437",displayText:"TDEV_TEST_1[开发测试表1]",icon:"../../../Themes/Png16X16/table.png",isMain:!0,oneDataRecord:{desc:"一对一数据",recordFieldPOList:[{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_897949295",defaultType:"Const",defaultValue:"测试",value:"测试15",success:!0,msg:""},{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_375186891",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD",value:"2019-10-31",success:!0,msg:""},{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_DropDownSelect",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"F_PUBLIC_STATUS",fieldDataType:"字符串",fieldDataLength:"50",serialize:"true",id:"sel_246410688",defaultType:"",defaultValue:"",value:"4",success:!0,msg:""},{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"F_ORGAN_ID",fieldDataType:"字符串",fieldDataLength:"50",serialize:"true",id:"txt_897909755",defaultType:"EnvVar",defaultValue:"ENV_SYSTEM_CURRENT_USER_ORGAN_ID",value:"10001",success:!0,msg:""},{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_897949295",defaultType:"Const",defaultValue:"测试",value:"0d561c0e-b83b-a9ff-c88a-652d4a4aa256",success:!0,msg:""}]}},{id:"2d7def75-1438-7614-af7d-60ce0650eba6",parentId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",singleName:"",pkFieldName:"",desc:"",selfKeyFieldName:"",outerKeyFieldName:"",relationType:"1ToN",isSave:"true",condition:"",tableId:"TDEV_TEST_2",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableCode:"T_10438",displayText:"TDEV_TEST_2[开发测试表2](1ToN)",icon:"../../../Themes/Png16X16/table.png",isMain:!1,listDataRecord:[{desc:"一对一数据",recordFieldPOList:[{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"1",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_698060281",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD",value:"2019-10-30",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"2",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_698060281",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD",value:"2019-10-30",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"3",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_698060281",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD",value:"2019-10-30",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]}]},{id:"4313366b-caa0-4272-2690-1237750651f6",parentId:"2d7def75-1438-7614-af7d-60ce0650eba6",singleName:"",pkFieldName:"",desc:"",selfKeyFieldName:"TDEV_TEST_2_ID",outerKeyFieldName:"ID",relationType:"1ToN",isSave:"true",condition:"",tableId:"e15549cb-e074-48a3-8939-44340e387f17",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableCode:"T_10871",displayText:"TDEV_TEST_5[TDEV_TEST_5](1ToN)",icon:"../../../Themes/Png16X16/table.png",listDataRecord:[{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"1",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:32",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"8be67086-3f2e-9eb7-7b9d-f5350db9de92",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"11",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:32",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"3a4f512f-5fd5-2d8f-98a0-6e8aa0178999",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"111",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:32",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"85be9cb5-48bc-ec01-6f0c-7a634934f25e",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"1111",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:32",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"8bd9b70b-7a03-5cbd-863f-bf994612647b",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"2",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:49",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"dbf46b13-3285-5891-ac50-ed783b8fbcda",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"22",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:49",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"dfeeeadc-3418-89b8-2fc3-98f9263900c4",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"222",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:49",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"005d1265-f165-34f9-dfc7-1e700ba7ffa4",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"2222",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:49",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"058e8563-adc1-7c3d-417f-783fe19dd936",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"3",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 21:00:12",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"82842a88-279e-4599-0f57-0b94c65b5a4c",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"33",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 21:00:12",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"c2b3b86b-d6c3-cb4b-b215-6db99152b56e",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"333",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 21:00:12",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"b06fc984-4548-0914-b041-e8c982151b86",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"3333",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 21:00:12",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"1a648882-ce4b-af88-5471-8846962414aa",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]}],isMain:!1}],exData:null}}},InnerFormButtonRuntime={RendererSingleInnerFormButton:function(e,t,a){var n=$('<button type="button" class="operation-button operation-button-primary" id="'+e.id+'"><span>'+e.caption+"</span></button>");return n.bind("click",{innerButtonConfig:e,formRuntimeInstance:t,listButtonPO:a},this.RendererSingleInnerFormButtonClick),n},RendererSingleInnerFormButtonClick:function(e){var t=e.data.innerButtonConfig,a=e.data.formRuntimeInstance,n=e.data.listButtonPO,i=a.SerializationFormData(),r=a._Prop_Config.OperationType;DialogUtility.AlertLoading(window,DialogUtility.DialogLoadingId,{},"系统处理中,请稍候..."),RuntimeGeneralInstance.SubmitFormDataComplexPOListToServer(i,i.recordId,t.id,n.buttonId,r,function(e){if(e.success){var t=a.GetOpenedListFormButtonId();window.OpenerWindowObj.WLDCT_ListTableContainer.TryReloadForListFormButton(t),window.setTimeout(function(){DialogUtility.CloseDialog(DialogUtility.DialogLoadingId),DialogUtility.Alert(window,DialogUtility.DialogId02,{},e.message,function(){DialogUtility.Frame_CloseDialog(window)},this)},500)}},this)}},ListRuntime={_Prop_Status:"Edit",_Prop_Config:{RendererToId:null,ListId:"",IsPreview:!1},_$RendererToElem:null,Initialization:function(e){this._Prop_Config=$.extend(!0,{},this._Prop_Config,e),this._$RendererToElem=$("#"+this._Prop_Config.RendererToId),this._LoadHTMLToEl()},_RendererChainIsCompleted:!0,_RendererDataChainIsCompleted:!0,_LoadHTMLToEl:function(){RuntimeGeneralInstance.LoadHtmlDesignContent(BaseUtility.GetRootPath()+"/Rest/Builder/RunTime/ListRuntime/LoadHTML?listId="+this._Prop_Config.ListId,this._Prop_Config.RendererTo,{},function(e){var t=this;this._$RendererToElem.append(e.data.listHtmlRuntime),this._$RendererToElem.append(e.data.listJsRuntime),"function"==typeof BuilderListPageRuntimeInstance.PageReady&&BuilderListPageRuntimeInstance.PageReady(),VirtualBodyControl.RendererChain({po:e.data,sourceHTML:e.data.listHtmlRuntime,$rootElem:this._$RendererToElem,$parentControlElem:this._$RendererToElem,$singleControlElem:this._$RendererToElem,listRuntimeInstance:this});var a=window.setInterval(function(){t._RendererChainIsCompleted&&(window.clearInterval(a),"function"==typeof BuilderListPageRuntimeInstance.RendererChainCompleted&&BuilderListPageRuntimeInstance.RendererChainCompleted())},500),n=e.data.listDatasetId;VirtualBodyControl.RendererDataChain({po:e.data,sourceHTML:e.data.listHtmlRuntime,$rootElem:this._$RendererToElem,$parentControlElem:this._$RendererToElem,$singleControlElem:this._$RendererToElem,topDataSetId:n,listRuntimeInstance:this});var i=window.setInterval(function(){t._RendererDataChainIsCompleted&&(window.clearInterval(i),"function"==typeof BuilderListPageRuntimeInstance.RendererDataChainCompleted&&BuilderListPageRuntimeInstance.RendererDataChainCompleted())},700)},this)},IsPreview:function(){return this._Prop_Config.IsPreview}},BuilderListPageRuntimeInstance={PageReady:function(){console.log("页面加载html完成1")},RendererChainCompleted:function(){console.log("客户端控件渲染完成")},RendererDataChainCompleted:function(){console.log("客户端控件渲染并绑定完数据")}},RuntimeGeneralInstance={_Ajax:function(e,t,a,n){jQuery.ajax({url:e,type:"POST",dataType:"json",data:t}).done(function(e){if(!e.success){var t=e.message;StringUtility.IsNullOrEmpty(t)&&(t=e.traceMsg),DialogUtility.AlertText(t,n)}a.call(n,e)}).always(a&&function(e,t){})},LoadHtmlDesignContent:function(e,t,a,n,i){this._Ajax(e,a,n,i)},LoadInnerFormButton:function(e,t,a,n){var i=BaseUtility.BuildAction("/Rest/Builder/RunTime/ListButtonRuntime/GetButtonPO",{buttonId:e});this._Ajax(i,t,a,n)},SubmitFormDataComplexPOListToServer:function(e,t,a,n,i,r,o){var l=BaseUtility.BuildAction("/Rest/Builder/RunTime/InnerFormButtonRuntime/ReceiveHandler",{}),s={formRecordComplexPOString:encodeURIComponent(JsonUtility.JsonToString(e)),innerFormButtonId:a,listButtonId:n,recordId:t,operationTypeName:i};this._Ajax(l,s,r,o),console.log(e)},GetDataSetData:function(e,t,a){var n=JSON.stringify(e);AjaxUtility.PostRequestBody("/Rest/Builder/RunTime/DataSetRuntime/GetDataSetData",n,function(e){t.call(a,e)},a)}},HTMLControlAttrs={JBUILD4DC_CUSTOM:"jbuild4dc_custom",SELECTED_JBUILD4DC_CUSTOM:"[jbuild4dc_custom=true]",CLIENT_RESOLVE:"client_resolve"},HTMLControl={_InstanceMap:{},_GetInstance:function _GetInstance(name){for(var key in this._InstanceMap)if(key==name)return this._InstanceMap[key];var instance=eval(name);return this._InstanceMap[name]=instance,instance},GetInstance:function(e){return this._GetInstance(e)},SaveControlNewInstanceToPool:function(e,t){return alert("改方法已经废弃,改为服务端创建初始化脚本1!"),null},_SaveControlNewInstanceToPool:function(e,t){return this._InstanceMap[e]=t,e},GetControlInstanceByElem:function(e){return this._GetInstance(this.GetControlInstanceNameByElem(e))},GetControlInstanceNameByElem:function(e){return e.attr("client_instance_name")&&0<e.attr("client_instance_name").length?e.attr("client_instance_name"):e.attr("client_resolve")},RendererChainParas:{listEntity:null,sourceHTML:null,$rootElem:null,$parentControlElem:null,$singleControlElem:null},RendererDataChainParas:{listEntity:null,sourceHTML:null,$rootElem:null,$parentControlElem:null,$singleControlElem:null,topDataSet:null},RendererChain:function(e){for(var t=e.$singleControlElem,a=0;a<t.children().length;a++){var n=$(t.children()[a]),i={};if(JsonUtility.SimpleCloneAttr(i,e),"true"==(i.$singleControlElem=n).attr(HTMLControlAttrs.JBUILD4DC_CUSTOM)&&n.attr(HTMLControlAttrs.CLIENT_RESOLVE)){var r=HTMLControl.GetControlInstanceByElem(n);"function"==typeof r.Initialize&&r.Initialize(),r.RendererChain(i)}else HTMLControl.RendererChain(i)}},RendererDataChain:function(e){for(var t=e.$singleControlElem,a=0;a<t.children().length;a++){var n=$(t.children()[a]),i={};if(JsonUtility.SimpleCloneAttr(i,e),"true"==(i.$singleControlElem=n).attr(HTMLControlAttrs.JBUILD4DC_CUSTOM)&&n.attr(HTMLControlAttrs.CLIENT_RESOLVE)){var r,o=HTMLControl.GetControlInstanceByElem(n);o.RendererDataChain(i),"function"==typeof o.SetValue&&(r=HTMLControl.TryGetFieldPOInRelationFormRecordComplexPo(n,e.relationFormRecordComplexPo),o.SetValue(n,r,e.relationFormRecordComplexPo,e)),e.callToViewStatusFunc&&"function"==typeof o.ToViewStatus&&o.ToViewStatus(n,r,e.relationFormRecordComplexPo,e)}else HTMLControl.RendererDataChain(i)}},GetValue:function(e,t,a){return t.value=e.val(),t},SetValue:function(e,t,a,n){t&&(e.val(t.value),e.attr("control_value",t.value))},ToViewStatus:function(e,t,a,n){var i=BaseUtility.GetElemAllAttr(e),r=$("<label />");if(r.attr(i),r.removeClass(),"SELECT"==e.prop("tagName")){var o=e.find("option:selected").text();r.text(o)}else r.text(e.val());e.replaceWith(r)},TryGetFieldPOInRelationFormRecordComplexPo:function(e,t){var a=HTMLControl.GetControlBindRelationId(e),n=HTMLControl.GetControlBindTableName(e),i=HTMLControl.GetControlBindFieldName(e);return a&&i?FormRelationPOUtility.FindFieldPOInRelationFormRecordComplexPoOneDataRecord(t,a,n,i):null},FindALLControls:function(e){return e?e.find("[jbuild4dc_custom='true']"):$("[jbuild4dc_custom='true']")},GetControlBindTableName:function(e){return e.attr("tablename")},GetControlBindFieldName:function(e){return e.attr("fieldname")},GetControlBindRelationId:function(e){return e.attr("relationid")},GetControlProp:function(e){var t={singleName:"",tableName:"",tableCaption:"",tableId:"",fieldTableId:"",fieldName:"",fieldDataType:"",fieldDataLength:"",defaultType:"",defaultValue:"",id:"",serialize:"",value:""};for(var a in t){var n=e.attr(StringUtility.ToLowerCase(a));StringUtility.IsNullOrEmpty(n)||(t[a]=n)}return t.fieldDataLength=e.attr("fieldlength"),t},BuildSerializationOriginalData:function(e,t,a,n){return{relationId:t,relationSingleName:a,relationType:n,singleName:e.singleName,tableName:e.tableName,tableCaption:e.tableCaption,tableId:e.tableId,fieldTableId:e.fieldTableId,fieldName:e.fieldName,fieldDataType:e.fieldDataType,fieldDataLength:e.fieldDataLength,serialize:e.serialize,id:e.id,defaultType:e.defaultType,defaultValue:e.defaultValue,value:"",success:!0,msg:""}},GetSerializationOneDataRecordFieldValue:function(e,t,a){for(var n=0;n<e.length;n++)if(e[n].tableName==t&&e[n].fieldName==a)return e[n].value;return""},TryGetFieldTransferPO:function(e,t,a,n){var i=HTMLControl.GetControlProp(e),r=HTMLControl.BuildSerializationOriginalData(i,t,a,n),o=HTMLControl.GetControlInstanceByElem(e);if(BaseUtility.IsFunction(o.GetValue)){var l=o.GetValue(e,r,{});return l.success?l:null}DialogUtility.AlertText("控件:"+e.attr("singlename")+"未包含GetValue的方法!")},GetSimpleControlValue:function(e,t){var a=$("[tableid='"+e+"'][fieldname='"+t+"']");return 0==a.length?null:a.val()}},VirtualBodyControl={RendererChain:HTMLControl.RendererChain,RendererDataChain:HTMLControl.RendererDataChain};function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(a){"function"==typeof define&&define.amd?define(["jquery"],function(e){return a(e,window,document)}):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=function(e,t){return e||(e=window),t||(t="undefined"!=typeof window?require("jquery"):require("jquery")(e)),a(t,e,e.document)}:a(jQuery,window,document)}(function(U,x,g,k){var p,_,t,e,b=function v(S){this.$=function(e,t){return this.api(!0).$(e,t)},this._=function(e,t){return this.api(!0).rows(e,t).data()},this.api=function(e){return new _(e?rt(this[p.iApiIndex]):this)},this.fnAddData=function(e,t){var a=this.api(!0),n=U.isArray(e)&&(U.isArray(e[0])||U.isPlainObject(e[0]))?a.rows.add(e):a.row.add(e);return(t===k||t)&&a.draw(),n.flatten().toArray()},this.fnAdjustColumnSizing=function(e){var t=this.api(!0).columns.adjust(),a=t.settings()[0],n=a.oScroll;e===k||e?t.draw(!1):""===n.sX&&""===n.sY||$e(a)},this.fnClearTable=function(e){var t=this.api(!0).clear();(e===k||e)&&t.draw()},this.fnClose=function(e){this.api(!0).row(e).child.hide()},this.fnDeleteRow=function(e,t,a){var n=this.api(!0),i=n.rows(e),r=i.settings()[0],o=r.aoData[i[0][0]];return i.remove(),t&&t.call(this,r,o),(a===k||a)&&n.draw(),o},this.fnDestroy=function(e){this.api(!0).destroy(e)},this.fnDraw=function(e){this.api(!0).draw(e)},this.fnFilter=function(e,t,a,n,i,r){var o=this.api(!0);null===t||t===k?o.search(e,a,n,r):o.column(t).search(e,a,n,r),o.draw()},this.fnGetData=function(e,t){var a=this.api(!0);if(e===k)return a.data().toArray();var n=e.nodeName?e.nodeName.toLowerCase():"";return t!==k||"td"==n||"th"==n?a.cell(e,t).data():a.row(e).data()||null},this.fnGetNodes=function(e){var t=this.api(!0);return e!==k?t.row(e).node():t.rows().nodes().flatten().toArray()},this.fnGetPosition=function(e){var t=this.api(!0),a=e.nodeName.toUpperCase();if("TR"==a)return t.row(e).index();if("TD"!=a&&"TH"!=a)return null;var n=t.cell(e).index();return[n.row,n.columnVisible,n.column]},this.fnIsOpen=function(e){return this.api(!0).row(e).child.isShown()},this.fnOpen=function(e,t,a){return this.api(!0).row(e).child(t,a).show().child()[0]},this.fnPageChange=function(e,t){var a=this.api(!0).page(e);(t===k||t)&&a.draw(!1)},this.fnSetColumnVis=function(e,t,a){var n=this.api(!0).column(e).visible(t);(a===k||a)&&n.columns.adjust().draw()},this.fnSettings=function(){return rt(this[p.iApiIndex])},this.fnSort=function(e){this.api(!0).order(e).draw()},this.fnSortListener=function(e,t,a){this.api(!0).order.listener(e,t,a)},this.fnUpdate=function(e,t,a,n,i){var r=this.api(!0);return a===k||null===a?r.row(t).data(e):r.cell(t,a).data(e),(i===k||i)&&r.columns.adjust(),(n===k||n)&&r.draw(),0},this.fnVersionCheck=p.fnVersionCheck;var I=this,w=S===k,R=this.length;for(var e in w&&(S={}),this.oApi=this.internal=p.internal,v.ext.internal)e&&(this[e]=Bt(e));return this.each(function(){var r,o=1<R?st({},S,!0):S,l=0,e=this.getAttribute("id"),s=!1,t=v.defaults,d=U(this);if("table"==this.nodeName.toLowerCase()){L(t),N(t.column),F(t,t,!0),F(t.column,t.column,!0),F(t,U.extend(o,d.data()));var a=v.settings;for(l=0,r=a.length;l<r;l++){var n=a[l];if(n.nTable==this||n.nTHead&&n.nTHead.parentNode==this||n.nTFoot&&n.nTFoot.parentNode==this){var i=o.bRetrieve!==k?o.bRetrieve:t.bRetrieve,u=o.bDestroy!==k?o.bDestroy:t.bDestroy;if(w||i)return n.oInstance;if(u){n.oInstance.fnDestroy();break}return void ot(n,0,"Cannot reinitialise DataTable",3)}if(n.sTableId==this.id){a.splice(l,1);break}}null!==e&&""!==e||(e="DataTables_Table_"+v.ext._unique++,this.id=e);var c=U.extend(!0,{},v.models.oSettings,{sDestroyWidth:d[0].style.width,sInstance:e,sTableId:e});c.nTable=this,c.oApi=I.internal,c.oInit=o,a.push(c),c.oInstance=1===I.length?I:d.dataTable(),L(o),E(o.oLanguage),o.aLengthMenu&&!o.iDisplayLength&&(o.iDisplayLength=U.isArray(o.aLengthMenu[0])?o.aLengthMenu[0][0]:o.aLengthMenu[0]),o=st(U.extend(!0,{},t),o),lt(c.oFeatures,o,["bPaginate","bLengthChange","bFilter","bSort","bSortMulti","bInfo","bProcessing","bAutoWidth","bSortClasses","bServerSide","bDeferRender"]),lt(c,o,["asStripeClasses","ajax","fnServerData","fnFormatNumber","sServerMethod","aaSorting","aaSortingFixed","aLengthMenu","sPaginationType","sAjaxSource","sAjaxDataProp","iStateDuration","sDom","bSortCellsTop","iTabIndex","fnStateLoadCallback","fnStateSaveCallback","renderer","searchDelay","rowId",["iCookieDuration","iStateDuration"],["oSearch","oPreviousSearch"],["aoSearchCols","aoPreSearchCols"],["iDisplayLength","_iDisplayLength"]]),lt(c.oScroll,o,[["sScrollX","sX"],["sScrollXInner","sXInner"],["sScrollY","sY"],["bScrollCollapse","bCollapse"]]),lt(c.oLanguage,o,"fnInfoCallback"),ut(c,"aoDrawCallback",o.fnDrawCallback,"user"),ut(c,"aoServerParams",o.fnServerParams,"user"),ut(c,"aoStateSaveParams",o.fnStateSaveParams,"user"),ut(c,"aoStateLoadParams",o.fnStateLoadParams,"user"),ut(c,"aoStateLoaded",o.fnStateLoaded,"user"),ut(c,"aoRowCallback",o.fnRowCallback,"user"),ut(c,"aoRowCreatedCallback",o.fnCreatedRow,"user"),ut(c,"aoHeaderCallback",o.fnHeaderCallback,"user"),ut(c,"aoFooterCallback",o.fnFooterCallback,"user"),ut(c,"aoInitComplete",o.fnInitComplete,"user"),ut(c,"aoPreDrawCallback",o.fnPreDrawCallback,"user"),c.rowIdFn=X(o.rowId),P(c);var f=c.oClasses;if(U.extend(f,v.ext.classes,o.oClasses),d.addClass(f.sTable),c.iInitDisplayStart===k&&(c.iInitDisplayStart=o.iDisplayStart,c._iDisplayStart=o.iDisplayStart),null!==o.iDeferLoading){c.bDeferLoading=!0;var h=U.isArray(o.iDeferLoading);c._iRecordsDisplay=h?o.iDeferLoading[0]:o.iDeferLoading,c._iRecordsTotal=h?o.iDeferLoading[1]:o.iDeferLoading}var p=c.oLanguage;U.extend(!0,p,o.oLanguage),p.sUrl&&(U.ajax({dataType:"json",url:p.sUrl,success:function(e){E(e),F(t.oLanguage,e),U.extend(!0,p,e),Ne(c)},error:function(){Ne(c)}}),s=!0),null===o.asStripeClasses&&(c.asStripeClasses=[f.sStripeOdd,f.sStripeEven]);var m=c.asStripeClasses,T=d.children("tbody").find("tr").eq(0);-1!==U.inArray(!0,U.map(m,function(e,t){return T.hasClass(e)}))&&(U("tbody tr",this).removeClass(m.join(" ")),c.asDestroyStripes=m.slice());var g,_=[],b=this.getElementsByTagName("thead");if(0!==b.length&&(ue(c.aoHeader,b[0]),_=ce(c)),null===o.aoColumns)for(g=[],l=0,r=_.length;l<r;l++)g.push(null);else g=o.aoColumns;for(l=0,r=g.length;l<r;l++)B(c,_?_[l]:null);if(H(c,o.aoColumnDefs,g,function(e,t){A(c,e,t)}),T.length){var D=function(e,t){return null!==e.getAttribute("data-"+t)?t:null};U(T[0]).children("th, td").each(function(e,t){var a=c.aoColumns[e];if(a.mData===e){var n=D(t,"sort")||D(t,"order"),i=D(t,"filter")||D(t,"search");null===n&&null===i||(a.mData={_:e+".display",sort:null!==n?e+".@data-"+n:k,type:null!==n?e+".@data-"+n:k,filter:null!==i?e+".@data-"+i:k},A(c,e))}})}var C=c.oFeatures,y=function(){if(o.aaSorting===k){var e=c.aaSorting;for(l=0,r=e.length;l<r;l++)e[l][1]=c.aoColumns[l].asSorting[0]}tt(c),C.bSort&&ut(c,"aoDrawCallback",function(){if(c.bSorted){var e=Xe(c),a={};U.each(e,function(e,t){a[t.src]=t.dir}),ct(c,null,"order",[c,e,a]),Qe(c)}}),ut(c,"aoDrawCallback",function(){(c.bSorted||"ssp"===pt(c)||C.bDeferRender)&&tt(c)},"sc");var t=d.children("caption").each(function(){this._captionSide=U(this).css("caption-side")}),a=d.children("thead");0===a.length&&(a=U("<thead/>").appendTo(d)),c.nTHead=a[0];var n=d.children("tbody");0===n.length&&(n=U("<tbody/>").appendTo(d)),c.nTBody=n[0];var i=d.children("tfoot");if(0===i.length&&0<t.length&&(""!==c.oScroll.sX||""!==c.oScroll.sY)&&(i=U("<tfoot/>").appendTo(d)),0===i.length||0===i.children().length?d.addClass(f.sNoFooter):0<i.length&&(c.nTFoot=i[0],ue(c.aoFooter,c.nTFoot)),o.aaData)for(l=0;l<o.aaData.length;l++)M(c,o.aaData[l]);else(c.bDeferLoading||"dom"==pt(c))&&W(c,U(c.nTBody).children("tr"));c.aiDisplay=c.aiDisplayMaster.slice(),!(c.bInitialised=!0)===s&&Ne(c)};o.bStateSave?(C.bStateSave=!0,ut(c,"aoDrawCallback",nt,"state_save"),it(c,o,y)):y()}else ot(null,0,"Non-table node initialisation ("+this.nodeName+")",2)}),I=null,this},a={},n=/[\r\n]/g,i=/<.*?>/g,r=/^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/,o=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^","-"].join("|\\")+")","g"),l=/[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi,s=function(e){return!e||!0===e||"-"===e},h=function(e){var t=parseInt(e,10);return!isNaN(t)&&isFinite(e)?t:null},d=function(e,t){return a[t]||(a[t]=new RegExp(ve(t),"g")),"string"==typeof e&&"."!==t?e.replace(/\./g,"").replace(a[t],"."):e},u=function(e,t,a){var n="string"==typeof e;return!!s(e)||(t&&n&&(e=d(e,t)),a&&n&&(e=e.replace(l,"")),!isNaN(parseFloat(e))&&isFinite(e))},c=function(e,t,a){return!!s(e)||((s(n=e)||"string"==typeof n)&&!!u(f(e),t,a)||null);var n},G=function(e,t,a){var n=[],i=0,r=e.length;if(a!==k)for(;i<r;i++)e[i]&&e[i][t]&&n.push(e[i][t][a]);else for(;i<r;i++)e[i]&&n.push(e[i][t]);return n},D=function(e,t,a,n){var i=[],r=0,o=t.length;if(n!==k)for(;r<o;r++)e[t[r]][a]&&i.push(e[t[r]][a][n]);else for(;r<o;r++)i.push(e[t[r]][a]);return i},m=function(e,t){var a,n=[];t===k?(t=0,a=e):(a=t,t=e);for(var i=t;i<a;i++)n.push(i);return n},C=function(e){for(var t=[],a=0,n=e.length;a<n;a++)e[a]&&t.push(e[a]);return t},f=function(e){return e.replace(i,"")},T=function(e){if(function(e){if(e.length<2)return!0;for(var t=e.slice().sort(),a=t[0],n=1,i=t.length;n<i;n++){if(t[n]===a)return!1;a=t[n]}return!0}(e))return e.slice();var t,a,n,i=[],r=e.length,o=0;e:for(a=0;a<r;a++){for(t=e[a],n=0;n<o;n++)if(i[n]===t)continue e;i.push(t),o++}return i};function y(a){var n,i,r={};U.each(a,function(e,t){(n=e.match(/^([^A-Z]+?)([A-Z])/))&&-1!=="a aa ai ao as b fn i m o s ".indexOf(n[1]+" ")&&(i=e.replace(n[0],n[2].toLowerCase()),r[i]=e,"o"===n[1]&&y(a[e]))}),a._hungarianMap=r}function F(a,n,i){var r;a._hungarianMap||y(a),U.each(n,function(e,t){(r=a._hungarianMap[e])===k||!i&&n[r]!==k||("o"===r.charAt(0)?(n[r]||(n[r]={}),U.extend(!0,n[r],n[e]),F(a[r],n[r],i)):n[r]=n[e])})}function E(e){var t=b.defaults.oLanguage,a=t.sDecimal;if(a&&Nt(a),e){var n=e.sZeroRecords;!e.sEmptyTable&&n&&"No data available in table"===t.sEmptyTable&&lt(e,e,"sZeroRecords","sEmptyTable"),!e.sLoadingRecords&&n&&"Loading..."===t.sLoadingRecords&&lt(e,e,"sZeroRecords","sLoadingRecords"),e.sInfoThousands&&(e.sThousands=e.sInfoThousands);var i=e.sDecimal;i&&a!==i&&Nt(i)}}b.util={throttle:function(n,e){var i,r,o=e!==k?e:200;return function(){var e=this,t=+new Date,a=arguments;i&&t<i+o?(clearTimeout(r),r=setTimeout(function(){i=k,n.apply(e,a)},o)):(i=t,n.apply(e,a))}},escapeRegex:function(e){return e.replace(o,"\\$1")}};var v=function(e,t,a){e[t]!==k&&(e[a]=e[t])};function L(e){v(e,"ordering","bSort"),v(e,"orderMulti","bSortMulti"),v(e,"orderClasses","bSortClasses"),v(e,"orderCellsTop","bSortCellsTop"),v(e,"order","aaSorting"),v(e,"orderFixed","aaSortingFixed"),v(e,"paging","bPaginate"),v(e,"pagingType","sPaginationType"),v(e,"pageLength","iDisplayLength"),v(e,"searching","bFilter"),"boolean"==typeof e.sScrollX&&(e.sScrollX=e.sScrollX?"100%":""),"boolean"==typeof e.scrollX&&(e.scrollX=e.scrollX?"100%":"");var t=e.aoSearchCols;if(t)for(var a=0,n=t.length;a<n;a++)t[a]&&F(b.models.oSearch,t[a])}function N(e){v(e,"orderable","bSortable"),v(e,"orderData","aDataSort"),v(e,"orderSequence","asSorting"),v(e,"orderDataType","sortDataType");var t=e.aDataSort;"number"!=typeof t||U.isArray(t)||(e.aDataSort=[t])}function P(e){if(!b.__browser){var t={};b.__browser=t;var a=U("<div/>").css({position:"fixed",top:0,left:-1*U(x).scrollLeft(),height:1,width:1,overflow:"hidden"}).append(U("<div/>").css({position:"absolute",top:1,left:1,width:100,overflow:"scroll"}).append(U("<div/>").css({width:"100%",height:10}))).appendTo("body"),n=a.children(),i=n.children();t.barWidth=n[0].offsetWidth-n[0].clientWidth,t.bScrollOversize=100===i[0].offsetWidth&&100!==n[0].clientWidth,t.bScrollbarLeft=1!==Math.round(i.offset().left),t.bBounding=!!a[0].getBoundingClientRect().width,a.remove()}U.extend(e.oBrowser,b.__browser),e.oScroll.iBarWidth=b.__browser.barWidth}function S(e,t,a,n,i,r){var o,l=n,s=!1;for(a!==k&&(o=a,s=!0);l!==i;)e.hasOwnProperty(l)&&(o=s?t(o,e[l],l,e):e[l],s=!0,l+=r);return o}function B(e,t){var a=b.defaults.column,n=e.aoColumns.length,i=U.extend({},b.models.oColumn,a,{nTh:t||g.createElement("th"),sTitle:a.sTitle?a.sTitle:t?t.innerHTML:"",aDataSort:a.aDataSort?a.aDataSort:[n],mData:a.mData?a.mData:n,idx:n});e.aoColumns.push(i);var r=e.aoPreSearchCols;r[n]=U.extend({},b.models.oSearch,r[n]),A(e,n,U(t).data())}function A(e,t,a){var n=e.aoColumns[t],i=e.oClasses,r=U(n.nTh);if(!n.sWidthOrig){n.sWidthOrig=r.attr("width")||null;var o=(r.attr("style")||"").match(/width:\s*(\d+[pxem%]+)/);o&&(n.sWidthOrig=o[1])}a!==k&&null!==a&&(N(a),F(b.defaults.column,a),a.mDataProp===k||a.mData||(a.mData=a.mDataProp),a.sType&&(n._sManualType=a.sType),a.className&&!a.sClass&&(a.sClass=a.className),a.sClass&&r.addClass(a.sClass),U.extend(n,a),lt(n,a,"sWidth","sWidthOrig"),a.iDataSort!==k&&(n.aDataSort=[a.iDataSort]),lt(n,a,"aDataSort"));var l=n.mData,s=X(l),d=n.mRender?X(n.mRender):null,u=function(e){return"string"==typeof e&&-1!==e.indexOf("@")};n._bAttrSrc=U.isPlainObject(l)&&(u(l.sort)||u(l.type)||u(l.filter)),n._setter=null,n.fnGetData=function(e,t,a){var n=s(e,t,k,a);return d&&t?d(n,t,e,a):n},n.fnSetData=function(e,t,a){return K(l)(e,t,a)},"number"!=typeof l&&(e._rowReadObject=!0),e.oFeatures.bSort||(n.bSortable=!1,r.addClass(i.sSortableNone));var c=-1!==U.inArray("asc",n.asSorting),f=-1!==U.inArray("desc",n.asSorting);n.bSortable&&(c||f)?n.sSortingClassJUI=c&&!f?(n.sSortingClass=i.sSortableAsc,i.sSortJUIAscAllowed):!c&&f?(n.sSortingClass=i.sSortableDesc,i.sSortJUIDescAllowed):(n.sSortingClass=i.sSortable,i.sSortJUI):(n.sSortingClass=i.sSortableNone,n.sSortingClassJUI="")}function j(e){if(!1!==e.oFeatures.bAutoWidth){var t=e.aoColumns;Ge(e);for(var a=0,n=t.length;a<n;a++)t[a].nTh.style.width=t[a].sWidth}var i=e.oScroll;""===i.sY&&""===i.sX||$e(e),ct(e,null,"column-sizing",[e])}function z(e,t){var a=V(e,"bVisible");return"number"==typeof a[t]?a[t]:null}function I(e,t){var a=V(e,"bVisible"),n=U.inArray(t,a);return-1!==n?n:null}function O(e){var a=0;return U.each(e.aoColumns,function(e,t){t.bVisible&&"none"!==U(t.nTh).css("display")&&a++}),a}function V(e,a){var n=[];return U.map(e.aoColumns,function(e,t){e[a]&&n.push(t)}),n}function w(e){var t,a,n,i,r,o,l,s,d,u=e.aoColumns,c=e.aoData,f=b.ext.type.detect;for(t=0,a=u.length;t<a;t++)if(d=[],!(l=u[t]).sType&&l._sManualType)l.sType=l._sManualType;else if(!l.sType){for(n=0,i=f.length;n<i;n++){for(r=0,o=c.length;r<o&&(d[r]===k&&(d[r]=R(e,r,t,"type")),(s=f[n](d[r],e))||n===f.length-1)&&"html"!==s;r++);if(s){l.sType=s;break}}l.sType||(l.sType="string")}}function H(e,t,a,n){var i,r,o,l,s,d,u,c=e.aoColumns;if(t)for(i=t.length-1;0<=i;i--){var f=(u=t[i]).targets!==k?u.targets:u.aTargets;for(U.isArray(f)||(f=[f]),o=0,l=f.length;o<l;o++)if("number"==typeof f[o]&&0<=f[o]){for(;c.length<=f[o];)B(e);n(f[o],u)}else if("number"==typeof f[o]&&f[o]<0)n(c.length+f[o],u);else if("string"==typeof f[o])for(s=0,d=c.length;s<d;s++)("_all"==f[o]||U(c[s].nTh).hasClass(f[o]))&&n(s,u)}if(a)for(i=0,r=a.length;i<r;i++)n(i,a[i])}function M(e,t,a,n){var i=e.aoData.length,r=U.extend(!0,{},b.models.oRow,{src:a?"dom":"data",idx:i});r._aData=t,e.aoData.push(r);for(var o=e.aoColumns,l=0,s=o.length;l<s;l++)o[l].sType=null;e.aiDisplayMaster.push(i);var d=e.rowIdFn(t);return d!==k&&(e.aIds[d]=r),!a&&e.oFeatures.bDeferRender||ne(e,i,a,n),i}function W(a,e){var n;return e instanceof U||(e=U(e)),e.map(function(e,t){return n=ae(a,t),M(a,n.data,t,n.cells)})}function R(e,t,a,n){var i=e.iDraw,r=e.aoColumns[a],o=e.aoData[t]._aData,l=r.sDefaultContent,s=r.fnGetData(o,n,{settings:e,row:t,col:a});if(s===k)return e.iDrawError!=i&&null===l&&(ot(e,0,"Requested unknown parameter "+("function"==typeof r.mData?"{function}":"'"+r.mData+"'")+" for row "+t+", column "+a,4),e.iDrawError=i),l;if(s!==o&&null!==s||null===l||n===k){if("function"==typeof s)return s.call(o)}else s=l;return null===s&&"display"==n?"":s}function $(e,t,a,n){var i=e.aoColumns[a],r=e.aoData[t]._aData;i.fnSetData(r,n,{settings:e,row:t,col:a})}var Y=/\[.*?\]$/,J=/\(\)$/;function q(e){return U.map(e.match(/(\\.|[^\.])+/g)||[""],function(e){return e.replace(/\\\./g,".")})}function X(i){if(U.isPlainObject(i)){var r={};return U.each(i,function(e,t){t&&(r[e]=X(t))}),function(e,t,a,n){var i=r[t]||r._;return i!==k?i(e,t,a,n):e}}if(null===i)return function(e){return e};if("function"==typeof i)return function(e,t,a,n){return i(e,t,a,n)};if("string"!=typeof i||-1===i.indexOf(".")&&-1===i.indexOf("[")&&-1===i.indexOf("("))return function(e,t){return e[i]};return function(e,t){return function e(t,a,n){var i,r,o,l;if(""!==n)for(var s=q(n),d=0,u=s.length;d<u;d++){if(i=s[d].match(Y),r=s[d].match(J),i){if(s[d]=s[d].replace(Y,""),""!==s[d]&&(t=t[s[d]]),o=[],s.splice(0,d+1),l=s.join("."),U.isArray(t))for(var c=0,f=t.length;c<f;c++)o.push(e(t[c],a,l));var h=i[0].substring(1,i[0].length-1);t=""===h?o:o.join(h);break}if(r)s[d]=s[d].replace(J,""),t=t[s[d]]();else{if(null===t||t[s[d]]===k)return k;t=t[s[d]]}}return t}(e,t,i)}}function K(n){if(U.isPlainObject(n))return K(n._);if(null===n)return function(){};if("function"==typeof n)return function(e,t,a){n(e,"set",t,a)};if("string"!=typeof n||-1===n.indexOf(".")&&-1===n.indexOf("[")&&-1===n.indexOf("("))return function(e,t){e[n]=t};return function(e,t){return function e(t,a,n){for(var i,r,o,l,s,d=q(n),u=d[d.length-1],c=0,f=d.length-1;c<f;c++){if(r=d[c].match(Y),o=d[c].match(J),r){if(d[c]=d[c].replace(Y,""),t[d[c]]=[],(i=d.slice()).splice(0,c+1),s=i.join("."),U.isArray(a))for(var h=0,p=a.length;h<p;h++)e(l={},a[h],s),t[d[c]].push(l);else t[d[c]]=a;return}o&&(d[c]=d[c].replace(J,""),t=t[d[c]](a)),null!==t[d[c]]&&t[d[c]]!==k||(t[d[c]]={}),t=t[d[c]]}u.match(J)?t=t[u.replace(J,"")](a):t[u.replace(Y,"")]=a}(e,t,n)}}function Q(e){return G(e.aoData,"_aData")}function Z(e){e.aoData.length=0,e.aiDisplayMaster.length=0,e.aiDisplay.length=0,e.aIds={}}function ee(e,t,a){for(var n=-1,i=0,r=e.length;i<r;i++)e[i]==t?n=i:e[i]>t&&e[i]--;-1!=n&&a===k&&e.splice(n,1)}function te(a,n,e,t){var i,r,o=a.aoData[n],l=function(e,t){for(;e.childNodes.length;)e.removeChild(e.firstChild);e.innerHTML=R(a,n,t,"display")};if("dom"!==e&&(e&&"auto"!==e||"dom"!==o.src)){var s=o.anCells;if(s)if(t!==k)l(s[t],t);else for(i=0,r=s.length;i<r;i++)l(s[i],i)}else o._aData=ae(a,o,t,t===k?k:o._aData).data;o._aSortData=null,o._aFilterData=null;var d=a.aoColumns;if(t!==k)d[t].sType=null;else{for(i=0,r=d.length;i<r;i++)d[i].sType=null;ie(a,o)}}function ae(e,t,a,i){var n,r,o,l=[],s=t.firstChild,d=0,u=e.aoColumns,c=e._rowReadObject;i=i!==k?i:c?{}:[];var f=function(e,t){if("string"==typeof e){var a=e.indexOf("@");if(-1!==a){var n=e.substring(a+1);K(e)(i,t.getAttribute(n))}}},h=function(e){a!==k&&a!==d||(r=u[d],o=U.trim(e.innerHTML),r&&r._bAttrSrc?(K(r.mData._)(i,o),f(r.mData.sort,e),f(r.mData.type,e),f(r.mData.filter,e)):c?(r._setter||(r._setter=K(r.mData)),r._setter(i,o)):i[d]=o);d++};if(s)for(;s;)"TD"!=(n=s.nodeName.toUpperCase())&&"TH"!=n||(h(s),l.push(s)),s=s.nextSibling;else for(var p=0,m=(l=t.anCells).length;p<m;p++)h(l[p]);var T=t.firstChild?t:t.nTr;if(T){var g=T.getAttribute("id");g&&K(e.rowId)(i,g)}return{data:i,cells:l}}function ne(e,t,a,n){var i,r,o,l,s,d=e.aoData[t],u=d._aData,c=[];if(null===d.nTr){for(i=a||g.createElement("tr"),d.nTr=i,d.anCells=c,i._DT_RowIndex=t,ie(e,d),l=0,s=e.aoColumns.length;l<s;l++)o=e.aoColumns[l],(r=a?n[l]:g.createElement(o.sCellType))._DT_CellIndex={row:t,column:l},c.push(r),a&&!o.mRender&&o.mData===l||U.isPlainObject(o.mData)&&o.mData._===l+".display"||(r.innerHTML=R(e,t,l,"display")),o.sClass&&(r.className+=" "+o.sClass),o.bVisible&&!a?i.appendChild(r):!o.bVisible&&a&&r.parentNode.removeChild(r),o.fnCreatedCell&&o.fnCreatedCell.call(e.oInstance,r,R(e,t,l),u,t,l);ct(e,"aoRowCreatedCallback",null,[i,u,t,c])}d.nTr.setAttribute("role","row")}function ie(e,t){var a=t.nTr,n=t._aData;if(a){var i=e.rowIdFn(n);if(i&&(a.id=i),n.DT_RowClass){var r=n.DT_RowClass.split(" ");t.__rowc=t.__rowc?T(t.__rowc.concat(r)):r,U(a).removeClass(t.__rowc.join(" ")).addClass(n.DT_RowClass)}n.DT_RowAttr&&U(a).attr(n.DT_RowAttr),n.DT_RowData&&U(a).data(n.DT_RowData)}}function re(e){var t,a,n,i,r,o=e.nTHead,l=e.nTFoot,s=0===U("th, td",o).length,d=e.oClasses,u=e.aoColumns;for(s&&(i=U("<tr/>").appendTo(o)),t=0,a=u.length;t<a;t++)r=u[t],n=U(r.nTh).addClass(r.sClass),s&&n.appendTo(i),e.oFeatures.bSort&&(n.addClass(r.sSortingClass),!1!==r.bSortable&&(n.attr("tabindex",e.iTabIndex).attr("aria-controls",e.sTableId),et(e,r.nTh,t))),r.sTitle!=n[0].innerHTML&&n.html(r.sTitle),ht(e,"header")(e,n,r,d);if(s&&ue(e.aoHeader,o),U(o).find(">tr").attr("role","row"),U(o).find(">tr>th, >tr>td").addClass(d.sHeaderTH),U(l).find(">tr>th, >tr>td").addClass(d.sFooterTH),null!==l){var c=e.aoFooter[0];for(t=0,a=c.length;t<a;t++)(r=u[t]).nTf=c[t].cell,r.sClass&&U(r.nTf).addClass(r.sClass)}}function oe(e,t,a){var n,i,r,o,l,s,d,u,c,f=[],h=[],p=e.aoColumns.length;if(t){for(a===k&&(a=!1),n=0,i=t.length;n<i;n++){for(f[n]=t[n].slice(),f[n].nTr=t[n].nTr,r=p-1;0<=r;r--)e.aoColumns[r].bVisible||a||f[n].splice(r,1);h.push([])}for(n=0,i=f.length;n<i;n++){if(d=f[n].nTr)for(;s=d.firstChild;)d.removeChild(s);for(r=0,o=f[n].length;r<o;r++)if(c=u=1,h[n][r]===k){for(d.appendChild(f[n][r].cell),h[n][r]=1;f[n+u]!==k&&f[n][r].cell==f[n+u][r].cell;)h[n+u][r]=1,u++;for(;f[n][r+c]!==k&&f[n][r].cell==f[n][r+c].cell;){for(l=0;l<u;l++)h[n+l][r+c]=1;c++}U(f[n][r].cell).attr("rowspan",u).attr("colspan",c)}}}}function le(e){var t=ct(e,"aoPreDrawCallback","preDraw",[e]);if(-1===U.inArray(!1,t)){var a=[],n=0,i=e.asStripeClasses,r=i.length,o=(e.aoOpenRows.length,e.oLanguage),l=e.iInitDisplayStart,s="ssp"==pt(e),d=e.aiDisplay;e.bDrawing=!0,l!==k&&-1!==l&&(e._iDisplayStart=s?l:l>=e.fnRecordsDisplay()?0:l,e.iInitDisplayStart=-1);var u=e._iDisplayStart,c=e.fnDisplayEnd();if(e.bDeferLoading)e.bDeferLoading=!1,e.iDraw++,Me(e,!1);else if(s){if(!e.bDestroying&&!he(e))return}else e.iDraw++;if(0!==d.length)for(var f=s?0:u,h=s?e.aoData.length:c,p=f;p<h;p++){var m=d[p],T=e.aoData[m];null===T.nTr&&ne(e,m);var g=T.nTr;if(0!==r){var _=i[n%r];T._sRowStripe!=_&&(U(g).removeClass(T._sRowStripe).addClass(_),T._sRowStripe=_)}ct(e,"aoRowCallback",null,[g,T._aData,n,p,m]),a.push(g),n++}else{var b=o.sZeroRecords;1==e.iDraw&&"ajax"==pt(e)?b=o.sLoadingRecords:o.sEmptyTable&&0===e.fnRecordsTotal()&&(b=o.sEmptyTable),a[0]=U("<tr/>",{class:r?i[0]:""}).append(U("<td />",{valign:"top",colSpan:O(e),class:e.oClasses.sRowEmpty}).html(b))[0]}ct(e,"aoHeaderCallback","header",[U(e.nTHead).children("tr")[0],Q(e),u,c,d]),ct(e,"aoFooterCallback","footer",[U(e.nTFoot).children("tr")[0],Q(e),u,c,d]);var D=U(e.nTBody);D.children().detach(),D.append(U(a)),ct(e,"aoDrawCallback","draw",[e]),e.bSorted=!1,e.bFiltered=!1,e.bDrawing=!1}else Me(e,!1)}function se(e,t){var a=e.oFeatures,n=a.bSort,i=a.bFilter;n&&Ke(e),i?_e(e,e.oPreviousSearch):e.aiDisplay=e.aiDisplayMaster.slice(),!0!==t&&(e._iDisplayStart=0),e._drawHold=t,le(e),e._drawHold=!1}function de(e){var t=e.oClasses,a=U(e.nTable),n=U("<div/>").insertBefore(a),i=e.oFeatures,r=U("<div/>",{id:e.sTableId+"_wrapper",class:t.sWrapper+(e.nTFoot?"":" "+t.sNoFooter)});e.nHolding=n[0],e.nTableWrapper=r[0],e.nTableReinsertBefore=e.nTable.nextSibling;for(var o,l,s,d,u,c,f=e.sDom.split(""),h=0;h<f.length;h++){if(o=null,"<"==(l=f[h])){if(s=U("<div/>")[0],"'"==(d=f[h+1])||'"'==d){for(u="",c=2;f[h+c]!=d;)u+=f[h+c],c++;if("H"==u?u=t.sJUIHeader:"F"==u&&(u=t.sJUIFooter),-1!=u.indexOf(".")){var p=u.split(".");s.id=p[0].substr(1,p[0].length-1),s.className=p[1]}else"#"==u.charAt(0)?s.id=u.substr(1,u.length-1):s.className=u;h+=c}r.append(s),r=U(s)}else if(">"==l)r=r.parent();else if("l"==l&&i.bPaginate&&i.bLengthChange)o=Ae(e);else if("f"==l&&i.bFilter)o=ge(e);else if("r"==l&&i.bProcessing)o=He(e);else if("t"==l)o=We(e);else if("i"==l&&i.bInfo)o=Fe(e);else if("p"==l&&i.bPaginate)o=Oe(e);else if(0!==b.ext.feature.length)for(var m=b.ext.feature,T=0,g=m.length;T<g;T++)if(l==m[T].cFeature){o=m[T].fnInit(e);break}if(o){var _=e.aanFeatures;_[l]||(_[l]=[]),_[l].push(o),r.append(o)}}n.replaceWith(r),e.nHolding=null}function ue(e,t){var a,n,i,r,o,l,s,d,u,c,f=U(t).children("tr"),h=function(e,t,a){for(var n=e[t];n[a];)a++;return a};for(e.splice(0,e.length),i=0,l=f.length;i<l;i++)e.push([]);for(i=0,l=f.length;i<l;i++)for(0,n=(a=f[i]).firstChild;n;){if("TD"==n.nodeName.toUpperCase()||"TH"==n.nodeName.toUpperCase())for(d=(d=1*n.getAttribute("colspan"))&&0!==d&&1!==d?d:1,u=(u=1*n.getAttribute("rowspan"))&&0!==u&&1!==u?u:1,s=h(e,i,0),c=1===d,o=0;o<d;o++)for(r=0;r<u;r++)e[i+r][s+o]={cell:n,unique:c},e[i+r].nTr=a;n=n.nextSibling}}function ce(e,t,a){var n=[];a||(a=e.aoHeader,t&&ue(a=[],t));for(var i=0,r=a.length;i<r;i++)for(var o=0,l=a[i].length;o<l;o++)!a[i][o].unique||n[o]&&e.bSortCellsTop||(n[o]=a[i][o].cell);return n}function fe(i,e,t){if(ct(i,"aoServerParams","serverParams",[e]),e&&U.isArray(e)){var r={},o=/(.*?)\[\]$/;U.each(e,function(e,t){var a=t.name.match(o);if(a){var n=a[0];r[n]||(r[n]=[]),r[n].push(t.value)}else r[t.name]=t.value}),e=r}var a,n=i.ajax,l=i.oInstance,s=function(e){ct(i,null,"xhr",[i,e,i.jqXHR]),t(e)};if(U.isPlainObject(n)&&n.data){var d="function"==typeof(a=n.data)?a(e,i):a;e="function"==typeof a&&d?d:U.extend(!0,e,d),delete n.data}var u={data:e,success:function(e){var t=e.error||e.sError;t&&ot(i,0,t),i.json=e,s(e)},dataType:"json",cache:!1,type:i.sServerMethod,error:function(e,t,a){var n=ct(i,null,"xhr",[i,null,i.jqXHR]);-1===U.inArray(!0,n)&&("parsererror"==t?ot(i,0,"Invalid JSON response",1):4===e.readyState&&ot(i,0,"Ajax error",7)),Me(i,!1)}};i.oAjaxData=e,ct(i,null,"preXhr",[i,e]),i.fnServerData?i.fnServerData.call(l,i.sAjaxSource,U.map(e,function(e,t){return{name:t,value:e}}),s,i):i.sAjaxSource||"string"==typeof n?i.jqXHR=U.ajax(U.extend(u,{url:n||i.sAjaxSource})):"function"==typeof n?i.jqXHR=n.call(l,e,s,i):(i.jqXHR=U.ajax(U.extend(u,n)),n.data=a)}function he(t){return!t.bAjaxDataGet||(t.iDraw++,Me(t,!0),fe(t,pe(t),function(e){me(t,e)}),!1)}function pe(e){var t,a,n,i,r=e.aoColumns,o=r.length,l=e.oFeatures,s=e.oPreviousSearch,d=e.aoPreSearchCols,u=[],c=Xe(e),f=e._iDisplayStart,h=!1!==l.bPaginate?e._iDisplayLength:-1,p=function(e,t){u.push({name:e,value:t})};p("sEcho",e.iDraw),p("iColumns",o),p("sColumns",G(r,"sName").join(",")),p("iDisplayStart",f),p("iDisplayLength",h);var m={draw:e.iDraw,columns:[],order:[],start:f,length:h,search:{value:s.sSearch,regex:s.bRegex}};for(t=0;t<o;t++)n=r[t],i=d[t],a="function"==typeof n.mData?"function":n.mData,m.columns.push({data:a,name:n.sName,searchable:n.bSearchable,orderable:n.bSortable,search:{value:i.sSearch,regex:i.bRegex}}),p("mDataProp_"+t,a),l.bFilter&&(p("sSearch_"+t,i.sSearch),p("bRegex_"+t,i.bRegex),p("bSearchable_"+t,n.bSearchable)),l.bSort&&p("bSortable_"+t,n.bSortable);l.bFilter&&(p("sSearch",s.sSearch),p("bRegex",s.bRegex)),l.bSort&&(U.each(c,function(e,t){m.order.push({column:t.col,dir:t.dir}),p("iSortCol_"+e,t.col),p("sSortDir_"+e,t.dir)}),p("iSortingCols",c.length));var T=b.ext.legacy.ajax;return null===T?e.sAjaxSource?u:m:T?u:m}function me(e,a){var t=function(e,t){return a[e]!==k?a[e]:a[t]},n=Te(e,a),i=t("sEcho","draw"),r=t("iTotalRecords","recordsTotal"),o=t("iTotalDisplayRecords","recordsFiltered");if(i){if(1*i<e.iDraw)return;e.iDraw=1*i}Z(e),e._iRecordsTotal=parseInt(r,10),e._iRecordsDisplay=parseInt(o,10);for(var l=0,s=n.length;l<s;l++)M(e,n[l]);e.aiDisplay=e.aiDisplayMaster.slice(),e.bAjaxDataGet=!1,le(e),e._bInitComplete||Pe(e,a),e.bAjaxDataGet=!0,Me(e,!1)}function Te(e,t){var a=U.isPlainObject(e.ajax)&&e.ajax.dataSrc!==k?e.ajax.dataSrc:e.sAjaxDataProp;return"data"===a?t.aaData||t[a]:""!==a?X(a)(t):t}function ge(a){var e=a.oClasses,t=a.sTableId,n=a.oLanguage,i=a.oPreviousSearch,r=a.aanFeatures,o='<input type="search" class="'+e.sFilterInput+'"/>',l=n.sSearch;l=l.match(/_INPUT_/)?l.replace("_INPUT_",o):l+o;var s=U("<div/>",{id:r.f?null:t+"_filter",class:e.sFilter}).append(U("<label/>").append(l)),d=function(){r.f;var e=this.value?this.value:"";e!=i.sSearch&&(_e(a,{sSearch:e,bRegex:i.bRegex,bSmart:i.bSmart,bCaseInsensitive:i.bCaseInsensitive}),a._iDisplayStart=0,le(a))},u=null!==a.searchDelay?a.searchDelay:"ssp"===pt(a)?400:0,c=U("input",s).val(i.sSearch).attr("placeholder",n.sSearchPlaceholder).on("keyup.DT search.DT input.DT paste.DT cut.DT",u?je(d,u):d).on("keypress.DT",function(e){if(13==e.keyCode)return!1}).attr("aria-controls",t);return U(a.nTable).on("search.dt.DT",function(e,t){if(a===t)try{c[0]!==g.activeElement&&c.val(i.sSearch)}catch(e){}}),s[0]}function _e(e,t,a){var n=e.oPreviousSearch,i=e.aoPreSearchCols,r=function(e){n.sSearch=e.sSearch,n.bRegex=e.bRegex,n.bSmart=e.bSmart,n.bCaseInsensitive=e.bCaseInsensitive},o=function(e){return e.bEscapeRegex!==k?!e.bEscapeRegex:e.bRegex};if(w(e),"ssp"!=pt(e)){Ce(e,t.sSearch,a,o(t),t.bSmart,t.bCaseInsensitive),r(t);for(var l=0;l<i.length;l++)De(e,i[l].sSearch,l,o(i[l]),i[l].bSmart,i[l].bCaseInsensitive);be(e)}else r(t);e.bFiltered=!0,ct(e,null,"search",[e])}function be(e){for(var t,a,n=b.ext.search,i=e.aiDisplay,r=0,o=n.length;r<o;r++){for(var l=[],s=0,d=i.length;s<d;s++)a=i[s],t=e.aoData[a],n[r](e,t._aFilterData,a,t._aData,s)&&l.push(a);i.length=0,U.merge(i,l)}}function De(e,t,a,n,i,r){if(""!==t){for(var o,l=[],s=e.aiDisplay,d=ye(t,n,i,r),u=0;u<s.length;u++)o=e.aoData[s[u]]._aFilterData[a],d.test(o)&&l.push(s[u]);e.aiDisplay=l}}function Ce(e,t,a,n,i,r){var o,l,s,d=ye(t,n,i,r),u=e.oPreviousSearch.sSearch,c=e.aiDisplayMaster,f=[];if(0!==b.ext.search.length&&(a=!0),l=we(e),t.length<=0)e.aiDisplay=c.slice();else{for((l||a||u.length>t.length||0!==t.indexOf(u)||e.bSorted)&&(e.aiDisplay=c.slice()),o=e.aiDisplay,s=0;s<o.length;s++)d.test(e.aoData[o[s]]._sFilterRow)&&f.push(o[s]);e.aiDisplay=f}}function ye(e,t,a,n){(e=t?e:ve(e),a)&&(e="^(?=.*?"+U.map(e.match(/"[^"]+"|[^ ]+/g)||[""],function(e){if('"'===e.charAt(0)){var t=e.match(/^"(.*)"$/);e=t?t[1]:e}return e.replace('"',"")}).join(")(?=.*?")+").*$");return new RegExp(e,n?"i":"")}var ve=b.util.escapeRegex,Se=U("<div>")[0],Ie=Se.textContent!==k;function we(e){var t,a,n,i,r,o,l,s,d=e.aoColumns,u=b.ext.type.search,c=!1;for(a=0,i=e.aoData.length;a<i;a++)if(!(s=e.aoData[a])._aFilterData){for(o=[],n=0,r=d.length;n<r;n++)(t=d[n]).bSearchable?(l=R(e,a,n,"filter"),u[t.sType]&&(l=u[t.sType](l)),null===l&&(l=""),"string"!=typeof l&&l.toString&&(l=l.toString())):l="",l.indexOf&&-1!==l.indexOf("&")&&(Se.innerHTML=l,l=Ie?Se.textContent:Se.innerText),l.replace&&(l=l.replace(/[\r\n]/g,"")),o.push(l);s._aFilterData=o,s._sFilterRow=o.join("  "),c=!0}return c}function Re(e){return{search:e.sSearch,smart:e.bSmart,regex:e.bRegex,caseInsensitive:e.bCaseInsensitive}}function xe(e){return{sSearch:e.search,bSmart:e.smart,bRegex:e.regex,bCaseInsensitive:e.caseInsensitive}}function Fe(e){var t=e.sTableId,a=e.aanFeatures.i,n=U("<div/>",{class:e.oClasses.sInfo,id:a?null:t+"_info"});return a||(e.aoDrawCallback.push({fn:Ee,sName:"information"}),n.attr("role","status").attr("aria-live","polite"),U(e.nTable).attr("aria-describedby",t+"_info")),n[0]}function Ee(e){var t=e.aanFeatures.i;if(0!==t.length){var a=e.oLanguage,n=e._iDisplayStart+1,i=e.fnDisplayEnd(),r=e.fnRecordsTotal(),o=e.fnRecordsDisplay(),l=o?a.sInfo:a.sInfoEmpty;o!==r&&(l+=" "+a.sInfoFiltered),l=Le(e,l+=a.sInfoPostFix);var s=a.fnInfoCallback;null!==s&&(l=s.call(e.oInstance,e,n,i,r,o,l)),U(t).html(l)}}function Le(e,t){var a=e.fnFormatNumber,n=e._iDisplayStart+1,i=e._iDisplayLength,r=e.fnRecordsDisplay(),o=-1===i;return t.replace(/_START_/g,a.call(e,n)).replace(/_END_/g,a.call(e,e.fnDisplayEnd())).replace(/_MAX_/g,a.call(e,e.fnRecordsTotal())).replace(/_TOTAL_/g,a.call(e,r)).replace(/_PAGE_/g,a.call(e,o?1:Math.ceil(n/i))).replace(/_PAGES_/g,a.call(e,o?1:Math.ceil(r/i)))}function Ne(a){var n,e,t,i=a.iInitDisplayStart,r=a.aoColumns,o=a.oFeatures,l=a.bDeferLoading;if(a.bInitialised){for(de(a),re(a),oe(a,a.aoHeader),oe(a,a.aoFooter),Me(a,!0),o.bAutoWidth&&Ge(a),n=0,e=r.length;n<e;n++)(t=r[n]).sWidth&&(t.nTh.style.width=qe(t.sWidth));ct(a,null,"preInit",[a]),se(a);var s=pt(a);("ssp"!=s||l)&&("ajax"==s?fe(a,[],function(e){var t=Te(a,e);for(n=0;n<t.length;n++)M(a,t[n]);a.iInitDisplayStart=i,se(a),Me(a,!1),Pe(a,e)}):(Me(a,!1),Pe(a)))}else setTimeout(function(){Ne(a)},200)}function Pe(e,t){e._bInitComplete=!0,(t||e.oInit.aaData)&&j(e),ct(e,null,"plugin-init",[e,t]),ct(e,"aoInitComplete","init",[e,t])}function Be(e,t){var a=parseInt(t,10);e._iDisplayLength=a,ft(e),ct(e,null,"length",[e,a])}function Ae(n){for(var e=n.oClasses,t=n.sTableId,a=n.aLengthMenu,i=U.isArray(a[0]),r=i?a[0]:a,o=i?a[1]:a,l=U("<select/>",{name:t+"_length","aria-controls":t,class:e.sLengthSelect}),s=0,d=r.length;s<d;s++)l[0][s]=new Option("number"==typeof o[s]?n.fnFormatNumber(o[s]):o[s],r[s]);var u=U("<div><label/></div>").addClass(e.sLength);return n.aanFeatures.l||(u[0].id=t+"_length"),u.children().append(n.oLanguage.sLengthMenu.replace("_MENU_",l[0].outerHTML)),U("select",u).val(n._iDisplayLength).on("change.DT",function(e){Be(n,U(this).val()),le(n)}),U(n.nTable).on("length.dt.DT",function(e,t,a){n===t&&U("select",u).val(a)}),u[0]}function Oe(e){var t=e.sPaginationType,u=b.ext.pager[t],c="function"==typeof u,f=function(e){le(e)},a=U("<div/>").addClass(e.oClasses.sPaging+t)[0],h=e.aanFeatures;return c||u.fnInit(e,a,f),h.p||(a.id=e.sTableId+"_paginate",e.aoDrawCallback.push({fn:function(e){if(c){var t,a,n=e._iDisplayStart,i=e._iDisplayLength,r=e.fnRecordsDisplay(),o=-1===i,l=o?0:Math.ceil(n/i),s=o?1:Math.ceil(r/i),d=u(l,s);for(t=0,a=h.p.length;t<a;t++)ht(e,"pageButton")(e,h.p[t],t,d,l,s)}else u.fnUpdate(e,f)},sName:"pagination"})),a}function Ve(e,t,a){var n=e._iDisplayStart,i=e._iDisplayLength,r=e.fnRecordsDisplay();0===r||-1===i?n=0:"number"==typeof t?r<(n=t*i)&&(n=0):"first"==t?n=0:"previous"==t?(n=0<=i?n-i:0)<0&&(n=0):"next"==t?n+i<r&&(n+=i):"last"==t?n=Math.floor((r-1)/i)*i:ot(e,0,"Unknown paging action: "+t,5);var o=e._iDisplayStart!==n;return e._iDisplayStart=n,o&&(ct(e,null,"page",[e]),a&&le(e)),o}function He(e){return U("<div/>",{id:e.aanFeatures.r?null:e.sTableId+"_processing",class:e.oClasses.sProcessing}).html(e.oLanguage.sProcessing).insertBefore(e.nTable)[0]}function Me(e,t){e.oFeatures.bProcessing&&U(e.aanFeatures.r).css("display",t?"block":"none"),ct(e,null,"processing",[e,t])}function We(e){var t=U(e.nTable);t.attr("role","grid");var a=e.oScroll;if(""===a.sX&&""===a.sY)return e.nTable;var n=a.sX,i=a.sY,r=e.oClasses,o=t.children("caption"),l=o.length?o[0]._captionSide:null,s=U(t[0].cloneNode(!1)),d=U(t[0].cloneNode(!1)),u=t.children("tfoot"),c="<div/>",f=function(e){return e?qe(e):null};u.length||(u=null);var h=U(c,{class:r.sScrollWrapper}).append(U(c,{class:r.sScrollHead}).css({overflow:"hidden",position:"relative",border:0,width:n?f(n):"100%"}).append(U(c,{class:r.sScrollHeadInner}).css({"box-sizing":"content-box",width:a.sXInner||"100%"}).append(s.removeAttr("id").css("margin-left",0).append("top"===l?o:null).append(t.children("thead"))))).append(U(c,{class:r.sScrollBody}).css({position:"relative",overflow:"auto",width:f(n)}).append(t));u&&h.append(U(c,{class:r.sScrollFoot}).css({overflow:"hidden",border:0,width:n?f(n):"100%"}).append(U(c,{class:r.sScrollFootInner}).append(d.removeAttr("id").css("margin-left",0).append("bottom"===l?o:null).append(t.children("tfoot")))));var p=h.children(),m=p[0],T=p[1],g=u?p[2]:null;return n&&U(T).on("scroll.DT",function(e){var t=this.scrollLeft;m.scrollLeft=t,u&&(g.scrollLeft=t)}),U(T).css(i&&a.bCollapse?"max-height":"height",i),e.nScrollHead=m,e.nScrollBody=T,e.nScrollFoot=g,e.aoDrawCallback.push({fn:$e,sName:"scrolling"}),h[0]}function $e(a){var e,t,n,i,r,o,l,s,d,u=a.oScroll,c=u.sX,f=u.sXInner,h=u.sY,p=u.iBarWidth,m=U(a.nScrollHead),T=m[0].style,g=m.children("div"),_=g[0].style,b=g.children("table"),D=a.nScrollBody,C=U(D),y=D.style,v=U(a.nScrollFoot).children("div"),S=v.children("table"),I=U(a.nTHead),w=U(a.nTable),R=w[0],x=R.style,F=a.nTFoot?U(a.nTFoot):null,E=a.oBrowser,L=E.bScrollOversize,N=G(a.aoColumns,"nTh"),P=[],B=[],A=[],O=[],V=function(e){var t=e.style;t.paddingTop="0",t.paddingBottom="0",t.borderTopWidth="0",t.borderBottomWidth="0",t.height=0},H=D.scrollHeight>D.clientHeight;if(a.scrollBarVis!==H&&a.scrollBarVis!==k)return a.scrollBarVis=H,void j(a);a.scrollBarVis=H,w.children("thead, tfoot").remove(),F&&(o=F.clone().prependTo(w),t=F.find("tr"),i=o.find("tr")),r=I.clone().prependTo(w),e=I.find("tr"),n=r.find("tr"),r.find("th, td").removeAttr("tabindex"),c||(y.width="100%",m[0].style.width="100%"),U.each(ce(a,r),function(e,t){l=z(a,e),t.style.width=a.aoColumns[l].sWidth}),F&&Ue(function(e){e.style.width=""},i),d=w.outerWidth(),""===c?(x.width="100%",L&&(w.find("tbody").height()>D.offsetHeight||"scroll"==C.css("overflow-y"))&&(x.width=qe(w.outerWidth()-p)),d=w.outerWidth()):""!==f&&(x.width=qe(f),d=w.outerWidth()),Ue(V,n),Ue(function(e){A.push(e.innerHTML),P.push(qe(U(e).css("width")))},n),Ue(function(e,t){-1!==U.inArray(e,N)&&(e.style.width=P[t])},e),U(n).height(0),F&&(Ue(V,i),Ue(function(e){O.push(e.innerHTML),B.push(qe(U(e).css("width")))},i),Ue(function(e,t){e.style.width=B[t]},t),U(i).height(0)),Ue(function(e,t){e.innerHTML='<div class="dataTables_sizing">'+A[t]+"</div>",e.childNodes[0].style.height="0",e.childNodes[0].style.overflow="hidden",e.style.width=P[t]},n),F&&Ue(function(e,t){e.innerHTML='<div class="dataTables_sizing">'+O[t]+"</div>",e.childNodes[0].style.height="0",e.childNodes[0].style.overflow="hidden",e.style.width=B[t]},i),w.outerWidth()<d?(s=D.scrollHeight>D.offsetHeight||"scroll"==C.css("overflow-y")?d+p:d,L&&(D.scrollHeight>D.offsetHeight||"scroll"==C.css("overflow-y"))&&(x.width=qe(s-p)),""!==c&&""===f||ot(a,1,"Possible column misalignment",6)):s="100%",y.width=qe(s),T.width=qe(s),F&&(a.nScrollFoot.style.width=qe(s)),h||L&&(y.height=qe(R.offsetHeight+p));var M=w.outerWidth();b[0].style.width=qe(M),_.width=qe(M);var W=w.height()>D.clientHeight||"scroll"==C.css("overflow-y"),$="padding"+(E.bScrollbarLeft?"Left":"Right");_[$]=W?p+"px":"0px",F&&(S[0].style.width=qe(M),v[0].style.width=qe(M),v[0].style[$]=W?p+"px":"0px"),w.children("colgroup").insertBefore(w.children("thead")),C.scroll(),!a.bSorted&&!a.bFiltered||a._drawHold||(D.scrollTop=0)}function Ue(e,t,a){for(var n,i,r=0,o=0,l=t.length;o<l;){for(n=t[o].firstChild,i=a?a[o].firstChild:null;n;)1===n.nodeType&&(a?e(n,i,r):e(n,r),r++),n=n.nextSibling,i=a?i.nextSibling:null;o++}}var ke=/<.*?>/g;function Ge(e){var t,a,n,i=e.nTable,r=e.aoColumns,o=e.oScroll,l=o.sY,s=o.sX,d=o.sXInner,u=r.length,c=V(e,"bVisible"),f=U("th",e.nTHead),h=i.getAttribute("width"),p=i.parentNode,m=!1,T=e.oBrowser,g=T.bScrollOversize,_=i.style.width;for(_&&-1!==_.indexOf("%")&&(h=_),t=0;t<c.length;t++)null!==(a=r[c[t]]).sWidth&&(a.sWidth=ze(a.sWidthOrig,p),m=!0);if(g||!m&&!s&&!l&&u==O(e)&&u==f.length)for(t=0;t<u;t++){var b=z(e,t);null!==b&&(r[b].sWidth=qe(f.eq(t).width()))}else{var D=U(i).clone().css("visibility","hidden").removeAttr("id");D.find("tbody tr").remove();var C=U("<tr/>").appendTo(D.find("tbody"));for(D.find("thead, tfoot").remove(),D.append(U(e.nTHead).clone()).append(U(e.nTFoot).clone()),D.find("tfoot th, tfoot td").css("width",""),f=ce(e,D.find("thead")[0]),t=0;t<c.length;t++)a=r[c[t]],f[t].style.width=null!==a.sWidthOrig&&""!==a.sWidthOrig?qe(a.sWidthOrig):"",a.sWidthOrig&&s&&U(f[t]).append(U("<div/>").css({width:a.sWidthOrig,margin:0,padding:0,border:0,height:1}));if(e.aoData.length)for(t=0;t<c.length;t++)a=r[n=c[t]],U(Ye(e,n)).clone(!1).append(a.sContentPadding).appendTo(C);U("[name]",D).removeAttr("name");var y=U("<div/>").css(s||l?{position:"absolute",top:0,left:0,height:1,right:0,overflow:"hidden"}:{}).append(D).appendTo(p);s&&d?D.width(d):s?(D.css("width","auto"),D.removeAttr("width"),D.width()<p.clientWidth&&h&&D.width(p.clientWidth)):l?D.width(p.clientWidth):h&&D.width(h);var v=0;for(t=0;t<c.length;t++){var S=U(f[t]),I=S.outerWidth()-S.width(),w=T.bBounding?Math.ceil(f[t].getBoundingClientRect().width):S.outerWidth();v+=w,r[c[t]].sWidth=qe(w-I)}i.style.width=qe(v),y.remove()}if(h&&(i.style.width=qe(h)),(h||s)&&!e._reszEvt){var R=function(){U(x).on("resize.DT-"+e.sInstance,je(function(){j(e)}))};g?setTimeout(R,1e3):R(),e._reszEvt=!0}}var je=b.util.throttle;function ze(e,t){if(!e)return 0;var a=U("<div/>").css("width",qe(e)).appendTo(t||g.body),n=a[0].offsetWidth;return a.remove(),n}function Ye(e,t){var a=Je(e,t);if(a<0)return null;var n=e.aoData[a];return n.nTr?n.anCells[t]:U("<td/>").html(R(e,a,t,"display"))[0]}function Je(e,t){for(var a,n=-1,i=-1,r=0,o=e.aoData.length;r<o;r++)(a=(a=(a=R(e,r,t,"display")+"").replace(ke,"")).replace(/&nbsp;/g," ")).length>n&&(n=a.length,i=r);return i}function qe(e){return null===e?"0px":"number"==typeof e?e<0?"0px":e+"px":e.match(/\d$/)?e+"px":e}function Xe(e){var t,a,n,i,r,o,l,s=[],d=e.aoColumns,u=e.aaSortingFixed,c=U.isPlainObject(u),f=[],h=function(e){e.length&&!U.isArray(e[0])?f.push(e):U.merge(f,e)};for(U.isArray(u)&&h(u),c&&u.pre&&h(u.pre),h(e.aaSorting),c&&u.post&&h(u.post),t=0;t<f.length;t++)for(a=0,n=(i=d[l=f[t][0]].aDataSort).length;a<n;a++)o=d[r=i[a]].sType||"string",f[t]._idx===k&&(f[t]._idx=U.inArray(f[t][1],d[r].asSorting)),s.push({src:l,col:r,dir:f[t][1],index:f[t]._idx,type:o,formatter:b.ext.type.order[o+"-pre"]});return s}function Ke(e){var t,a,n,i,u,c=[],f=b.ext.type.order,h=e.aoData,r=(e.aoColumns,0),o=e.aiDisplayMaster;for(w(e),t=0,a=(u=Xe(e)).length;t<a;t++)(i=u[t]).formatter&&r++,at(e,i.col);if("ssp"!=pt(e)&&0!==u.length){for(t=0,n=o.length;t<n;t++)c[o[t]]=t;r===u.length?o.sort(function(e,t){var a,n,i,r,o,l=u.length,s=h[e]._aSortData,d=h[t]._aSortData;for(i=0;i<l;i++)if(0!==(r=(a=s[(o=u[i]).col])<(n=d[o.col])?-1:n<a?1:0))return"asc"===o.dir?r:-r;return(a=c[e])<(n=c[t])?-1:n<a?1:0}):o.sort(function(e,t){var a,n,i,r,o,l=u.length,s=h[e]._aSortData,d=h[t]._aSortData;for(i=0;i<l;i++)if(a=s[(o=u[i]).col],n=d[o.col],0!==(r=(f[o.type+"-"+o.dir]||f["string-"+o.dir])(a,n)))return r;return(a=c[e])<(n=c[t])?-1:n<a?1:0})}e.bSorted=!0}function Qe(e){for(var t,a=e.aoColumns,n=Xe(e),i=e.oLanguage.oAria,r=0,o=a.length;r<o;r++){var l=a[r],s=l.asSorting,d=l.sTitle.replace(/<.*?>/g,""),u=l.nTh;u.removeAttribute("aria-sort"),t=l.bSortable?d+("asc"===(0<n.length&&n[0].col==r?(u.setAttribute("aria-sort","asc"==n[0].dir?"ascending":"descending"),s[n[0].index+1]||s[0]):s[0])?i.sSortAscending:i.sSortDescending):d,u.setAttribute("aria-label",t)}}function Ze(e,t,a,n){var i,r=e.aoColumns[t],o=e.aaSorting,l=r.asSorting,s=function(e,t){var a=e._idx;return a===k&&(a=U.inArray(e[1],l)),a+1<l.length?a+1:t?null:0};if("number"==typeof o[0]&&(o=e.aaSorting=[o]),a&&e.oFeatures.bSortMulti){var d=U.inArray(t,G(o,"0"));-1!==d?(null===(i=s(o[d],!0))&&1===o.length&&(i=0),null===i?o.splice(d,1):(o[d][1]=l[i],o[d]._idx=i)):(o.push([t,l[0],0]),o[o.length-1]._idx=0)}else o.length&&o[0][0]==t?(i=s(o[0]),o.length=1,o[0][1]=l[i],o[0]._idx=i):(o.length=0,o.push([t,l[0]]),o[0]._idx=0);se(e),"function"==typeof n&&n(e)}function et(t,e,a,n){var i=t.aoColumns[a];dt(e,{},function(e){!1!==i.bSortable&&(t.oFeatures.bProcessing?(Me(t,!0),setTimeout(function(){Ze(t,a,e.shiftKey,n),"ssp"!==pt(t)&&Me(t,!1)},0)):Ze(t,a,e.shiftKey,n))})}function tt(e){var t,a,n,i=e.aLastSort,r=e.oClasses.sSortColumn,o=Xe(e),l=e.oFeatures;if(l.bSort&&l.bSortClasses){for(t=0,a=i.length;t<a;t++)n=i[t].src,U(G(e.aoData,"anCells",n)).removeClass(r+(t<2?t+1:3));for(t=0,a=o.length;t<a;t++)n=o[t].src,U(G(e.aoData,"anCells",n)).addClass(r+(t<2?t+1:3))}e.aLastSort=o}function at(e,t){var a,n,i,r=e.aoColumns[t],o=b.ext.order[r.sSortDataType];o&&(a=o.call(e.oInstance,e,t,I(e,t)));for(var l=b.ext.type.order[r.sType+"-pre"],s=0,d=e.aoData.length;s<d;s++)(n=e.aoData[s])._aSortData||(n._aSortData=[]),n._aSortData[t]&&!o||(i=o?a[s]:R(e,s,t,"sort"),n._aSortData[t]=l?l(i):i)}function nt(a){if(a.oFeatures.bStateSave&&!a.bDestroying){var e={time:+new Date,start:a._iDisplayStart,length:a._iDisplayLength,order:U.extend(!0,[],a.aaSorting),search:Re(a.oPreviousSearch),columns:U.map(a.aoColumns,function(e,t){return{visible:e.bVisible,search:Re(a.aoPreSearchCols[t])}})};ct(a,"aoStateSaveParams","stateSaveParams",[a,e]),a.oSavedState=e,a.fnStateSaveCallback.call(a.oInstance,a,e)}}function it(i,e,r){var o,l,s=i.aoColumns,t=function(e){if(e&&e.time){var t=ct(i,"aoStateLoadParams","stateLoadParams",[i,e]);if(-1===U.inArray(!1,t)){var a=i.iStateDuration;if(0<a&&e.time<+new Date-1e3*a)r();else if(e.columns&&s.length!==e.columns.length)r();else{if(i.oLoadedState=U.extend(!0,{},e),e.start!==k&&(i._iDisplayStart=e.start,i.iInitDisplayStart=e.start),e.length!==k&&(i._iDisplayLength=e.length),e.order!==k&&(i.aaSorting=[],U.each(e.order,function(e,t){i.aaSorting.push(t[0]>=s.length?[0,t[1]]:t)})),e.search!==k&&U.extend(i.oPreviousSearch,xe(e.search)),e.columns)for(o=0,l=e.columns.length;o<l;o++){var n=e.columns[o];n.visible!==k&&(s[o].bVisible=n.visible),n.search!==k&&U.extend(i.aoPreSearchCols[o],xe(n.search))}ct(i,"aoStateLoaded","stateLoaded",[i,e]),r()}}else r()}else r()};if(i.oFeatures.bStateSave){var a=i.fnStateLoadCallback.call(i.oInstance,i,t);a!==k&&t(a)}else r()}function rt(e){var t=b.settings,a=U.inArray(e,G(t,"nTable"));return-1!==a?t[a]:null}function ot(e,t,a,n){if(a="DataTables warning: "+(e?"table id="+e.sTableId+" - ":"")+a,n&&(a+=". For more information about this error, please see http://datatables.net/tn/"+n),t)x.console&&console.log&&console.log(a);else{var i=b.ext,r=i.sErrMode||i.errMode;if(e&&ct(e,null,"error",[e,n,a]),"alert"==r)alert(a);else{if("throw"==r)throw new Error(a);"function"==typeof r&&r(e,n,a)}}}function lt(a,n,e,t){U.isArray(e)?U.each(e,function(e,t){U.isArray(t)?lt(a,n,t[0],t[1]):lt(a,n,t)}):(t===k&&(t=e),n[e]!==k&&(a[t]=n[e]))}function st(e,t,a){var n;for(var i in t)t.hasOwnProperty(i)&&(n=t[i],U.isPlainObject(n)?(U.isPlainObject(e[i])||(e[i]={}),U.extend(!0,e[i],n)):a&&"data"!==i&&"aaData"!==i&&U.isArray(n)?e[i]=n.slice():e[i]=n);return e}function dt(t,e,a){U(t).on("click.DT",e,function(e){U(t).blur(),a(e)}).on("keypress.DT",e,function(e){13===e.which&&(e.preventDefault(),a(e))}).on("selectstart.DT",function(){return!1})}function ut(e,t,a,n){a&&e[t].push({fn:a,sName:n})}function ct(a,e,t,n){var i=[];if(e&&(i=U.map(a[e].slice().reverse(),function(e,t){return e.fn.apply(a.oInstance,n)})),null!==t){var r=U.Event(t+".dt");U(a.nTable).trigger(r,n),i.push(r.result)}return i}function ft(e){var t=e._iDisplayStart,a=e.fnDisplayEnd(),n=e._iDisplayLength;a<=t&&(t=a-n),t-=t%n,(-1===n||t<0)&&(t=0),e._iDisplayStart=t}function ht(e,t){var a=e.renderer,n=b.ext.renderer[t];return U.isPlainObject(a)&&a[t]?n[a[t]]||n._:"string"==typeof a&&n[a]||n._}function pt(e){return e.oFeatures.bServerSide?"ssp":e.ajax||e.sAjaxSource?"ajax":"dom"}var mt=[],Tt=Array.prototype;_=function(e,t){if(!(this instanceof _))return new _(e,t);var l=[],a=function(e){var t,a,n,i,r,o=(t=e,i=b.settings,r=U.map(i,function(e,t){return e.nTable}),t?t.nTable&&t.oApi?[t]:t.nodeName&&"table"===t.nodeName.toLowerCase()?-1!==(a=U.inArray(t,r))?[i[a]]:null:t&&"function"==typeof t.settings?t.settings().toArray():("string"==typeof t?n=U(t):t instanceof U&&(n=t),n?n.map(function(e){return-1!==(a=U.inArray(this,r))?i[a]:null}).toArray():void 0):[]);o&&(l=l.concat(o))};if(U.isArray(e))for(var n=0,i=e.length;n<i;n++)a(e[n]);else a(e);this.context=T(l),t&&U.merge(this,t),this.selector={rows:null,cols:null,opts:null},_.extend(this,this,mt)},b.Api=_,U.extend(_.prototype,{any:function(){return 0!==this.count()},concat:Tt.concat,context:[],count:function(){return this.flatten().length},each:function(e){for(var t=0,a=this.length;t<a;t++)e.call(this,this[t],t,this);return this},eq:function(e){var t=this.context;return t.length>e?new _(t[e],this[e]):null},filter:function(e){var t=[];if(Tt.filter)t=Tt.filter.call(this,e,this);else for(var a=0,n=this.length;a<n;a++)e.call(this,this[a],a,this)&&t.push(this[a]);return new _(this.context,t)},flatten:function(){var e=[];return new _(this.context,e.concat.apply(e,this.toArray()))},join:Tt.join,indexOf:Tt.indexOf||function(e,t){for(var a=t||0,n=this.length;a<n;a++)if(this[a]===e)return a;return-1},iterator:function(e,t,a,n){var i,r,o,l,s,d,u,c,f=[],h=this.context,p=this.selector;for("string"==typeof e&&(n=a,a=t,t=e,e=!1),r=0,o=h.length;r<o;r++){var m=new _(h[r]);if("table"===t)(i=a.call(m,h[r],r))!==k&&f.push(i);else if("columns"===t||"rows"===t)(i=a.call(m,h[r],this[r],r))!==k&&f.push(i);else if("column"===t||"column-rows"===t||"row"===t||"cell"===t)for(u=this[r],"column-rows"===t&&(d=Ct(h[r],p.opts)),l=0,s=u.length;l<s;l++)c=u[l],(i="cell"===t?a.call(m,h[r],c.row,c.column,r,l):a.call(m,h[r],c,r,l,d))!==k&&f.push(i)}if(f.length||n){var T=new _(h,e?f.concat.apply([],f):f),g=T.selector;return g.rows=p.rows,g.cols=p.cols,g.opts=p.opts,T}return this},lastIndexOf:Tt.lastIndexOf||function(e,t){return this.indexOf.apply(this.toArray.reverse(),arguments)},length:0,map:function(e){var t=[];if(Tt.map)t=Tt.map.call(this,e,this);else for(var a=0,n=this.length;a<n;a++)t.push(e.call(this,this[a],a));return new _(this.context,t)},pluck:function(t){return this.map(function(e){return e[t]})},pop:Tt.pop,push:Tt.push,reduce:Tt.reduce||function(e,t){return S(this,e,t,0,this.length,1)},reduceRight:Tt.reduceRight||function(e,t){return S(this,e,t,this.length-1,-1,-1)},reverse:Tt.reverse,selector:null,shift:Tt.shift,slice:function(){return new _(this.context,this)},sort:Tt.sort,splice:Tt.splice,toArray:function(){return Tt.slice.call(this)},to$:function(){return U(this)},toJQuery:function(){return U(this)},unique:function(){return new _(this.context,T(this))},unshift:Tt.unshift}),_.extend=function(e,t,a){if(a.length&&t&&(t instanceof _||t.__dt_wrapper)){var n,i,r,o=function(t,a,n){return function(){var e=a.apply(t,arguments);return _.extend(e,e,n.methodExt),e}};for(n=0,i=a.length;n<i;n++)t[(r=a[n]).name]="function"==typeof r.val?o(e,r.val,r):U.isPlainObject(r.val)?{}:r.val,t[r.name].__dt_wrapper=!0,_.extend(e,t[r.name],r.propExt)}},_.register=t=function(e,t){if(U.isArray(e))for(var a=0,n=e.length;a<n;a++)_.register(e[a],t);else{var i,r,o,l,s=e.split("."),d=mt,u=function(e,t){for(var a=0,n=e.length;a<n;a++)if(e[a].name===t)return e[a];return null};for(i=0,r=s.length;i<r;i++){var c=u(d,o=(l=-1!==s[i].indexOf("()"))?s[i].replace("()",""):s[i]);c||(c={name:o,val:{},methodExt:[],propExt:[]},d.push(c)),i===r-1?c.val=t:d=l?c.methodExt:c.propExt}}},_.registerPlural=e=function(e,t,a){_.register(e,a),_.register(t,function(){var e=a.apply(this,arguments);return e===this?this:e instanceof _?e.length?U.isArray(e[0])?new _(e.context,e[0]):e[0]:k:e})};t("tables()",function(e){return e?new _(function(e,a){if("number"==typeof e)return[a[e]];var n=U.map(a,function(e,t){return e.nTable});return U(n).filter(e).map(function(e){var t=U.inArray(this,n);return a[t]}).toArray()}(e,this.context)):this}),t("table()",function(e){var t=this.tables(e),a=t.context;return a.length?new _(a[0]):t}),e("tables().nodes()","table().node()",function(){return this.iterator("table",function(e){return e.nTable},1)}),e("tables().body()","table().body()",function(){return this.iterator("table",function(e){return e.nTBody},1)}),e("tables().header()","table().header()",function(){return this.iterator("table",function(e){return e.nTHead},1)}),e("tables().footer()","table().footer()",function(){return this.iterator("table",function(e){return e.nTFoot},1)}),e("tables().containers()","table().container()",function(){return this.iterator("table",function(e){return e.nTableWrapper},1)}),t("draw()",function(t){return this.iterator("table",function(e){"page"===t?le(e):("string"==typeof t&&(t="full-hold"!==t),se(e,!1===t))})}),t("page()",function(t){return t===k?this.page.info().page:this.iterator("table",function(e){Ve(e,t)})}),t("page.info()",function(e){if(0===this.context.length)return k;var t=this.context[0],a=t._iDisplayStart,n=t.oFeatures.bPaginate?t._iDisplayLength:-1,i=t.fnRecordsDisplay(),r=-1===n;return{page:r?0:Math.floor(a/n),pages:r?1:Math.ceil(i/n),start:a,end:t.fnDisplayEnd(),length:n,recordsTotal:t.fnRecordsTotal(),recordsDisplay:i,serverSide:"ssp"===pt(t)}}),t("page.len()",function(t){return t===k?0!==this.context.length?this.context[0]._iDisplayLength:k:this.iterator("table",function(e){Be(e,t)})});var gt=function(i,r,e){if(e){var t=new _(i);t.one("draw",function(){e(t.ajax.json())})}if("ssp"==pt(i))se(i,r);else{Me(i,!0);var a=i.jqXHR;a&&4!==a.readyState&&a.abort(),fe(i,[],function(e){Z(i);for(var t=Te(i,e),a=0,n=t.length;a<n;a++)M(i,t[a]);se(i,r),Me(i,!1)})}};t("ajax.json()",function(){var e=this.context;if(0<e.length)return e[0].json}),t("ajax.params()",function(){var e=this.context;if(0<e.length)return e[0].oAjaxData}),t("ajax.reload()",function(t,a){return this.iterator("table",function(e){gt(e,!1===a,t)})}),t("ajax.url()",function(t){var e=this.context;return t===k?0===e.length?k:(e=e[0]).ajax?U.isPlainObject(e.ajax)?e.ajax.url:e.ajax:e.sAjaxSource:this.iterator("table",function(e){U.isPlainObject(e.ajax)?e.ajax.url=t:e.ajax=t})}),t("ajax.url().load()",function(t,a){return this.iterator("table",function(e){gt(e,!1===a,t)})});var _t=function(e,t,a,n,i){var r,o,l,s,d,u,c=[],f=_typeof(t);for(t&&"string"!==f&&"function"!==f&&t.length!==k||(t=[t]),l=0,s=t.length;l<s;l++)for(d=0,u=(o=t[l]&&t[l].split&&!t[l].match(/[\[\(:]/)?t[l].split(","):[t[l]]).length;d<u;d++)(r=a("string"==typeof o[d]?U.trim(o[d]):o[d]))&&r.length&&(c=c.concat(r));var h=p.selector[e];if(h.length)for(l=0,s=h.length;l<s;l++)c=h[l](n,i,c);return T(c)},bt=function(e){return e||(e={}),e.filter&&e.search===k&&(e.search=e.filter),U.extend({search:"none",order:"current",page:"all"},e)},Dt=function(e){for(var t=0,a=e.length;t<a;t++)if(0<e[t].length)return e[0]=e[t],e[0].length=1,e.length=1,e.context=[e.context[t]],e;return e.length=0,e},Ct=function(e,t){var a,n=[],i=e.aiDisplay,r=e.aiDisplayMaster,o=t.search,l=t.order,s=t.page;if("ssp"==pt(e))return"removed"===o?[]:m(0,r.length);if("current"==s)for(u=e._iDisplayStart,c=e.fnDisplayEnd();u<c;u++)n.push(i[u]);else if("current"==l||"applied"==l){if("none"==o)n=r.slice();else if("applied"==o)n=i.slice();else if("removed"==o){for(var d={},u=0,c=i.length;u<c;u++)d[i[u]]=null;n=U.map(r,function(e){return d.hasOwnProperty(e)?null:e})}}else if("index"==l||"original"==l)for(u=0,c=e.aoData.length;u<c;u++)"none"==o?n.push(u):(-1===(a=U.inArray(u,i))&&"removed"==o||0<=a&&"applied"==o)&&n.push(u);return n};t("rows()",function(t,a){t===k?t="":U.isPlainObject(t)&&(a=t,t=""),a=bt(a);var e=this.iterator("table",function(e){return _t("row",t,function(a){var e=h(a),n=s.aoData;if(null!==e&&!d)return[e];if(u||(u=Ct(s,d)),null!==e&&-1!==U.inArray(e,u))return[e];if(null===a||a===k||""===a)return u;if("function"==typeof a)return U.map(u,function(e){var t=n[e];return a(e,t._aData,t.nTr)?e:null});if(a.nodeName){var t=a._DT_RowIndex,i=a._DT_CellIndex;if(t!==k)return n[t]&&n[t].nTr===a?[t]:[];if(i)return n[i.row]&&n[i.row].nTr===a?[i.row]:[];var r=U(a).closest("*[data-dt-row]");return r.length?[r.data("dt-row")]:[]}if("string"==typeof a&&"#"===a.charAt(0)){var o=s.aIds[a.replace(/^#/,"")];if(o!==k)return[o.idx]}var l=C(D(s.aoData,u,"nTr"));return U(l).filter(a).map(function(){return this._DT_RowIndex}).toArray()},s=e,d=a);var s,d,u},1);return e.selector.rows=t,e.selector.opts=a,e}),t("rows().nodes()",function(){return this.iterator("row",function(e,t){return e.aoData[t].nTr||k},1)}),t("rows().data()",function(){return this.iterator(!0,"rows",function(e,t){return D(e.aoData,t,"_aData")},1)}),e("rows().cache()","row().cache()",function(n){return this.iterator("row",function(e,t){var a=e.aoData[t];return"search"===n?a._aFilterData:a._aSortData},1)}),e("rows().invalidate()","row().invalidate()",function(a){return this.iterator("row",function(e,t){te(e,t,a)})}),e("rows().indexes()","row().index()",function(){return this.iterator("row",function(e,t){return t},1)}),e("rows().ids()","row().id()",function(e){for(var t=[],a=this.context,n=0,i=a.length;n<i;n++)for(var r=0,o=this[n].length;r<o;r++){var l=a[n].rowIdFn(a[n].aoData[this[n][r]]._aData);t.push((!0===e?"#":"")+l)}return new _(a,t)}),e("rows().remove()","row().remove()",function(){var f=this;return this.iterator("row",function(e,t,a){var n,i,r,o,l,s,d=e.aoData,u=d[t];for(d.splice(t,1),n=0,i=d.length;n<i;n++)if(s=(l=d[n]).anCells,null!==l.nTr&&(l.nTr._DT_RowIndex=n),null!==s)for(r=0,o=s.length;r<o;r++)s[r]._DT_CellIndex.row=n;ee(e.aiDisplayMaster,t),ee(e.aiDisplay,t),ee(f[a],t,!1),0<e._iRecordsDisplay&&e._iRecordsDisplay--,ft(e);var c=e.rowIdFn(u._aData);c!==k&&delete e.aIds[c]}),this.iterator("table",function(e){for(var t=0,a=e.aoData.length;t<a;t++)e.aoData[t].idx=t}),this}),t("rows.add()",function(r){var e=this.iterator("table",function(e){var t,a,n,i=[];for(a=0,n=r.length;a<n;a++)(t=r[a]).nodeName&&"TR"===t.nodeName.toUpperCase()?i.push(W(e,t)[0]):i.push(M(e,t));return i},1),t=this.rows(-1);return t.pop(),U.merge(t,e),t}),t("row()",function(e,t){return Dt(this.rows(e,t))}),t("row().data()",function(e){var t=this.context;if(e===k)return t.length&&this.length?t[0].aoData[this[0]]._aData:k;var a=t[0].aoData[this[0]];return a._aData=e,U.isArray(e)&&a.nTr.id&&K(t[0].rowId)(e,a.nTr.id),te(t[0],this[0],"data"),this}),t("row().node()",function(){var e=this.context;return e.length&&this.length&&e[0].aoData[this[0]].nTr||null}),t("row.add()",function(t){t instanceof U&&t.length&&(t=t[0]);var e=this.iterator("table",function(e){return t.nodeName&&"TR"===t.nodeName.toUpperCase()?W(e,t)[0]:M(e,t)});return this.row(e[0])});var yt=function(e,t){var a=e.context;if(a.length){var n=a[0].aoData[t!==k?t:e[0]];n&&n._details&&(n._details.remove(),n._detailsShow=k,n._details=k)}},vt=function(e,t){var a=e.context;if(a.length&&e.length){var n=a[0].aoData[e[0]];n._details&&((n._detailsShow=t)?n._details.insertAfter(n.nTr):n._details.detach(),St(a[0]))}},St=function(s){var i=new _(s),e=".dt.DT_details",t="draw"+e,a="column-visibility"+e,n="destroy"+e,d=s.aoData;i.off(t+" "+a+" "+n),0<G(d,"_details").length&&(i.on(t,function(e,t){s===t&&i.rows({page:"current"}).eq(0).each(function(e){var t=d[e];t._detailsShow&&t._details.insertAfter(t.nTr)})}),i.on(a,function(e,t,a,n){if(s===t)for(var i,r=O(t),o=0,l=d.length;o<l;o++)(i=d[o])._details&&i._details.children("td[colspan]").attr("colspan",r)}),i.on(n,function(e,t){if(s===t)for(var a=0,n=d.length;a<n;a++)d[a]._details&&yt(i,a)}))},It="row().child",wt=It+"()";t(wt,function(e,t){var o,a,l,n=this.context;return e===k?n.length&&this.length?n[0].aoData[this[0]]._details:k:(!0===e?this.child.show():!1===e?yt(this):n.length&&this.length&&(o=n[0],a=n[0].aoData[this[0]],l=[],function e(t,a){if(U.isArray(t)||t instanceof U)for(var n=0,i=t.length;n<i;n++)e(t[n],a);else if(t.nodeName&&"tr"===t.nodeName.toLowerCase())l.push(t);else{var r=U("<tr><td/></tr>").addClass(a);U("td",r).addClass(a).html(t)[0].colSpan=O(o),l.push(r[0])}}(e,t),a._details&&a._details.detach(),a._details=U(l),a._detailsShow&&a._details.insertAfter(a.nTr)),this)}),t([It+".show()",wt+".show()"],function(e){return vt(this,!0),this}),t([It+".hide()",wt+".hide()"],function(){return vt(this,!1),this}),t([It+".remove()",wt+".remove()"],function(){return yt(this),this}),t(It+".isShown()",function(){var e=this.context;return e.length&&this.length&&e[0].aoData[this[0]]._detailsShow||!1});var Rt=/^([^:]+):(name|visIdx|visible)$/,xt=function(e,t,a,n,i){for(var r=[],o=0,l=i.length;o<l;o++)r.push(R(e,i[o],t));return r};t("columns()",function(a,n){a===k?a="":U.isPlainObject(a)&&(n=a,a=""),n=bt(n);var e=this.iterator("table",function(e){return t=a,d=n,u=(s=e).aoColumns,c=G(u,"sName"),f=G(u,"nTh"),_t("column",t,function(a){var e=h(a);if(""===a)return m(u.length);if(null!==e)return[0<=e?e:u.length+e];if("function"==typeof a){var n=Ct(s,d);return U.map(u,function(e,t){return a(t,xt(s,t,0,0,n),f[t])?t:null})}var i="string"==typeof a?a.match(Rt):"";if(i)switch(i[2]){case"visIdx":case"visible":var t=parseInt(i[1],10);if(t<0){var r=U.map(u,function(e,t){return e.bVisible?t:null});return[r[r.length+t]]}return[z(s,t)];case"name":return U.map(c,function(e,t){return e===i[1]?t:null});default:return[]}if(a.nodeName&&a._DT_CellIndex)return[a._DT_CellIndex.column];var o=U(f).filter(a).map(function(){return U.inArray(this,f)}).toArray();if(o.length||!a.nodeName)return o;var l=U(a).closest("*[data-dt-column]");return l.length?[l.data("dt-column")]:[]},s,d);var s,t,d,u,c,f},1);return e.selector.cols=a,e.selector.opts=n,e}),e("columns().header()","column().header()",function(e,t){return this.iterator("column",function(e,t){return e.aoColumns[t].nTh},1)}),e("columns().footer()","column().footer()",function(e,t){return this.iterator("column",function(e,t){return e.aoColumns[t].nTf},1)}),e("columns().data()","column().data()",function(){return this.iterator("column-rows",xt,1)}),e("columns().dataSrc()","column().dataSrc()",function(){return this.iterator("column",function(e,t){return e.aoColumns[t].mData},1)}),e("columns().cache()","column().cache()",function(r){return this.iterator("column-rows",function(e,t,a,n,i){return D(e.aoData,i,"search"===r?"_aFilterData":"_aSortData",t)},1)}),e("columns().nodes()","column().nodes()",function(){return this.iterator("column-rows",function(e,t,a,n,i){return D(e.aoData,i,"anCells",t)},1)}),e("columns().visible()","column().visible()",function(a,n){var e=this.iterator("column",function(e,t){if(a===k)return e.aoColumns[t].bVisible;!function(e,t,a){var n,i,r,o,l=e.aoColumns,s=l[t],d=e.aoData;if(a===k)return s.bVisible;if(s.bVisible!==a){if(a){var u=U.inArray(!0,G(l,"bVisible"),t+1);for(i=0,r=d.length;i<r;i++)o=d[i].nTr,n=d[i].anCells,o&&o.insertBefore(n[t],n[u]||null)}else U(G(e.aoData,"anCells",t)).detach();s.bVisible=a,oe(e,e.aoHeader),oe(e,e.aoFooter),e.aiDisplay.length||U(e.nTBody).find("td[colspan]").attr("colspan",O(e)),nt(e)}}(e,t,a)});return a!==k&&(this.iterator("column",function(e,t){ct(e,null,"column-visibility",[e,t,a,n])}),(n===k||n)&&this.columns.adjust()),e}),e("columns().indexes()","column().index()",function(a){return this.iterator("column",function(e,t){return"visible"===a?I(e,t):t},1)}),t("columns.adjust()",function(){return this.iterator("table",function(e){j(e)},1)}),t("column.index()",function(e,t){if(0!==this.context.length){var a=this.context[0];if("fromVisible"===e||"toData"===e)return z(a,t);if("fromData"===e||"toVisible"===e)return I(a,t)}}),t("column()",function(e,t){return Dt(this.columns(e,t))});t("cells()",function(T,e,g){if(U.isPlainObject(T)&&(T.row===k?(g=T,T=null):(g=e,e=null)),U.isPlainObject(e)&&(g=e,e=null),null===e||e===k)return this.iterator("table",function(e){return n=e,t=T,a=bt(g),c=n.aoData,f=Ct(n,a),h=C(D(c,f,"anCells")),p=U([].concat.apply([],h)),m=n.aoColumns.length,_t("cell",t,function(e){var t="function"==typeof e;if(null===e||e===k||t){for(r=[],o=0,l=f.length;o<l;o++)for(i=f[o],s=0;s<m;s++)d={row:i,column:s},t?(u=c[i],e(d,R(n,i,s),u.anCells?u.anCells[s]:null)&&r.push(d)):r.push(d);return r}if(U.isPlainObject(e))return e.column!==k&&e.row!==k&&-1!==U.inArray(e.row,f)?[e]:[];var a=p.filter(e).map(function(e,t){return{row:t._DT_CellIndex.row,column:t._DT_CellIndex.column}}).toArray();return a.length||!e.nodeName?a:(u=U(e).closest("*[data-dt-row]")).length?[{row:u.data("dt-row"),column:u.data("dt-column")}]:[]},n,a);var n,t,a,i,r,o,l,s,d,u,c,f,h,p,m});var a,n,i,r,o,l=this.columns(e),s=this.rows(T);this.iterator("table",function(e,t){for(a=[],n=0,i=s[t].length;n<i;n++)for(r=0,o=l[t].length;r<o;r++)a.push({row:s[t][n],column:l[t][r]})},1);var t=this.cells(a,g);return U.extend(t.selector,{cols:e,rows:T,opts:g}),t}),e("cells().nodes()","cell().node()",function(){return this.iterator("cell",function(e,t,a){var n=e.aoData[t];return n&&n.anCells?n.anCells[a]:k},1)}),t("cells().data()",function(){return this.iterator("cell",function(e,t,a){return R(e,t,a)},1)}),e("cells().cache()","cell().cache()",function(n){return n="search"===n?"_aFilterData":"_aSortData",this.iterator("cell",function(e,t,a){return e.aoData[t][n][a]},1)}),e("cells().render()","cell().render()",function(n){return this.iterator("cell",function(e,t,a){return R(e,t,a,n)},1)}),e("cells().indexes()","cell().index()",function(){return this.iterator("cell",function(e,t,a){return{row:t,column:a,columnVisible:I(e,a)}},1)}),e("cells().invalidate()","cell().invalidate()",function(n){return this.iterator("cell",function(e,t,a){te(e,t,n,a)})}),t("cell()",function(e,t,a){return Dt(this.cells(e,t,a))}),t("cell().data()",function(e){var t=this.context,a=this[0];return e===k?t.length&&a.length?R(t[0],a[0].row,a[0].column):k:($(t[0],a[0].row,a[0].column,e),te(t[0],a[0].row,"data",a[0].column),this)}),t("order()",function(t,e){var a=this.context;return t===k?0!==a.length?a[0].aaSorting:k:("number"==typeof t?t=[[t,e]]:t.length&&!U.isArray(t[0])&&(t=Array.prototype.slice.call(arguments)),this.iterator("table",function(e){e.aaSorting=t.slice()}))}),t("order.listener()",function(t,a,n){return this.iterator("table",function(e){et(e,t,a,n)})}),t("order.fixed()",function(t){if(t)return this.iterator("table",function(e){e.aaSortingFixed=U.extend(!0,{},t)});var e=this.context,a=e.length?e[0].aaSortingFixed:k;return U.isArray(a)?{pre:a}:a}),t(["columns().order()","column().order()"],function(n){var i=this;return this.iterator("table",function(e,t){var a=[];U.each(i[t],function(e,t){a.push([t,n])}),e.aaSorting=a})}),t("search()",function(t,a,n,i){var e=this.context;return t===k?0!==e.length?e[0].oPreviousSearch.sSearch:k:this.iterator("table",function(e){e.oFeatures.bFilter&&_e(e,U.extend({},e.oPreviousSearch,{sSearch:t+"",bRegex:null!==a&&a,bSmart:null===n||n,bCaseInsensitive:null===i||i}),1)})}),e("columns().search()","column().search()",function(n,i,r,o){return this.iterator("column",function(e,t){var a=e.aoPreSearchCols;if(n===k)return a[t].sSearch;e.oFeatures.bFilter&&(U.extend(a[t],{sSearch:n+"",bRegex:null!==i&&i,bSmart:null===r||r,bCaseInsensitive:null===o||o}),_e(e,e.oPreviousSearch,1))})}),t("state()",function(){return this.context.length?this.context[0].oSavedState:null}),t("state.clear()",function(){return this.iterator("table",function(e){e.fnStateSaveCallback.call(e.oInstance,e,{})})}),t("state.loaded()",function(){return this.context.length?this.context[0].oLoadedState:null}),t("state.save()",function(){return this.iterator("table",function(e){nt(e)})}),b.versionCheck=b.fnVersionCheck=function(e){for(var t,a,n=b.version.split("."),i=e.split("."),r=0,o=i.length;r<o;r++)if((t=parseInt(n[r],10)||0)!==(a=parseInt(i[r],10)||0))return a<t;return!0},b.isDataTable=b.fnIsDataTable=function(e){var i=U(e).get(0),r=!1;return e instanceof b.Api||(U.each(b.settings,function(e,t){var a=t.nScrollHead?U("table",t.nScrollHead)[0]:null,n=t.nScrollFoot?U("table",t.nScrollFoot)[0]:null;t.nTable!==i&&a!==i&&n!==i||(r=!0)}),r)},b.tables=b.fnTables=function(t){var e=!1;U.isPlainObject(t)&&(e=t.api,t=t.visible);var a=U.map(b.settings,function(e){if(!t||t&&U(e.nTable).is(":visible"))return e.nTable});return e?new _(a):a},b.camelToHungarian=F,t("$()",function(e,t){var a=this.rows(t).nodes(),n=U(a);return U([].concat(n.filter(e).toArray(),n.find(e).toArray()))}),U.each(["on","one","off"],function(e,a){t(a+"()",function(){var e=Array.prototype.slice.call(arguments);e[0]=U.map(e[0].split(/\s/),function(e){return e.match(/\.dt\b/)?e:e+".dt"}).join(" ");var t=U(this.tables().nodes());return t[a].apply(t,e),this})}),t("clear()",function(){return this.iterator("table",function(e){Z(e)})}),t("settings()",function(){return new _(this.context,this.context)}),t("init()",function(){var e=this.context;return e.length?e[0].oInit:null}),t("data()",function(){return this.iterator("table",function(e){return G(e.aoData,"_aData")}).flatten()}),t("destroy()",function(p){return p=p||!1,this.iterator("table",function(t){var a,e=t.nTableWrapper.parentNode,n=t.oClasses,i=t.nTable,r=t.nTBody,o=t.nTHead,l=t.nTFoot,s=U(i),d=U(r),u=U(t.nTableWrapper),c=U.map(t.aoData,function(e){return e.nTr});t.bDestroying=!0,ct(t,"aoDestroyCallback","destroy",[t]),p||new _(t).columns().visible(!0),u.off(".DT").find(":not(tbody *)").off(".DT"),U(x).off(".DT-"+t.sInstance),i!=o.parentNode&&(s.children("thead").detach(),s.append(o)),l&&i!=l.parentNode&&(s.children("tfoot").detach(),s.append(l)),t.aaSorting=[],t.aaSortingFixed=[],tt(t),U(c).removeClass(t.asStripeClasses.join(" ")),U("th, td",o).removeClass(n.sSortable+" "+n.sSortableAsc+" "+n.sSortableDesc+" "+n.sSortableNone),d.children().detach(),d.append(c);var f=p?"remove":"detach";s[f](),u[f](),!p&&e&&(e.insertBefore(i,t.nTableReinsertBefore),s.css("width",t.sDestroyWidth).removeClass(n.sTable),(a=t.asDestroyStripes.length)&&d.children().each(function(e){U(this).addClass(t.asDestroyStripes[e%a])}));var h=U.inArray(t,b.settings);-1!==h&&b.settings.splice(h,1)})}),U.each(["column","row","cell"],function(e,s){t(s+"s().every()",function(r){var o=this.selector.opts,l=this;return this.iterator(s,function(e,t,a,n,i){r.call(l[s](t,"cell"===s?a:o,"cell"===s?o:k),t,a,n,i)})})}),t("i18n()",function(e,t,a){var n=this.context[0],i=X(e)(n.oLanguage);return i===k&&(i=t),a!==k&&U.isPlainObject(i)&&(i=i[a]!==k?i[a]:i._),i.replace("%d",a)}),b.version="1.10.18",b.settings=[],b.models={},b.models.oSearch={bCaseInsensitive:!0,sSearch:"",bRegex:!1,bSmart:!0},b.models.oRow={nTr:null,anCells:null,_aData:[],_aSortData:null,_aFilterData:null,_sFilterRow:null,_sRowStripe:"",src:null,idx:-1},b.models.oColumn={idx:null,aDataSort:null,asSorting:null,bSearchable:null,bSortable:null,bVisible:null,_sManualType:null,_bAttrSrc:!1,fnCreatedCell:null,fnGetData:null,fnSetData:null,mData:null,mRender:null,nTh:null,nTf:null,sClass:null,sContentPadding:null,sDefaultContent:null,sName:null,sSortDataType:"std",sSortingClass:null,sSortingClassJUI:null,sTitle:null,sType:null,sWidth:null,sWidthOrig:null},b.defaults={aaData:null,aaSorting:[[0,"asc"]],aaSortingFixed:[],ajax:null,aLengthMenu:[10,25,50,100],aoColumns:null,aoColumnDefs:null,aoSearchCols:[],asStripeClasses:null,bAutoWidth:!0,bDeferRender:!1,bDestroy:!1,bFilter:!0,bInfo:!0,bLengthChange:!0,bPaginate:!0,bProcessing:!1,bRetrieve:!1,bScrollCollapse:!1,bServerSide:!1,bSort:!0,bSortMulti:!0,bSortCellsTop:!1,bSortClasses:!0,bStateSave:!1,fnCreatedRow:null,fnDrawCallback:null,fnFooterCallback:null,fnFormatNumber:function(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,this.oLanguage.sThousands)},fnHeaderCallback:null,fnInfoCallback:null,fnInitComplete:null,fnPreDrawCallback:null,fnRowCallback:null,fnServerData:null,fnServerParams:null,fnStateLoadCallback:function(e){try{return JSON.parse((-1===e.iStateDuration?sessionStorage:localStorage).getItem("DataTables_"+e.sInstance+"_"+location.pathname))}catch(e){}},fnStateLoadParams:null,fnStateLoaded:null,fnStateSaveCallback:function(e,t){try{(-1===e.iStateDuration?sessionStorage:localStorage).setItem("DataTables_"+e.sInstance+"_"+location.pathname,JSON.stringify(t))}catch(e){}},fnStateSaveParams:null,iStateDuration:7200,iDeferLoading:null,iDisplayLength:10,iDisplayStart:0,iTabIndex:0,oClasses:{},oLanguage:{oAria:{sSortAscending:": activate to sort column ascending",sSortDescending:": activate to sort column descending"},oPaginate:{sFirst:"First",sLast:"Last",sNext:"Next",sPrevious:"Previous"},sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",sInfoPostFix:"",sDecimal:"",sThousands:",",sLengthMenu:"Show _MENU_ entries",sLoadingRecords:"Loading...",sProcessing:"Processing...",sSearch:"Search:",sSearchPlaceholder:"",sUrl:"",sZeroRecords:"No matching records found"},oSearch:U.extend({},b.models.oSearch),sAjaxDataProp:"data",sAjaxSource:null,sDom:"lfrtip",searchDelay:null,sPaginationType:"simple_numbers",sScrollX:"",sScrollXInner:"",sScrollY:"",sServerMethod:"GET",renderer:null,rowId:"DT_RowId"},y(b.defaults),b.defaults.column={aDataSort:null,iDataSort:-1,asSorting:["asc","desc"],bSearchable:!0,bSortable:!0,bVisible:!0,fnCreatedCell:null,mData:null,mRender:null,sCellType:"td",sClass:"",sContentPadding:"",sDefaultContent:null,sName:"",sSortDataType:"std",sTitle:null,sType:null,sWidth:null},y(b.defaults.column),b.models.oSettings={oFeatures:{bAutoWidth:null,bDeferRender:null,bFilter:null,bInfo:null,bLengthChange:null,bPaginate:null,bProcessing:null,bServerSide:null,bSort:null,bSortMulti:null,bSortClasses:null,bStateSave:null},oScroll:{bCollapse:null,iBarWidth:0,sX:null,sXInner:null,sY:null},oLanguage:{fnInfoCallback:null},oBrowser:{bScrollOversize:!1,bScrollbarLeft:!1,bBounding:!1,barWidth:0},ajax:null,aanFeatures:[],aoData:[],aiDisplay:[],aiDisplayMaster:[],aIds:{},aoColumns:[],aoHeader:[],aoFooter:[],oPreviousSearch:{},aoPreSearchCols:[],aaSorting:null,aaSortingFixed:[],asStripeClasses:null,asDestroyStripes:[],sDestroyWidth:0,aoRowCallback:[],aoHeaderCallback:[],aoFooterCallback:[],aoDrawCallback:[],aoRowCreatedCallback:[],aoPreDrawCallback:[],aoInitComplete:[],aoStateSaveParams:[],aoStateLoadParams:[],aoStateLoaded:[],sTableId:"",nTable:null,nTHead:null,nTFoot:null,nTBody:null,nTableWrapper:null,bDeferLoading:!1,bInitialised:!1,aoOpenRows:[],sDom:null,searchDelay:null,sPaginationType:"two_button",iStateDuration:0,aoStateSave:[],aoStateLoad:[],oSavedState:null,oLoadedState:null,sAjaxSource:null,sAjaxDataProp:null,bAjaxDataGet:!0,jqXHR:null,json:k,oAjaxData:k,fnServerData:null,aoServerParams:[],sServerMethod:null,fnFormatNumber:null,aLengthMenu:null,iDraw:0,bDrawing:!1,iDrawError:-1,_iDisplayLength:10,_iDisplayStart:0,_iRecordsTotal:0,_iRecordsDisplay:0,oClasses:{},bFiltered:!1,bSorted:!1,bSortCellsTop:null,oInit:null,aoDestroyCallback:[],fnRecordsTotal:function(){return"ssp"==pt(this)?1*this._iRecordsTotal:this.aiDisplayMaster.length},fnRecordsDisplay:function(){return"ssp"==pt(this)?1*this._iRecordsDisplay:this.aiDisplay.length},fnDisplayEnd:function(){var e=this._iDisplayLength,t=this._iDisplayStart,a=t+e,n=this.aiDisplay.length,i=this.oFeatures,r=i.bPaginate;return i.bServerSide?!1===r||-1===e?t+n:Math.min(t+e,this._iRecordsDisplay):!r||n<a||-1===e?n:a},oInstance:null,sInstance:null,iTabIndex:0,nScrollHead:null,nScrollFoot:null,aLastSort:[],oPlugins:{},rowIdFn:null,rowId:null},b.ext=p={buttons:{},classes:{},build:"dt/dt-1.10.18",errMode:"alert",feature:[],search:[],selector:{cell:[],column:[],row:[]},internal:{},legacy:{ajax:null},pager:{},renderer:{pageButton:{},header:{}},order:{},type:{detect:[],search:{},order:{}},_unique:0,fnVersionCheck:b.fnVersionCheck,iApiIndex:0,oJUIClasses:{},sVersion:b.version},U.extend(p,{afnFiltering:p.search,aTypes:p.type.detect,ofnSearch:p.type.search,oSort:p.type.order,afnSortData:p.order,aoFeatures:p.feature,oApi:p.internal,oStdClasses:p.classes,oPagination:p.pager}),U.extend(b.ext.classes,{sTable:"dataTable",sNoFooter:"no-footer",sPageButton:"paginate_button",sPageButtonActive:"current",sPageButtonDisabled:"disabled",sStripeOdd:"odd",sStripeEven:"even",sRowEmpty:"dataTables_empty",sWrapper:"dataTables_wrapper",sFilter:"dataTables_filter",sInfo:"dataTables_info",sPaging:"dataTables_paginate paging_",sLength:"dataTables_length",sProcessing:"dataTables_processing",sSortAsc:"sorting_asc",sSortDesc:"sorting_desc",sSortable:"sorting",sSortableAsc:"sorting_asc_disabled",sSortableDesc:"sorting_desc_disabled",sSortableNone:"sorting_disabled",sSortColumn:"sorting_",sFilterInput:"",sLengthSelect:"",sScrollWrapper:"dataTables_scroll",sScrollHead:"dataTables_scrollHead",sScrollHeadInner:"dataTables_scrollHeadInner",sScrollBody:"dataTables_scrollBody",sScrollFoot:"dataTables_scrollFoot",sScrollFootInner:"dataTables_scrollFootInner",sHeaderTH:"",sFooterTH:"",sSortJUIAsc:"",sSortJUIDesc:"",sSortJUI:"",sSortJUIAscAllowed:"",sSortJUIDescAllowed:"",sSortJUIWrapper:"",sSortIcon:"",sJUIHeader:"",sJUIFooter:""});var Ft=b.ext.pager;function Et(e,t){var a=[],n=Ft.numbers_length,i=Math.floor(n/2);return t<=n?a=m(0,t):e<=i?((a=m(0,n-2)).push("ellipsis"),a.push(t-1)):(t-1-i<=e?(a=m(t-(n-2),t)).splice(0,0,"ellipsis"):((a=m(e-i+2,e+i-1)).push("ellipsis"),a.push(t-1),a.splice(0,0,"ellipsis")),a.splice(0,0,0)),a.DT_el="span",a}U.extend(Ft,{simple:function(e,t){return["previous","next"]},full:function(e,t){return["first","previous","next","last"]},numbers:function(e,t){return[Et(e,t)]},simple_numbers:function(e,t){return["previous",Et(e,t),"next"]},full_numbers:function(e,t){return["first","previous",Et(e,t),"next","last"]},first_last_numbers:function(e,t){return["first",Et(e,t),"last"]},_numbers:Et,numbers_length:7}),U.extend(!0,b.ext.renderer,{pageButton:{_:function(l,e,s,t,d,u){var c,f,a,h=l.oClasses,p=l.oLanguage.oPaginate,m=l.oLanguage.oAria.paginate||{},T=0;try{a=U(e).find(g.activeElement).data("dt-idx")}catch(e){}!function e(t,a){var n,i,r,o=function(e){Ve(l,e.data.action,!0)};for(n=0,i=a.length;n<i;n++)if(r=a[n],U.isArray(r))e(U("<"+(r.DT_el||"div")+"/>").appendTo(t),r);else{switch(c=null,f="",r){case"ellipsis":t.append('<span class="ellipsis">&#x2026;</span>');break;case"first":c=p.sFirst,f=r+(0<d?"":" "+h.sPageButtonDisabled);break;case"previous":c=p.sPrevious,f=r+(0<d?"":" "+h.sPageButtonDisabled);break;case"next":c=p.sNext,f=r+(d<u-1?"":" "+h.sPageButtonDisabled);break;case"last":c=p.sLast,f=r+(d<u-1?"":" "+h.sPageButtonDisabled);break;default:c=r+1,f=d===r?h.sPageButtonActive:""}null!==c&&(dt(U("<a>",{class:h.sPageButton+" "+f,"aria-controls":l.sTableId,"aria-label":m[r],"data-dt-idx":T,tabindex:l.iTabIndex,id:0===s&&"string"==typeof r?l.sTableId+"_"+r:null}).html(c).appendTo(t),{action:r},o),T++)}}(U(e).empty(),t),a!==k&&U(e).find("[data-dt-idx="+a+"]").focus()}}}),U.extend(b.ext.type.detect,[function(e,t){var a=t.oLanguage.sDecimal;return u(e,a)?"num"+a:null},function(e,t){if(e&&!(e instanceof Date)&&!r.test(e))return null;var a=Date.parse(e);return null!==a&&!isNaN(a)||s(e)?"date":null},function(e,t){var a=t.oLanguage.sDecimal;return u(e,a,!0)?"num-fmt"+a:null},function(e,t){var a=t.oLanguage.sDecimal;return c(e,a)?"html-num"+a:null},function(e,t){var a=t.oLanguage.sDecimal;return c(e,a,!0)?"html-num-fmt"+a:null},function(e,t){return s(e)||"string"==typeof e&&-1!==e.indexOf("<")?"html":null}]),U.extend(b.ext.type.search,{html:function(e){return s(e)?e:"string"==typeof e?e.replace(n," ").replace(i,""):""},string:function(e){return s(e)?e:"string"==typeof e?e.replace(n," "):e}});var Lt=function(e,t,a,n){return 0===e||e&&"-"!==e?(t&&(e=d(e,t)),e.replace&&(a&&(e=e.replace(a,"")),n&&(e=e.replace(n,""))),1*e):-1/0};function Nt(a){U.each({num:function(e){return Lt(e,a)},"num-fmt":function(e){return Lt(e,a,l)},"html-num":function(e){return Lt(e,a,i)},"html-num-fmt":function(e){return Lt(e,a,i,l)}},function(e,t){p.type.order[e+a+"-pre"]=t,e.match(/^html\-/)&&(p.type.search[e+a]=p.type.search.html)})}U.extend(p.type.order,{"date-pre":function(e){var t=Date.parse(e);return isNaN(t)?-1/0:t},"html-pre":function(e){return s(e)?"":e.replace?e.replace(/<.*?>/g,"").toLowerCase():e+""},"string-pre":function(e){return s(e)?"":"string"==typeof e?e.toLowerCase():e.toString?e.toString():""},"string-asc":function(e,t){return e<t?-1:t<e?1:0},"string-desc":function(e,t){return e<t?1:t<e?-1:0}}),Nt(""),U.extend(!0,b.ext.renderer,{header:{_:function(r,o,l,s){U(r.nTable).on("order.dt.DT",function(e,t,a,n){if(r===t){var i=l.idx;o.removeClass(l.sSortingClass+" "+s.sSortAsc+" "+s.sSortDesc).addClass("asc"==n[i]?s.sSortAsc:"desc"==n[i]?s.sSortDesc:l.sSortingClass)}})},jqueryui:function(r,o,l,s){U("<div/>").addClass(s.sSortJUIWrapper).append(o.contents()).append(U("<span/>").addClass(s.sSortIcon+" "+l.sSortingClassJUI)).appendTo(o),U(r.nTable).on("order.dt.DT",function(e,t,a,n){if(r===t){var i=l.idx;o.removeClass(s.sSortAsc+" "+s.sSortDesc).addClass("asc"==n[i]?s.sSortAsc:"desc"==n[i]?s.sSortDesc:l.sSortingClass),o.find("span."+s.sSortIcon).removeClass(s.sSortJUIAsc+" "+s.sSortJUIDesc+" "+s.sSortJUI+" "+s.sSortJUIAscAllowed+" "+s.sSortJUIDescAllowed).addClass("asc"==n[i]?s.sSortJUIAsc:"desc"==n[i]?s.sSortJUIDesc:l.sSortingClassJUI)}})}}});var Pt=function(e){return"string"==typeof e?e.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"):e};function Bt(t){return function(){var e=[rt(this[b.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));return b.ext.internal[t].apply(this,e)}}return b.render={number:function(r,o,l,s,d){return{display:function(e){if("number"!=typeof e&&"string"!=typeof e)return e;var t=e<0?"-":"",a=parseFloat(e);if(isNaN(a))return Pt(e);a=a.toFixed(l),e=Math.abs(a);var n=parseInt(e,10),i=l?o+(e-n).toFixed(l).substring(2):"";return t+(s||"")+n.toString().replace(/\B(?=(\d{3})+(?!\d))/g,r)+i+(d||"")}}},text:function(){return{display:Pt}}},U.extend(b.ext.internal,{_fnExternApiFunc:Bt,_fnBuildAjax:fe,_fnAjaxUpdate:he,_fnAjaxParameters:pe,_fnAjaxUpdateDraw:me,_fnAjaxDataSrc:Te,_fnAddColumn:B,_fnColumnOptions:A,_fnAdjustColumnSizing:j,_fnVisibleToColumnIndex:z,_fnColumnIndexToVisible:I,_fnVisbleColumns:O,_fnGetColumns:V,_fnColumnTypes:w,_fnApplyColumnDefs:H,_fnHungarianMap:y,_fnCamelToHungarian:F,_fnLanguageCompat:E,_fnBrowserDetect:P,_fnAddData:M,_fnAddTr:W,_fnNodeToDataIndex:function(e,t){return t._DT_RowIndex!==k?t._DT_RowIndex:null},_fnNodeToColumnIndex:function(e,t,a){return U.inArray(a,e.aoData[t].anCells)},_fnGetCellData:R,_fnSetCellData:$,_fnSplitObjNotation:q,_fnGetObjectDataFn:X,_fnSetObjectDataFn:K,_fnGetDataMaster:Q,_fnClearTable:Z,_fnDeleteIndex:ee,_fnInvalidate:te,_fnGetRowElements:ae,_fnCreateTr:ne,_fnBuildHead:re,_fnDrawHead:oe,_fnDraw:le,_fnReDraw:se,_fnAddOptionsHtml:de,_fnDetectHeader:ue,_fnGetUniqueThs:ce,_fnFeatureHtmlFilter:ge,_fnFilterComplete:_e,_fnFilterCustom:be,_fnFilterColumn:De,_fnFilter:Ce,_fnFilterCreateSearch:ye,_fnEscapeRegex:ve,_fnFilterData:we,_fnFeatureHtmlInfo:Fe,_fnUpdateInfo:Ee,_fnInfoMacros:Le,_fnInitialise:Ne,_fnInitComplete:Pe,_fnLengthChange:Be,_fnFeatureHtmlLength:Ae,_fnFeatureHtmlPaginate:Oe,_fnPageChange:Ve,_fnFeatureHtmlProcessing:He,_fnProcessingDisplay:Me,_fnFeatureHtmlTable:We,_fnScrollDraw:$e,_fnApplyToChildren:Ue,_fnCalculateColumnWidths:Ge,_fnThrottle:je,_fnConvertToWidth:ze,_fnGetWidestNode:Ye,_fnGetMaxLenString:Je,_fnStringToCss:qe,_fnSortFlatten:Xe,_fnSort:Ke,_fnSortAria:Qe,_fnSortListener:Ze,_fnSortAttachListener:et,_fnSortingClasses:tt,_fnSortData:at,_fnSaveState:nt,_fnLoadState:it,_fnSettingsFromNode:rt,_fnLog:ot,_fnMap:lt,_fnBindAction:dt,_fnCallbackReg:ut,_fnCallbackFire:ct,_fnLengthOverflow:ft,_fnRenderer:ht,_fnDataSource:pt,_fnRowAttributes:ie,_fnExtend:st,_fnCalculateEnd:function(){}}),((U.fn.dataTable=b).$=U).fn.dataTableSettings=b.settings,U.fn.dataTableExt=b.ext,U.fn.DataTable=function(e){return U(this).dataTable(e).api()},U.each(b,function(e,t){U.fn.DataTable[e]=t}),U.fn.dataTable});var WFDCT_DropDownSelect={RendererChain:function(e){},RendererDataChain:HTMLControl.RendererDataChain,GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,ToViewStatus:HTMLControl.ToViewStatus},WFDCT_SimpleLabel={RendererChain:HTMLControl.RendererChain,RendererDataChain:HTMLControl.RendererDataChain,GetValue:HTMLControl.GetValue,SetValue:function(e,t,a,n){if(t){var i=e.attr("defformat");if("yyyy-MM-dd"==i){var r=t.value;if(r){var o=DateUtility.ConvertFromString(r);r=DateUtility.Format(o,i)}e.text(r),e.attr("control_value",r),e.attr("control_source_value",t.value)}else e.text(t.value),e.attr("control_value",t.value),e.attr("control_source_value",t.value)}}},WFDCT_SubFormListContainer={_AddButtonElem:null,_$TemplateTableRow:null,_$SingleControlElem:null,_$TableElem:null,_$TableHeadElem:null,_$TableBodyElem:null,_EditInRow:!0,_Display_OPButtons_Add:!0,_Display_OPButtons_Update:!0,_Display_OPButtons_Del:!0,_Display_OPButtons_View:!0,_FormRuntimeHost:null,_FormDataRelationList:null,RendererChain:function(e){var t=e.$singleControlElem;this._$SingleControlElem=t,this._$TableElem=this._$SingleControlElem.find("table"),this._$TableBodyElem=this._$TableElem.find("tbody"),this._$TableHeadElem=this._$TableElem.find("thead"),this._EditInRow="false"!=t.attr("editinrow"),this._FormRuntimeHost=e.formRuntimeInstance,this._FormDataRelationList=this._FormRuntimeHost._FormDataRelationList;var a=t.attr("opbuttons");this._Display_OPButtons_Add=0<=a.indexOf("add"),this._Display_OPButtons_Update=0<=a.indexOf("update"),this._Display_OPButtons_Del=0<=a.indexOf("delete"),this._Display_OPButtons_View=0<=a.indexOf("view");t.html();var n=t.find("table[is_template_table='true']");n.addClass("sub-form-list-table"),t.html(""),this._AddButtonElem=$("<div class='sflb-button sflb-add' title='新增'>新增</div>"),this._Display_OPButtons_Add&&t.prepend("<div class='sub-form-list-button-wrap'></div>").find("div").append(this._AddButtonElem),(this._Display_OPButtons_Del||this._Display_OPButtons_Update||this._Display_OPButtons_View)&&this._$TableHeadElem.find("tr").append("<th style='width: 120px'>操作</th>"),t.append(n);var i=HTMLControl.GetControlInstanceNameByElem(t);this._AddButtonElem.bind("click",{hostElem:t,_rendererChainParas:e,selfObj:this,instanceName:i},this.AddEvent),this._$TemplateTableRow=t.find("table tbody tr").clone(),t.find("table tbody tr").remove();var r=this.ValidateRendererChainEnable();r.success||DialogUtility.AlertText(r.msg);var o=this.TryGetRelationPOClone();t.attr("relation_po_id",o.id)},RendererDataChain:function(e){for(var t=e.$singleControlElem,a=e.relationFormRecordComplexPo,n=t.attr("relation_po_id"),i=FormRelationPOUtility.FindRelationPOInRelationFormRecordComplexPo(a,n),r=FormRelationPOUtility.Get1ToNDataRecord(i),o=0;o<r.length;o++){var l=r[o];if(this._EditInRow)this.InnerRow_AddRowToContainer(l);else{var s=[],d=ArrayUtility.WhereSingle(a.formRecordDataRelationPOList,function(e){return e.parentId==n}),u=ArrayUtility.WhereSingle(this._FormDataRelationList,function(e){return e.parentId==n});if(d){for(var c=d.selfKeyFieldName,f=d.outerKeyFieldName,h=FormRelationPOUtility.FindFieldValueInOneDataRecord(l,f),p=JsonUtility.CloneSimple(u),m=FormRelationPOUtility.Get1ToNDataRecord(d),T=[],g=0;g<m.length;g++){var _=m[g],b=FormRelationPOUtility.FindRecordFieldPOArray(_);ArrayUtility.True(b,function(e){return e.fieldName==c&&e.value==h})&&T.push(_)}FormRelationPOUtility.Add1ToNDataRecord(p,T),s.push(p)}this.Dialog_AddRowToContainer(l,s,!0)}}this.InnerRow_CompletedLastEdit()},SerializationValue:function(e,t,a){this.InnerRow_CompletedLastEdit();for(var n=[],i=this._$SingleControlElem.find("tr[is_sub_list_tr='true']"),r=(this.TryGetRelationPOClone(),0);r<i.length;r++){var o=$(i[r]),l=this.GetRowData(o),s=FormRelationPOUtility.Get1To1DataRecord(l),d=FormRelationPOUtility.FindIDFieldPOInOneDataRecord(s).value,u=this.TryBuildRecord(l,d,s.recordFieldPOList);n.push(u)}console.log(n),this._EditInRow||(t.isSave=!1),FormRelationPOUtility.Add1ToNDataRecord(t,n)},GetValue:function(e,t,a){DialogUtility.AlertText("DynamicContainer类型的控件的序列化交由SerializationValue方法自行完成!")},SetValue:function(e,t,a){},ToViewStatus:function(e,t,a){e.find(".sub-form-list-button-wrap").hide(),e.find(".sflt-td-operation-update").hide(),e.find(".sflt-td-operation-del").hide()},AddEvent:function(e){var t=e.data.hostElem,a=e.data.selfObj,n=e.data.instanceName,i=e.data._rendererChainParas;a._EditInRow?a.InnerRow_AddRowToContainer(null):a.Dialog_ShowAddRowSubFormDialog(e,t,i,n)},ValidateSerializationSubFormDataEnable:function(e){return!0},ValidateRendererChainEnable:function(){return{success:!0,msg:""}},GetRowId:function(e){return e.attr("tr_record_id")},SetRowId:function(e,t){e.attr("tr_record_id",t)},GetRowData:function(e){var t=e.attr("tr_record_data");return JsonUtility.StringToJson(t)},GetChildRelationPOArray:function(e){var t=e.attr("child_relation_po_array");return StringUtility.IsNullOrEmpty(t)?null:JsonUtility.StringToJson(t)},SaveDataToRowAttr:function(e,t,a){t.attr("is_sub_list_tr","true"),t.attr("tr_record_id",FormRelationPOUtility.FindIdFieldPOByRelationPO(e).value),t.attr("tr_record_data",JsonUtility.JsonToString(e)),a&&0<a.length&&t.attr("child_relation_po_array",JsonUtility.JsonToString(a))},TryGetChildRelationPOArrayClone:function(t){var e=ArrayUtility.Where(this._FormDataRelationList,function(e){return e.parentId==t.id});return JsonUtility.CloneArraySimple(e)},TryGetRelationPOClone:function(){if(this._po)return JsonUtility.CloneSimple(this._po);var e=this.TryGetBindDataSourceAttr(),t=null;if("autoTesting"==e){var a=this.TryGetInnerControlBindTableName();null==(t=FormRelationPOUtility.FindRelationPOByTableName(this._FormDataRelationList,a))&&DialogUtility.AlertText("WFDCT_SubFormListContainer.TryGetRelationPO:通过内部控件绑定的表找不到具体的数据关联实体！")}else null==(t=FormRelationPOUtility.FindRelationPOById(this._FormDataRelationList,e))&&DialogUtility.AlertText("WFDCT_SubFormListContainer.TryGetRelationPO:通过ID"+e+"找不到具体的数据关联实体！");return this._po=t,JsonUtility.CloneSimple(this._po)},TryGetInnerControlBindTableName:function(){var e=HTMLControl.FindALLControls(this._$TemplateTableRow),t=null;return e.each(function(){t?t!=HTMLControl.GetControlBindTableName($(this))&&DialogUtility.AlertText("子表区域中的控件绑定了多个表!"):t=HTMLControl.GetControlBindTableName($(this))}),t},TryGetBindDataSourceAttr:function(){return this._$SingleControlElem.attr("binddatasource")},TryBuildRecord:function(t,e,a){var n=t.outerKeyFieldName,i=t.selfKeyFieldName,r="",o=ArrayUtility.WhereSingle(this._FormDataRelationList,function(e){return e.id==t.parentId});if(StringUtility.IsNullOrEmpty(n)){var l="数据源未设置外键关联字段!";throw DialogUtility.AlertText(l),l}if(StringUtility.IsNullOrEmpty(i)){l="数据源未设置本身关联字段!";throw DialogUtility.AlertText(l),l}if(FormRelationPOUtility.IsMainRelationPO(o)&&"ID"==n)r=this._FormRuntimeHost.GetRecordId();else{var s=o.tableId,d=HTMLControl.GetSimpleControlValue(s,n);if(StringUtility.IsNullOrEmpty(d)){l="找不到绑定了表:"+s+",字段:"+n+"的控件,请确认页面放置了该控件,并存在值!";throw DialogUtility.AlertText(l),l}}return FormRelationPOUtility.BuildRecord(a,"",e,n,r,i)},_$LastEditRow:null,InnerRow_AddRowToContainer:function(e){this.InnerRow_CompletedLastEdit();var t=this._$TemplateTableRow.clone(),a=$("<td><div class='sflt-td-operation-outer-wrap'></div></td>"),n=a.find("div"),i=$("<div title='删除' class='sflt-td-operation-del'></div>");i.bind("click",{selfObj:this},function(e){e.data.selfObj.InnerRow_Delete($(this).parent().parent().parent())}),n.append(i);var r=$("<div title='编辑' class='sflt-td-operation-update'></div>");if(r.bind("click",{selfObj:this},function(e){e.data.selfObj.InnerRow_ToEditStatus($(this).parent().parent().parent())}),n.append(r),t.append(a),this._$TableBodyElem.append(t),this._$LastEditRow=t,e){for(var o=HTMLControl.FindALLControls(this._$LastEditRow),l=0;l<o.length;l++){var s=$(o[l]),d=HTMLControl.GetControlInstanceByElem(s),u=HTMLControl.GetControlBindFieldName(s),c=FormRelationPOUtility.FindFieldPOInOneDataRecord(e,u);d.SetValue(s,c,null,null)}var f=FormRelationPOUtility.FindIDFieldPOInOneDataRecord(e).value;this.SetRowId(t,f)}},InnerRow_ToEditStatus:function(e){this.InnerRow_CompletedLastEdit();for(var t=this.GetRowData(e),a=e.find("[is_inner_row_span='true']"),n=0;n<a.length;n++){var i=$(a[n]),r=i.attr("edit_control_id"),o=this._$TemplateTableRow.find("#"+r).clone(),l=HTMLControl.GetControlBindFieldName(o),s=FormRelationPOUtility.FindFieldPOByRelationPO(t,l);HTMLControl.GetControlInstanceByElem(o).SetValue(o,s,{}),i.parent().append(o),i.remove()}this._$LastEditRow=e},InnerRow_ToViewStatus:function(e,t){if(this._$LastEditRow)for(var a=HTMLControl.FindALLControls(this._$LastEditRow),n=0;n<a.length;n++){var i=$(a[n]),r=HTMLControl.GetControlBindFieldName(i),o=FormRelationPOUtility.FindFieldPOByRelationPO(e,r).value,l=$("<span is_inner_row_span='true' edit_control_id='"+i.attr("id")+"'>"+o+"</span>");i.before(l),i.remove()}this._$LastEditRow=null},InnerRow_Delete:function(e){this.InnerRow_CompletedLastEdit(),e.remove()},InnerRow_CompletedLastEdit:function(){if(this._$LastEditRow){for(var e=HTMLControl.FindALLControls(this._$LastEditRow),t=this.TryGetRelationPOClone(),a=[],n=0;n<e.length;n++){var i=$(e[n]),r=HTMLControl.TryGetFieldTransferPO(i,t.id,t.singleName,t.relationType);a.push(r)}var o=this.GetRowId(this._$LastEditRow);o||(o=StringUtility.Guid()),FormRelationPOUtility.CreateIdFieldInRecordFieldPOArray(a,o);var l=this.TryBuildRecord(t,o,a);t=FormRelationPOUtility.Add1To1DataRecordFieldPOList(t,a,"",l.recordId,l.outerFieldName,l.outerFieldValue,l.selfFieldName),this.SaveDataToRowAttr(t,this._$LastEditRow),this.InnerRow_ToViewStatus(t,this._$LastEditRow)}},Dialog_Get_Button_Click_Para:function(e){var t=this.TryGetRelationPOClone();if("ID"==t.outerKeyFieldName)return{FormId:e.attr("formid"),ButtonId:"",ElemId:"",RecordId:"",WindowHeight:e.attr("windowheight"),WindowWidth:e.attr("windowwidth"),InstanceName:e.attr("client_instance_name"),DialogWindowTitle:e.attr("dialogwindowtitle"),ParentRecordId:this._FormRuntimeHost.GetRecordId(),SelfKeyFieldName:t.selfKeyFieldName,OuterKeyFieldName:t.outerKeyFieldName};var a="暂时只支持关联父记录的ID字段!";throw DialogUtility.AlertText(a),a},Dialog_AddRow_AddViewButton:function(e,t,a,n,i,r){var o=$("<div title='查看' class='sflt-td-operation-view'></div>"),l=this.Dialog_Get_Button_Click_Para(i);o.bind("click",{$tr:t,idValue:a,oneDataRecord:n,dialogWindowPara:l,isPreview:r},function(e){var t,a=e.data.dialogWindowPara;a.OperationType="view",a.RecordId=e.data.idValue,t=r?BaseUtility.BuildView("/HTML/Builder/Form/SubFormPreview.html",a):BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormSubRuntime.html",a),DialogUtility.OpenIframeWindow(window,DialogUtility.DialogId,t,{title:a.DialogWindowTitle,width:a.WindowWidth,height:a.WindowHeight},1)}),e.append(o)},Dialog_AddRow_AddUpdateButton:function(e,t,a,n,i,r){var o=$("<div title='编辑' class='sflt-td-operation-update'></div>"),l=this.Dialog_Get_Button_Click_Para(i);o.bind("click",{$tr:t,idValue:a,oneDataRecord:n,dialogWindowPara:l,isPreview:r},function(e){var t,a=e.data.dialogWindowPara;a.OperationType="update",a.RecordId=e.data.idValue,t=r?BaseUtility.BuildView("/HTML/Builder/Form/SubFormPreview.html",a):BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormSubRuntime.html",a),DialogUtility.OpenIframeWindow(window,DialogUtility.DialogId,t,{title:a.DialogWindowTitle,width:a.WindowWidth,height:a.WindowHeight},1)}),e.append(o)},Dialog_AddRow_AddDeleteButton:function(e,t,a,n,i,r){var o=$("<div title='删除' class='sflt-td-operation-del'></div>");o.bind("click",{$tr:t,idValue:a,oneDataRecord:n,isPreview:r},function(e){e.data.$tr.remove()}),e.append(o)},Dialog_ShowAddRowSubFormDialog:function(e,t,a,n){var i,r=this.Dialog_Get_Button_Click_Para(t);r.DialogWindowTitle||(r.DialogWindowTitle="应用构建系统"),r.OperationType="add",r.RecordId=StringUtility.Guid(),i=this._FormRuntimeHost.IsPreview()?BaseUtility.BuildView("/HTML/Builder/Form/SubFormPreview.html",r):BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormSubRuntime.html",r),DialogUtility.OpenIframeWindow(window,DialogUtility.DialogId,i,{title:r.DialogWindowTitle,width:r.WindowWidth,height:r.WindowHeight},1)},Dialog_SubFormDialogCompletedEdit:function(e,t,a){var n=HTMLControl.GetInstance(e);(function(e,t){var a=FormRelationPOUtility.FindMainRelationPO(t.formRecordDataRelationPOList),n=FormRelationPOUtility.Get1To1DataRecord(a);this.Dialog_AddRowToContainer(n,!1)}).call(n,t,a)},Dialog_AddRowToContainer:function(e,t){if(e){for(var a=this._$TemplateTableRow.clone(),n=HTMLControl.FindALLControls(a),i=0;i<n.length;i++){var r=$(n[i]),o=HTMLControl.GetControlInstanceByElem(r),l=HTMLControl.GetControlBindFieldName(r),s=FormRelationPOUtility.FindFieldPOInOneDataRecord(e,l);o.SetValue(r,s,null,null)}var d=FormRelationPOUtility.FindIDFieldPOInOneDataRecord(e),u=$("<td><div class='sflt-td-operation-outer-wrap'></div></td>"),c=u.find("div");t?(this._Display_OPButtons_View&&this.Dialog_AddRow_AddViewButton(c,a,d.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this._Display_OPButtons_Update&&this.Dialog_AddRow_AddUpdateButton(c,a,d.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this._Display_OPButtons_Del&&this.Dialog_AddRow_AddDeleteButton(c,a,d.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview())):(this.Dialog_AddRow_AddViewButton(c,a,d.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this.Dialog_AddRow_AddUpdateButton(c,a,d.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this.Dialog_AddRow_AddDeleteButton(c,a,d.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview())),a.append(u);var f=d.value,h=this._$SingleControlElem.find("tr[tr_record_id='"+f+"']");0==h.length?this._$TableBodyElem.append(a):(h.after(a),h.remove());var p=this.TryGetRelationPOClone();p=FormRelationPOUtility.Add1To1DataRecord(p,e),this.SaveDataToRowAttr(p,a)}}},WFDCT_SubFormListContainer1={Dialog_SubFormDialogCompletedEdit:function(e,t,a){var n=HTMLControl.GetInstance(e);(function(e,t){for(var a=this.TryGetRelationPOClone(),n=this.TryGetChildRelationPOArrayClone(a),i=FormRelationPOUtility.FindMainRelationPO(t.formRecordDataRelationPOList),r=FormRelationPOUtility.FindNotMainRelationPO(t.formRecordDataRelationPOList),o=[],l=0;l<n.length;l++){var s=n[l].tableName;(u=FormRelationPOUtility.FindRelationPOByTableName(r,s))&&(u.id=n[l].id,u.parentId=n[l].parentId,o.push(u))}var d=FormRelationPOUtility.Get1To1DataRecord(i);for(l=0;l<o.length;l++)for(var u,c=(u=o[l]).selfKeyFieldName,f=u.outerKeyFieldName,h=FormRelationPOUtility.FindFieldValueInOneDataRecord(d,f),p=0;p<u.listDataRecord.length;p++){var m=FormRelationPOUtility.FindRecordFieldPOArray(u.listDataRecord[p]);FormRelationPOUtility.CreateFieldInRecordFieldPOArray(m,c,h)}this.Dialog_AddRowToContainer(d,o,!1)}).call(n,t,a)},Dialog_AddRowToContainer:function(e,t,a){if(e){for(var n=this._$TemplateTableRow.clone(),i=HTMLControl.FindALLControls(n),r=0;r<i.length;r++){var o=$(i[r]),l=HTMLControl.GetControlInstanceByElem(o),s=HTMLControl.GetControlBindFieldName(o),d=FormRelationPOUtility.FindFieldPOInOneDataRecord(e,s);l.SetValue(o,d,null,null)}var u=FormRelationPOUtility.FindIDFieldPOInOneDataRecord(e),c=$("<td><div class='sflt-td-operation-outer-wrap'></div></td>"),f=c.find("div");a?(this._Display_OPButtons_View&&this.Dialog_AddRow_AddViewButton(f,n,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this._Display_OPButtons_Update&&this.Dialog_AddRow_AddUpdateButton(f,n,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this._Display_OPButtons_Del&&this.Dialog_AddRow_AddDeleteButton(f,n,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview())):(this.Dialog_AddRow_AddViewButton(f,n,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this.Dialog_AddRow_AddUpdateButton(f,n,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this.Dialog_AddRow_AddDeleteButton(f,n,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview())),n.append(c);var h=u.value,p=this._$SingleControlElem.find("tr[tr_record_id='"+h+"']");0==p.length?this._$TableBodyElem.append(n):(p.after(n),p.remove());var m=this.TryGetRelationPOClone();m=FormRelationPOUtility.Add1To1DataRecord(m,e),this.SaveDataToRowAttr(m,n,t)}},Dialog_AddRow_AddViewButton:function(e,t,a,n,i,r){var o=$("<div title='查看' class='sflt-td-operation-view'></div>"),l=this.Dialog_Get_Button_Click_Para(i);o.bind("click",{$tr:t,idValue:a,oneDataRecord:n,dialogWindowPara:l,isPreview:r},function(e){var t,a=e.data.dialogWindowPara;a.OperationType="view",a.RecordId=e.data.idValue,t=r?BaseUtility.BuildView("/HTML/Builder/Form/SubFormPreview.html",a):BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormSubRuntime.html",a),DialogUtility.OpenIframeWindow(window,DialogUtility.DialogId,t,{title:a.DialogWindowTitle,width:a.WindowWidth,height:a.WindowHeight},1)}),e.append(o)},Dialog_AddRow_AddUpdateButton:function(e,t,a,n,i,r){var o=$("<div title='编辑' class='sflt-td-operation-update'></div>"),l=this.Dialog_Get_Button_Click_Para(i);o.bind("click",{$tr:t,idValue:a,oneDataRecord:n,dialogWindowPara:l,isPreview:r},function(e){var t,a=e.data.dialogWindowPara;a.OperationType="update",a.RecordId=e.data.idValue,t=r?BaseUtility.BuildView("/HTML/Builder/Form/SubFormPreview.html",a):BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormSubRuntime.html",a),DialogUtility.OpenIframeWindow(window,DialogUtility.DialogId,t,{title:a.DialogWindowTitle,width:a.WindowWidth,height:a.WindowHeight},1)}),e.append(o)},Dialog_AddRow_AddDeleteButton:function(e,t,a,n,i,r){var o=$("<div title='删除' class='sflt-td-operation-del'></div>");o.bind("click",{$tr:t,idValue:a,oneDataRecord:n,isPreview:r},function(e){e.data.$tr.remove()}),e.append(o)},Dialog_Get_SubForm_RecordComplexPo:function(e,t,a){var n=HTMLControl.GetInstance(e);return function(e,t){var a=this._$SingleControlElem.find("tr[tr_record_id='"+t+"']"),n=this.GetRowData(a),i=this.GetChildRelationPOArray(a),r=FormRelationPOUtility.FindMainRelationPO(e),o=FormRelationPOUtility.Get1To1DataRecord(n);FormRelationPOUtility.Add1To1DataRecordFieldPOList(r,o.recordFieldPOList,o.desc,o.recordId,o.outerFieldName,o.outerFieldValue,o.selfFieldName);for(var l=FormRelationPOUtility.FindNotMainRelationPO(e),s=0;s<l.length;s++){var d=l[s],u=d.tableName,c=ArrayUtility.WhereSingle(i,function(e){return e.tableName==u});c&&FormRelationPOUtility.Add1ToNDataRecord(d,FormRelationPOUtility.Get1ToNDataRecord(c))}}.call(n,t,a),{formRecordDataRelationPOList:t}}},WFDCT_TextBox={RendererChain:function(e){},RendererDataChain:function(){},GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,ToViewStatus:HTMLControl.ToViewStatus},WFDCT_TextDateTime={RendererChain:function(e){},RendererDataChain:HTMLControl.RendererDataChain,GetValue:HTMLControl.GetValue,SetValue:function(e,t,a,n){if(t){var i=t.value,r=DateUtility.ConvertFromString(i);i=DateUtility.Format(r,e.attr("datetimeformat")),e.val(i),e.attr("control_value",i),e.attr("control_time_value",t.value)}},ToViewStatus:HTMLControl.ToViewStatus};function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(a){"function"==typeof define&&define.amd?define(["jquery","datatables.net"],function(e){return a(e,window,document)}):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=function(e,t){return e||(e=window),t&&t.fn.dataTable||(t=require("datatables.net")(e,t).$),a(t,e,e.document)}:a(jQuery,window,document)}(function(v,s,d,S){var t,r=v.fn.dataTable,u=function e(t,a){var n=this;if(this instanceof e){a!==S&&!0!==a||(a={});var i=v.fn.dataTable.camelToHungarian;i&&(i(e.defaults,e.defaults,!0),i(e.defaults,a));var r=new v.fn.dataTable.Api(t).settings()[0];if(this.s={dt:r,iTableColumns:r.aoColumns.length,aiOuterWidths:[],aiInnerWidths:[],rtl:"rtl"===v(r.nTable).css("direction")},this.dom={scroller:null,header:null,body:null,footer:null,grid:{wrapper:null,dt:null,left:{wrapper:null,head:null,body:null,foot:null},right:{wrapper:null,head:null,body:null,foot:null}},clone:{left:{header:null,body:null,footer:null},right:{header:null,body:null,footer:null}}},r._oFixedColumns)throw"FixedColumns already initialised on this table";r._oFixedColumns=this,r._bInitComplete?this._fnConstruct(a):r.oApi._fnCallbackReg(r,"aoInitComplete",function(){n._fnConstruct(a)},"FixedColumns")}else alert("FixedColumns warning: FixedColumns must be initialised with the 'new' keyword.")};return v.extend(u.prototype,{fnUpdate:function(){this._fnDraw(!0)},fnRedrawLayout:function(){this._fnColCalc(),this._fnGridLayout(),this.fnUpdate()},fnRecalculateHeight:function(e){delete e._DTTC_iHeight,e.style.height="auto"},fnSetRowHeight:function(e,t){e.style.height=t+"px"},fnGetPosition:function(e){var t,a=this.s.dt.oInstance;if(v(e).parents(".DTFC_Cloned").length){if("tr"===e.nodeName.toLowerCase())return t=v(e).index(),a.fnGetPosition(v("tr",this.s.dt.nTBody)[t]);var n=v(e).index();return t=v(e.parentNode).index(),[a.fnGetPosition(v("tr",this.s.dt.nTBody)[t]),n,a.oApi._fnVisibleToColumnIndex(this.s.dt,n)]}return a.fnGetPosition(e)},_fnConstruct:function(e){var r=this;if("function"==typeof this.s.dt.oInstance.fnVersionCheck&&!0===this.s.dt.oInstance.fnVersionCheck("1.8.0"))if(""!==this.s.dt.oScroll.sX){this.s=v.extend(!0,this.s,u.defaults,e);var t,a=this.s.dt.oClasses;this.dom.grid.dt=v(this.s.dt.nTable).parents("div."+a.sScrollWrapper)[0],this.dom.scroller=v("div."+a.sScrollBody,this.dom.grid.dt)[0],this._fnColCalc(),this._fnGridSetup();var n=!1;v(this.s.dt.nTableWrapper).on("mousedown.DTFC",function(e){0===e.button&&(n=!0,v(d).one("mouseup",function(){n=!1}))}),v(this.dom.scroller).on("mouseover.DTFC touchstart.DTFC",function(){n||(t="main")}).on("scroll.DTFC",function(e){!t&&e.originalEvent&&(t="main"),"main"===t&&(0<r.s.iLeftColumns&&(r.dom.grid.left.liner.scrollTop=r.dom.scroller.scrollTop),0<r.s.iRightColumns&&(r.dom.grid.right.liner.scrollTop=r.dom.scroller.scrollTop))});var i="onwheel"in d.createElement("div")?"wheel.DTFC":"mousewheel.DTFC";0<r.s.iLeftColumns&&v(r.dom.grid.left.liner).on("mouseover.DTFC touchstart.DTFC",function(){n||(t="left")}).on("scroll.DTFC",function(e){!t&&e.originalEvent&&(t="left"),"left"===t&&(r.dom.scroller.scrollTop=r.dom.grid.left.liner.scrollTop,0<r.s.iRightColumns&&(r.dom.grid.right.liner.scrollTop=r.dom.grid.left.liner.scrollTop))}).on(i,function(e){var t="wheel"===e.type?-e.originalEvent.deltaX:e.originalEvent.wheelDeltaX;r.dom.scroller.scrollLeft-=t}),0<r.s.iRightColumns&&v(r.dom.grid.right.liner).on("mouseover.DTFC touchstart.DTFC",function(){n||(t="right")}).on("scroll.DTFC",function(e){!t&&e.originalEvent&&(t="right"),"right"===t&&(r.dom.scroller.scrollTop=r.dom.grid.right.liner.scrollTop,0<r.s.iLeftColumns&&(r.dom.grid.left.liner.scrollTop=r.dom.grid.right.liner.scrollTop))}).on(i,function(e){var t="wheel"===e.type?-e.originalEvent.deltaX:e.originalEvent.wheelDeltaX;r.dom.scroller.scrollLeft-=t}),v(s).on("resize.DTFC",function(){r._fnGridLayout.call(r)});var o=!0,l=v(this.s.dt.nTable);l.on("draw.dt.DTFC",function(){r._fnColCalc(),r._fnDraw.call(r,o),o=!1}).on("column-sizing.dt.DTFC",function(){r._fnColCalc(),r._fnGridLayout(r)}).on("column-visibility.dt.DTFC",function(e,t,a,n,i){(i===S||i)&&(r._fnColCalc(),r._fnGridLayout(r),r._fnDraw(!0))}).on("select.dt.DTFC deselect.dt.DTFC",function(e,t,a,n){"dt"===e.namespace&&r._fnDraw(!1)}).on("destroy.dt.DTFC",function(){l.off(".DTFC"),v(r.dom.scroller).off(".DTFC"),v(s).off(".DTFC"),v(r.s.dt.nTableWrapper).off(".DTFC"),v(r.dom.grid.left.liner).off(".DTFC "+i),v(r.dom.grid.left.wrapper).remove(),v(r.dom.grid.right.liner).off(".DTFC "+i),v(r.dom.grid.right.wrapper).remove()}),this._fnGridLayout(),this.s.dt.oInstance.fnDraw(!1)}else this.s.dt.oInstance.oApi._fnLog(this.s.dt,1,"FixedColumns is not needed (no x-scrolling in DataTables enabled), so no action will be taken. Use 'FixedHeader' for column fixing when scrolling is not enabled");else alert("FixedColumns "+u.VERSION+" required DataTables 1.8.0 or later. Please upgrade your DataTables installation")},_fnColCalc:function(){var r=this,o=0,l=0;this.s.aiInnerWidths=[],this.s.aiOuterWidths=[],v.each(this.s.dt.aoColumns,function(e,t){var a,n=v(t.nTh);if(n.filter(":visible").length){var i=n.outerWidth();0===r.s.aiOuterWidths.length&&(i+="string"==typeof(a=v(r.s.dt.nTable).css("border-left-width"))&&-1===a.indexOf("px")?1:parseInt(a,10)),r.s.aiOuterWidths.length===r.s.dt.aoColumns.length-1&&(i+="string"==typeof(a=v(r.s.dt.nTable).css("border-right-width"))&&-1===a.indexOf("px")?1:parseInt(a,10)),r.s.aiOuterWidths.push(i),r.s.aiInnerWidths.push(n.width()),e<r.s.iLeftColumns&&(o+=i),r.s.iTableColumns-r.s.iRightColumns<=e&&(l+=i)}else r.s.aiInnerWidths.push(0),r.s.aiOuterWidths.push(0)}),this.s.iLeftWidth=o,this.s.iRightWidth=l},_fnGridSetup:function(){var e,t=this._fnDTOverflow();this.dom.body=this.s.dt.nTable,this.dom.header=this.s.dt.nTHead.parentNode,this.dom.header.parentNode.parentNode.style.position="relative";var a=v('<div class="DTFC_ScrollWrapper" style="position:relative; clear:both;"><div class="DTFC_LeftWrapper" style="position:absolute; top:0; left:0;" aria-hidden="true"><div class="DTFC_LeftHeadWrapper" style="position:relative; top:0; left:0; overflow:hidden;"></div><div class="DTFC_LeftBodyWrapper" style="position:relative; top:0; left:0; overflow:hidden;"><div class="DTFC_LeftBodyLiner" style="position:relative; top:0; left:0; overflow-y:scroll;"></div></div><div class="DTFC_LeftFootWrapper" style="position:relative; top:0; left:0; overflow:hidden;"></div></div><div class="DTFC_RightWrapper" style="position:absolute; top:0; right:0;" aria-hidden="true"><div class="DTFC_RightHeadWrapper" style="position:relative; top:0; left:0;"><div class="DTFC_RightHeadBlocker DTFC_Blocker" style="position:absolute; top:0; bottom:0;"></div></div><div class="DTFC_RightBodyWrapper" style="position:relative; top:0; left:0; overflow:hidden;"><div class="DTFC_RightBodyLiner" style="position:relative; top:0; left:0; overflow-y:scroll;"></div></div><div class="DTFC_RightFootWrapper" style="position:relative; top:0; left:0;"><div class="DTFC_RightFootBlocker DTFC_Blocker" style="position:absolute; top:0; bottom:0;"></div></div></div></div>')[0],n=a.childNodes[0],i=a.childNodes[1];this.dom.grid.dt.parentNode.insertBefore(a,this.dom.grid.dt),a.appendChild(this.dom.grid.dt),this.dom.grid.wrapper=a,0<this.s.iLeftColumns&&(this.dom.grid.left.wrapper=n,this.dom.grid.left.head=n.childNodes[0],this.dom.grid.left.body=n.childNodes[1],this.dom.grid.left.liner=v("div.DTFC_LeftBodyLiner",a)[0],a.appendChild(n)),0<this.s.iRightColumns&&(this.dom.grid.right.wrapper=i,this.dom.grid.right.head=i.childNodes[0],this.dom.grid.right.body=i.childNodes[1],this.dom.grid.right.liner=v("div.DTFC_RightBodyLiner",a)[0],i.style.right=t.bar+"px",(e=v("div.DTFC_RightHeadBlocker",a)[0]).style.width=t.bar+"px",e.style.right=-t.bar+"px",this.dom.grid.right.headBlock=e,(e=v("div.DTFC_RightFootBlocker",a)[0]).style.width=t.bar+"px",e.style.right=-t.bar+"px",this.dom.grid.right.footBlock=e,a.appendChild(i)),this.s.dt.nTFoot&&(this.dom.footer=this.s.dt.nTFoot.parentNode,0<this.s.iLeftColumns&&(this.dom.grid.left.foot=n.childNodes[2]),0<this.s.iRightColumns&&(this.dom.grid.right.foot=i.childNodes[2])),this.s.rtl&&v("div.DTFC_RightHeadBlocker",a).css({left:-t.bar+"px",right:""})},_fnGridLayout:function(){var e,a=this,t=this.dom.grid,n=(v(t.wrapper).width(),this.s.dt.nTable.parentNode.offsetHeight),i=this.s.dt.nTable.parentNode.parentNode.offsetHeight,r=this._fnDTOverflow(),o=this.s.iLeftWidth,l=this.s.iRightWidth,s="rtl"===v(this.dom.body).css("direction"),d=function(e,t){r.bar?a._firefoxScrollError()?34<v(e).height()&&(e.style.width=t+r.bar+"px"):e.style.width=t+r.bar+"px":(e.style.width=t+20+"px",e.style.paddingRight="20px",e.style.boxSizing="border-box")};r.x&&(n-=r.bar),t.wrapper.style.height=i+"px",0<this.s.iLeftColumns&&((e=t.left.wrapper).style.width=o+"px",e.style.height="1px",e.style.right=s?(e.style.left="",0):(e.style.left=0,""),t.left.body.style.height=n+"px",t.left.foot&&(t.left.foot.style.top=(r.x?r.bar:0)+"px"),d(t.left.liner,o),t.left.liner.style.height=n+"px",t.left.liner.style.maxHeight=n+"px"),0<this.s.iRightColumns&&((e=t.right.wrapper).style.width=l+"px",e.style.height="1px",this.s.rtl?(e.style.left=r.y?r.bar+"px":0,e.style.right=""):(e.style.left="",e.style.right=r.y?r.bar+"px":0),t.right.body.style.height=n+"px",t.right.foot&&(t.right.foot.style.top=(r.x?r.bar:0)+"px"),d(t.right.liner,l),t.right.liner.style.height=n+"px",t.right.liner.style.maxHeight=n+"px",t.right.headBlock.style.display=r.y?"block":"none",t.right.footBlock.style.display=r.y?"block":"none")},_fnDTOverflow:function(){var e=this.s.dt.nTable,t=e.parentNode,a={x:!1,y:!1,bar:this.s.dt.oScroll.iBarWidth};return e.offsetWidth>t.clientWidth&&(a.x=!0),e.offsetHeight>t.clientHeight&&(a.y=!0),a},_fnDraw:function(e){this._fnGridLayout(),this._fnCloneLeft(e),this._fnCloneRight(e),null!==this.s.fnDrawCallback&&this.s.fnDrawCallback.call(this,this.dom.clone.left,this.dom.clone.right),v(this).trigger("draw.dtfc",{leftClone:this.dom.clone.left,rightClone:this.dom.clone.right})},_fnCloneRight:function(e){if(!(this.s.iRightColumns<=0)){var t,a=[];for(t=this.s.iTableColumns-this.s.iRightColumns;t<this.s.iTableColumns;t++)this.s.dt.aoColumns[t].bVisible&&a.push(t);this._fnClone(this.dom.clone.right,this.dom.grid.right,a,e)}},_fnCloneLeft:function(e){if(!(this.s.iLeftColumns<=0)){var t,a=[];for(t=0;t<this.s.iLeftColumns;t++)this.s.dt.aoColumns[t].bVisible&&a.push(t);this._fnClone(this.dom.clone.left,this.dom.grid.left,a,e)}},_fnCopyLayout:function(e,t,a){for(var n=[],i=[],r=[],o=0,l=e.length;o<l;o++){var s=[];s.nTr=v(e[o].nTr).clone(a,!1)[0];for(var d=0,u=this.s.iTableColumns;d<u;d++)if(-1!==v.inArray(d,t)){var c=v.inArray(e[o][d].cell,r);if(-1===c){var f=v(e[o][d].cell).clone(a,!1)[0];i.push(f),r.push(e[o][d].cell),s.push({cell:f,unique:e[o][d].unique})}else s.push({cell:i[c],unique:e[o][d].unique})}n.push(s)}return n},_fnClone:function(e,t,i,a){var n,r,o,l,s,d,u,c,f,h,p=this,m=this.s.dt;if(a){for(v(e.header).remove(),e.header=v(this.dom.header).clone(!0,!1)[0],e.header.className+=" DTFC_Cloned",e.header.style.width="100%",t.head.appendChild(e.header),c=this._fnCopyLayout(m.aoHeader,i,!0),(f=v(">thead",e.header)).empty(),n=0,r=c.length;n<r;n++)f[0].appendChild(c[n].nTr);m.oApi._fnDrawHead(m,c,!0)}else for(c=this._fnCopyLayout(m.aoHeader,i,!1),h=[],m.oApi._fnDetectHeader(h,v(">thead",e.header)[0]),n=0,r=c.length;n<r;n++)for(o=0,l=c[n].length;o<l;o++)h[n][o].cell.className=c[n][o].cell.className,v("span.DataTables_sort_icon",h[n][o].cell).each(function(){this.className=v("span.DataTables_sort_icon",c[n][o].cell)[0].className});this._fnEqualiseHeights("thead",this.dom.header,e.header),"auto"==this.s.sHeightMatch&&v(">tbody>tr",p.dom.body).css("height","auto"),null!==e.body&&(v(e.body).remove(),e.body=null),e.body=v(this.dom.body).clone(!0)[0],e.body.className+=" DTFC_Cloned",e.body.style.paddingBottom=m.oScroll.iBarWidth+"px",e.body.style.marginBottom=2*m.oScroll.iBarWidth+"px",null!==e.body.getAttribute("id")&&e.body.removeAttribute("id"),v(">thead>tr",e.body).empty(),v(">tfoot",e.body).remove();var T=v("tbody",e.body)[0];if(v(T).empty(),0<m.aiDisplay.length){var g=v(">thead>tr",e.body)[0];for(u=0;u<i.length;u++){s=i[u],(d=v(m.aoColumns[s].nTh).clone(!0)[0]).innerHTML="";var _=d.style;_.paddingTop="0",_.paddingBottom="0",_.borderTopWidth="0",_.borderBottomWidth="0",_.height=0,_.width=p.s.aiInnerWidths[s]+"px",g.appendChild(d)}v(">tbody>tr",p.dom.body).each(function(e){var t=!1===p.s.dt.oFeatures.bServerSide?p.s.dt.aiDisplay[p.s.dt._iDisplayStart+e]:e,a=p.s.dt.aoData[t].anCells||v(this).children("td, th"),n=this.cloneNode(!1);for(n.removeAttribute("id"),n.setAttribute("data-dt-row",t),u=0;u<i.length;u++)s=i[u],0<a.length&&((d=v(a[s]).clone(!0,!0)[0]).removeAttribute("id"),d.setAttribute("data-dt-row",t),d.setAttribute("data-dt-column",s),n.appendChild(d));T.appendChild(n)})}else v(">tbody>tr",p.dom.body).each(function(e){(d=this.cloneNode(!0)).className+=" DTFC_NoData",v("td",d).html(""),T.appendChild(d)});if(e.body.style.width="100%",e.body.style.margin="0",e.body.style.padding="0",m.oScroller!==S){var b=m.oScroller.dom.force;t.forcer?t.forcer.style.height=b.style.height:(t.forcer=b.cloneNode(!0),t.liner.appendChild(t.forcer))}if(t.liner.appendChild(e.body),this._fnEqualiseHeights("tbody",p.dom.body,e.body),null!==m.nTFoot){if(a){null!==e.footer&&e.footer.parentNode.removeChild(e.footer),e.footer=v(this.dom.footer).clone(!0,!0)[0],e.footer.className+=" DTFC_Cloned",e.footer.style.width="100%",t.foot.appendChild(e.footer),c=this._fnCopyLayout(m.aoFooter,i,!0);var D=v(">tfoot",e.footer);for(D.empty(),n=0,r=c.length;n<r;n++)D[0].appendChild(c[n].nTr);m.oApi._fnDrawHead(m,c,!0)}else{c=this._fnCopyLayout(m.aoFooter,i,!1);var C=[];for(m.oApi._fnDetectHeader(C,v(">tfoot",e.footer)[0]),n=0,r=c.length;n<r;n++)for(o=0,l=c[n].length;o<l;o++)C[n][o].cell.className=c[n][o].cell.className}this._fnEqualiseHeights("tfoot",this.dom.footer,e.footer)}var y=m.oApi._fnGetUniqueThs(m,v(">thead",e.header)[0]);v(y).each(function(e){s=i[e],this.style.width=p.s.aiInnerWidths[s]+"px"}),null!==p.s.dt.nTFoot&&(y=m.oApi._fnGetUniqueThs(m,v(">tfoot",e.footer)[0]),v(y).each(function(e){s=i[e],this.style.width=p.s.aiInnerWidths[s]+"px"}))},_fnGetTrNodes:function(e){for(var t=[],a=0,n=e.childNodes.length;a<n;a++)"TR"==e.childNodes[a].nodeName.toUpperCase()&&t.push(e.childNodes[a]);return t},_fnEqualiseHeights:function(e,t,a){if("none"!=this.s.sHeightMatch||"thead"===e||"tfoot"===e){var n,i,r,o,l,s=t.getElementsByTagName(e)[0],d=a.getElementsByTagName(e)[0],u=v(">"+e+">tr:eq(0)",t).children(":first"),c=(u.outerHeight(),u.height(),this._fnGetTrNodes(s)),f=this._fnGetTrNodes(d),h=[];for(n=0,i=f.length;n<i;n++)r=(o=c[n].offsetHeight)<(l=f[n].offsetHeight)?l:o,"semiauto"==this.s.sHeightMatch&&(c[n]._DTTC_iHeight=r),h.push(r);for(n=0,i=f.length;n<i;n++)f[n].style.height=h[n]+"px",c[n].style.height=h[n]+"px"}},_firefoxScrollError:function(){if(t===S){var e=v("<div/>").css({position:"absolute",top:0,left:0,height:10,width:50,overflow:"scroll"}).appendTo("body");t=e[0].clientWidth===e[0].offsetWidth&&0!==this._fnDTOverflow().bar,e.remove()}return t}}),u.defaults={iLeftColumns:1,iRightColumns:0,fnDrawCallback:null,sHeightMatch:"semiauto"},u.version="3.2.5",r.Api.register("fixedColumns()",function(){return this}),r.Api.register("fixedColumns().update()",function(){return this.iterator("table",function(e){e._oFixedColumns&&e._oFixedColumns.fnUpdate()})}),r.Api.register("fixedColumns().relayout()",function(){return this.iterator("table",function(e){e._oFixedColumns&&e._oFixedColumns.fnRedrawLayout()})}),r.Api.register("rows().recalcHeight()",function(){return this.iterator("row",function(e,t){e._oFixedColumns&&e._oFixedColumns.fnRecalculateHeight(this.row(t).node())})}),r.Api.register("fixedColumns().rowIndex()",function(e){return(e=v(e)).parents(".DTFC_Cloned").length?this.rows({page:"current"}).indexes()[e.index()]:this.row(e).index()}),r.Api.register("fixedColumns().cellIndex()",function(e){if((e=v(e)).parents(".DTFC_Cloned").length){var t,a=e.parent().index(),n=this.rows({page:"current"}).indexes()[a];if(e.parents(".DTFC_LeftWrapper").length)t=e.index();else t=this.columns().flatten().length-this.context[0]._oFixedColumns.s.iRightColumns+e.index();return{row:n,column:this.column.index("toData",t),columnVisible:t}}return this.cell(e).index()}),v(d).on("init.dt.fixedColumns",function(e,t){if("dt"===e.namespace){var a=t.oInit.fixedColumns,n=r.defaults.fixedColumns;if(a||n){var i=v.extend({},a,n);!1!==a&&new u(t,i)}}}),v.fn.dataTable.FixedColumns=u,v.fn.DataTable.FixedColumns=u});var WLDCT_FormButton={_ListTableContainerInstance:null,RendererChain:HTMLControl.RendererChain,ResolveSelf:function(e){var t=e.$singleControlElem,a=t.attr("buttoncaption"),n=$("<button class='wldct-list-button'>"+a+"</button>"),i=t.prop("attributes");return $.each(i,function(){n.attr(this.name,this.value)}),n.bind("click",{buttonElem:n,selfInstance:this},this.ClickEvent),n},RendererDataChain:function(e){var t=e.$singleControlElem.parents("[singlename='WLDCT_ListButtonContainer']").nextAll("[client_resolve='WLDCT_ListTableContainer']");this._ListTableContainerInstance=HTMLControl.GetControlInstanceByElem(t)},ClickEvent:function(e){var t=e.data.buttonElem,a=e.data.selfInstance;console.log(t);t.attr("bindauthority"),t.attr("buttoncaption"),t.attr("buttontype"),t.attr("custclientclickbeforemethod"),t.attr("custclientclickbeforemethodpara"),t.attr("custclientrendereraftermethodpara"),t.attr("custclientrendereraftermethodparapara"),t.attr("custclientrenderermethod"),t.attr("custclientrenderermethodpara"),t.attr("custserverresolvemethod"),t.attr("custserverresolvemethodpara"),t.attr("formcode");var n=t.attr("formid"),i=(t.attr("formmoduleid"),t.attr("formmodulename"),t.attr("formname"),t.attr("id")),r=t.attr("buttonid"),o=(t.attr("innerbuttonjsonstring"),t.attr("opentype"),t.attr("operation")),l=(t.attr("singlename"),t.attr("windowcaption")),s=t.attr("windowheight"),d=t.attr("windowwidth"),u=(t.attr("client_resolve"),"");if("update"==o||"view"==o){var c=a._ListTableContainerInstance.GetCheckedRecord();if(0==c.length)return void DialogUtility.AlertText("请选择需要进行操作的记录!");if(1<c.length)return void DialogUtility.AlertText("一次只能操作一条记录!");u=c[0].Id}DialogUtility.Frame_OpenIframeWindow(window,DialogUtility.DialogId,BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormRuntime.html",{FormId:n,ButtonId:r,ListFormButtonElemId:i,RecordId:u,OperationType:o}),{width:d,height:s,title:l},1,!0)}},WLDCT_ListButtonContainer={RendererChain:function RendererChain(_rendererChainParas){var $singleControlElem=_rendererChainParas.$singleControlElem,$buttonDivElemList=$singleControlElem.find("div"+HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM);$singleControlElem.find("[is-op-button-wrap-table='true']").hide();for(var innerWrap=$singleControlElem.find(".wldct-list-button-inner-wrap"),innerInsideWrapDiv=$("<div class='wldct-list-button-inner-inside-wrap' />"),i=0;i<$buttonDivElemList.length;i++){var $buttonElem=$($buttonDivElemList[i]),clientResolveName=$buttonElem.attr(HTMLControlAttrs.CLIENT_RESOLVE),clientResolveObject=Object.create(eval(clientResolveName)),$resolvedElem=clientResolveObject.ResolveSelf({sourceHTML:_rendererChainParas.sourceHTML,$rootElem:_rendererChainParas.$rootElem,$parentControlElem:$singleControlElem,$singleControlElem:$buttonElem,allData:_rendererChainParas.allData});innerInsideWrapDiv.append($resolvedElem)}innerWrap.append(innerInsideWrapDiv),innerWrap.append('<div style="clear: both;"></div>')},RendererDataChain:HTMLControl.RendererDataChain},WLDCT_ListComplexSearchContainer={_$SingleControlElem:null,_$ComplexSearchButton:null,_$ClearButton:null,_$CloseButton:null,RendererChain:function(e){var t=e.$singleControlElem;(this._$SingleControlElem=t).hide(),t.find(".wldct-list-complex-search-inner-wrap").height("305px"),t.find(".wldct-list-complex-search-inner-wrap").css("overflow","auto"),t.find(".wldct-list-complex-search-inner-wrap").addClass("div-custom-scroll");var a=$("<div class='wldct-list-complex-search-button-inner-wrap'><div class='button-inner-wrap'></div></div>");this._$ComplexSearchButton=$("<button>查询</button>"),this._$ClearButton=$("<button>清空</button>"),this._$CloseButton=$("<button>关闭</button>"),a.find(".button-inner-wrap").append(this._$ComplexSearchButton).append(this._$ClearButton).append(this._$CloseButton),t.append(a)},RendererDataChain:HTMLControl.RendererDataChain,BuilderSearchCondition:function(){for(var e=[],t=this._$SingleControlElem.find(HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM),a=0;a<t.length;a++){var n=$(t[a]),i=HTMLControl.GetControlInstanceByElem(n).GetValue(n,{}).value;i&&e.push({operator:n.attr("columnoperator"),value:i,tableName:n.attr("columntablename"),fieldName:n.attr("columnname")})}return e},GetStatus:function(){var e=this._$SingleControlElem.attr("status");return""==e&&(e="enable"),e},Hide:function(){this._$SingleControlElem.hide()}},WLDCT_ListSimpleSearchContainer={_$SimpleSearchButton:null,_$ShowComplexSearchButton:null,_$SingleControlElem:null,RendererChain:function(e){var t=e.$singleControlElem;this._$SingleControlElem=t;var a=PageStyleUtility.GetPageWidth();t.find("table:first").width(a-200);var n=$("<div class='wldct-list-simple-search-button-inner-wrap' />");n.width(160),this._$SimpleSearchButton=$("<button>查询</button>"),this._$ShowComplexSearchButton=$("<button>高级查询</button>"),n.append(this._$SimpleSearchButton),n.append(this._$ShowComplexSearchButton),t.append(n),HTMLControl.RendererChain(e)},RendererDataChain:HTMLControl.RendererDataChain,BuilderSearchCondition:function(){for(var e=[],t=this._$SingleControlElem.find(HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM),a=0;a<t.length;a++){var n=$(t[a]),i=HTMLControl.GetControlInstanceByElem(n).GetValue(n,{}).value;i&&e.push({operator:n.attr("columnoperator"),value:i,tableName:n.attr("columntablename"),fieldName:n.attr("columnname")})}return e},GetStatus:function(){var e=this._$SingleControlElem.attr("status");return""==e&&(e="enable"),e},Hide:function(){this._$SingleControlElem.hide()},HideComplexButton:function(){this._$ShowComplexSearchButton.remove(),this._$SimpleSearchButton.parent().width("80px");var e=PageStyleUtility.GetPageWidth();this._$SingleControlElem.find("table:first").width(e-120)}},WLDCT_ListTableCheckBox={RendererChain:HTMLControl.RendererChain,RendererDataChain:function(e){var t=e.val,a=e.$td;a.css("textAlign","center");var n=$('<input isrow_checkbox="true" type="checkbox" class="list-checkbox-c" value="'+t+'" row_checkbox_record_id="'+t+'">');n.bind("click",{selfInstance:this,$elem:n},this.ClickEvent),a.html(""),a.append(n)},ClickEvent:function(e){var t=e.data.$elem,a=WLDCT_ListTableContainer.__InnerElemGetInstance(t);t.prop("checked")?a.SaveCheckedRowData(t.val()):a.DeleteCheckedRowData(t.val())}},WLDCT_ListTableContainer={GetHTML:function(){return"<table id=\"example\" class=\"stripe row-border order-column\" style=\"width:100%\">\n        <thead>\n            <tr>\n                <th colspan='2'>First name</th>\n                <th>Position</th>\n                <th>Office</th>\n                <th colspan='2'>Age</th>\n                <th>Salary</th>\n                <th>Extn.</th>\n                <th>E-mail</th>\n            </tr>\n            <tr>\n                <th>First name</th>\n                <th>Last name</th>\n                <th>Position</th>\n                <th>Office</th>\n                <th>Age</th>\n                <th>Start date</th>\n                <th>Salary</th>\n                <th>Extn.</th>\n                <th>E-mail</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td><a onclick='alert(1)'>Tiger</a></td>\n                <td>Nixon</td>\n                <td>System Architect</td>\n                <td>Edinburgh</td>\n                <td>61</td>\n                <td>2011/04/25</td>\n                <td>$320,800</td>\n                <td>5421</td>\n                <td>t.nixon@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Garrett</td>\n                <td>Winters</td>\n                <td>Accountant</td>\n                <td>Tokyo</td>\n                <td>63</td>\n                <td>2011/07/25</td>\n                <td>$170,750</td>\n                <td>8422</td>\n                <td>g.winters@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Ashton</td>\n                <td>Cox</td>\n                <td>Junior Technical Author</td>\n                <td>San Francisco</td>\n                <td>66</td>\n                <td>2009/01/12</td>\n                <td>$86,000</td>\n                <td>1562</td>\n                <td>a.cox@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Cedric</td>\n                <td>Kelly</td>\n                <td>Senior Javascript Developer</td>\n                <td>Edinburgh</td>\n                <td>22</td>\n                <td>2012/03/29</td>\n                <td>$433,060</td>\n                <td>6224</td>\n                <td>c.kelly@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Airi</td>\n                <td>Satou</td>\n                <td>Accountant</td>\n                <td>Tokyo</td>\n                <td>33</td>\n                <td>2008/11/28</td>\n                <td>$162,700</td>\n                <td>5407</td>\n                <td>a.satou@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Brielle</td>\n                <td>Williamson</td>\n                <td>Integration Specialist</td>\n                <td>New York</td>\n                <td>61</td>\n                <td>2012/12/02</td>\n                <td>$372,000</td>\n                <td>4804</td>\n                <td>b.williamson@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Herrod</td>\n                <td>Chandler</td>\n                <td>Sales Assistant</td>\n                <td>San Francisco</td>\n                <td>59</td>\n                <td>2012/08/06</td>\n                <td>$137,500</td>\n                <td>9608</td>\n                <td>h.chandler@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Rhona</td>\n                <td>Davidson</td>\n                <td>Integration Specialist</td>\n                <td>Tokyo</td>\n                <td>55</td>\n                <td>2010/10/14</td>\n                <td>$327,900</td>\n                <td>6200</td>\n                <td>r.davidson@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Colleen</td>\n                <td>Hurst</td>\n                <td>Javascript Developer</td>\n                <td>San Francisco</td>\n                <td>39</td>\n                <td>2009/09/15</td>\n                <td>$205,500</td>\n                <td>2360</td>\n                <td>c.hurst@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Sonya</td>\n                <td>Frost</td>\n                <td>Software Engineer</td>\n                <td>Edinburgh</td>\n                <td>23</td>\n                <td>2008/12/13</td>\n                <td>$103,600</td>\n                <td>1667</td>\n                <td>s.frost@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Jena</td>\n                <td>Gaines</td>\n                <td>Office Manager</td>\n                <td>London</td>\n                <td>30</td>\n                <td>2008/12/19</td>\n                <td>$90,560</td>\n                <td>3814</td>\n                <td>j.gaines@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Quinn</td>\n                <td>Flynn</td>\n                <td>Support Lead</td>\n                <td>Edinburgh</td>\n                <td>22</td>\n                <td>2013/03/03</td>\n                <td>$342,000</td>\n                <td>9497</td>\n                <td>q.flynn@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Charde</td>\n                <td>Marshall</td>\n                <td>Regional Director</td>\n                <td>San Francisco</td>\n                <td>36</td>\n                <td>2008/10/16</td>\n                <td>$470,600</td>\n                <td>6741</td>\n                <td>c.marshall@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Haley</td>\n                <td>Kennedy</td>\n                <td>Senior Marketing Designer</td>\n                <td>London</td>\n                <td>43</td>\n                <td>2012/12/18</td>\n                <td>$313,500</td>\n                <td>3597</td>\n                <td>h.kennedy@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Tatyana</td>\n                <td>Fitzpatrick</td>\n                <td>Regional Director</td>\n                <td>London</td>\n                <td>19</td>\n                <td>2010/03/17</td>\n                <td>$385,750</td>\n                <td>1965</td>\n                <td>t.fitzpatrick@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Michael</td>\n                <td>Silva</td>\n                <td>Marketing Designer</td>\n                <td>London</td>\n                <td>66</td>\n                <td>2012/11/27</td>\n                <td>$198,500</td>\n                <td>1581</td>\n                <td>m.silva@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Charde</td>\n                <td>Marshall</td>\n                <td>Regional Director</td>\n                <td>San Francisco</td>\n                <td>36</td>\n                <td>2008/10/16</td>\n                <td>$470,600</td>\n                <td>6741</td>\n                <td>c.marshall@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Haley</td>\n                <td>Kennedy</td>\n                <td>Senior Marketing Designer</td>\n                <td>London</td>\n                <td>43</td>\n                <td>2012/12/18</td>\n                <td>$313,500</td>\n                <td>3597</td>\n                <td>h.kennedy@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Tatyana</td>\n                <td>Fitzpatrick</td>\n                <td>Regional Director</td>\n                <td>London</td>\n                <td>19</td>\n                <td>2010/03/17</td>\n                <td>$385,750</td>\n                <td>1965</td>\n                <td>t.fitzpatrick@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Michael</td>\n                <td>Silva</td>\n                <td>Marketing Designer</td>\n                <td>London</td>\n                <td>66</td>\n                <td>2012/11/27</td>\n                <td>$198,500</td>\n                <td>1581</td>\n                <td>m.silva@datatables.net</td>\n            </tr>\n        </tbody>\n    </table>"},_InstanceMap:{},_CurrentPageNum:1,_DataSet:null,_Cache$SingleControlElem:null,_CacheRendererDataChainParas:null,_SimpleSearchContainerInstance:null,_ComplexSearchContainerInstance:null,_QueryPOList:[],_CheckedRecordArray:[],_$Elem:null,GetInstance:function GetInstance(name){for(var key in this._InstanceMap)if(key==name)return this._InstanceMap[key];var instance=eval(name);return this._InstanceMap[name]=instance,instance},Initialize:function(){},RendererChain:function(e){var t=e.$singleControlElem,a=(this._$Elem=t).prevAll("[client_resolve='WLDCT_ListSimpleSearchContainer']"),n=t.prevAll("[client_resolve='WLDCT_ListComplexSearchContainer']");this._SimpleSearchContainerInstance=HTMLControl.GetControlInstanceByElem(a),this._ComplexSearchContainerInstance=HTMLControl.GetControlInstanceByElem(n),this._SimpleSearchContainerInstance._$SimpleSearchButton.bind("click",{listInstance:this},this.SimpleSearchClickEvent),this._SimpleSearchContainerInstance._$ShowComplexSearchButton.bind("click",{listInstance:this},this.ShowComplexSearchClickEvent),this._ComplexSearchContainerInstance._$ComplexSearchButton.bind("click",{listInstance:this},this.ComplexSearchClickEvent),this._ComplexSearchContainerInstance._$ClearButton.bind("click",{listInstance:this},this.ComplexSearchClearClickEvent),this._ComplexSearchContainerInstance._$CloseButton.bind("click",{listInstance:this},this.ComplexSearchCloseClickEvent),"disable"==this._SimpleSearchContainerInstance.GetStatus()&&this._SimpleSearchContainerInstance.Hide(),"disable"==this._ComplexSearchContainerInstance.GetStatus()&&this._SimpleSearchContainerInstance.HideComplexButton();var i=t.find("table"),r=t.find("table tbody tr"),o=t.find("table thead tr");this.AppendCheckBoxColumnTemplate(i,o,r),HTMLControl.RendererChain(e)},RendererDataChain:function(t,e){var a,n;if(a=t.topDataSetId,n=t.po.listDatasetPageSize,this._CacheRendererDataChainParas||(this._CacheRendererDataChainParas=t,this._Cache$SingleControlElem=t.$singleControlElem.clone()),e){var i=StringUtility.RemoveScript(this._Cache$SingleControlElem.html());t.$singleControlElem.html(i)}if(t.listRuntimeInstance.IsPreview()){var r={total:1e3,list:[],pageNum:1,pageSize:5,size:5,startRow:1,endRow:5,pages:200,prePage:0,nextPage:2,isFirstPage:!0,isLastPage:!1,hasPreviousPage:!1,hasNextPage:!0,navigatePages:8,navigatepageNums:[1,2,3,4,5,6,7,8],navigateFirstPage:1,navigateLastPage:8,firstPage:1,lastPage:8};this._DataSet=r,this.CreateTable(t.$singleControlElem,r,!0)}else DialogUtility.AlertLoading(window,DialogUtility.DialogLoadingId,{title:"系统提示",hide:{effect:"fade",duration:500}},"数据加载中,请稍候...."),RuntimeGeneralInstance.GetDataSetData({dataSetId:a,pageSize:n,pageNum:this._CurrentPageNum,listQueryPOList:this._QueryPOList,exValue1:"",exValue2:"",exValue3:""},function(e){t.dataSet=e.data,this._DataSet=e.data,this.CreateTable(t.$singleControlElem,this._DataSet,!1),window.setTimeout(function(){DialogUtility.CloseDialog(DialogUtility.DialogLoadingId)},500)},this)},CreateTable:function(e,t,a){var n=e.find("table"),i=e.find("table tbody tr");e.find("table thead tr");if(0<i.length){for(var r=e.find("table tbody"),o=0;o<t.list.length;o++)r.append(this.RendererSingleRow(n,i,t,t.list[o]));i.remove(),a&&n.find("[singlename='WLDCT_ListTableInnerButtonContainer']").remove()}e.find(".wldct-list-table-inner-wrap").append(this.CreatePaging()),e.find(".wldct-list-table-inner-wrap").width(PageStyleUtility.GetWindowWidth()-20),n.addClass("stripe row-border order-column"),n.width("100%");var l=PageStyleUtility.GetWindowHeight()-$(".wldct-list-simple-search-outer-wrap").height()-$(".wldct-list-button-outer-wrap").height()-160;n.DataTable({scrollY:l,scrollX:!0,paging:!1,ordering:!1,searching:!1,info:!1})},AppendCheckBoxColumnTemplate:function(e,t,a){var n=$("<th style='width: 50px'>选择</th>");1<t.length&&n.attr("rowspan",t.length),$(t[0]).prepend(n),$(a.eq(0)).prepend('<td>\n                                    <div \n                                    columnalign="居中对齐" \n                                    columncaption="ID" \n                                    columndatatypename="字符串" \n                                    columnname="ID" \n                                    columntablename="" \n                                    control_category="InputControl" \n                                    custclientrenderermethod="" \n                                    custclientrenderermethodpara="" \n                                    custserverresolvemethod="" \n                                    custserverresolvemethodpara="" \n                                    defaulttext="" \n                                    defaulttype="" \n                                    defaultvalue="" \n                                    desc="" \n                                    id="check_box_template" \n                                    is_jbuild4dc_data="true" \n                                    jbuild4dc_custom="true" \n                                    name="check_box_template" \n                                    placeholder="" \n                                    serialize="true" \n                                    show_remove_button="true" \n                                    singlename="WLDCT_ListTableCheckBox" \n                                    style="" \n                                    targetbuttonid="" \n                                    client_resolve="WLDCT_ListTableCheckBox">\n                                        ID\n                                    </div>\n                                  </td>')},RendererSingleRow:function(e,t,a,n){for(var i=t.clone(),r=i.find("td"),o=0;o<r.length;o++){var l=$(r[o]),s=l.find("div"+HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM);if(0<s.length){var d=n[s.attr("columnname")],u=s.attr(HTMLControlAttrs.CLIENT_RESOLVE);WLDCT_ListTableContainer.GetInstance(u).RendererDataChain({$templateTable:e,$templateTableRow:t,$singleControlElem:s,dataSet:a,rowData:n,$cloneRow:i,$td:l,val:d})}}return i},CreatePaging:function(e,t,a,n,i,r,o){var l=this,s=$("<div class='table-paging-outer'><div class='table-paging-inner'></div></div>"),d=s.find("div"),u=$("<div class='table-paging-button'>第一页</div>");u.click(function(){l.ChangePageNum(1)});var c=$("<div class='table-paging-button'>上一页</div>");c.click(function(){1<l._CurrentPageNum?l.ChangePageNum(l._CurrentPageNum-1):DialogUtility.AlertText("已经到达第一页!")});var f=$("<div class='table-paging-button'>末页</div>");f.click(function(){l.ChangePageNum(l._DataSet.pages)});var h=$("<div class='table-paging-button'>下一页</div>");h.click(function(){l._CurrentPageNum<l._DataSet.pages?l.ChangePageNum(l._CurrentPageNum+1):DialogUtility.AlertText("已经到达最末页!")});var p=$("<div class='table-paging-info'>总条数【"+l._DataSet.total+"】&nbsp;&nbsp;页数【"+l._CurrentPageNum+"/"+l._DataSet.pages+"】</div>");return d.append(u).append(c).append(h).append(f).append(p),s},ChangePageNum:function(e){this._CurrentPageNum=e,this.RendererDataChain(this._CacheRendererDataChainParas,!0)},TryReloadForListFormButton:function(e){var t=$("#"+e).parentsUntil("[singlename='WLDCT_ListTemplate']").last().parent().find("[singlename='WLDCT_ListTableContainer']"),a=HTMLControl.GetControlInstanceByElem(t);a.RendererDataChain(a._CacheRendererDataChainParas,!0)},SimpleSearchClickEvent:function(e){var t=e.data.listInstance,a=t._SimpleSearchContainerInstance.BuilderSearchCondition();t._QueryPOList=a,t.RendererDataChain(t._CacheRendererDataChainParas,!0)},ShowComplexSearchClickEvent:function(e){var t=e.data.listInstance;DialogUtility.DialogElemObj(t._ComplexSearchContainerInstance._$SingleControlElem,{title:"高级查询",height:410,width:800,modal:!0})},ComplexSearchClickEvent:function(e){console.log("高级查询.");var t=e.data.listInstance,a=t._SimpleSearchContainerInstance.BuilderSearchCondition(),n=t._ComplexSearchContainerInstance.BuilderSearchCondition();t._QueryPOList=n.concat(a),t.RendererDataChain(t._CacheRendererDataChainParas,!0),DialogUtility.CloseDialogElem(t._ComplexSearchContainerInstance._$SingleControlElem)},ComplexSearchCloseClickEvent:function(e){var t=e.data.listInstance;DialogUtility.CloseDialogElem(t._ComplexSearchContainerInstance._$SingleControlElem)},ComplexSearchClearClickEvent:function(e){e.data.listInstance;DialogUtility.AlertText("未实现!")},GetRecordData:function(e){console.log(this._DataSet);for(var t=0;t<this._DataSet.list.length;t++){var a=this._DataSet.list[t];if(a.ID==e)return a}return DialogUtility.AlertText("找不到ID为:"+e+"的记录!"),null},SaveCheckedRowData:function(e){var t=this.GetRecordData(e);null!=t&&this._CheckedRecordArray.push({Id:e,Record:t})},DeleteCheckedRowData:function(e){for(var t=0;t<this._CheckedRecordArray.length;t++)this._CheckedRecordArray[t].Id==e&&ArrayUtility.Delete(this._CheckedRecordArray,t)},GetCheckedRecord:function(){return this._CheckedRecordArray},GetLastCheckedRecord:function(){return 0<this._CheckedRecordArray.length?this._CheckedRecordArray[this._CheckedRecordArray.length-1]:null},ClearAllCheckBox:function(){this._$Elem.find(":checkbox").prop("checked",!1),this._CheckedRecordArray=[]},SetCheckBoxToCheckedStatus:function(e){this._$Elem.find("[row_checkbox_record_id='"+e+"']:checkbox").prop("checked",!0),this.SaveCheckedRowData(e)}},WLDCT_ListTableInnerButtonContainer={RendererChain:function(e){var t=e.$singleControlElem,a=t.find("div"+HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM);t.html(""),t.append(a)},RendererDataChain:HTMLControl.RendererDataChain},WLDCT_ListTableInnerButtonSingle={RendererChain:HTMLControl.RendererChain,RendererDataChain:function(e){var t=e.$singleControlElem;t.bind("click",{selfInstance:this,$elem:t,rowData:e.rowData},this.ClickEvent),t.html(""),t.attr("title",t.attr("caption"))},ClickEvent:function(e){var t=e.data.$elem,a=t.attr("targetbuttonid"),n=t.parentsUntil("[singlename='WLDCT_ListTableContainer']").last().parent(),i=HTMLControl.GetControlInstanceByElem(n);i.ClearAllCheckBox(),i.SetCheckBoxToCheckedStatus(e.data.rowData.ID),console.log(a),$("button#"+a).trigger("click"),console.log(i)}},WLDCT_ListTableLabel={RendererChain:HTMLControl.RendererChain,RendererDataChain:function(e){var t=e.val,a=e.$td;a.css("textAlign","center"),a.html(t)}},WLDCT_Search_TextBox={RendererChain:HTMLControl.RendererChain,RendererDataChain:HTMLControl.RendererDataChain,GetValue:HTMLControl.GetValue};function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(a){"function"==typeof define&&define.amd?define(["jquery","datatables.net"],function(e){return a(e,window,document)}):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=function(e,t){return e||(e=window),t&&t.fn.dataTable||(t=require("datatables.net")(e,t).$),a(t,e,e.document)}:a(jQuery,window,document)}(function(l,i,s,r){var o=l.fn.dataTable,d=0,u=function e(t,a){if(!(this instanceof e))throw"FixedHeader must be initialised with the 'new' keyword.";!0===a&&(a={}),t=new o.Api(t),this.c=l.extend(!0,{},e.defaults,a),this.s={dt:t,position:{theadTop:0,tbodyTop:0,tfootTop:0,tfootBottom:0,width:0,left:0,tfootHeight:0,theadHeight:0,windowHeight:l(i).height(),visible:!0},headerMode:null,footerMode:null,autoWidth:t.settings()[0].oFeatures.bAutoWidth,namespace:".dtfc"+d++,scrollLeft:{header:-1,footer:-1},enable:!0},this.dom={floatingHeader:null,thead:l(t.table().header()),tbody:l(t.table().body()),tfoot:l(t.table().footer()),header:{host:null,floating:null,placeholder:null},footer:{host:null,floating:null,placeholder:null}},this.dom.header.host=this.dom.thead.parent(),this.dom.footer.host=this.dom.tfoot.parent();var n=t.settings()[0];if(n._fixedHeader)throw"FixedHeader already initialised on table "+n.nTable.id;(n._fixedHeader=this)._constructor()};return l.extend(u.prototype,{enable:function(e){this.s.enable=e,this.c.header&&this._modeChange("in-place","header",!0),this.c.footer&&this.dom.tfoot.length&&this._modeChange("in-place","footer",!0),this.update()},headerOffset:function(e){return e!==r&&(this.c.headerOffset=e,this.update()),this.c.headerOffset},footerOffset:function(e){return e!==r&&(this.c.footerOffset=e,this.update()),this.c.footerOffset},update:function(){this._positions(),this._scroll(!0)},_constructor:function(){var e=this,t=this.s.dt;l(i).on("scroll"+this.s.namespace,function(){e._scroll()}).on("resize"+this.s.namespace,o.util.throttle(function(){e.s.position.windowHeight=l(i).height(),e.update()},50));var a=l(".fh-fixedHeader");!this.c.headerOffset&&a.length&&(this.c.headerOffset=a.outerHeight());var n=l(".fh-fixedFooter");!this.c.footerOffset&&n.length&&(this.c.footerOffset=n.outerHeight()),t.on("column-reorder.dt.dtfc column-visibility.dt.dtfc draw.dt.dtfc column-sizing.dt.dtfc responsive-display.dt.dtfc",function(){e.update()}),t.on("destroy.dtfc",function(){e.c.header&&e._modeChange("in-place","header",!0),e.c.footer&&e.dom.tfoot.length&&e._modeChange("in-place","footer",!0),t.off(".dtfc"),l(i).off(e.s.namespace)}),this._positions(),this._scroll()},_clone:function(e,t){var a=this.s.dt,n=this.dom[e],i="header"===e?this.dom.thead:this.dom.tfoot;!t&&n.floating?n.floating.removeClass("fixedHeader-floating fixedHeader-locked"):(n.floating&&(n.placeholder.remove(),this._unsize(e),n.floating.children().detach(),n.floating.remove()),n.floating=l(a.table().node().cloneNode(!1)).css("table-layout","fixed").attr("aria-hidden","true").removeAttr("id").append(i).appendTo("body"),n.placeholder=i.clone(!1),n.placeholder.find("*[id]").removeAttr("id"),n.host.prepend(n.placeholder),this._matchWidths(n.placeholder,n.floating))},_matchWidths:function(t,a){var e=function(e){return l(e,t).map(function(){return l(this).width()}).toArray()},n=function(e,t){l(e,a).each(function(e){l(this).css({width:t[e],minWidth:t[e]})})},i=e("th"),r=e("td");n("th",i),n("td",r)},_unsize:function(e){var t=this.dom[e].floating;t&&("footer"===e||"header"===e&&!this.s.autoWidth)?l("th, td",t).css({width:"",minWidth:""}):t&&"header"===e&&l("th, td",t).css("min-width","")},_horizontal:function(e,t){var a=this.dom[e],n=this.s.position,i=this.s.scrollLeft;a.floating&&i[e]!==t&&(a.floating.css("left",n.left-t),i[e]=t)},_modeChange:function(e,t,a){this.s.dt;var n=this.dom[t],i=this.s.position,r=this.dom["footer"===t?"tfoot":"thead"],o=l.contains(r[0],s.activeElement)?s.activeElement:null;o&&o.blur(),"in-place"===e?(n.placeholder&&(n.placeholder.remove(),n.placeholder=null),this._unsize(t),"header"===t?n.host.prepend(r):n.host.append(r),n.floating&&(n.floating.remove(),n.floating=null)):"in"===e?(this._clone(t,a),n.floating.addClass("fixedHeader-floating").css("header"===t?"top":"bottom",this.c[t+"Offset"]).css("left",i.left+"px").css("width",i.width+"px"),"footer"===t&&n.floating.css("top","")):"below"===e?(this._clone(t,a),n.floating.addClass("fixedHeader-locked").css("top",i.tfootTop-i.theadHeight).css("left",i.left+"px").css("width",i.width+"px")):"above"===e&&(this._clone(t,a),n.floating.addClass("fixedHeader-locked").css("top",i.tbodyTop).css("left",i.left+"px").css("width",i.width+"px")),o&&o!==s.activeElement&&setTimeout(function(){o.focus()},10),this.s.scrollLeft.header=-1,this.s.scrollLeft.footer=-1,this.s[t+"Mode"]=e},_positions:function(){var e=this.s.dt.table(),t=this.s.position,a=this.dom,n=l(e.node()),i=n.children("thead"),r=n.children("tfoot"),o=a.tbody;t.visible=n.is(":visible"),t.width=n.outerWidth(),t.left=n.offset().left,t.theadTop=i.offset().top,t.tbodyTop=o.offset().top,t.theadHeight=t.tbodyTop-t.theadTop,r.length?(t.tfootTop=r.offset().top,t.tfootBottom=t.tfootTop+r.outerHeight(),t.tfootHeight=t.tfootBottom-t.tfootTop):(t.tfootTop=t.tbodyTop+o.outerHeight(),t.tfootBottom=t.tfootTop,t.tfootHeight=t.tfootTop)},_scroll:function(e){var t,a,n=l(s).scrollTop(),i=l(s).scrollLeft(),r=this.s.position;this.s.enable&&(this.c.header&&(t=!r.visible||n<=r.theadTop-this.c.headerOffset?"in-place":n<=r.tfootTop-r.theadHeight-this.c.headerOffset?"in":"below",(e||t!==this.s.headerMode)&&this._modeChange(t,"header",e),this._horizontal("header",i)),this.c.footer&&this.dom.tfoot.length&&(a=!r.visible||n+r.windowHeight>=r.tfootBottom+this.c.footerOffset?"in-place":r.windowHeight+n>r.tbodyTop+r.tfootHeight+this.c.footerOffset?"in":"above",(e||a!==this.s.footerMode)&&this._modeChange(a,"footer",e),this._horizontal("footer",i)))}}),u.version="3.1.4",u.defaults={header:!0,footer:!1,headerOffset:0,footerOffset:0},l.fn.dataTable.FixedHeader=u,l.fn.DataTable.FixedHeader=u,l(s).on("init.dt.dtfh",function(e,t,a){if("dt"===e.namespace){var n=t.oInit.fixedHeader,i=o.defaults.fixedHeader;if((n||i)&&!t._fixedHeader){var r=l.extend({},i,n);!1!==n&&new u(t,r)}}}),o.Api.register("fixedHeader()",function(){}),o.Api.register("fixedHeader.adjust()",function(){return this.iterator("table",function(e){var t=e._fixedHeader;t&&t.update()})}),o.Api.register("fixedHeader.enable()",function(a){return this.iterator("table",function(e){var t=e._fixedHeader;a=a===r||a,t&&a!==t.s.enable&&t.enable(a)})}),o.Api.register("fixedHeader.disable()",function(){return this.iterator("table",function(e){var t=e._fixedHeader;t&&t.s.enable&&t.enable(!1)})}),l.each(["header","footer"],function(e,n){o.Api.register("fixedHeader."+n+"Offset()",function(a){var e=this.context;return a===r?e.length&&e[0]._fixedHeader?e[0]._fixedHeader[n+"Offset"]():r:this.iterator("table",function(e){var t=e._fixedHeader;t&&t[n+"Offset"](a)})})}),u});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
