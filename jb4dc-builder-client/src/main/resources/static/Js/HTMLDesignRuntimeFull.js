"use strict";var FormRelationPOUtility={_FieldPOCache:null,BuildRecord:function(e,t,n,a,i,r){if(null==t||null==t)throw"方法需要提供desc参数!";if(null==n||null==n)throw"方法需要提供recordId参数!";if(null==a||null==a)throw"方法需要提供outerFieldName参数!";if(null==i||null==i)throw"方法需要提供outerFieldValue参数!";if(null==r||null==r)throw"方法需要提供selfFieldName参数!";return{recordId:n,desc:t,recordFieldPOList:e,outerFieldName:a,outerFieldValue:i,selfFieldName:r}},FindRecordFieldPOArray:function(e){return e.recordFieldPOList},Add1To1DataRecordFieldPOList:function(e,t,n,a,i,r,l){return e.oneDataRecord=this.BuildRecord(t,n,a,i,r,l),e},Add1To1DataRecord:function(e,t){return e.oneDataRecord=t,e},Get1To1DataRecord:function(e){return e.oneDataRecord},Get1To1DataRecordFieldPOArray:function(e){return e.oneDataRecord?this.FindRecordFieldPOArray(e.oneDataRecord):null},Add1ToNDataRecord:function(e,t){for(var n=0;n<t.length;n++){if(null==t[n].desc||null==t[n].desc)throw"arrayData中的数据对象需要包含desc属性!";if(null==t[n].recordId||null==t[n].recordId)throw"arrayData中的数据对象需要包含recordId属性!";if(null==t[n].recordFieldPOList||null==t[n].recordFieldPOList)throw"arrayData中的数据对象需要包含recordFieldPOList属性!";if(null==t[n].outerFieldName||null==t[n].outerFieldName)throw"arrayData中的数据对象需要包含outerFieldName属性!";if(null==t[n].outerFieldValue||null==t[n].outerFieldValue)throw"arrayData中的数据对象需要包含outerFieldValue属性!";if(null==t[n].selfFieldName||null==t[n].selfFieldName)throw"arrayData中的数据对象需要包含selfFieldName属性!"}return e.listDataRecord=t,e},Get1ToNDataRecord:function(e){return e.listDataRecord},FindFieldPOInOneDataRecordEnableNull:function(e,t){var n=this.FindRecordFieldPOArray(e),a=ArrayUtility.WhereSingle(n,function(e){return e.fieldName==t});return a||null},FindFieldPOInOneDataRecord:function(e,t){var n=this.FindFieldPOInOneDataRecordEnableNull(e,t);if(!n)throw"FormRuntime.FindFieldPOInOneDataRecord:找不到字段"+t+"的数据值!";return n},FindFieldValueInOneDataRecord:function(e,t){var n=this.FindRecordFieldPOArray(e),a=ArrayUtility.WhereSingle(n,function(e){return e.fieldName==t});if(a)return a.value;throw"FormRuntime.FindFieldPOByRelationPO:找不到字段"+t+"的数据值!"},FindIDFieldPOInOneDataRecord:function(e){return this.FindFieldPOInOneDataRecord(e,"ID")},FindFieldPOByRelationPO:function(e,t){var n=FormRelationPOUtility.Get1To1DataRecordFieldPOArray(e),a=ArrayUtility.WhereSingle(n,function(e){return e.fieldName==t});if(a)return a;throw"FormRuntime.FindFieldPOByRelationPO:找不到字段"+t+"的数据值!"},FindIdFieldPOByRelationPO:function(e){return this.FindFieldPOByRelationPO(e,"ID")},FindMainRelationPO:function(e){return ArrayUtility.WhereSingle(e,function(e){return FormRelationPOUtility.IsMainRelationPO(e)})},IsMainRelationPO:function(e){return 1==e.isMain||"-1"==e.parentId},FindNotMainRelationPO:function(e){return ArrayUtility.Where(e,function(e){return 1!=e.isMain||"-1"!=e.parentId})},FindRelationPOById:function(e,t){return ArrayUtility.WhereSingle(e,function(e){return e.id==t})},FindRelationPOByTableName:function(e,t){return ArrayUtility.WhereSingle(e,function(e){return e.tableName==t})},FindFieldPOInRelationFormRecordComplexPoOneDataRecord:function(e,t,n,a){if(null==this._FieldPOCache){this._FieldPOCache={};for(var i=e.formRecordDataRelationPOList,r=0;r<i.length;r++){var l=i[r],o=l.id,s=this.Get1To1DataRecordFieldPOArray(l);if(s)for(var d=0;d<s.length;d++){var u=s[d],c=u.fieldName;this._FieldPOCache[o+"_"+c]=u}}}return this._FieldPOCache[t+"_"+a]},FindRelationPOInRelationFormRecordComplexPo:function(e,t){return ArrayUtility.WhereSingle(e.formRecordDataRelationPOList,function(e){return e.id==t})},FindParentFieldValueInFormDataRelationListWith1To1DataRecord:function(e,t,n,a){ArrayUtility.WhereSingle(this._FormDataRelationList,function(e){return e.id==relationPO.parentId})},CreateFieldInRecordFieldPOArray:function(e,t,n){var a=JsonUtility.CloneSimple(e[0]);a.fieldName=t,a.value=n,e.push(a)},CreateIdFieldInRecordFieldPOArray:function(e,t,n,a){if(t||(t=StringUtility.Guid()),!a)throw"FormRelationPOUtility.CreateIdFieldInRecordFieldPOArray:tableId不能为空!";var i=ArrayUtility.WhereSingle(n.formRecordComplexPO.allDataRelationTableFieldsMap[a],function(e){return"是"==e.fieldIsPk}).fieldName;console.log(i),this.CreateFieldInRecordFieldPOArray(e,i,t)}},FormRuntimeSinglePageObject={_webFormRTParas:null,_formRuntimeInst:null,FORM_RUNTIME_CATEGORY_INDEPENDENCE:"IsIndependence",FORM_RUNTIME_CATEGORY_LIST:"IsDependenceList",getWebFormRTParasWithListButtonId:function(){return this._webFormRTParas||(this._webFormRTParas={FormId:BaseUtility.GetUrlParaValue("formId"),ButtonId:BaseUtility.GetUrlParaValue("buttonId"),OperationType:BaseUtility.GetUrlParaValue("operationType"),ListFormButtonElemId:BaseUtility.GetUrlParaValue("listFormButtonElemId"),RecordId:BaseUtility.GetUrlParaValue("recordId"),WindowWidth:BaseUtility.GetUrlParaValue("windowWidth"),WindowHeight:BaseUtility.GetUrlParaValue("windowHeight"),FormRuntimeCategory:this.FORM_RUNTIME_CATEGORY_LIST},this._webFormRTParas.RecordId||(this._webFormRTParas.RecordId=StringUtility.Guid())),this._webFormRTParas},getWebFormRTParasWithIndependence:function(){var e=RuntimeGeneralInstance.TryGetMenuOuterId();return StringUtility.IsNullOrEmpty(e)&&(e=BaseUtility.GetUrlParaValue("formId")),this._webFormRTParas||(this._webFormRTParas={FormId:e,ButtonId:this.FORM_RUNTIME_CATEGORY_INDEPENDENCE,OperationType:this.FORM_RUNTIME_CATEGORY_INDEPENDENCE,ListFormButtonElemId:this.FORM_RUNTIME_CATEGORY_INDEPENDENCE,RecordId:"",WindowWidth:"",WindowHeight:"",FormRuntimeCategory:this.FORM_RUNTIME_CATEGORY_INDEPENDENCE},StringUtility.IsNotNullOrEmpty(BaseUtility.GetUrlParaValue("operationType"))&&(this._webFormRTParas.OperationType=BaseUtility.GetUrlParaValue("operationType")),StringUtility.IsNotNullOrEmpty(BaseUtility.GetUrlParaValue("recordId"))&&(this._webFormRTParas.RecordId=BaseUtility.GetUrlParaValue("recordId")),this._webFormRTParas.RecordId||(this._webFormRTParas.RecordId=StringUtility.Guid())),this._webFormRTParas},pageReady:function(e,t,n){this._formRuntimeInst=Object.create(FormRuntime);var a=n.call(this);return this._formRuntimeInst.Initialization({RendererToId:"htmlDesignRuntimeWrap",FormId:a.FormId,RecordId:a.RecordId,ButtonId:a.ButtonId,OperationType:a.OperationType,IsPreview:e,RendererChainCompletedFunc:t,ListFormButtonElemId:a.ListFormButtonElemId,WebFormRTParas:a,FormRuntimeCategory:a.FormRuntimeCategory}),this._formRuntimeInst}},FormRuntime={_Prop_Config:{RendererToId:null,FormId:"",RecordId:"",ButtonId:"",IsPreview:!1,OperationType:"",ListFormButtonElemId:"",FormRuntimeCategory:"IsDependenceList",PreHandleFormHtmlRuntimeFunc:null},_$RendererToElem:null,_FormPO:null,_FormDataRelationList:null,_OriginalFormDataRelationList:null,_FormJSRuntimeInst:null,Initialization:function(e){this._Prop_Config=$.extend(!0,{},this._Prop_Config,e),this._$RendererToElem=$("#"+this._Prop_Config.RendererToId),this._LoadHTMLToEl()},_RendererChainIsCompleted:!0,_RendererDataChainIsCompleted:!0,_LoadHTMLToEl:function(){var e=BaseUtility.BuildAction("/Rest/Builder/RunTime/FormRuntime/LoadHTML",{});this._Prop_Config.IsPreview&&(e=BaseUtility.BuildAction("/Rest/Builder/RunTime/FormRuntime/LoadHTMLForPreView",{})),RuntimeGeneralInstance.LoadHtmlDesignContent(e,this._Prop_Config.RendererTo,{formId:this._Prop_Config.FormId,recordId:this._Prop_Config.RecordId,buttonId:this._Prop_Config.ButtonId,operationType:this.GetOperationType(),formRuntimeCategory:this._Prop_Config.FormRuntimeCategory},function(e){this._FormPO=e.data,this._FormPO.formDataRelation="",this._FormDataRelationList=this._FormPO.formRecordDataRelationPOList,this._OriginalFormDataRelationList=JsonUtility.CloneStringify(this._FormDataRelationList);var t=e.data.formHtmlRuntime;"function"==typeof this._Prop_Config.PreHandleFormHtmlRuntimeFunc&&(t=this._Prop_Config.PreHandleFormHtmlRuntimeFunc(t,this,this._Prop_Config)),this._$RendererToElem.append(t),this._FormJSRuntimeInst=Object.create(HTMLJSRuntime),this._FormJSRuntimeInst.Initialization({},this._$RendererToElem,this._FormPO.formJsContent);var n={po:e.data,sourceHTML:t,$rootElem:this._$RendererToElem,$parentControlElem:this._$RendererToElem,$singleControlElem:this._$RendererToElem,formRuntimeInstance:this};if(VirtualBodyControl.RendererChain(n),VirtualBodyControl.InitStyle(n),this.IsPreview()?this.CallRendererChainCompletedFunc():this._FormPO.listButtonEntity&&this.CreateALLInnerFormButton(this._FormPO.listButtonEntity),BaseUtility.IsUpdateOperation(this.GetOperationType())||BaseUtility.IsViewOperation(this.GetOperationType())){var a=e.data.formRecordComplexPO;console.log(e.data),console.log(a),this.DeSerializationFormData(a)}BaseUtility.IsViewOperation(this.GetOperationType())&&this._Prop_Config.FormRuntimeCategory==FormRuntimeSinglePageObject.FORM_RUNTIME_CATEGORY_INDEPENDENCE?$("#innerButtonWrapOuter").hide():this.IsPrint()&&($("#innerButtonWrapOuter").hide(),$(".html-design-operation-button-outer-wrap").hide()),this.CallRendererChainCompletedFunc()},this)},CallRendererChainCompletedFunc:function(){"function"==typeof this._Prop_Config.RendererChainCompletedFunc&&this._Prop_Config.RendererChainCompletedFunc.call(this),HTMLPageObjectInstanceProxy.Init(this._Prop_Config,this._FormPO),window.setTimeout(function(){console.log("延迟调用"),HTMLPageObjectInstanceProxy.CallPageReady()},500)},IsPrint:function(){return"true"==BaseUtility.GetUrlParaValue("IsPrint")},IsPreview:function(){return this._Prop_Config.IsPreview},GetRecordId:function(){return this._Prop_Config.RecordId},GetOperationType:function(){return this._Prop_Config.OperationType},GetOpenedListFormButtonId:function(){return this._Prop_Config.ListFormButtonElemId},GetOriginalFormDataRelation:function(){return JsonUtility.CloneStringify(this._OriginalFormDataRelationList)},GetFormPO:function(){return this._FormPO},SerializationFormData:function(){var e={recordId:this._Prop_Config.RecordId,formId:this._Prop_Config.FormId,buttonId:this._Prop_Config.ButtonId,formRuntimeCategory:this._Prop_Config.FormRuntimeCategory,formRecordDataRelationPOList:null,exData:null},t=this.GetOriginalFormDataRelation();console.log(t);for(var n=0;n<t.length;n++){var a=t[n],i=a.singleName,r=a.tableName,l=a.tableId,o=a.main;(a.isMain=o)&&(a.relationType="1To1");var s=a.relationType;if("1To1"==s){for(var d=$("[tablename='"+r+"'][serialize='true']").not($("[control_category='DynamicContainer']").find("[jbuild4dc_custom='true']")),u=[],c=0;c<d.length;c++){var f=$(d[c]),h=HTMLControl.TryGetFieldTransferPO(f,a.id,i,s);u.push(h)}var p="",m="",T="",g="";g=o?(FormRelationPOUtility.CreateIdFieldInRecordFieldPOArray(u,e.recordId,this.GetFormPO(),l),p=e.recordId,T=m="NotOuterField"):(p=FormRelationPOUtility.FindFieldPOInOneDataRecord(u,a.pkFieldName).value,m=a.outerKeyFieldName,T=a.outerKeyFieldName,a.selfKeyFieldName),FormRelationPOUtility.Add1To1DataRecordFieldPOList(a,u,"",p,m,T,g)}else{var _=$("[serialize='true'][control_category='DynamicContainer'][relation_po_id='"+a.id+"']");if(0<_.length)HTMLControl.GetControlInstanceByElem(_).SerializationValue(t,a,_)}}return e.formRecordDataRelationPOList=t,e},DeSerializationFormData:function(e){VirtualBodyControl.RendererDataChain({$rootElem:this._$RendererToElem,$parentControlElem:this._$RendererToElem,$singleControlElem:this._$RendererToElem,formRuntimeInstance:this,relationFormRecordComplexPo:e,callToViewStatusFunc:BaseUtility.IsViewOperation(this.GetOperationType())})},CreateALLInnerFormButton:function(e){if(!StringUtility.IsNullOrEmpty(e.buttonInnerConfig))for(var t=JsonUtility.StringToJson(e.buttonInnerConfig),n=0;n<t.length;n++){var a=t[n],i=InnerFormButtonRuntime.RendererSingleInnerFormButton(a,this,e);$("#innerButtonWrapOuter").append(i)}},GetWebFormRTParas:function(){return this._Prop_Config.WebFormRTParas}},FormRuntimeMockDataPool={mockDataPool:{},SaveData:function(e,t,n){var a=e+"-"+t;this.mockDataPool[a]=n},GetData:function(e,t){var n=e+"-"+t;return this.mockDataPool[n]?this.mockDataPool[n]:null},SaveDataToParentPool:function(e,t,n){window.parent.FormRuntimeMockDataPool.SaveData(e,t,n)},GetDataFromParentPool:function(e,t){return window.parent.FormRuntimeMockDataPool.GetData(e,t)},GetMockData:function(){return{recordId:"",formId:"34db0d6f-7978-4acf-8a45-13a6ee5f63e2",buttonId:"",formRecordDataRelationPOList:[{id:"d9bc9332-3c94-28bb-1c11-049764c69eb5",parentId:"-1",singleName:"",pkFieldName:"",desc:"",selfKeyFieldName:"",outerKeyFieldName:"",relationType:"1To1",isSave:"true",condition:"",tableId:"TDEV_TEST_1",tableName:"TDEV_TEST_1",tableCaption:"开发测试表11",tableCode:"T_10437",displayText:"TDEV_TEST_1[开发测试表1]",icon:"../../../Themes/Png16X16/table.png",isMain:!0,oneDataRecord:{desc:"一对一数据",recordFieldPOList:[{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_897949295",defaultType:"Const",defaultValue:"测试",value:"测试15",success:!0,msg:""},{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_375186891",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD",value:"2019-10-31",success:!0,msg:""},{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_DropDownSelect",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"F_PUBLIC_STATUS",fieldDataType:"字符串",fieldDataLength:"50",serialize:"true",id:"sel_246410688",defaultType:"",defaultValue:"",value:"4",success:!0,msg:""},{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"F_ORGAN_ID",fieldDataType:"字符串",fieldDataLength:"50",serialize:"true",id:"txt_897909755",defaultType:"EnvVar",defaultValue:"ENV_SYSTEM_CURRENT_USER_ORGAN_ID",value:"10001",success:!0,msg:""},{relationId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_1",tableCaption:"开发测试表1",tableId:"TDEV_TEST_1",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_897949295",defaultType:"Const",defaultValue:"测试",value:"0d561c0e-b83b-a9ff-c88a-652d4a4aa256",success:!0,msg:""}]}},{id:"2d7def75-1438-7614-af7d-60ce0650eba6",parentId:"d9bc9332-3c94-28bb-1c11-049764c69eb5",singleName:"",pkFieldName:"",desc:"",selfKeyFieldName:"",outerKeyFieldName:"",relationType:"1ToN",isSave:"true",condition:"",tableId:"TDEV_TEST_2",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableCode:"T_10438",displayText:"TDEV_TEST_2[开发测试表2](1ToN)",icon:"../../../Themes/Png16X16/table.png",isMain:!1,listDataRecord:[{desc:"一对一数据",recordFieldPOList:[{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"1",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_698060281",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD",value:"2019-10-30",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"2",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_698060281",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD",value:"2019-10-30",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"3",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_698060281",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD",value:"2019-10-30",success:!0,msg:""},{relationId:"19e5f4ea-4fba-4f4b-0d3b-8b6f56ddeda1",relationSingleName:"",relationType:"1To1",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_2",tableCaption:"开发测试表2",tableId:"TDEV_TEST_2",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_698035082",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]}]},{id:"4313366b-caa0-4272-2690-1237750651f6",parentId:"2d7def75-1438-7614-af7d-60ce0650eba6",singleName:"",pkFieldName:"",desc:"",selfKeyFieldName:"TDEV_TEST_2_ID",outerKeyFieldName:"ID",relationType:"1ToN",isSave:"true",condition:"",tableId:"e15549cb-e074-48a3-8939-44340e387f17",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableCode:"T_10871",displayText:"TDEV_TEST_5[TDEV_TEST_5](1ToN)",icon:"../../../Themes/Png16X16/table.png",listDataRecord:[{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"1",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:32",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"8be67086-3f2e-9eb7-7b9d-f5350db9de92",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"11",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:32",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"3a4f512f-5fd5-2d8f-98a0-6e8aa0178999",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"111",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:32",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"85be9cb5-48bc-ec01-6f0c-7a634934f25e",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"1111",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:32",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"8bd9b70b-7a03-5cbd-863f-bf994612647b",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"f18706b9-c8a5-93cb-8be0-f7fca2d77702",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"2",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:49",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"dbf46b13-3285-5891-ac50-ed783b8fbcda",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"22",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:49",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"dfeeeadc-3418-89b8-2fc3-98f9263900c4",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"222",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:49",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"005d1265-f165-34f9-dfc7-1e700ba7ffa4",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"2222",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 20:59:49",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"058e8563-adc1-7c3d-417f-783fe19dd936",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"e6881779-ecd2-8345-03f1-7c8ef065dccb",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"3",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 21:00:12",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"82842a88-279e-4599-0f57-0b94c65b5a4c",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"33",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 21:00:12",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"c2b3b86b-d6c3-cb4b-b215-6db99152b56e",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"333",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 21:00:12",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"b06fc984-4548-0914-b041-e8c982151b86",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]},{desc:"一对一数据",recordFieldPOList:[{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_TITLE",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"3333",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextDateTime",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"F_PUBLIC_TIME",fieldDataType:"日期时间",fieldDataLength:"20",serialize:"true",id:"txt_dt_768729317",defaultType:"EnvVar",defaultValue:"ENV_DATETIME_YYYY_MM_DD_HH_MM_SS",value:"2019-10-30 21:00:12",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"1a648882-ce4b-af88-5471-8846962414aa",success:!0,msg:""},{relationId:"fd6cc1a1-822b-7a6c-9ee4-f0e6d36bd538",relationSingleName:"",relationType:"1ToN",singleName:"WFDCT_TextBox",tableName:"TDEV_TEST_5",tableCaption:"TDEV_TEST_5",tableId:"e15549cb-e074-48a3-8939-44340e387f17",fieldTableId:"",fieldName:"TDEV_TEST_2_ID",fieldDataType:"字符串",fieldDataLength:"200",serialize:"true",id:"txt_768659685",defaultType:"Const",defaultValue:"1",value:"d9fe2f10-e5eb-f59a-58ee-787fdce751f1",success:!0,msg:""}]}],isMain:!1}],exData:null}}},HTMLJSRuntime={_Prop_Config:{},_$RendererToElem:null,_JsContent:null,_ReplaceContextPath:function(e){var t=BaseUtility.GetRootPath();return e.replaceAll("${contextPath}",t)},_ReplaceTimeStamp:function(e){var t=(new Date).getTime();return e.replaceAll("${timeStamp}",t)},ReplaceJSParas:function(e){var t=this._ReplaceContextPath(e);return t=this._ReplaceTimeStamp(t)},Initialization:function(e,t,n){this._Prop_Config=$.extend(!0,{},this._Prop_Config,e),this._$RendererToElem=t,this._JsContent=n,this._LoadJSToEl()},_LoadJSToEl:function(){console.log("引入脚本:"),this._$RendererToElem.append(this.ReplaceJSParas(this._JsContent))}},HTMLPageObjectInstanceProxy={webFormRTParas:null,htmlPO:null,formRecordComplexPO:null,FormPageObjectInstance:null,BuilderListPageRuntimeInstance:null,Init:function(e,t){this.webFormRTParas=e,this.htmlPO=t,this.htmlPO.formRecordComplexPO&&(this.formRecordComplexPO=this.htmlPO.formRecordComplexPO)},CallPageReady:function(){"undefined"!=typeof FormPageObjectInstance&&(this.FormPageObjectInstance=FormPageObjectInstance),this.FormPageObjectInstance&&(this.FormPageObjectInstance.data.webFormRTParas=this.webFormRTParas,this.FormPageObjectInstance.data.formPO=this.htmlPO,this.FormPageObjectInstance.data.formRecordComplexPO=this.formRecordComplexPO,this.FormPageObjectInstance.pageReady&&this.FormPageObjectInstance.pageReady(),this.FormPageObjectInstance.bindRecordDataReady&&this.FormPageObjectInstance.bindRecordDataReady()),"undefined"!=typeof BuilderListPageRuntimeInstance&&(this.BuilderListPageRuntimeInstance=BuilderListPageRuntimeInstance),this.BuilderListPageRuntimeInstance&&(this.BuilderListPageRuntimeInstance.data.listPO=this.htmlPO,this.BuilderListPageRuntimeInstance.pageReady&&this.BuilderListPageRuntimeInstance.pageReady(),this.BuilderListPageRuntimeInstance.rendererChainCompleted&&this.BuilderListPageRuntimeInstance.rendererChainCompleted(),this.BuilderListPageRuntimeInstance.rendererDataChainCompleted&&this.BuilderListPageRuntimeInstance.rendererDataChainCompleted())},CallValidateEveryFromControl:function(e){if(this.FormPageObjectInstance.validateEveryFromControl)try{var t=this.FormPageObjectInstance.validateEveryFromControl(e);t&&(e=t)}catch(e){DialogUtility.AlertText("自定义校验方法执行失败!")}return e}},InnerFormButtonRuntime={RendererSingleInnerFormButton:function(e,t,n){var a,i=t._Prop_Config.FormRuntimeCategory;if("关闭按钮"==e.buttonType)a=Object.create(InnerFormCloseButton).Instance(e,t,n,i).elem;else if("保存按钮"==e.buttonType)a=Object.create(InnerFormSaveButton).Instance(e,t,n,i).elem;else{if("脚本按钮"!=e.buttonType){var r="不支持的按钮类型:InnerFormButtonRuntime.RendererSingleInnerFormButton";throw DialogUtility.AlertText(r),r}a=Object.create(InnerFormJsClientButton).Instance(e,t,n,i).elem}return a},RendererSingleInnerFormButtonClick:function(e){}},ListRuntime={_Prop_Status:"Edit",_Prop_Config:{RendererToId:null,ListId:"",IsPreview:!1},_ListPO:null,_$RendererToElem:null,_JSRuntimeInst:null,Initialization:function(e){this._Prop_Config=$.extend(!0,{},this._Prop_Config,e),this._$RendererToElem=$("#"+this._Prop_Config.RendererToId),this._LoadHTMLToEl()},_RendererChainIsCompleted:!0,_RendererDataChainIsCompleted:!0,_LoadHTMLToEl:function(){RuntimeGeneralInstance.LoadHtmlDesignContent(BaseUtility.GetRootPath()+"/Rest/Builder/RunTime/ListRuntime/LoadHTML?listId="+this._Prop_Config.ListId,this._Prop_Config.RendererTo,{},function(e){console.log(e);var t=this;t._ListPO=e.data,this._$RendererToElem.append(e.data.listHtmlRuntime),this._JSRuntimeInst=Object.create(HTMLJSRuntime),this._JSRuntimeInst.Initialization({},this._$RendererToElem,this._ListPO.listJsContent),VirtualBodyControl.RendererChain({po:e.data,sourceHTML:e.data.listHtmlRuntime,$rootElem:this._$RendererToElem,$parentControlElem:this._$RendererToElem,$singleControlElem:this._$RendererToElem,listRuntimeInstance:this});var n=window.setInterval(function(){t._RendererChainIsCompleted&&window.clearInterval(n)},500),a=e.data.listDatasetId;VirtualBodyControl.RendererDataChain({po:e.data,sourceHTML:e.data.listHtmlRuntime,$rootElem:this._$RendererToElem,$parentControlElem:this._$RendererToElem,$singleControlElem:this._$RendererToElem,topDataSetId:a,listRuntimeInstance:this});var i=window.setInterval(function(){t._RendererDataChainIsCompleted&&(window.clearInterval(i),t.CallRendererChainCompletedFunc())},700)},this)},CallRendererChainCompletedFunc:function(){"function"==typeof this._Prop_Config.RendererChainCompletedFunc&&this._Prop_Config.RendererChainCompletedFunc.call(this),HTMLPageObjectInstanceProxy.Init(this._Prop_Config,this._ListPO),window.setTimeout(function(){console.log("延迟调用"),HTMLPageObjectInstanceProxy.CallPageReady()},500)},CheckPrimaryKeyInDataSet:function(e,t){if(e.list&&0<e.list.length){var n=e.list[0];for(var a in n)if(StringUtility.toUpperCase(a)==StringUtility.toUpperCase(t))return!0}return!1},GetPrimaryKey:function(){return this._ListPO.listDatasetPrimaryKey},IsPreview:function(){return this._Prop_Config.IsPreview}},RuntimeGeneralInstance={_Ajax:function(e,t,n,a){jQuery.ajax({url:e,type:"POST",dataType:"json",data:t}).done(function(e){if(!e.success){var t=e.message;StringUtility.IsNullOrEmpty(t)&&(t=e.traceMsg),DialogUtility.AlertText(t,a)}n.call(a,e)}).always(n&&function(e,t){})},LoadHtmlDesignContent:function(e,t,n,a,i){this._Ajax(e,n,a,i)},LoadInnerFormButton:function(e,t,n,a){var i=BaseUtility.BuildAction("/Rest/Builder/RunTime/ListButtonRuntime/GetButtonPO",{buttonId:e});this._Ajax(i,t,n,a)},SubmitFormDataComplexPOListToServer:function(e,t,n,a,i,r,l){var o=BaseUtility.BuildAction("/Rest/Builder/RunTime/InnerFormButtonRuntime/ReceiveHandler",{}),s={formRecordComplexPOString:encodeURIComponent(JsonUtility.JsonToString(e)),innerFormButtonId:n,listButtonId:a,recordId:t,operationTypeName:i};this._Ajax(o,s,r,l),console.log(e)},DeleteTableRecord:function(e,t,n,a){AjaxUtility.Post("/Rest/Builder/RunTime/DataSetRuntime/DeleteTableRecord",{tableId:e,pkValue:t},function(e){e.success&&n(e)},a)},DeleteDataSetRecord:function(t,e,n,a){AjaxUtility.Post("/Rest/Builder/RunTime/DataSetRuntime/DeleteDataSetRecord",{dataSetId:e,pkValue:n},function(e){e.success&&WLDCT_ListTableContainer.TryReloadForListFormButton(t)},a)},GetDataSetData:function(e,t,n){var a=JSON.stringify(e);AjaxUtility.PostRequestBody("/Rest/Builder/RunTime/DataSetRuntime/GetDataSetData",a,function(e){t.call(n,e)},n)},GetUrlParas:function(){if(this.menuRightUrlParaJson)return this.menuRightUrlParaJson;var e=BaseUtility.GetUrlParaValue("menuRightUrlPara");if(StringUtility.IsNullOrEmpty(e))return"";if("{"==e.charAt(0)||"["==e.charAt(0))try{return JsonUtility.StringToJson(e)}catch(e){}return this.menuRightUrlParaJson=e},TryGetUrlParaValueByFieldName:function(e,t){var n=this.GetUrlParas();if(n&&"string"!=typeof n)for(var a=0;a<n.length;a++){var i=n[a];if(i.ActionType==e&&i.FieldName==t)return i.Value}return""},TryGetUrlParaChangeMainDataSetId:function(){var e=this.GetUrlParas();if(e&&"string"!=typeof e)for(var t=0;t<e.length;t++){var n=e[t];if("ChangeMainDataSet"==n.ActionType)return n.DataSetId}return""},TryGetUrlParaViewOnly:function(){var e=this.GetUrlParas();if(e&&"string"!=typeof e)for(var t=0;t<e.length;t++){if("ViewOnly"==e[t].ActionType)return!0}return!1},TryGetMenuOuterId:function(){return BaseUtility.GetUrlParaValue("menuOuterId")}},ValidateRulesRuntime={NoEmpty:"NoEmpty",getValidateTipElem:function(){return"<span name='validate-tip' style='color: red'>*</span> "},getValidateRules:function(e){if(e.attr("validaterules")){var t=decodeURIComponent(e.attr("validaterules"));return JsonUtility.StringToJson(t)}return null},ValidateSubmitEnable:function(){for(var e=$("[tablename][serialize='true']").not($("[control_category='DynamicContainer']").find("[jbuild4dc_custom='true']")),t={success:!0,errors:[]},n=0;n<e.length;n++){var a=$(e[n]),i=ValidateRulesRuntime.getValidateRules(a);if(i&&0<i.rules.length)for(var r={labName:this.tryGetValidateErrorName(a),errors:[],$elem:null},l=HTMLControl.TryGetFieldTransferPO(a,"ValidateSubmitEnable","ValidateSubmitEnable","ValidateSubmitEnable").value,o=0;o<i.rules.length;o++){i.rules[o].validateType==ValidateRulesRuntime.NoEmpty&&(""==StringUtility.Trim(l)||StringUtility.IsNullOrEmpty(l))&&r.errors.push("不能为空!"),0<r.errors.length&&(r.$elem=a,t.success=!1,t.errors.push(r))}}return t=HTMLPageObjectInstanceProxy.CallValidateEveryFromControl(t)},tryGetValidateErrorName:function(e){var t="",n=e.parent().prev();return n&&0<n.length&&(t=n.text().replace("*","").replace("：","")),t},AlertValidateErrors:function(e){if(!e.success){for(var t="",n=0;n<e.errors.length;n++){var a=e.errors[n];t+=a.labName+"   【"+a.errors.join(",")+"】<br />"}DialogUtility.Alert(window,DialogUtility.DialogId05,{autoResize:!0,height:"auto",width:300,title:"系统提示"},t);for(var i=0;i<e.errors.length;i++){var r=e.errors[i];"WFDCT_RadioGroup"==r.$elem.attr("client_resolve")?r.$elem.parent().addClass("html-design-input-control-error-status-radio-group"):r.$elem.addClass("html-design-input-control-error-status")}window.setTimeout(function(){$(".html-design-input-control-error-status").removeClass("html-design-input-control-error-status"),$(".html-design-input-control-error-status-radio-group").removeClass("html-design-input-control-error-status-radio-group")},4e3)}return e.success}},HTMLControlAttrs={JBUILD4DC_CUSTOM:"jbuild4dc_custom",SELECTED_JBUILD4DC_CUSTOM:"[jbuild4dc_custom=true]",CLIENT_RESOLVE:"client_resolve"},HTMLControl={_InstanceMap:{},_GetInstance:function _GetInstance(name){for(var key in this._InstanceMap)if(key==name)return this._InstanceMap[key];var instance=eval(name);return this._InstanceMap[name]=instance,instance},GetInstance:function(e){return this._GetInstance(e)},SaveControlNewInstanceToPool:function(e,t){return alert("改方法已经废弃,改为服务端创建初始化脚本1!"),null},_SaveControlNewInstanceToPool:function(e,t){return this._InstanceMap[e]=t,e},GetControlInstanceByElem:function(e){return this._GetInstance(this.GetControlInstanceNameByElem(e))},GetControlInstanceNameByElem:function(e){return e.attr("client_instance_name")&&0<e.attr("client_instance_name").length?e.attr("client_instance_name"):e.attr("client_resolve")},RendererChainParas:{listEntity:null,sourceHTML:null,$rootElem:null,$parentControlElem:null,$singleControlElem:null,formRuntimeInstance:null,listRuntimeInstance:null},RendererDataChainParas:{listEntity:null,sourceHTML:null,$rootElem:null,$parentControlElem:null,$singleControlElem:null,topDataSet:null,formRuntimeInstance:null,listRuntimeInstance:null},RendererChain:function(e){for(var t=e.$singleControlElem,n=0;n<t.children().length;n++){var a=$(t.children()[n]),i={};if(JsonUtility.SimpleCloneAttr(i,e),"true"==(i.$singleControlElem=a).attr(HTMLControlAttrs.JBUILD4DC_CUSTOM)&&a.attr(HTMLControlAttrs.CLIENT_RESOLVE)){var r=HTMLControl.GetControlInstanceByElem(a);if("function"==typeof r.Initialize&&r.Initialize(),"Instance"==r._objectType){if(r._prop){var l=HTMLControl.TryBindElementAttrToInstanceProp(a,r._prop);r._prop=l}}else{var o=a.attr("id");if(o&&r._propMap&&r._prop&&!r._propMap[o]){l=HTMLControl.TryBindElementAttrToInstanceProp(a,r._prop);r._propMap[o]=l}}r.RendererChain(i),"function"==typeof r.InitStyle&&r.InitStyle(i),"function"==typeof r.TryBindUrlValue&&r.TryBindUrlValue(i)}else HTMLControl.RendererChain(i)}},RendererDataChain:function(e){for(var t=e.$singleControlElem,n=0;n<t.children().length;n++){var a=$(t.children()[n]),i={};if(JsonUtility.SimpleCloneAttr(i,e),"true"==(i.$singleControlElem=a).attr(HTMLControlAttrs.JBUILD4DC_CUSTOM)&&a.attr(HTMLControlAttrs.CLIENT_RESOLVE)){var r,l=HTMLControl.GetControlInstanceByElem(a);l.RendererDataChain(i),"function"==typeof l.SetValue&&(r=HTMLControl.TryGetFieldPOInRelationFormRecordComplexPo(a,e.relationFormRecordComplexPo),l.SetValue(a,r,e.relationFormRecordComplexPo,e)),e.callToViewStatusFunc&&"function"==typeof l.ToViewStatus&&l.ToViewStatus(a,r,e.relationFormRecordComplexPo,e)}else HTMLControl.RendererDataChain(i)}},InitStyle:function(e){var t=e.$singleControlElem;HTMLControl.TryAppendValidateStyle(t)},TryAppendValidateStyle:function(e){var t=ValidateRulesRuntime.getValidateRules(e);if(t&&0<t.rules.length)for(var n=0;n<t.rules.length;n++)if(t.rules[n].validateType==ValidateRulesRuntime.NoEmpty){var a=e.parent().prev(),i=ValidateRulesRuntime.getValidateTipElem()+a.text();a.html(i)}},GetValue:function(e,t,n){return t.value=e.val(),t},SetValue:function(e,t,n,a){t&&(e.val(t.value),e.attr("control_value",t.value))},ToViewStatus:function(e,t,n,a){var i=BaseUtility.GetElemAllAttr(e),r=$("<label />");if(r.attr(i),r.removeClass(),"SELECT"==e.prop("tagName")){var l=e.find("option:selected").text();r.text(l)}else r.text(e.val());e.replaceWith(r)},TryBindUrlValue:function(e){var t=e.$singleControlElem,n=t.attr("columnname");n||(n=t.attr("fieldname"));var a=RuntimeGeneralInstance.TryGetUrlParaValueByFieldName("BindToField",n);a&&(t.val(a),console.log(a))},TryGetFieldPOInRelationFormRecordComplexPo:function(e,t){var n=HTMLControl.GetControlBindRelationId(e),a=HTMLControl.GetControlBindTableName(e),i=HTMLControl.GetControlBindFieldName(e);return n&&i?FormRelationPOUtility.FindFieldPOInRelationFormRecordComplexPoOneDataRecord(t,n,a,i):null},FindALLControls:function(e){return e?e.find("[jbuild4dc_custom='true']"):$("[jbuild4dc_custom='true']")},GetControlBindTableName:function(e){return e.attr("tablename")},GetControlBindFieldName:function(e){return e.attr("fieldname")},GetControlBindRelationId:function(e){return e.attr("relationid")},GetControlProp:function(e){var t={singleName:"",tableName:"",tableCaption:"",tableId:"",fieldTableId:"",fieldName:"",fieldDataType:"",fieldDataLength:"",defaultType:"",defaultValue:"",id:"",serialize:"",value:""};for(var n in t){var a=e.attr(StringUtility.ToLowerCase(n));StringUtility.IsNullOrEmpty(a)||(t[n]=a)}return t.fieldDataLength=e.attr("fieldlength"),t},BuildSerializationOriginalData:function(e,t,n,a){return{relationId:t,relationSingleName:n,relationType:a,singleName:e.singleName,tableName:e.tableName,tableCaption:e.tableCaption,tableId:e.tableId,fieldTableId:e.fieldTableId,fieldName:e.fieldName,fieldDataType:e.fieldDataType,fieldDataLength:e.fieldDataLength,serialize:e.serialize,id:e.id,defaultType:e.defaultType,defaultValue:e.defaultValue,value:"",success:!0,msg:""}},GetSerializationOneDataRecordFieldValue:function(e,t,n){for(var a=0;a<e.length;a++)if(e[a].tableName==t&&e[a].fieldName==n)return e[a].value;return""},TryGetFieldTransferPO:function(e,t,n,a){var i=HTMLControl.GetControlProp(e),r=HTMLControl.BuildSerializationOriginalData(i,t,n,a),l=HTMLControl.GetControlInstanceByElem(e);if(BaseUtility.IsFunction(l.GetValue)){var o=l.GetValue(e,r,{});return o.success?o:null}DialogUtility.AlertText("控件:"+e.attr("singlename")+"未包含GetValue的方法!")},GetSimpleControlValue:function(e,t){var n=$("[tableid='"+e+"'][fieldname='"+t+"']");return 0==n.length?null:n.val()},TryBindElementAttrToInstanceProp:function(e,t){var n={};for(var a in t)e.attr(a)?n[a]=e.attr(a):"elemId"==a?n.elemId=e.attr("id"):"instanceName"==a?n.instanceName=e.attr("client_instance_name"):n[a]=t[a];return n.$singleControlElem=e,n}},VirtualBodyControl={RendererChain:HTMLControl.RendererChain,RendererDataChain:HTMLControl.RendererDataChain,InitStyle:function(e){e.$singleControlElem;var t=e.formRuntimeInstance;this.TryAutoSetHeight(t)},TryAutoSetHeight:function(e){if(0<$(".auto-full-page-height-wrap").length){var t=e._Prop_Config.WebFormRTParas.WindowHeight;t&&(t-=130,this.HasRootTabContainer()&&(t-=70),$(".auto-full-page-height-wrap").height(t),$(".auto-full-page-height-wrap").each(function(){var e=$(this);new PerfectScrollbar(e[0])}))}},HasRootTabContainer:function(){return 0<$("#htmlDesignRuntimeWrap").children("[singlename='WFDCT_TabContainer']").length}};function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(n){"function"==typeof define&&define.amd?define(["jquery"],function(e){return n(e,window,document)}):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=function(e,t){return e||(e=window),t||(t="undefined"!=typeof window?require("jquery"):require("jquery")(e)),n(t,e,e.document)}:n(jQuery,window,document)}(function(G,E,g,W){var p,_,t,e,b=function v(S){this.$=function(e,t){return this.api(!0).$(e,t)},this._=function(e,t){return this.api(!0).rows(e,t).data()},this.api=function(e){return new _(e?rt(this[p.iApiIndex]):this)},this.fnAddData=function(e,t){var n=this.api(!0),a=G.isArray(e)&&(G.isArray(e[0])||G.isPlainObject(e[0]))?n.rows.add(e):n.row.add(e);return(t===W||t)&&n.draw(),a.flatten().toArray()},this.fnAdjustColumnSizing=function(e){var t=this.api(!0).columns.adjust(),n=t.settings()[0],a=n.oScroll;e===W||e?t.draw(!1):""===a.sX&&""===a.sY||$e(n)},this.fnClearTable=function(e){var t=this.api(!0).clear();(e===W||e)&&t.draw()},this.fnClose=function(e){this.api(!0).row(e).child.hide()},this.fnDeleteRow=function(e,t,n){var a=this.api(!0),i=a.rows(e),r=i.settings()[0],l=r.aoData[i[0][0]];return i.remove(),t&&t.call(this,r,l),(n===W||n)&&a.draw(),l},this.fnDestroy=function(e){this.api(!0).destroy(e)},this.fnDraw=function(e){this.api(!0).draw(e)},this.fnFilter=function(e,t,n,a,i,r){var l=this.api(!0);null===t||t===W?l.search(e,n,a,r):l.column(t).search(e,n,a,r),l.draw()},this.fnGetData=function(e,t){var n=this.api(!0);if(e===W)return n.data().toArray();var a=e.nodeName?e.nodeName.toLowerCase():"";return t!==W||"td"==a||"th"==a?n.cell(e,t).data():n.row(e).data()||null},this.fnGetNodes=function(e){var t=this.api(!0);return e!==W?t.row(e).node():t.rows().nodes().flatten().toArray()},this.fnGetPosition=function(e){var t=this.api(!0),n=e.nodeName.toUpperCase();if("TR"==n)return t.row(e).index();if("TD"!=n&&"TH"!=n)return null;var a=t.cell(e).index();return[a.row,a.columnVisible,a.column]},this.fnIsOpen=function(e){return this.api(!0).row(e).child.isShown()},this.fnOpen=function(e,t,n){return this.api(!0).row(e).child(t,n).show().child()[0]},this.fnPageChange=function(e,t){var n=this.api(!0).page(e);(t===W||t)&&n.draw(!1)},this.fnSetColumnVis=function(e,t,n){var a=this.api(!0).column(e).visible(t);(n===W||n)&&a.columns.adjust().draw()},this.fnSettings=function(){return rt(this[p.iApiIndex])},this.fnSort=function(e){this.api(!0).order(e).draw()},this.fnSortListener=function(e,t,n){this.api(!0).order.listener(e,t,n)},this.fnUpdate=function(e,t,n,a,i){var r=this.api(!0);return n===W||null===n?r.row(t).data(e):r.cell(t,n).data(e),(i===W||i)&&r.columns.adjust(),(a===W||a)&&r.draw(),0},this.fnVersionCheck=p.fnVersionCheck;var I=this,R=S===W,w=this.length;for(var e in R&&(S={}),this.oApi=this.internal=p.internal,v.ext.internal)e&&(this[e]=Bt(e));return this.each(function(){var r,l=1<w?st({},S,!0):S,o=0,e=this.getAttribute("id"),s=!1,t=v.defaults,d=G(this);if("table"==this.nodeName.toLowerCase()){L(t),N(t.column),F(t,t,!0),F(t.column,t.column,!0),F(t,G.extend(l,d.data()));var n=v.settings;for(o=0,r=n.length;o<r;o++){var a=n[o];if(a.nTable==this||a.nTHead&&a.nTHead.parentNode==this||a.nTFoot&&a.nTFoot.parentNode==this){var i=l.bRetrieve!==W?l.bRetrieve:t.bRetrieve,u=l.bDestroy!==W?l.bDestroy:t.bDestroy;if(R||i)return a.oInstance;if(u){a.oInstance.fnDestroy();break}return void lt(a,0,"Cannot reinitialise DataTable",3)}if(a.sTableId==this.id){n.splice(o,1);break}}null!==e&&""!==e||(e="DataTables_Table_"+v.ext._unique++,this.id=e);var c=G.extend(!0,{},v.models.oSettings,{sDestroyWidth:d[0].style.width,sInstance:e,sTableId:e});c.nTable=this,c.oApi=I.internal,c.oInit=l,n.push(c),c.oInstance=1===I.length?I:d.dataTable(),L(l),x(l.oLanguage),l.aLengthMenu&&!l.iDisplayLength&&(l.iDisplayLength=G.isArray(l.aLengthMenu[0])?l.aLengthMenu[0][0]:l.aLengthMenu[0]),l=st(G.extend(!0,{},t),l),ot(c.oFeatures,l,["bPaginate","bLengthChange","bFilter","bSort","bSortMulti","bInfo","bProcessing","bAutoWidth","bSortClasses","bServerSide","bDeferRender"]),ot(c,l,["asStripeClasses","ajax","fnServerData","fnFormatNumber","sServerMethod","aaSorting","aaSortingFixed","aLengthMenu","sPaginationType","sAjaxSource","sAjaxDataProp","iStateDuration","sDom","bSortCellsTop","iTabIndex","fnStateLoadCallback","fnStateSaveCallback","renderer","searchDelay","rowId",["iCookieDuration","iStateDuration"],["oSearch","oPreviousSearch"],["aoSearchCols","aoPreSearchCols"],["iDisplayLength","_iDisplayLength"]]),ot(c.oScroll,l,[["sScrollX","sX"],["sScrollXInner","sXInner"],["sScrollY","sY"],["bScrollCollapse","bCollapse"]]),ot(c.oLanguage,l,"fnInfoCallback"),ut(c,"aoDrawCallback",l.fnDrawCallback,"user"),ut(c,"aoServerParams",l.fnServerParams,"user"),ut(c,"aoStateSaveParams",l.fnStateSaveParams,"user"),ut(c,"aoStateLoadParams",l.fnStateLoadParams,"user"),ut(c,"aoStateLoaded",l.fnStateLoaded,"user"),ut(c,"aoRowCallback",l.fnRowCallback,"user"),ut(c,"aoRowCreatedCallback",l.fnCreatedRow,"user"),ut(c,"aoHeaderCallback",l.fnHeaderCallback,"user"),ut(c,"aoFooterCallback",l.fnFooterCallback,"user"),ut(c,"aoInitComplete",l.fnInitComplete,"user"),ut(c,"aoPreDrawCallback",l.fnPreDrawCallback,"user"),c.rowIdFn=X(l.rowId),P(c);var f=c.oClasses;if(G.extend(f,v.ext.classes,l.oClasses),d.addClass(f.sTable),c.iInitDisplayStart===W&&(c.iInitDisplayStart=l.iDisplayStart,c._iDisplayStart=l.iDisplayStart),null!==l.iDeferLoading){c.bDeferLoading=!0;var h=G.isArray(l.iDeferLoading);c._iRecordsDisplay=h?l.iDeferLoading[0]:l.iDeferLoading,c._iRecordsTotal=h?l.iDeferLoading[1]:l.iDeferLoading}var p=c.oLanguage;G.extend(!0,p,l.oLanguage),p.sUrl&&(G.ajax({dataType:"json",url:p.sUrl,success:function(e){x(e),F(t.oLanguage,e),G.extend(!0,p,e),Ne(c)},error:function(){Ne(c)}}),s=!0),null===l.asStripeClasses&&(c.asStripeClasses=[f.sStripeOdd,f.sStripeEven]);var m=c.asStripeClasses,T=d.children("tbody").find("tr").eq(0);-1!==G.inArray(!0,G.map(m,function(e,t){return T.hasClass(e)}))&&(G("tbody tr",this).removeClass(m.join(" ")),c.asDestroyStripes=m.slice());var g,_=[],b=this.getElementsByTagName("thead");if(0!==b.length&&(ue(c.aoHeader,b[0]),_=ce(c)),null===l.aoColumns)for(g=[],o=0,r=_.length;o<r;o++)g.push(null);else g=l.aoColumns;for(o=0,r=g.length;o<r;o++)B(c,_?_[o]:null);if(U(c,l.aoColumnDefs,g,function(e,t){O(c,e,t)}),T.length){var C=function(e,t){return null!==e.getAttribute("data-"+t)?t:null};G(T[0]).children("th, td").each(function(e,t){var n=c.aoColumns[e];if(n.mData===e){var a=C(t,"sort")||C(t,"order"),i=C(t,"filter")||C(t,"search");null===a&&null===i||(n.mData={_:e+".display",sort:null!==a?e+".@data-"+a:W,type:null!==a?e+".@data-"+a:W,filter:null!==i?e+".@data-"+i:W},O(c,e))}})}var y=c.oFeatures,D=function(){if(l.aaSorting===W){var e=c.aaSorting;for(o=0,r=e.length;o<r;o++)e[o][1]=c.aoColumns[o].asSorting[0]}tt(c),y.bSort&&ut(c,"aoDrawCallback",function(){if(c.bSorted){var e=Xe(c),n={};G.each(e,function(e,t){n[t.src]=t.dir}),ct(c,null,"order",[c,e,n]),Qe(c)}}),ut(c,"aoDrawCallback",function(){(c.bSorted||"ssp"===pt(c)||y.bDeferRender)&&tt(c)},"sc");var t=d.children("caption").each(function(){this._captionSide=G(this).css("caption-side")}),n=d.children("thead");0===n.length&&(n=G("<thead/>").appendTo(d)),c.nTHead=n[0];var a=d.children("tbody");0===a.length&&(a=G("<tbody/>").appendTo(d)),c.nTBody=a[0];var i=d.children("tfoot");if(0===i.length&&0<t.length&&(""!==c.oScroll.sX||""!==c.oScroll.sY)&&(i=G("<tfoot/>").appendTo(d)),0===i.length||0===i.children().length?d.addClass(f.sNoFooter):0<i.length&&(c.nTFoot=i[0],ue(c.aoFooter,c.nTFoot)),l.aaData)for(o=0;o<l.aaData.length;o++)M(c,l.aaData[o]);else(c.bDeferLoading||"dom"==pt(c))&&H(c,G(c.nTBody).children("tr"));c.aiDisplay=c.aiDisplayMaster.slice(),!(c.bInitialised=!0)===s&&Ne(c)};l.bStateSave?(y.bStateSave=!0,ut(c,"aoDrawCallback",at,"state_save"),it(c,l,D)):D()}else lt(null,0,"Non-table node initialisation ("+this.nodeName+")",2)}),I=null,this},n={},a=/[\r\n]/g,i=/<.*?>/g,r=/^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/,l=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^","-"].join("|\\")+")","g"),o=/[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi,s=function(e){return!e||!0===e||"-"===e},h=function(e){var t=parseInt(e,10);return!isNaN(t)&&isFinite(e)?t:null},d=function(e,t){return n[t]||(n[t]=new RegExp(ve(t),"g")),"string"==typeof e&&"."!==t?e.replace(/\./g,"").replace(n[t],"."):e},u=function(e,t,n){var a="string"==typeof e;return!!s(e)||(t&&a&&(e=d(e,t)),n&&a&&(e=e.replace(o,"")),!isNaN(parseFloat(e))&&isFinite(e))},c=function(e,t,n){return!!s(e)||((s(a=e)||"string"==typeof a)&&!!u(f(e),t,n)||null);var a},k=function(e,t,n){var a=[],i=0,r=e.length;if(n!==W)for(;i<r;i++)e[i]&&e[i][t]&&a.push(e[i][t][n]);else for(;i<r;i++)e[i]&&a.push(e[i][t]);return a},C=function(e,t,n,a){var i=[],r=0,l=t.length;if(a!==W)for(;r<l;r++)e[t[r]][n]&&i.push(e[t[r]][n][a]);else for(;r<l;r++)i.push(e[t[r]][n]);return i},m=function(e,t){var n,a=[];t===W?(t=0,n=e):(n=t,t=e);for(var i=t;i<n;i++)a.push(i);return a},y=function(e){for(var t=[],n=0,a=e.length;n<a;n++)e[n]&&t.push(e[n]);return t},f=function(e){return e.replace(i,"")},T=function(e){if(function(e){if(e.length<2)return!0;for(var t=e.slice().sort(),n=t[0],a=1,i=t.length;a<i;a++){if(t[a]===n)return!1;n=t[a]}return!0}(e))return e.slice();var t,n,a,i=[],r=e.length,l=0;e:for(n=0;n<r;n++){for(t=e[n],a=0;a<l;a++)if(i[a]===t)continue e;i.push(t),l++}return i};function D(n){var a,i,r={};G.each(n,function(e,t){(a=e.match(/^([^A-Z]+?)([A-Z])/))&&-1!=="a aa ai ao as b fn i m o s ".indexOf(a[1]+" ")&&(i=e.replace(a[0],a[2].toLowerCase()),r[i]=e,"o"===a[1]&&D(n[e]))}),n._hungarianMap=r}function F(n,a,i){var r;n._hungarianMap||D(n),G.each(a,function(e,t){(r=n._hungarianMap[e])===W||!i&&a[r]!==W||("o"===r.charAt(0)?(a[r]||(a[r]={}),G.extend(!0,a[r],a[e]),F(n[r],a[r],i)):a[r]=a[e])})}function x(e){var t=b.defaults.oLanguage,n=t.sDecimal;if(n&&Nt(n),e){var a=e.sZeroRecords;!e.sEmptyTable&&a&&"No data available in table"===t.sEmptyTable&&ot(e,e,"sZeroRecords","sEmptyTable"),!e.sLoadingRecords&&a&&"Loading..."===t.sLoadingRecords&&ot(e,e,"sZeroRecords","sLoadingRecords"),e.sInfoThousands&&(e.sThousands=e.sInfoThousands);var i=e.sDecimal;i&&n!==i&&Nt(i)}}b.util={throttle:function(a,e){var i,r,l=e!==W?e:200;return function(){var e=this,t=+new Date,n=arguments;i&&t<i+l?(clearTimeout(r),r=setTimeout(function(){i=W,a.apply(e,n)},l)):(i=t,a.apply(e,n))}},escapeRegex:function(e){return e.replace(l,"\\$1")}};var v=function(e,t,n){e[t]!==W&&(e[n]=e[t])};function L(e){v(e,"ordering","bSort"),v(e,"orderMulti","bSortMulti"),v(e,"orderClasses","bSortClasses"),v(e,"orderCellsTop","bSortCellsTop"),v(e,"order","aaSorting"),v(e,"orderFixed","aaSortingFixed"),v(e,"paging","bPaginate"),v(e,"pagingType","sPaginationType"),v(e,"pageLength","iDisplayLength"),v(e,"searching","bFilter"),"boolean"==typeof e.sScrollX&&(e.sScrollX=e.sScrollX?"100%":""),"boolean"==typeof e.scrollX&&(e.scrollX=e.scrollX?"100%":"");var t=e.aoSearchCols;if(t)for(var n=0,a=t.length;n<a;n++)t[n]&&F(b.models.oSearch,t[n])}function N(e){v(e,"orderable","bSortable"),v(e,"orderData","aDataSort"),v(e,"orderSequence","asSorting"),v(e,"orderDataType","sortDataType");var t=e.aDataSort;"number"!=typeof t||G.isArray(t)||(e.aDataSort=[t])}function P(e){if(!b.__browser){var t={};b.__browser=t;var n=G("<div/>").css({position:"fixed",top:0,left:-1*G(E).scrollLeft(),height:1,width:1,overflow:"hidden"}).append(G("<div/>").css({position:"absolute",top:1,left:1,width:100,overflow:"scroll"}).append(G("<div/>").css({width:"100%",height:10}))).appendTo("body"),a=n.children(),i=a.children();t.barWidth=a[0].offsetWidth-a[0].clientWidth,t.bScrollOversize=100===i[0].offsetWidth&&100!==a[0].clientWidth,t.bScrollbarLeft=1!==Math.round(i.offset().left),t.bBounding=!!n[0].getBoundingClientRect().width,n.remove()}G.extend(e.oBrowser,b.__browser),e.oScroll.iBarWidth=b.__browser.barWidth}function S(e,t,n,a,i,r){var l,o=a,s=!1;for(n!==W&&(l=n,s=!0);o!==i;)e.hasOwnProperty(o)&&(l=s?t(l,e[o],o,e):e[o],s=!0,o+=r);return l}function B(e,t){var n=b.defaults.column,a=e.aoColumns.length,i=G.extend({},b.models.oColumn,n,{nTh:t||g.createElement("th"),sTitle:n.sTitle?n.sTitle:t?t.innerHTML:"",aDataSort:n.aDataSort?n.aDataSort:[a],mData:n.mData?n.mData:a,idx:a});e.aoColumns.push(i);var r=e.aoPreSearchCols;r[a]=G.extend({},b.models.oSearch,r[a]),O(e,a,G(t).data())}function O(e,t,n){var a=e.aoColumns[t],i=e.oClasses,r=G(a.nTh);if(!a.sWidthOrig){a.sWidthOrig=r.attr("width")||null;var l=(r.attr("style")||"").match(/width:\s*(\d+[pxem%]+)/);l&&(a.sWidthOrig=l[1])}n!==W&&null!==n&&(N(n),F(b.defaults.column,n),n.mDataProp===W||n.mData||(n.mData=n.mDataProp),n.sType&&(a._sManualType=n.sType),n.className&&!n.sClass&&(n.sClass=n.className),n.sClass&&r.addClass(n.sClass),G.extend(a,n),ot(a,n,"sWidth","sWidthOrig"),n.iDataSort!==W&&(a.aDataSort=[n.iDataSort]),ot(a,n,"aDataSort"));var o=a.mData,s=X(o),d=a.mRender?X(a.mRender):null,u=function(e){return"string"==typeof e&&-1!==e.indexOf("@")};a._bAttrSrc=G.isPlainObject(o)&&(u(o.sort)||u(o.type)||u(o.filter)),a._setter=null,a.fnGetData=function(e,t,n){var a=s(e,t,W,n);return d&&t?d(a,t,e,n):a},a.fnSetData=function(e,t,n){return K(o)(e,t,n)},"number"!=typeof o&&(e._rowReadObject=!0),e.oFeatures.bSort||(a.bSortable=!1,r.addClass(i.sSortableNone));var c=-1!==G.inArray("asc",a.asSorting),f=-1!==G.inArray("desc",a.asSorting);a.bSortable&&(c||f)?a.sSortingClassJUI=c&&!f?(a.sSortingClass=i.sSortableAsc,i.sSortJUIAscAllowed):!c&&f?(a.sSortingClass=i.sSortableDesc,i.sSortJUIDescAllowed):(a.sSortingClass=i.sSortable,i.sSortJUI):(a.sSortingClass=i.sSortableNone,a.sSortingClassJUI="")}function j(e){if(!1!==e.oFeatures.bAutoWidth){var t=e.aoColumns;ke(e);for(var n=0,a=t.length;n<a;n++)t[n].nTh.style.width=t[n].sWidth}var i=e.oScroll;""===i.sY&&""===i.sX||$e(e),ct(e,null,"column-sizing",[e])}function q(e,t){var n=A(e,"bVisible");return"number"==typeof n[t]?n[t]:null}function I(e,t){var n=A(e,"bVisible"),a=G.inArray(t,n);return-1!==a?a:null}function V(e){var n=0;return G.each(e.aoColumns,function(e,t){t.bVisible&&"none"!==G(t.nTh).css("display")&&n++}),n}function A(e,n){var a=[];return G.map(e.aoColumns,function(e,t){e[n]&&a.push(t)}),a}function R(e){var t,n,a,i,r,l,o,s,d,u=e.aoColumns,c=e.aoData,f=b.ext.type.detect;for(t=0,n=u.length;t<n;t++)if(d=[],!(o=u[t]).sType&&o._sManualType)o.sType=o._sManualType;else if(!o.sType){for(a=0,i=f.length;a<i;a++){for(r=0,l=c.length;r<l&&(d[r]===W&&(d[r]=w(e,r,t,"type")),(s=f[a](d[r],e))||a===f.length-1)&&"html"!==s;r++);if(s){o.sType=s;break}}o.sType||(o.sType="string")}}function U(e,t,n,a){var i,r,l,o,s,d,u,c=e.aoColumns;if(t)for(i=t.length-1;0<=i;i--){var f=(u=t[i]).targets!==W?u.targets:u.aTargets;for(G.isArray(f)||(f=[f]),l=0,o=f.length;l<o;l++)if("number"==typeof f[l]&&0<=f[l]){for(;c.length<=f[l];)B(e);a(f[l],u)}else if("number"==typeof f[l]&&f[l]<0)a(c.length+f[l],u);else if("string"==typeof f[l])for(s=0,d=c.length;s<d;s++)("_all"==f[l]||G(c[s].nTh).hasClass(f[l]))&&a(s,u)}if(n)for(i=0,r=n.length;i<r;i++)a(i,n[i])}function M(e,t,n,a){var i=e.aoData.length,r=G.extend(!0,{},b.models.oRow,{src:n?"dom":"data",idx:i});r._aData=t,e.aoData.push(r);for(var l=e.aoColumns,o=0,s=l.length;o<s;o++)l[o].sType=null;e.aiDisplayMaster.push(i);var d=e.rowIdFn(t);return d!==W&&(e.aIds[d]=r),!n&&e.oFeatures.bDeferRender||ae(e,i,n,a),i}function H(n,e){var a;return e instanceof G||(e=G(e)),e.map(function(e,t){return a=ne(n,t),M(n,a.data,t,a.cells)})}function w(e,t,n,a){var i=e.iDraw,r=e.aoColumns[n],l=e.aoData[t]._aData,o=r.sDefaultContent,s=r.fnGetData(l,a,{settings:e,row:t,col:n});if(s===W)return e.iDrawError!=i&&null===o&&(lt(e,0,"Requested unknown parameter "+("function"==typeof r.mData?"{function}":"'"+r.mData+"'")+" for row "+t+", column "+n,4),e.iDrawError=i),o;if(s!==l&&null!==s||null===o||a===W){if("function"==typeof s)return s.call(l)}else s=o;return null===s&&"display"==a?"":s}function $(e,t,n,a){var i=e.aoColumns[n],r=e.aoData[t]._aData;i.fnSetData(r,a,{settings:e,row:t,col:n})}var z=/\[.*?\]$/,J=/\(\)$/;function Y(e){return G.map(e.match(/(\\.|[^\.])+/g)||[""],function(e){return e.replace(/\\\./g,".")})}function X(i){if(G.isPlainObject(i)){var r={};return G.each(i,function(e,t){t&&(r[e]=X(t))}),function(e,t,n,a){var i=r[t]||r._;return i!==W?i(e,t,n,a):e}}if(null===i)return function(e){return e};if("function"==typeof i)return function(e,t,n,a){return i(e,t,n,a)};if("string"!=typeof i||-1===i.indexOf(".")&&-1===i.indexOf("[")&&-1===i.indexOf("("))return function(e,t){return e[i]};return function(e,t){return function e(t,n,a){var i,r,l,o;if(""!==a)for(var s=Y(a),d=0,u=s.length;d<u;d++){if(i=s[d].match(z),r=s[d].match(J),i){if(s[d]=s[d].replace(z,""),""!==s[d]&&(t=t[s[d]]),l=[],s.splice(0,d+1),o=s.join("."),G.isArray(t))for(var c=0,f=t.length;c<f;c++)l.push(e(t[c],n,o));var h=i[0].substring(1,i[0].length-1);t=""===h?l:l.join(h);break}if(r)s[d]=s[d].replace(J,""),t=t[s[d]]();else{if(null===t||t[s[d]]===W)return W;t=t[s[d]]}}return t}(e,t,i)}}function K(a){if(G.isPlainObject(a))return K(a._);if(null===a)return function(){};if("function"==typeof a)return function(e,t,n){a(e,"set",t,n)};if("string"!=typeof a||-1===a.indexOf(".")&&-1===a.indexOf("[")&&-1===a.indexOf("("))return function(e,t){e[a]=t};return function(e,t){return function e(t,n,a){for(var i,r,l,o,s,d=Y(a),u=d[d.length-1],c=0,f=d.length-1;c<f;c++){if(r=d[c].match(z),l=d[c].match(J),r){if(d[c]=d[c].replace(z,""),t[d[c]]=[],(i=d.slice()).splice(0,c+1),s=i.join("."),G.isArray(n))for(var h=0,p=n.length;h<p;h++)e(o={},n[h],s),t[d[c]].push(o);else t[d[c]]=n;return}l&&(d[c]=d[c].replace(J,""),t=t[d[c]](n)),null!==t[d[c]]&&t[d[c]]!==W||(t[d[c]]={}),t=t[d[c]]}u.match(J)?t=t[u.replace(J,"")](n):t[u.replace(z,"")]=n}(e,t,a)}}function Q(e){return k(e.aoData,"_aData")}function Z(e){e.aoData.length=0,e.aiDisplayMaster.length=0,e.aiDisplay.length=0,e.aIds={}}function ee(e,t,n){for(var a=-1,i=0,r=e.length;i<r;i++)e[i]==t?a=i:e[i]>t&&e[i]--;-1!=a&&n===W&&e.splice(a,1)}function te(n,a,e,t){var i,r,l=n.aoData[a],o=function(e,t){for(;e.childNodes.length;)e.removeChild(e.firstChild);e.innerHTML=w(n,a,t,"display")};if("dom"!==e&&(e&&"auto"!==e||"dom"!==l.src)){var s=l.anCells;if(s)if(t!==W)o(s[t],t);else for(i=0,r=s.length;i<r;i++)o(s[i],i)}else l._aData=ne(n,l,t,t===W?W:l._aData).data;l._aSortData=null,l._aFilterData=null;var d=n.aoColumns;if(t!==W)d[t].sType=null;else{for(i=0,r=d.length;i<r;i++)d[i].sType=null;ie(n,l)}}function ne(e,t,n,i){var a,r,l,o=[],s=t.firstChild,d=0,u=e.aoColumns,c=e._rowReadObject;i=i!==W?i:c?{}:[];var f=function(e,t){if("string"==typeof e){var n=e.indexOf("@");if(-1!==n){var a=e.substring(n+1);K(e)(i,t.getAttribute(a))}}},h=function(e){n!==W&&n!==d||(r=u[d],l=G.trim(e.innerHTML),r&&r._bAttrSrc?(K(r.mData._)(i,l),f(r.mData.sort,e),f(r.mData.type,e),f(r.mData.filter,e)):c?(r._setter||(r._setter=K(r.mData)),r._setter(i,l)):i[d]=l);d++};if(s)for(;s;)"TD"!=(a=s.nodeName.toUpperCase())&&"TH"!=a||(h(s),o.push(s)),s=s.nextSibling;else for(var p=0,m=(o=t.anCells).length;p<m;p++)h(o[p]);var T=t.firstChild?t:t.nTr;if(T){var g=T.getAttribute("id");g&&K(e.rowId)(i,g)}return{data:i,cells:o}}function ae(e,t,n,a){var i,r,l,o,s,d=e.aoData[t],u=d._aData,c=[];if(null===d.nTr){for(i=n||g.createElement("tr"),d.nTr=i,d.anCells=c,i._DT_RowIndex=t,ie(e,d),o=0,s=e.aoColumns.length;o<s;o++)l=e.aoColumns[o],(r=n?a[o]:g.createElement(l.sCellType))._DT_CellIndex={row:t,column:o},c.push(r),n&&!l.mRender&&l.mData===o||G.isPlainObject(l.mData)&&l.mData._===o+".display"||(r.innerHTML=w(e,t,o,"display")),l.sClass&&(r.className+=" "+l.sClass),l.bVisible&&!n?i.appendChild(r):!l.bVisible&&n&&r.parentNode.removeChild(r),l.fnCreatedCell&&l.fnCreatedCell.call(e.oInstance,r,w(e,t,o),u,t,o);ct(e,"aoRowCreatedCallback",null,[i,u,t,c])}d.nTr.setAttribute("role","row")}function ie(e,t){var n=t.nTr,a=t._aData;if(n){var i=e.rowIdFn(a);if(i&&(n.id=i),a.DT_RowClass){var r=a.DT_RowClass.split(" ");t.__rowc=t.__rowc?T(t.__rowc.concat(r)):r,G(n).removeClass(t.__rowc.join(" ")).addClass(a.DT_RowClass)}a.DT_RowAttr&&G(n).attr(a.DT_RowAttr),a.DT_RowData&&G(n).data(a.DT_RowData)}}function re(e){var t,n,a,i,r,l=e.nTHead,o=e.nTFoot,s=0===G("th, td",l).length,d=e.oClasses,u=e.aoColumns;for(s&&(i=G("<tr/>").appendTo(l)),t=0,n=u.length;t<n;t++)r=u[t],a=G(r.nTh).addClass(r.sClass),s&&a.appendTo(i),e.oFeatures.bSort&&(a.addClass(r.sSortingClass),!1!==r.bSortable&&(a.attr("tabindex",e.iTabIndex).attr("aria-controls",e.sTableId),et(e,r.nTh,t))),r.sTitle!=a[0].innerHTML&&a.html(r.sTitle),ht(e,"header")(e,a,r,d);if(s&&ue(e.aoHeader,l),G(l).find(">tr").attr("role","row"),G(l).find(">tr>th, >tr>td").addClass(d.sHeaderTH),G(o).find(">tr>th, >tr>td").addClass(d.sFooterTH),null!==o){var c=e.aoFooter[0];for(t=0,n=c.length;t<n;t++)(r=u[t]).nTf=c[t].cell,r.sClass&&G(r.nTf).addClass(r.sClass)}}function le(e,t,n){var a,i,r,l,o,s,d,u,c,f=[],h=[],p=e.aoColumns.length;if(t){for(n===W&&(n=!1),a=0,i=t.length;a<i;a++){for(f[a]=t[a].slice(),f[a].nTr=t[a].nTr,r=p-1;0<=r;r--)e.aoColumns[r].bVisible||n||f[a].splice(r,1);h.push([])}for(a=0,i=f.length;a<i;a++){if(d=f[a].nTr)for(;s=d.firstChild;)d.removeChild(s);for(r=0,l=f[a].length;r<l;r++)if(c=u=1,h[a][r]===W){for(d.appendChild(f[a][r].cell),h[a][r]=1;f[a+u]!==W&&f[a][r].cell==f[a+u][r].cell;)h[a+u][r]=1,u++;for(;f[a][r+c]!==W&&f[a][r].cell==f[a][r+c].cell;){for(o=0;o<u;o++)h[a+o][r+c]=1;c++}G(f[a][r].cell).attr("rowspan",u).attr("colspan",c)}}}}function oe(e){var t=ct(e,"aoPreDrawCallback","preDraw",[e]);if(-1===G.inArray(!1,t)){var n=[],a=0,i=e.asStripeClasses,r=i.length,l=(e.aoOpenRows.length,e.oLanguage),o=e.iInitDisplayStart,s="ssp"==pt(e),d=e.aiDisplay;e.bDrawing=!0,o!==W&&-1!==o&&(e._iDisplayStart=s?o:o>=e.fnRecordsDisplay()?0:o,e.iInitDisplayStart=-1);var u=e._iDisplayStart,c=e.fnDisplayEnd();if(e.bDeferLoading)e.bDeferLoading=!1,e.iDraw++,Me(e,!1);else if(s){if(!e.bDestroying&&!he(e))return}else e.iDraw++;if(0!==d.length)for(var f=s?0:u,h=s?e.aoData.length:c,p=f;p<h;p++){var m=d[p],T=e.aoData[m];null===T.nTr&&ae(e,m);var g=T.nTr;if(0!==r){var _=i[a%r];T._sRowStripe!=_&&(G(g).removeClass(T._sRowStripe).addClass(_),T._sRowStripe=_)}ct(e,"aoRowCallback",null,[g,T._aData,a,p,m]),n.push(g),a++}else{var b=l.sZeroRecords;1==e.iDraw&&"ajax"==pt(e)?b=l.sLoadingRecords:l.sEmptyTable&&0===e.fnRecordsTotal()&&(b=l.sEmptyTable),n[0]=G("<tr/>",{class:r?i[0]:""}).append(G("<td />",{valign:"top",colSpan:V(e),class:e.oClasses.sRowEmpty}).html(b))[0]}ct(e,"aoHeaderCallback","header",[G(e.nTHead).children("tr")[0],Q(e),u,c,d]),ct(e,"aoFooterCallback","footer",[G(e.nTFoot).children("tr")[0],Q(e),u,c,d]);var C=G(e.nTBody);C.children().detach(),C.append(G(n)),ct(e,"aoDrawCallback","draw",[e]),e.bSorted=!1,e.bFiltered=!1,e.bDrawing=!1}else Me(e,!1)}function se(e,t){var n=e.oFeatures,a=n.bSort,i=n.bFilter;a&&Ke(e),i?_e(e,e.oPreviousSearch):e.aiDisplay=e.aiDisplayMaster.slice(),!0!==t&&(e._iDisplayStart=0),e._drawHold=t,oe(e),e._drawHold=!1}function de(e){var t=e.oClasses,n=G(e.nTable),a=G("<div/>").insertBefore(n),i=e.oFeatures,r=G("<div/>",{id:e.sTableId+"_wrapper",class:t.sWrapper+(e.nTFoot?"":" "+t.sNoFooter)});e.nHolding=a[0],e.nTableWrapper=r[0],e.nTableReinsertBefore=e.nTable.nextSibling;for(var l,o,s,d,u,c,f=e.sDom.split(""),h=0;h<f.length;h++){if(l=null,"<"==(o=f[h])){if(s=G("<div/>")[0],"'"==(d=f[h+1])||'"'==d){for(u="",c=2;f[h+c]!=d;)u+=f[h+c],c++;if("H"==u?u=t.sJUIHeader:"F"==u&&(u=t.sJUIFooter),-1!=u.indexOf(".")){var p=u.split(".");s.id=p[0].substr(1,p[0].length-1),s.className=p[1]}else"#"==u.charAt(0)?s.id=u.substr(1,u.length-1):s.className=u;h+=c}r.append(s),r=G(s)}else if(">"==o)r=r.parent();else if("l"==o&&i.bPaginate&&i.bLengthChange)l=Oe(e);else if("f"==o&&i.bFilter)l=ge(e);else if("r"==o&&i.bProcessing)l=Ue(e);else if("t"==o)l=He(e);else if("i"==o&&i.bInfo)l=Fe(e);else if("p"==o&&i.bPaginate)l=Ve(e);else if(0!==b.ext.feature.length)for(var m=b.ext.feature,T=0,g=m.length;T<g;T++)if(o==m[T].cFeature){l=m[T].fnInit(e);break}if(l){var _=e.aanFeatures;_[o]||(_[o]=[]),_[o].push(l),r.append(l)}}a.replaceWith(r),e.nHolding=null}function ue(e,t){var n,a,i,r,l,o,s,d,u,c,f=G(t).children("tr"),h=function(e,t,n){for(var a=e[t];a[n];)n++;return n};for(e.splice(0,e.length),i=0,o=f.length;i<o;i++)e.push([]);for(i=0,o=f.length;i<o;i++)for(0,a=(n=f[i]).firstChild;a;){if("TD"==a.nodeName.toUpperCase()||"TH"==a.nodeName.toUpperCase())for(d=(d=1*a.getAttribute("colspan"))&&0!==d&&1!==d?d:1,u=(u=1*a.getAttribute("rowspan"))&&0!==u&&1!==u?u:1,s=h(e,i,0),c=1===d,l=0;l<d;l++)for(r=0;r<u;r++)e[i+r][s+l]={cell:a,unique:c},e[i+r].nTr=n;a=a.nextSibling}}function ce(e,t,n){var a=[];n||(n=e.aoHeader,t&&ue(n=[],t));for(var i=0,r=n.length;i<r;i++)for(var l=0,o=n[i].length;l<o;l++)!n[i][l].unique||a[l]&&e.bSortCellsTop||(a[l]=n[i][l].cell);return a}function fe(i,e,t){if(ct(i,"aoServerParams","serverParams",[e]),e&&G.isArray(e)){var r={},l=/(.*?)\[\]$/;G.each(e,function(e,t){var n=t.name.match(l);if(n){var a=n[0];r[a]||(r[a]=[]),r[a].push(t.value)}else r[t.name]=t.value}),e=r}var n,a=i.ajax,o=i.oInstance,s=function(e){ct(i,null,"xhr",[i,e,i.jqXHR]),t(e)};if(G.isPlainObject(a)&&a.data){var d="function"==typeof(n=a.data)?n(e,i):n;e="function"==typeof n&&d?d:G.extend(!0,e,d),delete a.data}var u={data:e,success:function(e){var t=e.error||e.sError;t&&lt(i,0,t),i.json=e,s(e)},dataType:"json",cache:!1,type:i.sServerMethod,error:function(e,t,n){var a=ct(i,null,"xhr",[i,null,i.jqXHR]);-1===G.inArray(!0,a)&&("parsererror"==t?lt(i,0,"Invalid JSON response",1):4===e.readyState&&lt(i,0,"Ajax error",7)),Me(i,!1)}};i.oAjaxData=e,ct(i,null,"preXhr",[i,e]),i.fnServerData?i.fnServerData.call(o,i.sAjaxSource,G.map(e,function(e,t){return{name:t,value:e}}),s,i):i.sAjaxSource||"string"==typeof a?i.jqXHR=G.ajax(G.extend(u,{url:a||i.sAjaxSource})):"function"==typeof a?i.jqXHR=a.call(o,e,s,i):(i.jqXHR=G.ajax(G.extend(u,a)),a.data=n)}function he(t){return!t.bAjaxDataGet||(t.iDraw++,Me(t,!0),fe(t,pe(t),function(e){me(t,e)}),!1)}function pe(e){var t,n,a,i,r=e.aoColumns,l=r.length,o=e.oFeatures,s=e.oPreviousSearch,d=e.aoPreSearchCols,u=[],c=Xe(e),f=e._iDisplayStart,h=!1!==o.bPaginate?e._iDisplayLength:-1,p=function(e,t){u.push({name:e,value:t})};p("sEcho",e.iDraw),p("iColumns",l),p("sColumns",k(r,"sName").join(",")),p("iDisplayStart",f),p("iDisplayLength",h);var m={draw:e.iDraw,columns:[],order:[],start:f,length:h,search:{value:s.sSearch,regex:s.bRegex}};for(t=0;t<l;t++)a=r[t],i=d[t],n="function"==typeof a.mData?"function":a.mData,m.columns.push({data:n,name:a.sName,searchable:a.bSearchable,orderable:a.bSortable,search:{value:i.sSearch,regex:i.bRegex}}),p("mDataProp_"+t,n),o.bFilter&&(p("sSearch_"+t,i.sSearch),p("bRegex_"+t,i.bRegex),p("bSearchable_"+t,a.bSearchable)),o.bSort&&p("bSortable_"+t,a.bSortable);o.bFilter&&(p("sSearch",s.sSearch),p("bRegex",s.bRegex)),o.bSort&&(G.each(c,function(e,t){m.order.push({column:t.col,dir:t.dir}),p("iSortCol_"+e,t.col),p("sSortDir_"+e,t.dir)}),p("iSortingCols",c.length));var T=b.ext.legacy.ajax;return null===T?e.sAjaxSource?u:m:T?u:m}function me(e,n){var t=function(e,t){return n[e]!==W?n[e]:n[t]},a=Te(e,n),i=t("sEcho","draw"),r=t("iTotalRecords","recordsTotal"),l=t("iTotalDisplayRecords","recordsFiltered");if(i){if(1*i<e.iDraw)return;e.iDraw=1*i}Z(e),e._iRecordsTotal=parseInt(r,10),e._iRecordsDisplay=parseInt(l,10);for(var o=0,s=a.length;o<s;o++)M(e,a[o]);e.aiDisplay=e.aiDisplayMaster.slice(),e.bAjaxDataGet=!1,oe(e),e._bInitComplete||Pe(e,n),e.bAjaxDataGet=!0,Me(e,!1)}function Te(e,t){var n=G.isPlainObject(e.ajax)&&e.ajax.dataSrc!==W?e.ajax.dataSrc:e.sAjaxDataProp;return"data"===n?t.aaData||t[n]:""!==n?X(n)(t):t}function ge(n){var e=n.oClasses,t=n.sTableId,a=n.oLanguage,i=n.oPreviousSearch,r=n.aanFeatures,l='<input type="search" class="'+e.sFilterInput+'"/>',o=a.sSearch;o=o.match(/_INPUT_/)?o.replace("_INPUT_",l):o+l;var s=G("<div/>",{id:r.f?null:t+"_filter",class:e.sFilter}).append(G("<label/>").append(o)),d=function(){r.f;var e=this.value?this.value:"";e!=i.sSearch&&(_e(n,{sSearch:e,bRegex:i.bRegex,bSmart:i.bSmart,bCaseInsensitive:i.bCaseInsensitive}),n._iDisplayStart=0,oe(n))},u=null!==n.searchDelay?n.searchDelay:"ssp"===pt(n)?400:0,c=G("input",s).val(i.sSearch).attr("placeholder",a.sSearchPlaceholder).on("keyup.DT search.DT input.DT paste.DT cut.DT",u?je(d,u):d).on("keypress.DT",function(e){if(13==e.keyCode)return!1}).attr("aria-controls",t);return G(n.nTable).on("search.dt.DT",function(e,t){if(n===t)try{c[0]!==g.activeElement&&c.val(i.sSearch)}catch(e){}}),s[0]}function _e(e,t,n){var a=e.oPreviousSearch,i=e.aoPreSearchCols,r=function(e){a.sSearch=e.sSearch,a.bRegex=e.bRegex,a.bSmart=e.bSmart,a.bCaseInsensitive=e.bCaseInsensitive},l=function(e){return e.bEscapeRegex!==W?!e.bEscapeRegex:e.bRegex};if(R(e),"ssp"!=pt(e)){ye(e,t.sSearch,n,l(t),t.bSmart,t.bCaseInsensitive),r(t);for(var o=0;o<i.length;o++)Ce(e,i[o].sSearch,o,l(i[o]),i[o].bSmart,i[o].bCaseInsensitive);be(e)}else r(t);e.bFiltered=!0,ct(e,null,"search",[e])}function be(e){for(var t,n,a=b.ext.search,i=e.aiDisplay,r=0,l=a.length;r<l;r++){for(var o=[],s=0,d=i.length;s<d;s++)n=i[s],t=e.aoData[n],a[r](e,t._aFilterData,n,t._aData,s)&&o.push(n);i.length=0,G.merge(i,o)}}function Ce(e,t,n,a,i,r){if(""!==t){for(var l,o=[],s=e.aiDisplay,d=De(t,a,i,r),u=0;u<s.length;u++)l=e.aoData[s[u]]._aFilterData[n],d.test(l)&&o.push(s[u]);e.aiDisplay=o}}function ye(e,t,n,a,i,r){var l,o,s,d=De(t,a,i,r),u=e.oPreviousSearch.sSearch,c=e.aiDisplayMaster,f=[];if(0!==b.ext.search.length&&(n=!0),o=Re(e),t.length<=0)e.aiDisplay=c.slice();else{for((o||n||u.length>t.length||0!==t.indexOf(u)||e.bSorted)&&(e.aiDisplay=c.slice()),l=e.aiDisplay,s=0;s<l.length;s++)d.test(e.aoData[l[s]]._sFilterRow)&&f.push(l[s]);e.aiDisplay=f}}function De(e,t,n,a){(e=t?e:ve(e),n)&&(e="^(?=.*?"+G.map(e.match(/"[^"]+"|[^ ]+/g)||[""],function(e){if('"'===e.charAt(0)){var t=e.match(/^"(.*)"$/);e=t?t[1]:e}return e.replace('"',"")}).join(")(?=.*?")+").*$");return new RegExp(e,a?"i":"")}var ve=b.util.escapeRegex,Se=G("<div>")[0],Ie=Se.textContent!==W;function Re(e){var t,n,a,i,r,l,o,s,d=e.aoColumns,u=b.ext.type.search,c=!1;for(n=0,i=e.aoData.length;n<i;n++)if(!(s=e.aoData[n])._aFilterData){for(l=[],a=0,r=d.length;a<r;a++)(t=d[a]).bSearchable?(o=w(e,n,a,"filter"),u[t.sType]&&(o=u[t.sType](o)),null===o&&(o=""),"string"!=typeof o&&o.toString&&(o=o.toString())):o="",o.indexOf&&-1!==o.indexOf("&")&&(Se.innerHTML=o,o=Ie?Se.textContent:Se.innerText),o.replace&&(o=o.replace(/[\r\n]/g,"")),l.push(o);s._aFilterData=l,s._sFilterRow=l.join("  "),c=!0}return c}function we(e){return{search:e.sSearch,smart:e.bSmart,regex:e.bRegex,caseInsensitive:e.bCaseInsensitive}}function Ee(e){return{sSearch:e.search,bSmart:e.smart,bRegex:e.regex,bCaseInsensitive:e.caseInsensitive}}function Fe(e){var t=e.sTableId,n=e.aanFeatures.i,a=G("<div/>",{class:e.oClasses.sInfo,id:n?null:t+"_info"});return n||(e.aoDrawCallback.push({fn:xe,sName:"information"}),a.attr("role","status").attr("aria-live","polite"),G(e.nTable).attr("aria-describedby",t+"_info")),a[0]}function xe(e){var t=e.aanFeatures.i;if(0!==t.length){var n=e.oLanguage,a=e._iDisplayStart+1,i=e.fnDisplayEnd(),r=e.fnRecordsTotal(),l=e.fnRecordsDisplay(),o=l?n.sInfo:n.sInfoEmpty;l!==r&&(o+=" "+n.sInfoFiltered),o=Le(e,o+=n.sInfoPostFix);var s=n.fnInfoCallback;null!==s&&(o=s.call(e.oInstance,e,a,i,r,l,o)),G(t).html(o)}}function Le(e,t){var n=e.fnFormatNumber,a=e._iDisplayStart+1,i=e._iDisplayLength,r=e.fnRecordsDisplay(),l=-1===i;return t.replace(/_START_/g,n.call(e,a)).replace(/_END_/g,n.call(e,e.fnDisplayEnd())).replace(/_MAX_/g,n.call(e,e.fnRecordsTotal())).replace(/_TOTAL_/g,n.call(e,r)).replace(/_PAGE_/g,n.call(e,l?1:Math.ceil(a/i))).replace(/_PAGES_/g,n.call(e,l?1:Math.ceil(r/i)))}function Ne(n){var a,e,t,i=n.iInitDisplayStart,r=n.aoColumns,l=n.oFeatures,o=n.bDeferLoading;if(n.bInitialised){for(de(n),re(n),le(n,n.aoHeader),le(n,n.aoFooter),Me(n,!0),l.bAutoWidth&&ke(n),a=0,e=r.length;a<e;a++)(t=r[a]).sWidth&&(t.nTh.style.width=Ye(t.sWidth));ct(n,null,"preInit",[n]),se(n);var s=pt(n);("ssp"!=s||o)&&("ajax"==s?fe(n,[],function(e){var t=Te(n,e);for(a=0;a<t.length;a++)M(n,t[a]);n.iInitDisplayStart=i,se(n),Me(n,!1),Pe(n,e)}):(Me(n,!1),Pe(n)))}else setTimeout(function(){Ne(n)},200)}function Pe(e,t){e._bInitComplete=!0,(t||e.oInit.aaData)&&j(e),ct(e,null,"plugin-init",[e,t]),ct(e,"aoInitComplete","init",[e,t])}function Be(e,t){var n=parseInt(t,10);e._iDisplayLength=n,ft(e),ct(e,null,"length",[e,n])}function Oe(a){for(var e=a.oClasses,t=a.sTableId,n=a.aLengthMenu,i=G.isArray(n[0]),r=i?n[0]:n,l=i?n[1]:n,o=G("<select/>",{name:t+"_length","aria-controls":t,class:e.sLengthSelect}),s=0,d=r.length;s<d;s++)o[0][s]=new Option("number"==typeof l[s]?a.fnFormatNumber(l[s]):l[s],r[s]);var u=G("<div><label/></div>").addClass(e.sLength);return a.aanFeatures.l||(u[0].id=t+"_length"),u.children().append(a.oLanguage.sLengthMenu.replace("_MENU_",o[0].outerHTML)),G("select",u).val(a._iDisplayLength).on("change.DT",function(e){Be(a,G(this).val()),oe(a)}),G(a.nTable).on("length.dt.DT",function(e,t,n){a===t&&G("select",u).val(n)}),u[0]}function Ve(e){var t=e.sPaginationType,u=b.ext.pager[t],c="function"==typeof u,f=function(e){oe(e)},n=G("<div/>").addClass(e.oClasses.sPaging+t)[0],h=e.aanFeatures;return c||u.fnInit(e,n,f),h.p||(n.id=e.sTableId+"_paginate",e.aoDrawCallback.push({fn:function(e){if(c){var t,n,a=e._iDisplayStart,i=e._iDisplayLength,r=e.fnRecordsDisplay(),l=-1===i,o=l?0:Math.ceil(a/i),s=l?1:Math.ceil(r/i),d=u(o,s);for(t=0,n=h.p.length;t<n;t++)ht(e,"pageButton")(e,h.p[t],t,d,o,s)}else u.fnUpdate(e,f)},sName:"pagination"})),n}function Ae(e,t,n){var a=e._iDisplayStart,i=e._iDisplayLength,r=e.fnRecordsDisplay();0===r||-1===i?a=0:"number"==typeof t?r<(a=t*i)&&(a=0):"first"==t?a=0:"previous"==t?(a=0<=i?a-i:0)<0&&(a=0):"next"==t?a+i<r&&(a+=i):"last"==t?a=Math.floor((r-1)/i)*i:lt(e,0,"Unknown paging action: "+t,5);var l=e._iDisplayStart!==a;return e._iDisplayStart=a,l&&(ct(e,null,"page",[e]),n&&oe(e)),l}function Ue(e){return G("<div/>",{id:e.aanFeatures.r?null:e.sTableId+"_processing",class:e.oClasses.sProcessing}).html(e.oLanguage.sProcessing).insertBefore(e.nTable)[0]}function Me(e,t){e.oFeatures.bProcessing&&G(e.aanFeatures.r).css("display",t?"block":"none"),ct(e,null,"processing",[e,t])}function He(e){var t=G(e.nTable);t.attr("role","grid");var n=e.oScroll;if(""===n.sX&&""===n.sY)return e.nTable;var a=n.sX,i=n.sY,r=e.oClasses,l=t.children("caption"),o=l.length?l[0]._captionSide:null,s=G(t[0].cloneNode(!1)),d=G(t[0].cloneNode(!1)),u=t.children("tfoot"),c="<div/>",f=function(e){return e?Ye(e):null};u.length||(u=null);var h=G(c,{class:r.sScrollWrapper}).append(G(c,{class:r.sScrollHead}).css({overflow:"hidden",position:"relative",border:0,width:a?f(a):"100%"}).append(G(c,{class:r.sScrollHeadInner}).css({"box-sizing":"content-box",width:n.sXInner||"100%"}).append(s.removeAttr("id").css("margin-left",0).append("top"===o?l:null).append(t.children("thead"))))).append(G(c,{class:r.sScrollBody}).css({position:"relative",overflow:"auto",width:f(a)}).append(t));u&&h.append(G(c,{class:r.sScrollFoot}).css({overflow:"hidden",border:0,width:a?f(a):"100%"}).append(G(c,{class:r.sScrollFootInner}).append(d.removeAttr("id").css("margin-left",0).append("bottom"===o?l:null).append(t.children("tfoot")))));var p=h.children(),m=p[0],T=p[1],g=u?p[2]:null;return a&&G(T).on("scroll.DT",function(e){var t=this.scrollLeft;m.scrollLeft=t,u&&(g.scrollLeft=t)}),G(T).css(i&&n.bCollapse?"max-height":"height",i),e.nScrollHead=m,e.nScrollBody=T,e.nScrollFoot=g,e.aoDrawCallback.push({fn:$e,sName:"scrolling"}),h[0]}function $e(n){var e,t,a,i,r,l,o,s,d,u=n.oScroll,c=u.sX,f=u.sXInner,h=u.sY,p=u.iBarWidth,m=G(n.nScrollHead),T=m[0].style,g=m.children("div"),_=g[0].style,b=g.children("table"),C=n.nScrollBody,y=G(C),D=C.style,v=G(n.nScrollFoot).children("div"),S=v.children("table"),I=G(n.nTHead),R=G(n.nTable),w=R[0],E=w.style,F=n.nTFoot?G(n.nTFoot):null,x=n.oBrowser,L=x.bScrollOversize,N=k(n.aoColumns,"nTh"),P=[],B=[],O=[],V=[],A=function(e){var t=e.style;t.paddingTop="0",t.paddingBottom="0",t.borderTopWidth="0",t.borderBottomWidth="0",t.height=0},U=C.scrollHeight>C.clientHeight;if(n.scrollBarVis!==U&&n.scrollBarVis!==W)return n.scrollBarVis=U,void j(n);n.scrollBarVis=U,R.children("thead, tfoot").remove(),F&&(l=F.clone().prependTo(R),t=F.find("tr"),i=l.find("tr")),r=I.clone().prependTo(R),e=I.find("tr"),a=r.find("tr"),r.find("th, td").removeAttr("tabindex"),c||(D.width="100%",m[0].style.width="100%"),G.each(ce(n,r),function(e,t){o=q(n,e),t.style.width=n.aoColumns[o].sWidth}),F&&Ge(function(e){e.style.width=""},i),d=R.outerWidth(),""===c?(E.width="100%",L&&(R.find("tbody").height()>C.offsetHeight||"scroll"==y.css("overflow-y"))&&(E.width=Ye(R.outerWidth()-p)),d=R.outerWidth()):""!==f&&(E.width=Ye(f),d=R.outerWidth()),Ge(A,a),Ge(function(e){O.push(e.innerHTML),P.push(Ye(G(e).css("width")))},a),Ge(function(e,t){-1!==G.inArray(e,N)&&(e.style.width=P[t])},e),G(a).height(0),F&&(Ge(A,i),Ge(function(e){V.push(e.innerHTML),B.push(Ye(G(e).css("width")))},i),Ge(function(e,t){e.style.width=B[t]},t),G(i).height(0)),Ge(function(e,t){e.innerHTML='<div class="dataTables_sizing">'+O[t]+"</div>",e.childNodes[0].style.height="0",e.childNodes[0].style.overflow="hidden",e.style.width=P[t]},a),F&&Ge(function(e,t){e.innerHTML='<div class="dataTables_sizing">'+V[t]+"</div>",e.childNodes[0].style.height="0",e.childNodes[0].style.overflow="hidden",e.style.width=B[t]},i),R.outerWidth()<d?(s=C.scrollHeight>C.offsetHeight||"scroll"==y.css("overflow-y")?d+p:d,L&&(C.scrollHeight>C.offsetHeight||"scroll"==y.css("overflow-y"))&&(E.width=Ye(s-p)),""!==c&&""===f||lt(n,1,"Possible column misalignment",6)):s="100%",D.width=Ye(s),T.width=Ye(s),F&&(n.nScrollFoot.style.width=Ye(s)),h||L&&(D.height=Ye(w.offsetHeight+p));var M=R.outerWidth();b[0].style.width=Ye(M),_.width=Ye(M);var H=R.height()>C.clientHeight||"scroll"==y.css("overflow-y"),$="padding"+(x.bScrollbarLeft?"Left":"Right");_[$]=H?p+"px":"0px",F&&(S[0].style.width=Ye(M),v[0].style.width=Ye(M),v[0].style[$]=H?p+"px":"0px"),R.children("colgroup").insertBefore(R.children("thead")),y.scroll(),!n.bSorted&&!n.bFiltered||n._drawHold||(C.scrollTop=0)}function Ge(e,t,n){for(var a,i,r=0,l=0,o=t.length;l<o;){for(a=t[l].firstChild,i=n?n[l].firstChild:null;a;)1===a.nodeType&&(n?e(a,i,r):e(a,r),r++),a=a.nextSibling,i=n?i.nextSibling:null;l++}}var We=/<.*?>/g;function ke(e){var t,n,a,i=e.nTable,r=e.aoColumns,l=e.oScroll,o=l.sY,s=l.sX,d=l.sXInner,u=r.length,c=A(e,"bVisible"),f=G("th",e.nTHead),h=i.getAttribute("width"),p=i.parentNode,m=!1,T=e.oBrowser,g=T.bScrollOversize,_=i.style.width;for(_&&-1!==_.indexOf("%")&&(h=_),t=0;t<c.length;t++)null!==(n=r[c[t]]).sWidth&&(n.sWidth=qe(n.sWidthOrig,p),m=!0);if(g||!m&&!s&&!o&&u==V(e)&&u==f.length)for(t=0;t<u;t++){var b=q(e,t);null!==b&&(r[b].sWidth=Ye(f.eq(t).width()))}else{var C=G(i).clone().css("visibility","hidden").removeAttr("id");C.find("tbody tr").remove();var y=G("<tr/>").appendTo(C.find("tbody"));for(C.find("thead, tfoot").remove(),C.append(G(e.nTHead).clone()).append(G(e.nTFoot).clone()),C.find("tfoot th, tfoot td").css("width",""),f=ce(e,C.find("thead")[0]),t=0;t<c.length;t++)n=r[c[t]],f[t].style.width=null!==n.sWidthOrig&&""!==n.sWidthOrig?Ye(n.sWidthOrig):"",n.sWidthOrig&&s&&G(f[t]).append(G("<div/>").css({width:n.sWidthOrig,margin:0,padding:0,border:0,height:1}));if(e.aoData.length)for(t=0;t<c.length;t++)n=r[a=c[t]],G(ze(e,a)).clone(!1).append(n.sContentPadding).appendTo(y);G("[name]",C).removeAttr("name");var D=G("<div/>").css(s||o?{position:"absolute",top:0,left:0,height:1,right:0,overflow:"hidden"}:{}).append(C).appendTo(p);s&&d?C.width(d):s?(C.css("width","auto"),C.removeAttr("width"),C.width()<p.clientWidth&&h&&C.width(p.clientWidth)):o?C.width(p.clientWidth):h&&C.width(h);var v=0;for(t=0;t<c.length;t++){var S=G(f[t]),I=S.outerWidth()-S.width(),R=T.bBounding?Math.ceil(f[t].getBoundingClientRect().width):S.outerWidth();v+=R,r[c[t]].sWidth=Ye(R-I)}i.style.width=Ye(v),D.remove()}if(h&&(i.style.width=Ye(h)),(h||s)&&!e._reszEvt){var w=function(){G(E).on("resize.DT-"+e.sInstance,je(function(){j(e)}))};g?setTimeout(w,1e3):w(),e._reszEvt=!0}}var je=b.util.throttle;function qe(e,t){if(!e)return 0;var n=G("<div/>").css("width",Ye(e)).appendTo(t||g.body),a=n[0].offsetWidth;return n.remove(),a}function ze(e,t){var n=Je(e,t);if(n<0)return null;var a=e.aoData[n];return a.nTr?a.anCells[t]:G("<td/>").html(w(e,n,t,"display"))[0]}function Je(e,t){for(var n,a=-1,i=-1,r=0,l=e.aoData.length;r<l;r++)(n=(n=(n=w(e,r,t,"display")+"").replace(We,"")).replace(/&nbsp;/g," ")).length>a&&(a=n.length,i=r);return i}function Ye(e){return null===e?"0px":"number"==typeof e?e<0?"0px":e+"px":e.match(/\d$/)?e+"px":e}function Xe(e){var t,n,a,i,r,l,o,s=[],d=e.aoColumns,u=e.aaSortingFixed,c=G.isPlainObject(u),f=[],h=function(e){e.length&&!G.isArray(e[0])?f.push(e):G.merge(f,e)};for(G.isArray(u)&&h(u),c&&u.pre&&h(u.pre),h(e.aaSorting),c&&u.post&&h(u.post),t=0;t<f.length;t++)for(n=0,a=(i=d[o=f[t][0]].aDataSort).length;n<a;n++)l=d[r=i[n]].sType||"string",f[t]._idx===W&&(f[t]._idx=G.inArray(f[t][1],d[r].asSorting)),s.push({src:o,col:r,dir:f[t][1],index:f[t]._idx,type:l,formatter:b.ext.type.order[l+"-pre"]});return s}function Ke(e){var t,n,a,i,u,c=[],f=b.ext.type.order,h=e.aoData,r=(e.aoColumns,0),l=e.aiDisplayMaster;for(R(e),t=0,n=(u=Xe(e)).length;t<n;t++)(i=u[t]).formatter&&r++,nt(e,i.col);if("ssp"!=pt(e)&&0!==u.length){for(t=0,a=l.length;t<a;t++)c[l[t]]=t;r===u.length?l.sort(function(e,t){var n,a,i,r,l,o=u.length,s=h[e]._aSortData,d=h[t]._aSortData;for(i=0;i<o;i++)if(0!==(r=(n=s[(l=u[i]).col])<(a=d[l.col])?-1:a<n?1:0))return"asc"===l.dir?r:-r;return(n=c[e])<(a=c[t])?-1:a<n?1:0}):l.sort(function(e,t){var n,a,i,r,l,o=u.length,s=h[e]._aSortData,d=h[t]._aSortData;for(i=0;i<o;i++)if(n=s[(l=u[i]).col],a=d[l.col],0!==(r=(f[l.type+"-"+l.dir]||f["string-"+l.dir])(n,a)))return r;return(n=c[e])<(a=c[t])?-1:a<n?1:0})}e.bSorted=!0}function Qe(e){for(var t,n=e.aoColumns,a=Xe(e),i=e.oLanguage.oAria,r=0,l=n.length;r<l;r++){var o=n[r],s=o.asSorting,d=o.sTitle.replace(/<.*?>/g,""),u=o.nTh;u.removeAttribute("aria-sort"),t=o.bSortable?d+("asc"===(0<a.length&&a[0].col==r?(u.setAttribute("aria-sort","asc"==a[0].dir?"ascending":"descending"),s[a[0].index+1]||s[0]):s[0])?i.sSortAscending:i.sSortDescending):d,u.setAttribute("aria-label",t)}}function Ze(e,t,n,a){var i,r=e.aoColumns[t],l=e.aaSorting,o=r.asSorting,s=function(e,t){var n=e._idx;return n===W&&(n=G.inArray(e[1],o)),n+1<o.length?n+1:t?null:0};if("number"==typeof l[0]&&(l=e.aaSorting=[l]),n&&e.oFeatures.bSortMulti){var d=G.inArray(t,k(l,"0"));-1!==d?(null===(i=s(l[d],!0))&&1===l.length&&(i=0),null===i?l.splice(d,1):(l[d][1]=o[i],l[d]._idx=i)):(l.push([t,o[0],0]),l[l.length-1]._idx=0)}else l.length&&l[0][0]==t?(i=s(l[0]),l.length=1,l[0][1]=o[i],l[0]._idx=i):(l.length=0,l.push([t,o[0]]),l[0]._idx=0);se(e),"function"==typeof a&&a(e)}function et(t,e,n,a){var i=t.aoColumns[n];dt(e,{},function(e){!1!==i.bSortable&&(t.oFeatures.bProcessing?(Me(t,!0),setTimeout(function(){Ze(t,n,e.shiftKey,a),"ssp"!==pt(t)&&Me(t,!1)},0)):Ze(t,n,e.shiftKey,a))})}function tt(e){var t,n,a,i=e.aLastSort,r=e.oClasses.sSortColumn,l=Xe(e),o=e.oFeatures;if(o.bSort&&o.bSortClasses){for(t=0,n=i.length;t<n;t++)a=i[t].src,G(k(e.aoData,"anCells",a)).removeClass(r+(t<2?t+1:3));for(t=0,n=l.length;t<n;t++)a=l[t].src,G(k(e.aoData,"anCells",a)).addClass(r+(t<2?t+1:3))}e.aLastSort=l}function nt(e,t){var n,a,i,r=e.aoColumns[t],l=b.ext.order[r.sSortDataType];l&&(n=l.call(e.oInstance,e,t,I(e,t)));for(var o=b.ext.type.order[r.sType+"-pre"],s=0,d=e.aoData.length;s<d;s++)(a=e.aoData[s])._aSortData||(a._aSortData=[]),a._aSortData[t]&&!l||(i=l?n[s]:w(e,s,t,"sort"),a._aSortData[t]=o?o(i):i)}function at(n){if(n.oFeatures.bStateSave&&!n.bDestroying){var e={time:+new Date,start:n._iDisplayStart,length:n._iDisplayLength,order:G.extend(!0,[],n.aaSorting),search:we(n.oPreviousSearch),columns:G.map(n.aoColumns,function(e,t){return{visible:e.bVisible,search:we(n.aoPreSearchCols[t])}})};ct(n,"aoStateSaveParams","stateSaveParams",[n,e]),n.oSavedState=e,n.fnStateSaveCallback.call(n.oInstance,n,e)}}function it(i,e,r){var l,o,s=i.aoColumns,t=function(e){if(e&&e.time){var t=ct(i,"aoStateLoadParams","stateLoadParams",[i,e]);if(-1===G.inArray(!1,t)){var n=i.iStateDuration;if(0<n&&e.time<+new Date-1e3*n)r();else if(e.columns&&s.length!==e.columns.length)r();else{if(i.oLoadedState=G.extend(!0,{},e),e.start!==W&&(i._iDisplayStart=e.start,i.iInitDisplayStart=e.start),e.length!==W&&(i._iDisplayLength=e.length),e.order!==W&&(i.aaSorting=[],G.each(e.order,function(e,t){i.aaSorting.push(t[0]>=s.length?[0,t[1]]:t)})),e.search!==W&&G.extend(i.oPreviousSearch,Ee(e.search)),e.columns)for(l=0,o=e.columns.length;l<o;l++){var a=e.columns[l];a.visible!==W&&(s[l].bVisible=a.visible),a.search!==W&&G.extend(i.aoPreSearchCols[l],Ee(a.search))}ct(i,"aoStateLoaded","stateLoaded",[i,e]),r()}}else r()}else r()};if(i.oFeatures.bStateSave){var n=i.fnStateLoadCallback.call(i.oInstance,i,t);n!==W&&t(n)}else r()}function rt(e){var t=b.settings,n=G.inArray(e,k(t,"nTable"));return-1!==n?t[n]:null}function lt(e,t,n,a){if(n="DataTables warning: "+(e?"table id="+e.sTableId+" - ":"")+n,a&&(n+=". For more information about this error, please see http://datatables.net/tn/"+a),t)E.console&&console.log&&console.log(n);else{var i=b.ext,r=i.sErrMode||i.errMode;if(e&&ct(e,null,"error",[e,a,n]),"alert"==r)alert(n);else{if("throw"==r)throw new Error(n);"function"==typeof r&&r(e,a,n)}}}function ot(n,a,e,t){G.isArray(e)?G.each(e,function(e,t){G.isArray(t)?ot(n,a,t[0],t[1]):ot(n,a,t)}):(t===W&&(t=e),a[e]!==W&&(n[t]=a[e]))}function st(e,t,n){var a;for(var i in t)t.hasOwnProperty(i)&&(a=t[i],G.isPlainObject(a)?(G.isPlainObject(e[i])||(e[i]={}),G.extend(!0,e[i],a)):n&&"data"!==i&&"aaData"!==i&&G.isArray(a)?e[i]=a.slice():e[i]=a);return e}function dt(t,e,n){G(t).on("click.DT",e,function(e){G(t).blur(),n(e)}).on("keypress.DT",e,function(e){13===e.which&&(e.preventDefault(),n(e))}).on("selectstart.DT",function(){return!1})}function ut(e,t,n,a){n&&e[t].push({fn:n,sName:a})}function ct(n,e,t,a){var i=[];if(e&&(i=G.map(n[e].slice().reverse(),function(e,t){return e.fn.apply(n.oInstance,a)})),null!==t){var r=G.Event(t+".dt");G(n.nTable).trigger(r,a),i.push(r.result)}return i}function ft(e){var t=e._iDisplayStart,n=e.fnDisplayEnd(),a=e._iDisplayLength;n<=t&&(t=n-a),t-=t%a,(-1===a||t<0)&&(t=0),e._iDisplayStart=t}function ht(e,t){var n=e.renderer,a=b.ext.renderer[t];return G.isPlainObject(n)&&n[t]?a[n[t]]||a._:"string"==typeof n&&a[n]||a._}function pt(e){return e.oFeatures.bServerSide?"ssp":e.ajax||e.sAjaxSource?"ajax":"dom"}var mt=[],Tt=Array.prototype;_=function(e,t){if(!(this instanceof _))return new _(e,t);var o=[],n=function(e){var t,n,a,i,r,l=(t=e,i=b.settings,r=G.map(i,function(e,t){return e.nTable}),t?t.nTable&&t.oApi?[t]:t.nodeName&&"table"===t.nodeName.toLowerCase()?-1!==(n=G.inArray(t,r))?[i[n]]:null:t&&"function"==typeof t.settings?t.settings().toArray():("string"==typeof t?a=G(t):t instanceof G&&(a=t),a?a.map(function(e){return-1!==(n=G.inArray(this,r))?i[n]:null}).toArray():void 0):[]);l&&(o=o.concat(l))};if(G.isArray(e))for(var a=0,i=e.length;a<i;a++)n(e[a]);else n(e);this.context=T(o),t&&G.merge(this,t),this.selector={rows:null,cols:null,opts:null},_.extend(this,this,mt)},b.Api=_,G.extend(_.prototype,{any:function(){return 0!==this.count()},concat:Tt.concat,context:[],count:function(){return this.flatten().length},each:function(e){for(var t=0,n=this.length;t<n;t++)e.call(this,this[t],t,this);return this},eq:function(e){var t=this.context;return t.length>e?new _(t[e],this[e]):null},filter:function(e){var t=[];if(Tt.filter)t=Tt.filter.call(this,e,this);else for(var n=0,a=this.length;n<a;n++)e.call(this,this[n],n,this)&&t.push(this[n]);return new _(this.context,t)},flatten:function(){var e=[];return new _(this.context,e.concat.apply(e,this.toArray()))},join:Tt.join,indexOf:Tt.indexOf||function(e,t){for(var n=t||0,a=this.length;n<a;n++)if(this[n]===e)return n;return-1},iterator:function(e,t,n,a){var i,r,l,o,s,d,u,c,f=[],h=this.context,p=this.selector;for("string"==typeof e&&(a=n,n=t,t=e,e=!1),r=0,l=h.length;r<l;r++){var m=new _(h[r]);if("table"===t)(i=n.call(m,h[r],r))!==W&&f.push(i);else if("columns"===t||"rows"===t)(i=n.call(m,h[r],this[r],r))!==W&&f.push(i);else if("column"===t||"column-rows"===t||"row"===t||"cell"===t)for(u=this[r],"column-rows"===t&&(d=yt(h[r],p.opts)),o=0,s=u.length;o<s;o++)c=u[o],(i="cell"===t?n.call(m,h[r],c.row,c.column,r,o):n.call(m,h[r],c,r,o,d))!==W&&f.push(i)}if(f.length||a){var T=new _(h,e?f.concat.apply([],f):f),g=T.selector;return g.rows=p.rows,g.cols=p.cols,g.opts=p.opts,T}return this},lastIndexOf:Tt.lastIndexOf||function(e,t){return this.indexOf.apply(this.toArray.reverse(),arguments)},length:0,map:function(e){var t=[];if(Tt.map)t=Tt.map.call(this,e,this);else for(var n=0,a=this.length;n<a;n++)t.push(e.call(this,this[n],n));return new _(this.context,t)},pluck:function(t){return this.map(function(e){return e[t]})},pop:Tt.pop,push:Tt.push,reduce:Tt.reduce||function(e,t){return S(this,e,t,0,this.length,1)},reduceRight:Tt.reduceRight||function(e,t){return S(this,e,t,this.length-1,-1,-1)},reverse:Tt.reverse,selector:null,shift:Tt.shift,slice:function(){return new _(this.context,this)},sort:Tt.sort,splice:Tt.splice,toArray:function(){return Tt.slice.call(this)},to$:function(){return G(this)},toJQuery:function(){return G(this)},unique:function(){return new _(this.context,T(this))},unshift:Tt.unshift}),_.extend=function(e,t,n){if(n.length&&t&&(t instanceof _||t.__dt_wrapper)){var a,i,r,l=function(t,n,a){return function(){var e=n.apply(t,arguments);return _.extend(e,e,a.methodExt),e}};for(a=0,i=n.length;a<i;a++)t[(r=n[a]).name]="function"==typeof r.val?l(e,r.val,r):G.isPlainObject(r.val)?{}:r.val,t[r.name].__dt_wrapper=!0,_.extend(e,t[r.name],r.propExt)}},_.register=t=function(e,t){if(G.isArray(e))for(var n=0,a=e.length;n<a;n++)_.register(e[n],t);else{var i,r,l,o,s=e.split("."),d=mt,u=function(e,t){for(var n=0,a=e.length;n<a;n++)if(e[n].name===t)return e[n];return null};for(i=0,r=s.length;i<r;i++){var c=u(d,l=(o=-1!==s[i].indexOf("()"))?s[i].replace("()",""):s[i]);c||(c={name:l,val:{},methodExt:[],propExt:[]},d.push(c)),i===r-1?c.val=t:d=o?c.methodExt:c.propExt}}},_.registerPlural=e=function(e,t,n){_.register(e,n),_.register(t,function(){var e=n.apply(this,arguments);return e===this?this:e instanceof _?e.length?G.isArray(e[0])?new _(e.context,e[0]):e[0]:W:e})};t("tables()",function(e){return e?new _(function(e,n){if("number"==typeof e)return[n[e]];var a=G.map(n,function(e,t){return e.nTable});return G(a).filter(e).map(function(e){var t=G.inArray(this,a);return n[t]}).toArray()}(e,this.context)):this}),t("table()",function(e){var t=this.tables(e),n=t.context;return n.length?new _(n[0]):t}),e("tables().nodes()","table().node()",function(){return this.iterator("table",function(e){return e.nTable},1)}),e("tables().body()","table().body()",function(){return this.iterator("table",function(e){return e.nTBody},1)}),e("tables().header()","table().header()",function(){return this.iterator("table",function(e){return e.nTHead},1)}),e("tables().footer()","table().footer()",function(){return this.iterator("table",function(e){return e.nTFoot},1)}),e("tables().containers()","table().container()",function(){return this.iterator("table",function(e){return e.nTableWrapper},1)}),t("draw()",function(t){return this.iterator("table",function(e){"page"===t?oe(e):("string"==typeof t&&(t="full-hold"!==t),se(e,!1===t))})}),t("page()",function(t){return t===W?this.page.info().page:this.iterator("table",function(e){Ae(e,t)})}),t("page.info()",function(e){if(0===this.context.length)return W;var t=this.context[0],n=t._iDisplayStart,a=t.oFeatures.bPaginate?t._iDisplayLength:-1,i=t.fnRecordsDisplay(),r=-1===a;return{page:r?0:Math.floor(n/a),pages:r?1:Math.ceil(i/a),start:n,end:t.fnDisplayEnd(),length:a,recordsTotal:t.fnRecordsTotal(),recordsDisplay:i,serverSide:"ssp"===pt(t)}}),t("page.len()",function(t){return t===W?0!==this.context.length?this.context[0]._iDisplayLength:W:this.iterator("table",function(e){Be(e,t)})});var gt=function(i,r,e){if(e){var t=new _(i);t.one("draw",function(){e(t.ajax.json())})}if("ssp"==pt(i))se(i,r);else{Me(i,!0);var n=i.jqXHR;n&&4!==n.readyState&&n.abort(),fe(i,[],function(e){Z(i);for(var t=Te(i,e),n=0,a=t.length;n<a;n++)M(i,t[n]);se(i,r),Me(i,!1)})}};t("ajax.json()",function(){var e=this.context;if(0<e.length)return e[0].json}),t("ajax.params()",function(){var e=this.context;if(0<e.length)return e[0].oAjaxData}),t("ajax.reload()",function(t,n){return this.iterator("table",function(e){gt(e,!1===n,t)})}),t("ajax.url()",function(t){var e=this.context;return t===W?0===e.length?W:(e=e[0]).ajax?G.isPlainObject(e.ajax)?e.ajax.url:e.ajax:e.sAjaxSource:this.iterator("table",function(e){G.isPlainObject(e.ajax)?e.ajax.url=t:e.ajax=t})}),t("ajax.url().load()",function(t,n){return this.iterator("table",function(e){gt(e,!1===n,t)})});var _t=function(e,t,n,a,i){var r,l,o,s,d,u,c=[],f=_typeof(t);for(t&&"string"!==f&&"function"!==f&&t.length!==W||(t=[t]),o=0,s=t.length;o<s;o++)for(d=0,u=(l=t[o]&&t[o].split&&!t[o].match(/[\[\(:]/)?t[o].split(","):[t[o]]).length;d<u;d++)(r=n("string"==typeof l[d]?G.trim(l[d]):l[d]))&&r.length&&(c=c.concat(r));var h=p.selector[e];if(h.length)for(o=0,s=h.length;o<s;o++)c=h[o](a,i,c);return T(c)},bt=function(e){return e||(e={}),e.filter&&e.search===W&&(e.search=e.filter),G.extend({search:"none",order:"current",page:"all"},e)},Ct=function(e){for(var t=0,n=e.length;t<n;t++)if(0<e[t].length)return e[0]=e[t],e[0].length=1,e.length=1,e.context=[e.context[t]],e;return e.length=0,e},yt=function(e,t){var n,a=[],i=e.aiDisplay,r=e.aiDisplayMaster,l=t.search,o=t.order,s=t.page;if("ssp"==pt(e))return"removed"===l?[]:m(0,r.length);if("current"==s)for(u=e._iDisplayStart,c=e.fnDisplayEnd();u<c;u++)a.push(i[u]);else if("current"==o||"applied"==o){if("none"==l)a=r.slice();else if("applied"==l)a=i.slice();else if("removed"==l){for(var d={},u=0,c=i.length;u<c;u++)d[i[u]]=null;a=G.map(r,function(e){return d.hasOwnProperty(e)?null:e})}}else if("index"==o||"original"==o)for(u=0,c=e.aoData.length;u<c;u++)"none"==l?a.push(u):(-1===(n=G.inArray(u,i))&&"removed"==l||0<=n&&"applied"==l)&&a.push(u);return a};t("rows()",function(t,n){t===W?t="":G.isPlainObject(t)&&(n=t,t=""),n=bt(n);var e=this.iterator("table",function(e){return _t("row",t,function(n){var e=h(n),a=s.aoData;if(null!==e&&!d)return[e];if(u||(u=yt(s,d)),null!==e&&-1!==G.inArray(e,u))return[e];if(null===n||n===W||""===n)return u;if("function"==typeof n)return G.map(u,function(e){var t=a[e];return n(e,t._aData,t.nTr)?e:null});if(n.nodeName){var t=n._DT_RowIndex,i=n._DT_CellIndex;if(t!==W)return a[t]&&a[t].nTr===n?[t]:[];if(i)return a[i.row]&&a[i.row].nTr===n?[i.row]:[];var r=G(n).closest("*[data-dt-row]");return r.length?[r.data("dt-row")]:[]}if("string"==typeof n&&"#"===n.charAt(0)){var l=s.aIds[n.replace(/^#/,"")];if(l!==W)return[l.idx]}var o=y(C(s.aoData,u,"nTr"));return G(o).filter(n).map(function(){return this._DT_RowIndex}).toArray()},s=e,d=n);var s,d,u},1);return e.selector.rows=t,e.selector.opts=n,e}),t("rows().nodes()",function(){return this.iterator("row",function(e,t){return e.aoData[t].nTr||W},1)}),t("rows().data()",function(){return this.iterator(!0,"rows",function(e,t){return C(e.aoData,t,"_aData")},1)}),e("rows().cache()","row().cache()",function(a){return this.iterator("row",function(e,t){var n=e.aoData[t];return"search"===a?n._aFilterData:n._aSortData},1)}),e("rows().invalidate()","row().invalidate()",function(n){return this.iterator("row",function(e,t){te(e,t,n)})}),e("rows().indexes()","row().index()",function(){return this.iterator("row",function(e,t){return t},1)}),e("rows().ids()","row().id()",function(e){for(var t=[],n=this.context,a=0,i=n.length;a<i;a++)for(var r=0,l=this[a].length;r<l;r++){var o=n[a].rowIdFn(n[a].aoData[this[a][r]]._aData);t.push((!0===e?"#":"")+o)}return new _(n,t)}),e("rows().remove()","row().remove()",function(){var f=this;return this.iterator("row",function(e,t,n){var a,i,r,l,o,s,d=e.aoData,u=d[t];for(d.splice(t,1),a=0,i=d.length;a<i;a++)if(s=(o=d[a]).anCells,null!==o.nTr&&(o.nTr._DT_RowIndex=a),null!==s)for(r=0,l=s.length;r<l;r++)s[r]._DT_CellIndex.row=a;ee(e.aiDisplayMaster,t),ee(e.aiDisplay,t),ee(f[n],t,!1),0<e._iRecordsDisplay&&e._iRecordsDisplay--,ft(e);var c=e.rowIdFn(u._aData);c!==W&&delete e.aIds[c]}),this.iterator("table",function(e){for(var t=0,n=e.aoData.length;t<n;t++)e.aoData[t].idx=t}),this}),t("rows.add()",function(r){var e=this.iterator("table",function(e){var t,n,a,i=[];for(n=0,a=r.length;n<a;n++)(t=r[n]).nodeName&&"TR"===t.nodeName.toUpperCase()?i.push(H(e,t)[0]):i.push(M(e,t));return i},1),t=this.rows(-1);return t.pop(),G.merge(t,e),t}),t("row()",function(e,t){return Ct(this.rows(e,t))}),t("row().data()",function(e){var t=this.context;if(e===W)return t.length&&this.length?t[0].aoData[this[0]]._aData:W;var n=t[0].aoData[this[0]];return n._aData=e,G.isArray(e)&&n.nTr.id&&K(t[0].rowId)(e,n.nTr.id),te(t[0],this[0],"data"),this}),t("row().node()",function(){var e=this.context;return e.length&&this.length&&e[0].aoData[this[0]].nTr||null}),t("row.add()",function(t){t instanceof G&&t.length&&(t=t[0]);var e=this.iterator("table",function(e){return t.nodeName&&"TR"===t.nodeName.toUpperCase()?H(e,t)[0]:M(e,t)});return this.row(e[0])});var Dt=function(e,t){var n=e.context;if(n.length){var a=n[0].aoData[t!==W?t:e[0]];a&&a._details&&(a._details.remove(),a._detailsShow=W,a._details=W)}},vt=function(e,t){var n=e.context;if(n.length&&e.length){var a=n[0].aoData[e[0]];a._details&&((a._detailsShow=t)?a._details.insertAfter(a.nTr):a._details.detach(),St(n[0]))}},St=function(s){var i=new _(s),e=".dt.DT_details",t="draw"+e,n="column-visibility"+e,a="destroy"+e,d=s.aoData;i.off(t+" "+n+" "+a),0<k(d,"_details").length&&(i.on(t,function(e,t){s===t&&i.rows({page:"current"}).eq(0).each(function(e){var t=d[e];t._detailsShow&&t._details.insertAfter(t.nTr)})}),i.on(n,function(e,t,n,a){if(s===t)for(var i,r=V(t),l=0,o=d.length;l<o;l++)(i=d[l])._details&&i._details.children("td[colspan]").attr("colspan",r)}),i.on(a,function(e,t){if(s===t)for(var n=0,a=d.length;n<a;n++)d[n]._details&&Dt(i,n)}))},It="row().child",Rt=It+"()";t(Rt,function(e,t){var l,n,o,a=this.context;return e===W?a.length&&this.length?a[0].aoData[this[0]]._details:W:(!0===e?this.child.show():!1===e?Dt(this):a.length&&this.length&&(l=a[0],n=a[0].aoData[this[0]],o=[],function e(t,n){if(G.isArray(t)||t instanceof G)for(var a=0,i=t.length;a<i;a++)e(t[a],n);else if(t.nodeName&&"tr"===t.nodeName.toLowerCase())o.push(t);else{var r=G("<tr><td/></tr>").addClass(n);G("td",r).addClass(n).html(t)[0].colSpan=V(l),o.push(r[0])}}(e,t),n._details&&n._details.detach(),n._details=G(o),n._detailsShow&&n._details.insertAfter(n.nTr)),this)}),t([It+".show()",Rt+".show()"],function(e){return vt(this,!0),this}),t([It+".hide()",Rt+".hide()"],function(){return vt(this,!1),this}),t([It+".remove()",Rt+".remove()"],function(){return Dt(this),this}),t(It+".isShown()",function(){var e=this.context;return e.length&&this.length&&e[0].aoData[this[0]]._detailsShow||!1});var wt=/^([^:]+):(name|visIdx|visible)$/,Et=function(e,t,n,a,i){for(var r=[],l=0,o=i.length;l<o;l++)r.push(w(e,i[l],t));return r};t("columns()",function(n,a){n===W?n="":G.isPlainObject(n)&&(a=n,n=""),a=bt(a);var e=this.iterator("table",function(e){return t=n,d=a,u=(s=e).aoColumns,c=k(u,"sName"),f=k(u,"nTh"),_t("column",t,function(n){var e=h(n);if(""===n)return m(u.length);if(null!==e)return[0<=e?e:u.length+e];if("function"==typeof n){var a=yt(s,d);return G.map(u,function(e,t){return n(t,Et(s,t,0,0,a),f[t])?t:null})}var i="string"==typeof n?n.match(wt):"";if(i)switch(i[2]){case"visIdx":case"visible":var t=parseInt(i[1],10);if(t<0){var r=G.map(u,function(e,t){return e.bVisible?t:null});return[r[r.length+t]]}return[q(s,t)];case"name":return G.map(c,function(e,t){return e===i[1]?t:null});default:return[]}if(n.nodeName&&n._DT_CellIndex)return[n._DT_CellIndex.column];var l=G(f).filter(n).map(function(){return G.inArray(this,f)}).toArray();if(l.length||!n.nodeName)return l;var o=G(n).closest("*[data-dt-column]");return o.length?[o.data("dt-column")]:[]},s,d);var s,t,d,u,c,f},1);return e.selector.cols=n,e.selector.opts=a,e}),e("columns().header()","column().header()",function(e,t){return this.iterator("column",function(e,t){return e.aoColumns[t].nTh},1)}),e("columns().footer()","column().footer()",function(e,t){return this.iterator("column",function(e,t){return e.aoColumns[t].nTf},1)}),e("columns().data()","column().data()",function(){return this.iterator("column-rows",Et,1)}),e("columns().dataSrc()","column().dataSrc()",function(){return this.iterator("column",function(e,t){return e.aoColumns[t].mData},1)}),e("columns().cache()","column().cache()",function(r){return this.iterator("column-rows",function(e,t,n,a,i){return C(e.aoData,i,"search"===r?"_aFilterData":"_aSortData",t)},1)}),e("columns().nodes()","column().nodes()",function(){return this.iterator("column-rows",function(e,t,n,a,i){return C(e.aoData,i,"anCells",t)},1)}),e("columns().visible()","column().visible()",function(n,a){var e=this.iterator("column",function(e,t){if(n===W)return e.aoColumns[t].bVisible;!function(e,t,n){var a,i,r,l,o=e.aoColumns,s=o[t],d=e.aoData;if(n===W)return s.bVisible;if(s.bVisible!==n){if(n){var u=G.inArray(!0,k(o,"bVisible"),t+1);for(i=0,r=d.length;i<r;i++)l=d[i].nTr,a=d[i].anCells,l&&l.insertBefore(a[t],a[u]||null)}else G(k(e.aoData,"anCells",t)).detach();s.bVisible=n,le(e,e.aoHeader),le(e,e.aoFooter),e.aiDisplay.length||G(e.nTBody).find("td[colspan]").attr("colspan",V(e)),at(e)}}(e,t,n)});return n!==W&&(this.iterator("column",function(e,t){ct(e,null,"column-visibility",[e,t,n,a])}),(a===W||a)&&this.columns.adjust()),e}),e("columns().indexes()","column().index()",function(n){return this.iterator("column",function(e,t){return"visible"===n?I(e,t):t},1)}),t("columns.adjust()",function(){return this.iterator("table",function(e){j(e)},1)}),t("column.index()",function(e,t){if(0!==this.context.length){var n=this.context[0];if("fromVisible"===e||"toData"===e)return q(n,t);if("fromData"===e||"toVisible"===e)return I(n,t)}}),t("column()",function(e,t){return Ct(this.columns(e,t))});t("cells()",function(T,e,g){if(G.isPlainObject(T)&&(T.row===W?(g=T,T=null):(g=e,e=null)),G.isPlainObject(e)&&(g=e,e=null),null===e||e===W)return this.iterator("table",function(e){return a=e,t=T,n=bt(g),c=a.aoData,f=yt(a,n),h=y(C(c,f,"anCells")),p=G([].concat.apply([],h)),m=a.aoColumns.length,_t("cell",t,function(e){var t="function"==typeof e;if(null===e||e===W||t){for(r=[],l=0,o=f.length;l<o;l++)for(i=f[l],s=0;s<m;s++)d={row:i,column:s},t?(u=c[i],e(d,w(a,i,s),u.anCells?u.anCells[s]:null)&&r.push(d)):r.push(d);return r}if(G.isPlainObject(e))return e.column!==W&&e.row!==W&&-1!==G.inArray(e.row,f)?[e]:[];var n=p.filter(e).map(function(e,t){return{row:t._DT_CellIndex.row,column:t._DT_CellIndex.column}}).toArray();return n.length||!e.nodeName?n:(u=G(e).closest("*[data-dt-row]")).length?[{row:u.data("dt-row"),column:u.data("dt-column")}]:[]},a,n);var a,t,n,i,r,l,o,s,d,u,c,f,h,p,m});var n,a,i,r,l,o=this.columns(e),s=this.rows(T);this.iterator("table",function(e,t){for(n=[],a=0,i=s[t].length;a<i;a++)for(r=0,l=o[t].length;r<l;r++)n.push({row:s[t][a],column:o[t][r]})},1);var t=this.cells(n,g);return G.extend(t.selector,{cols:e,rows:T,opts:g}),t}),e("cells().nodes()","cell().node()",function(){return this.iterator("cell",function(e,t,n){var a=e.aoData[t];return a&&a.anCells?a.anCells[n]:W},1)}),t("cells().data()",function(){return this.iterator("cell",function(e,t,n){return w(e,t,n)},1)}),e("cells().cache()","cell().cache()",function(a){return a="search"===a?"_aFilterData":"_aSortData",this.iterator("cell",function(e,t,n){return e.aoData[t][a][n]},1)}),e("cells().render()","cell().render()",function(a){return this.iterator("cell",function(e,t,n){return w(e,t,n,a)},1)}),e("cells().indexes()","cell().index()",function(){return this.iterator("cell",function(e,t,n){return{row:t,column:n,columnVisible:I(e,n)}},1)}),e("cells().invalidate()","cell().invalidate()",function(a){return this.iterator("cell",function(e,t,n){te(e,t,a,n)})}),t("cell()",function(e,t,n){return Ct(this.cells(e,t,n))}),t("cell().data()",function(e){var t=this.context,n=this[0];return e===W?t.length&&n.length?w(t[0],n[0].row,n[0].column):W:($(t[0],n[0].row,n[0].column,e),te(t[0],n[0].row,"data",n[0].column),this)}),t("order()",function(t,e){var n=this.context;return t===W?0!==n.length?n[0].aaSorting:W:("number"==typeof t?t=[[t,e]]:t.length&&!G.isArray(t[0])&&(t=Array.prototype.slice.call(arguments)),this.iterator("table",function(e){e.aaSorting=t.slice()}))}),t("order.listener()",function(t,n,a){return this.iterator("table",function(e){et(e,t,n,a)})}),t("order.fixed()",function(t){if(t)return this.iterator("table",function(e){e.aaSortingFixed=G.extend(!0,{},t)});var e=this.context,n=e.length?e[0].aaSortingFixed:W;return G.isArray(n)?{pre:n}:n}),t(["columns().order()","column().order()"],function(a){var i=this;return this.iterator("table",function(e,t){var n=[];G.each(i[t],function(e,t){n.push([t,a])}),e.aaSorting=n})}),t("search()",function(t,n,a,i){var e=this.context;return t===W?0!==e.length?e[0].oPreviousSearch.sSearch:W:this.iterator("table",function(e){e.oFeatures.bFilter&&_e(e,G.extend({},e.oPreviousSearch,{sSearch:t+"",bRegex:null!==n&&n,bSmart:null===a||a,bCaseInsensitive:null===i||i}),1)})}),e("columns().search()","column().search()",function(a,i,r,l){return this.iterator("column",function(e,t){var n=e.aoPreSearchCols;if(a===W)return n[t].sSearch;e.oFeatures.bFilter&&(G.extend(n[t],{sSearch:a+"",bRegex:null!==i&&i,bSmart:null===r||r,bCaseInsensitive:null===l||l}),_e(e,e.oPreviousSearch,1))})}),t("state()",function(){return this.context.length?this.context[0].oSavedState:null}),t("state.clear()",function(){return this.iterator("table",function(e){e.fnStateSaveCallback.call(e.oInstance,e,{})})}),t("state.loaded()",function(){return this.context.length?this.context[0].oLoadedState:null}),t("state.save()",function(){return this.iterator("table",function(e){at(e)})}),b.versionCheck=b.fnVersionCheck=function(e){for(var t,n,a=b.version.split("."),i=e.split("."),r=0,l=i.length;r<l;r++)if((t=parseInt(a[r],10)||0)!==(n=parseInt(i[r],10)||0))return n<t;return!0},b.isDataTable=b.fnIsDataTable=function(e){var i=G(e).get(0),r=!1;return e instanceof b.Api||(G.each(b.settings,function(e,t){var n=t.nScrollHead?G("table",t.nScrollHead)[0]:null,a=t.nScrollFoot?G("table",t.nScrollFoot)[0]:null;t.nTable!==i&&n!==i&&a!==i||(r=!0)}),r)},b.tables=b.fnTables=function(t){var e=!1;G.isPlainObject(t)&&(e=t.api,t=t.visible);var n=G.map(b.settings,function(e){if(!t||t&&G(e.nTable).is(":visible"))return e.nTable});return e?new _(n):n},b.camelToHungarian=F,t("$()",function(e,t){var n=this.rows(t).nodes(),a=G(n);return G([].concat(a.filter(e).toArray(),a.find(e).toArray()))}),G.each(["on","one","off"],function(e,n){t(n+"()",function(){var e=Array.prototype.slice.call(arguments);e[0]=G.map(e[0].split(/\s/),function(e){return e.match(/\.dt\b/)?e:e+".dt"}).join(" ");var t=G(this.tables().nodes());return t[n].apply(t,e),this})}),t("clear()",function(){return this.iterator("table",function(e){Z(e)})}),t("settings()",function(){return new _(this.context,this.context)}),t("init()",function(){var e=this.context;return e.length?e[0].oInit:null}),t("data()",function(){return this.iterator("table",function(e){return k(e.aoData,"_aData")}).flatten()}),t("destroy()",function(p){return p=p||!1,this.iterator("table",function(t){var n,e=t.nTableWrapper.parentNode,a=t.oClasses,i=t.nTable,r=t.nTBody,l=t.nTHead,o=t.nTFoot,s=G(i),d=G(r),u=G(t.nTableWrapper),c=G.map(t.aoData,function(e){return e.nTr});t.bDestroying=!0,ct(t,"aoDestroyCallback","destroy",[t]),p||new _(t).columns().visible(!0),u.off(".DT").find(":not(tbody *)").off(".DT"),G(E).off(".DT-"+t.sInstance),i!=l.parentNode&&(s.children("thead").detach(),s.append(l)),o&&i!=o.parentNode&&(s.children("tfoot").detach(),s.append(o)),t.aaSorting=[],t.aaSortingFixed=[],tt(t),G(c).removeClass(t.asStripeClasses.join(" ")),G("th, td",l).removeClass(a.sSortable+" "+a.sSortableAsc+" "+a.sSortableDesc+" "+a.sSortableNone),d.children().detach(),d.append(c);var f=p?"remove":"detach";s[f](),u[f](),!p&&e&&(e.insertBefore(i,t.nTableReinsertBefore),s.css("width",t.sDestroyWidth).removeClass(a.sTable),(n=t.asDestroyStripes.length)&&d.children().each(function(e){G(this).addClass(t.asDestroyStripes[e%n])}));var h=G.inArray(t,b.settings);-1!==h&&b.settings.splice(h,1)})}),G.each(["column","row","cell"],function(e,s){t(s+"s().every()",function(r){var l=this.selector.opts,o=this;return this.iterator(s,function(e,t,n,a,i){r.call(o[s](t,"cell"===s?n:l,"cell"===s?l:W),t,n,a,i)})})}),t("i18n()",function(e,t,n){var a=this.context[0],i=X(e)(a.oLanguage);return i===W&&(i=t),n!==W&&G.isPlainObject(i)&&(i=i[n]!==W?i[n]:i._),i.replace("%d",n)}),b.version="1.10.18",b.settings=[],b.models={},b.models.oSearch={bCaseInsensitive:!0,sSearch:"",bRegex:!1,bSmart:!0},b.models.oRow={nTr:null,anCells:null,_aData:[],_aSortData:null,_aFilterData:null,_sFilterRow:null,_sRowStripe:"",src:null,idx:-1},b.models.oColumn={idx:null,aDataSort:null,asSorting:null,bSearchable:null,bSortable:null,bVisible:null,_sManualType:null,_bAttrSrc:!1,fnCreatedCell:null,fnGetData:null,fnSetData:null,mData:null,mRender:null,nTh:null,nTf:null,sClass:null,sContentPadding:null,sDefaultContent:null,sName:null,sSortDataType:"std",sSortingClass:null,sSortingClassJUI:null,sTitle:null,sType:null,sWidth:null,sWidthOrig:null},b.defaults={aaData:null,aaSorting:[[0,"asc"]],aaSortingFixed:[],ajax:null,aLengthMenu:[10,25,50,100],aoColumns:null,aoColumnDefs:null,aoSearchCols:[],asStripeClasses:null,bAutoWidth:!0,bDeferRender:!1,bDestroy:!1,bFilter:!0,bInfo:!0,bLengthChange:!0,bPaginate:!0,bProcessing:!1,bRetrieve:!1,bScrollCollapse:!1,bServerSide:!1,bSort:!0,bSortMulti:!0,bSortCellsTop:!1,bSortClasses:!0,bStateSave:!1,fnCreatedRow:null,fnDrawCallback:null,fnFooterCallback:null,fnFormatNumber:function(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,this.oLanguage.sThousands)},fnHeaderCallback:null,fnInfoCallback:null,fnInitComplete:null,fnPreDrawCallback:null,fnRowCallback:null,fnServerData:null,fnServerParams:null,fnStateLoadCallback:function(e){try{return JSON.parse((-1===e.iStateDuration?sessionStorage:localStorage).getItem("DataTables_"+e.sInstance+"_"+location.pathname))}catch(e){}},fnStateLoadParams:null,fnStateLoaded:null,fnStateSaveCallback:function(e,t){try{(-1===e.iStateDuration?sessionStorage:localStorage).setItem("DataTables_"+e.sInstance+"_"+location.pathname,JSON.stringify(t))}catch(e){}},fnStateSaveParams:null,iStateDuration:7200,iDeferLoading:null,iDisplayLength:10,iDisplayStart:0,iTabIndex:0,oClasses:{},oLanguage:{oAria:{sSortAscending:": activate to sort column ascending",sSortDescending:": activate to sort column descending"},oPaginate:{sFirst:"First",sLast:"Last",sNext:"Next",sPrevious:"Previous"},sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",sInfoPostFix:"",sDecimal:"",sThousands:",",sLengthMenu:"Show _MENU_ entries",sLoadingRecords:"Loading...",sProcessing:"Processing...",sSearch:"Search:",sSearchPlaceholder:"",sUrl:"",sZeroRecords:"No matching records found"},oSearch:G.extend({},b.models.oSearch),sAjaxDataProp:"data",sAjaxSource:null,sDom:"lfrtip",searchDelay:null,sPaginationType:"simple_numbers",sScrollX:"",sScrollXInner:"",sScrollY:"",sServerMethod:"GET",renderer:null,rowId:"DT_RowId"},D(b.defaults),b.defaults.column={aDataSort:null,iDataSort:-1,asSorting:["asc","desc"],bSearchable:!0,bSortable:!0,bVisible:!0,fnCreatedCell:null,mData:null,mRender:null,sCellType:"td",sClass:"",sContentPadding:"",sDefaultContent:null,sName:"",sSortDataType:"std",sTitle:null,sType:null,sWidth:null},D(b.defaults.column),b.models.oSettings={oFeatures:{bAutoWidth:null,bDeferRender:null,bFilter:null,bInfo:null,bLengthChange:null,bPaginate:null,bProcessing:null,bServerSide:null,bSort:null,bSortMulti:null,bSortClasses:null,bStateSave:null},oScroll:{bCollapse:null,iBarWidth:0,sX:null,sXInner:null,sY:null},oLanguage:{fnInfoCallback:null},oBrowser:{bScrollOversize:!1,bScrollbarLeft:!1,bBounding:!1,barWidth:0},ajax:null,aanFeatures:[],aoData:[],aiDisplay:[],aiDisplayMaster:[],aIds:{},aoColumns:[],aoHeader:[],aoFooter:[],oPreviousSearch:{},aoPreSearchCols:[],aaSorting:null,aaSortingFixed:[],asStripeClasses:null,asDestroyStripes:[],sDestroyWidth:0,aoRowCallback:[],aoHeaderCallback:[],aoFooterCallback:[],aoDrawCallback:[],aoRowCreatedCallback:[],aoPreDrawCallback:[],aoInitComplete:[],aoStateSaveParams:[],aoStateLoadParams:[],aoStateLoaded:[],sTableId:"",nTable:null,nTHead:null,nTFoot:null,nTBody:null,nTableWrapper:null,bDeferLoading:!1,bInitialised:!1,aoOpenRows:[],sDom:null,searchDelay:null,sPaginationType:"two_button",iStateDuration:0,aoStateSave:[],aoStateLoad:[],oSavedState:null,oLoadedState:null,sAjaxSource:null,sAjaxDataProp:null,bAjaxDataGet:!0,jqXHR:null,json:W,oAjaxData:W,fnServerData:null,aoServerParams:[],sServerMethod:null,fnFormatNumber:null,aLengthMenu:null,iDraw:0,bDrawing:!1,iDrawError:-1,_iDisplayLength:10,_iDisplayStart:0,_iRecordsTotal:0,_iRecordsDisplay:0,oClasses:{},bFiltered:!1,bSorted:!1,bSortCellsTop:null,oInit:null,aoDestroyCallback:[],fnRecordsTotal:function(){return"ssp"==pt(this)?1*this._iRecordsTotal:this.aiDisplayMaster.length},fnRecordsDisplay:function(){return"ssp"==pt(this)?1*this._iRecordsDisplay:this.aiDisplay.length},fnDisplayEnd:function(){var e=this._iDisplayLength,t=this._iDisplayStart,n=t+e,a=this.aiDisplay.length,i=this.oFeatures,r=i.bPaginate;return i.bServerSide?!1===r||-1===e?t+a:Math.min(t+e,this._iRecordsDisplay):!r||a<n||-1===e?a:n},oInstance:null,sInstance:null,iTabIndex:0,nScrollHead:null,nScrollFoot:null,aLastSort:[],oPlugins:{},rowIdFn:null,rowId:null},b.ext=p={buttons:{},classes:{},build:"dt/dt-1.10.18",errMode:"alert",feature:[],search:[],selector:{cell:[],column:[],row:[]},internal:{},legacy:{ajax:null},pager:{},renderer:{pageButton:{},header:{}},order:{},type:{detect:[],search:{},order:{}},_unique:0,fnVersionCheck:b.fnVersionCheck,iApiIndex:0,oJUIClasses:{},sVersion:b.version},G.extend(p,{afnFiltering:p.search,aTypes:p.type.detect,ofnSearch:p.type.search,oSort:p.type.order,afnSortData:p.order,aoFeatures:p.feature,oApi:p.internal,oStdClasses:p.classes,oPagination:p.pager}),G.extend(b.ext.classes,{sTable:"dataTable",sNoFooter:"no-footer",sPageButton:"paginate_button",sPageButtonActive:"current",sPageButtonDisabled:"disabled",sStripeOdd:"odd",sStripeEven:"even",sRowEmpty:"dataTables_empty",sWrapper:"dataTables_wrapper",sFilter:"dataTables_filter",sInfo:"dataTables_info",sPaging:"dataTables_paginate paging_",sLength:"dataTables_length",sProcessing:"dataTables_processing",sSortAsc:"sorting_asc",sSortDesc:"sorting_desc",sSortable:"sorting",sSortableAsc:"sorting_asc_disabled",sSortableDesc:"sorting_desc_disabled",sSortableNone:"sorting_disabled",sSortColumn:"sorting_",sFilterInput:"",sLengthSelect:"",sScrollWrapper:"dataTables_scroll",sScrollHead:"dataTables_scrollHead",sScrollHeadInner:"dataTables_scrollHeadInner",sScrollBody:"dataTables_scrollBody",sScrollFoot:"dataTables_scrollFoot",sScrollFootInner:"dataTables_scrollFootInner",sHeaderTH:"",sFooterTH:"",sSortJUIAsc:"",sSortJUIDesc:"",sSortJUI:"",sSortJUIAscAllowed:"",sSortJUIDescAllowed:"",sSortJUIWrapper:"",sSortIcon:"",sJUIHeader:"",sJUIFooter:""});var Ft=b.ext.pager;function xt(e,t){var n=[],a=Ft.numbers_length,i=Math.floor(a/2);return t<=a?n=m(0,t):e<=i?((n=m(0,a-2)).push("ellipsis"),n.push(t-1)):(t-1-i<=e?(n=m(t-(a-2),t)).splice(0,0,"ellipsis"):((n=m(e-i+2,e+i-1)).push("ellipsis"),n.push(t-1),n.splice(0,0,"ellipsis")),n.splice(0,0,0)),n.DT_el="span",n}G.extend(Ft,{simple:function(e,t){return["previous","next"]},full:function(e,t){return["first","previous","next","last"]},numbers:function(e,t){return[xt(e,t)]},simple_numbers:function(e,t){return["previous",xt(e,t),"next"]},full_numbers:function(e,t){return["first","previous",xt(e,t),"next","last"]},first_last_numbers:function(e,t){return["first",xt(e,t),"last"]},_numbers:xt,numbers_length:7}),G.extend(!0,b.ext.renderer,{pageButton:{_:function(o,e,s,t,d,u){var c,f,n,h=o.oClasses,p=o.oLanguage.oPaginate,m=o.oLanguage.oAria.paginate||{},T=0;try{n=G(e).find(g.activeElement).data("dt-idx")}catch(e){}!function e(t,n){var a,i,r,l=function(e){Ae(o,e.data.action,!0)};for(a=0,i=n.length;a<i;a++)if(r=n[a],G.isArray(r))e(G("<"+(r.DT_el||"div")+"/>").appendTo(t),r);else{switch(c=null,f="",r){case"ellipsis":t.append('<span class="ellipsis">&#x2026;</span>');break;case"first":c=p.sFirst,f=r+(0<d?"":" "+h.sPageButtonDisabled);break;case"previous":c=p.sPrevious,f=r+(0<d?"":" "+h.sPageButtonDisabled);break;case"next":c=p.sNext,f=r+(d<u-1?"":" "+h.sPageButtonDisabled);break;case"last":c=p.sLast,f=r+(d<u-1?"":" "+h.sPageButtonDisabled);break;default:c=r+1,f=d===r?h.sPageButtonActive:""}null!==c&&(dt(G("<a>",{class:h.sPageButton+" "+f,"aria-controls":o.sTableId,"aria-label":m[r],"data-dt-idx":T,tabindex:o.iTabIndex,id:0===s&&"string"==typeof r?o.sTableId+"_"+r:null}).html(c).appendTo(t),{action:r},l),T++)}}(G(e).empty(),t),n!==W&&G(e).find("[data-dt-idx="+n+"]").focus()}}}),G.extend(b.ext.type.detect,[function(e,t){var n=t.oLanguage.sDecimal;return u(e,n)?"num"+n:null},function(e,t){if(e&&!(e instanceof Date)&&!r.test(e))return null;var n=Date.parse(e);return null!==n&&!isNaN(n)||s(e)?"date":null},function(e,t){var n=t.oLanguage.sDecimal;return u(e,n,!0)?"num-fmt"+n:null},function(e,t){var n=t.oLanguage.sDecimal;return c(e,n)?"html-num"+n:null},function(e,t){var n=t.oLanguage.sDecimal;return c(e,n,!0)?"html-num-fmt"+n:null},function(e,t){return s(e)||"string"==typeof e&&-1!==e.indexOf("<")?"html":null}]),G.extend(b.ext.type.search,{html:function(e){return s(e)?e:"string"==typeof e?e.replace(a," ").replace(i,""):""},string:function(e){return s(e)?e:"string"==typeof e?e.replace(a," "):e}});var Lt=function(e,t,n,a){return 0===e||e&&"-"!==e?(t&&(e=d(e,t)),e.replace&&(n&&(e=e.replace(n,"")),a&&(e=e.replace(a,""))),1*e):-1/0};function Nt(n){G.each({num:function(e){return Lt(e,n)},"num-fmt":function(e){return Lt(e,n,o)},"html-num":function(e){return Lt(e,n,i)},"html-num-fmt":function(e){return Lt(e,n,i,o)}},function(e,t){p.type.order[e+n+"-pre"]=t,e.match(/^html\-/)&&(p.type.search[e+n]=p.type.search.html)})}G.extend(p.type.order,{"date-pre":function(e){var t=Date.parse(e);return isNaN(t)?-1/0:t},"html-pre":function(e){return s(e)?"":e.replace?e.replace(/<.*?>/g,"").toLowerCase():e+""},"string-pre":function(e){return s(e)?"":"string"==typeof e?e.toLowerCase():e.toString?e.toString():""},"string-asc":function(e,t){return e<t?-1:t<e?1:0},"string-desc":function(e,t){return e<t?1:t<e?-1:0}}),Nt(""),G.extend(!0,b.ext.renderer,{header:{_:function(r,l,o,s){G(r.nTable).on("order.dt.DT",function(e,t,n,a){if(r===t){var i=o.idx;l.removeClass(o.sSortingClass+" "+s.sSortAsc+" "+s.sSortDesc).addClass("asc"==a[i]?s.sSortAsc:"desc"==a[i]?s.sSortDesc:o.sSortingClass)}})},jqueryui:function(r,l,o,s){G("<div/>").addClass(s.sSortJUIWrapper).append(l.contents()).append(G("<span/>").addClass(s.sSortIcon+" "+o.sSortingClassJUI)).appendTo(l),G(r.nTable).on("order.dt.DT",function(e,t,n,a){if(r===t){var i=o.idx;l.removeClass(s.sSortAsc+" "+s.sSortDesc).addClass("asc"==a[i]?s.sSortAsc:"desc"==a[i]?s.sSortDesc:o.sSortingClass),l.find("span."+s.sSortIcon).removeClass(s.sSortJUIAsc+" "+s.sSortJUIDesc+" "+s.sSortJUI+" "+s.sSortJUIAscAllowed+" "+s.sSortJUIDescAllowed).addClass("asc"==a[i]?s.sSortJUIAsc:"desc"==a[i]?s.sSortJUIDesc:o.sSortingClassJUI)}})}}});var Pt=function(e){return"string"==typeof e?e.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"):e};function Bt(t){return function(){var e=[rt(this[b.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));return b.ext.internal[t].apply(this,e)}}return b.render={number:function(r,l,o,s,d){return{display:function(e){if("number"!=typeof e&&"string"!=typeof e)return e;var t=e<0?"-":"",n=parseFloat(e);if(isNaN(n))return Pt(e);n=n.toFixed(o),e=Math.abs(n);var a=parseInt(e,10),i=o?l+(e-a).toFixed(o).substring(2):"";return t+(s||"")+a.toString().replace(/\B(?=(\d{3})+(?!\d))/g,r)+i+(d||"")}}},text:function(){return{display:Pt}}},G.extend(b.ext.internal,{_fnExternApiFunc:Bt,_fnBuildAjax:fe,_fnAjaxUpdate:he,_fnAjaxParameters:pe,_fnAjaxUpdateDraw:me,_fnAjaxDataSrc:Te,_fnAddColumn:B,_fnColumnOptions:O,_fnAdjustColumnSizing:j,_fnVisibleToColumnIndex:q,_fnColumnIndexToVisible:I,_fnVisbleColumns:V,_fnGetColumns:A,_fnColumnTypes:R,_fnApplyColumnDefs:U,_fnHungarianMap:D,_fnCamelToHungarian:F,_fnLanguageCompat:x,_fnBrowserDetect:P,_fnAddData:M,_fnAddTr:H,_fnNodeToDataIndex:function(e,t){return t._DT_RowIndex!==W?t._DT_RowIndex:null},_fnNodeToColumnIndex:function(e,t,n){return G.inArray(n,e.aoData[t].anCells)},_fnGetCellData:w,_fnSetCellData:$,_fnSplitObjNotation:Y,_fnGetObjectDataFn:X,_fnSetObjectDataFn:K,_fnGetDataMaster:Q,_fnClearTable:Z,_fnDeleteIndex:ee,_fnInvalidate:te,_fnGetRowElements:ne,_fnCreateTr:ae,_fnBuildHead:re,_fnDrawHead:le,_fnDraw:oe,_fnReDraw:se,_fnAddOptionsHtml:de,_fnDetectHeader:ue,_fnGetUniqueThs:ce,_fnFeatureHtmlFilter:ge,_fnFilterComplete:_e,_fnFilterCustom:be,_fnFilterColumn:Ce,_fnFilter:ye,_fnFilterCreateSearch:De,_fnEscapeRegex:ve,_fnFilterData:Re,_fnFeatureHtmlInfo:Fe,_fnUpdateInfo:xe,_fnInfoMacros:Le,_fnInitialise:Ne,_fnInitComplete:Pe,_fnLengthChange:Be,_fnFeatureHtmlLength:Oe,_fnFeatureHtmlPaginate:Ve,_fnPageChange:Ae,_fnFeatureHtmlProcessing:Ue,_fnProcessingDisplay:Me,_fnFeatureHtmlTable:He,_fnScrollDraw:$e,_fnApplyToChildren:Ge,_fnCalculateColumnWidths:ke,_fnThrottle:je,_fnConvertToWidth:qe,_fnGetWidestNode:ze,_fnGetMaxLenString:Je,_fnStringToCss:Ye,_fnSortFlatten:Xe,_fnSort:Ke,_fnSortAria:Qe,_fnSortListener:Ze,_fnSortAttachListener:et,_fnSortingClasses:tt,_fnSortData:nt,_fnSaveState:at,_fnLoadState:it,_fnSettingsFromNode:rt,_fnLog:lt,_fnMap:ot,_fnBindAction:dt,_fnCallbackReg:ut,_fnCallbackFire:ct,_fnLengthOverflow:ft,_fnRenderer:ht,_fnDataSource:pt,_fnRowAttributes:ie,_fnExtend:st,_fnCalculateEnd:function(){}}),((G.fn.dataTable=b).$=G).fn.dataTableSettings=b.settings,G.fn.dataTableExt=b.ext,G.fn.DataTable=function(e){return G(this).dataTable(e).api()},G.each(b,function(e,t){G.fn.DataTable[e]=t}),G.fn.dataTable});var InnerFormButton={_prop:{elem:null,innerButtonConfig:null,formRuntimeInstance:null,listButtonPO:null,formRuntimeCategory:""},Instance:function(e,t,n,a){var i=$('<button type="button" class="operation-button operation-button-primary" id="'+e.id+'"><span>'+e.caption+"</span></button>");return i.bind("click",{innerButtonConfig:e,formRuntimeInstance:t,listButtonPO:n,formRuntimeCategory:a,_this:this},this.ButtonClickEvent),{elem:i}},GetProp:function(e){return{elem:e.data._this,innerButtonConfig:e.data.innerButtonConfig,formRuntimeInstance:e.data.formRuntimeInstance,listButtonPO:e.data.listButtonPO,formRuntimeCategory:e.data.formRuntimeCategory}},ButtonClickEvent:function(e){DialogUtility.Frame_CloseDialog(window)}},InnerFormCloseButton={_prop:InnerFormButton._prop,Instance:InnerFormButton.Instance,GetButtonElem:InnerFormButton.GetButtonElem,ButtonClickEvent:function(e){DialogUtility.Frame_CloseDialog(window)}},InnerFormJsClientButton={_prop:InnerFormButton._prop,Instance:InnerFormButton.Instance,GetButtonElem:InnerFormButton.GetButtonElem,ButtonClickEvent:function(e){"reloadData"==e.data.innerButtonConfig.actionType?window.location.href=window.location.href:window.print()}},InnerFormSaveButton={_prop:InnerFormButton._prop,Instance:InnerFormButton.Instance,GetButtonElem:InnerFormButton.GetButtonElem,ButtonClickEvent:function(e){var t=e.data.innerButtonConfig,a=e.data.formRuntimeInstance,n=e.data.listButtonPO,i=e.data._this,r=t.saveAndClose,l=ValidateRulesRuntime.ValidateSubmitEnable();if(i._prop=InnerFormButton.GetProp(e),ValidateRulesRuntime.AlertValidateErrors(l)){var o=a.SerializationFormData(),s=a._Prop_Config.OperationType;DialogUtility.AlertLoading(window,DialogUtility.DialogLoadingId,{title:"系统提示"},"系统处理中,请稍候..."),RuntimeGeneralInstance.SubmitFormDataComplexPOListToServer(o,o.recordId,t.id,n.buttonId,s,function(e){if(e.success){if(this._prop.formRuntimeCategory==FormRuntimeSinglePageObject.FORM_RUNTIME_CATEGORY_LIST){console.log(this._prop);var t=a.GetOpenedListFormButtonId();window.OpenerWindowObj.WLDCT_ListTableContainer.TryReloadForListFormButton(t),window.setTimeout(function(){DialogUtility.CloseDialog(DialogUtility.DialogLoadingId),DialogUtility.Alert(window,DialogUtility.DialogId02,{},e.message,function(){DialogUtility.Frame_CloseDialog(window)},this)},500)}else if(this._prop.formRuntimeCategory==FormRuntimeSinglePageObject.FORM_RUNTIME_CATEGORY_INDEPENDENCE)if("dev"==this._prop.formRuntimeInstance._FormPO.formOperationType){var n=BaseUtility.GetUrlParaValue("devOperationEndFunc");StringUtility.IsNotNullOrEmpty(n)&&window.OpenerWindowObj[n](this._prop),"true"==this._prop.innerButtonConfig.saveAndClose&&window.setTimeout(function(){DialogUtility.CloseDialog(DialogUtility.DialogLoadingId),DialogUtility.Alert(window,DialogUtility.DialogId02,{},e.message,function(){DialogUtility.Frame_CloseDialog(window)},this)},500)}else DialogUtility.CloseDialog(DialogUtility.DialogLoadingId),DialogUtility.Alert(window,DialogUtility.DialogId02,{},e.message,function(){r&&DialogUtility.AlertText("关闭窗口,未完成!"),window.location.href=window.location.href},this)}else DialogUtility.CloseDialog(DialogUtility.DialogLoadingId)},i)}}},WFDCT_BaiduMapContainer={_prop:{elemId:"",clientInstanceName:"",$singleControlElem:null,mapObj:null,mapSelectedLngLat:"",mapEditObjs:[],mapViewObjs:[],oldEditData:null,operationType:""},LoadBaiDuJsCompleted:function(){var t=this;if(this._prop.mapObj=new BMapGL.Map(this._prop.elemId),this._prop.mapObj.centerAndZoom(new BMapGL.Point(114.54200132645097,22.754142795907825),16),this._prop.mapObj.enableScrollWheelZoom(!0),this._prop.mapObj.addEventListener("click",function(e){t._prop.mapSelectedLngLat=e.latlng}),BaseUtility.IsViewOperation(this._prop.operationType)||this.InitDrawControl(),this._prop.oldEditData){console.log(this._prop.oldEditData);for(var e=this._prop.oldEditData,n=0;n<e.length;n++)if("point"==e[n].type){var a=new BMapGL.Point(e[n].path.lng,e[n].path.lat),i=new BMapGL.Marker(a,{});this._prop.mapObj.addOverlay(i),this._prop.mapObj.panTo(a),this.addToMapEditObjs("point",i)}}},InitializeAtInstance:function(e,t,n){},RendererChain:function(e){console.log(e);var t=e.$singleControlElem;this._prop.elemId=t.attr("id"),this._prop.clientInstanceName=t.attr("client_instance_name"),this._prop.$singleControlElem=t,this._prop.operationType=e.formRuntimeInstance._Prop_Config.OperationType,$("#"+this._prop.elemId).addClass("map-control-wrap");var n=this._prop.clientInstanceName+".LoadBaiDuJsCompleted";BaiduMapUtility.LoadJsCompleted(n)},RendererDataChain:function(){},GetValue:function(e,t,n){var a=[];if(this._prop.mapEditObjs&&0<this._prop.mapEditObjs.length){for(var i=0;i<this._prop.mapEditObjs.length;i++)"point"==this._prop.mapEditObjs[i].type&&a.push({type:this._prop.mapEditObjs[i].type,path:this._prop.mapEditObjs[i].obj.getPosition()});a=JsonUtility.JsonToString(a)}return t.value=a,t},SetValue:function(e,t,n,a){t&&t.value&&(this._prop.oldEditData=JsonUtility.StringToJson(t.value))},ToViewStatus:function(e,t,n,a){},addToMapEditObjs:function(e,t){this._prop.mapEditObjs.push({type:e,obj:t})},InitDrawControl:function(){var e=this._prop.$singleControlElem;e.parent().addClass("map-control-wrap");var t=$("<div class='map-operation-button-wrap'></div>"),n=$("<div class='map-operation-button map-operation-button-add-point' title='添加定位点'></div>"),a=$("<div class='map-operation-button map-operation-button-clear' title='清空设置'></div>");t.append(n),t.append(a),e.parent().append(t);var i=this;n.click(function(){i._prop.mapSelectedLngLat||DialogUtility.AlertText("请先点击地图，确认坐标。");var e=new BMapGL.Point(i._prop.mapSelectedLngLat.lng,i._prop.mapSelectedLngLat.lat),t=new BMapGL.Marker(e,{});i._prop.mapObj.addOverlay(t),i.addToMapEditObjs("point",t)}),a.click(function(){for(var e=0;e<i._prop.mapEditObjs.length;e++){var t=i._prop.mapEditObjs[e];i._prop.mapObj.removeOverlay(t.obj)}i._prop.mapEditObjs=[]})}},_ref_filePath=$("script").last().attr("src"),WFDCT_CKEditor4={ckeditorInstance:null,RendererChain:function(e){var t=e.$singleControlElem,n=t.height();if(BaseUtility.IsViewOperation(e.formRuntimeInstance.GetOperationType()));else{var a=_ref_filePath.substr(_ref_filePath.lastIndexOf("/")+1),i=BaseUtility.AppendTimeStampUrl(_ref_filePath.replace(a,"Control/WebFormControl/"+t.attr("customconfig")));console.log(i),this.ckeditorInstance=CKEDITOR.replace(t.attr("id"),{customConfig:i,formRuntimeInstance:e.formRuntimeInstance}),this.ckeditorInstance.config.height=n}},RendererDataChain:function(){},GetValue:function(e,t,n){return t.value=this.ckeditorInstance.getData(),t},SetValue:function(e,t,n,a){t&&(e.val(t.value),e.attr("control_value",t.value))},ToViewStatus:function(e,t,n,a){var i=$("<div></div>"),r=BaseUtility.GetElemAllAttr(e);i.attr(r),i.removeClass(),i.html(t.value),i.css("overflow","auto"),i.height(i.height()+100),e.replaceWith(i)}},WFDCT_DocumentContentUploadConvertToPDFContainer={InitStyle:HTMLControl.InitStyle,RendererChain:function(e){},RendererDataChain:function(){},GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,ToViewStatus:HTMLControl.ToViewStatus,TryBindUrlValue:HTMLControl.TryBindUrlValue},WFDCT_DropDownSelect={InitStyle:HTMLControl.InitStyle,RendererChain:function(e){var t=e.$singleControlElem,n=t.attr("defaultselected");n&&t.val(n)},RendererDataChain:HTMLControl.RendererDataChain,GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,ToViewStatus:HTMLControl.ToViewStatus,TryBindUrlValue:HTMLControl.TryBindUrlValue},WFDCT_FileImageList={_objectType:"Instance",_propMap:{},_prop:{$singleControlElem:null,instanceName:null,elemId:null,opButtons:null,beforeSelectJSMethod:null,afterUploadedJsMethod:null,fileExType:null,authType:null,rendererContainerJsMethod:null,rendererSingleRowJsMethod:null,categoryType:null,getBindRecordIdJsMethod:null,getBindRecordTypeJsMethod:null,useTemplate:null,uploadEnable:!1,downloadEnable:!1,deleteEnable:!1,previewEnable:!1,moveOrderEnable:!1,clickFileNameAction:null,objType:""},acInterface:{getFileListData:"/Rest/Builder/RunTime/FileRuntime/GetImageFileListData",downLoadFileByFileId:"/Rest/Builder/RunTime/FileRuntime/DownLoadFileByFileId"},RendererChain:function(e){var t=e.$singleControlElem;this.BindElementAttrToInstanceProp(t),t.html(""),this.BuildFileList()},RendererDataChain:function(){},GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,BindElementAttrToInstanceProp:function(e){this._prop.getBindRecordIdJsMethod||(this._prop.getBindRecordIdJsMethod=this._prop.instanceName+".GetThisRecordId()"),this._prop.getBindRecordTypeJsMethod||(this._prop.getBindRecordTypeJsMethod=this._prop.instanceName+".GetThisRecordType()")},GetThisRecordId:function(){var e="";return formRuntimeInst&&formRuntimeInst.GetWebFormRTParas()&&formRuntimeInst.GetWebFormRTParas().RecordId?e=formRuntimeInst.GetWebFormRTParas().RecordId:DialogUtility.AlertText("查找不到绑定的记录ID"),e},GetThisRecordType:function(){return this._prop.objType},BuildFileList:function BuildFileList(){var $singleControlElem=this._prop.$singleControlElem,file_image_list_wrap_id="file_image_list_wrap"+this._prop.elemId;$("#"+file_image_list_wrap_id).remove();var $divWarp=$("<div class='file-image-list-wrap' id='"+file_image_list_wrap_id+"'></div>"),objId=eval(this._prop.getBindRecordIdJsMethod),category=this._prop.categoryType;AjaxUtility.Post(this.acInterface.getFileListData,{objId:objId,categoryType:category},function(e){if(e.success)for(var t=0;t<e.data.length;t++){var n=e.data[t],a=this.BuildFileDislay(e,n);$divWarp.append(a)}console.log(e)},this),$($singleControlElem.append($divWarp))},BuildFileDislay:function(e,t){var n=t.fileId;return"<div class='img-wrap'><img src='"+BaseUtility.BuildAction(this.acInterface.downLoadFileByFileId,{fileId:n})+"' /></div>"}},WFDCT_FileUploadContainer={_objectType:"Instance",_propMap:{},_prop:{$singleControlElem:null,instanceName:null,elemId:null,opButtons:null,beforeSelectJSMethod:null,afterUploadedJsMethod:null,fileExType:null,authType:null,rendererContainerJsMethod:null,rendererSingleRowJsMethod:null,categoryType:null,getBindRecordIdJsMethod:null,getBindRecordTypeJsMethod:null,useTemplate:null,uploadEnable:!1,downloadEnable:!1,deleteEnable:!1,previewEnable:!1,moveOrderEnable:!1,clickFileNameAction:null,objType:""},acInterface:{getFileListData:"/Rest/Builder/RunTime/FileRuntime/GetFileListData",uploadFile:"/Rest/Builder/RunTime/FileRuntime/UploadFile",downloadFile:"/Rest/Builder/RunTime/FileRuntime/DownLoadFileByFileId",deleteFile:"/Rest/Builder/RunTime/FileRuntime/DeleteFileByFileId"},RendererChain:function(e){var t=e.$singleControlElem;this.BindElementAttrToInstanceProp(t),t.html(""),this.BuildUploadContainer(),this.BuildFileList()},RendererDataChain:function(){},GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,ToViewStatus:function(e,t,n,a){$("#"+this._prop.uploadWarpId).hide(),$("#"+this._prop.elemId).find(".delete-button-elem").hide(),$("#"+this._prop.elemId).find(".move-up-button-elem").hide(),$("#"+this._prop.elemId).find(".move-down-button-elem").hide()},BindElementAttrToInstanceProp:function(e){this._prop.getBindRecordIdJsMethod||(this._prop.getBindRecordIdJsMethod=this._prop.instanceName+".GetThisRecordId()"),this._prop.getBindRecordTypeJsMethod||(this._prop.getBindRecordTypeJsMethod=this._prop.instanceName+".GetThisRecordType()"),0<=this._prop.opButtons.indexOf("upload")&&(this._prop.uploadEnable=!0),0<=this._prop.opButtons.indexOf("download")&&(this._prop.downloadEnable=!0),0<=this._prop.opButtons.indexOf("delete")&&(this._prop.deleteEnable=!0),0<=this._prop.opButtons.indexOf("online-preview")&&(this._prop.previewEnable=!0),0<=this._prop.opButtons.indexOf("move-order")&&(this._prop.moveOrderEnable=!0)},GetThisRecordId:function(){var e="";return formRuntimeInst&&formRuntimeInst.GetWebFormRTParas()&&formRuntimeInst.GetWebFormRTParas().RecordId?e=formRuntimeInst.GetWebFormRTParas().RecordId:DialogUtility.AlertText("查找不到绑定的记录ID"),e},GetThisRecordType:function(){return this._prop.objType},GetUploadEndPointRequest:function GetUploadEndPointRequest(){var endPoint=BaseUtility.GetRootPath()+this.acInterface.uploadFile,paras={objType:eval(this._prop.getBindRecordTypeJsMethod),objId:eval(this._prop.getBindRecordIdJsMethod),categoryType:this._prop.categoryType};return{endpoint:endPoint,params:paras}},CreateDefaultTemplate:function(e){$(window.document.body).append('<script type="text/template" id="'+e+'">\n        <div class="qq-uploader-selector qq-uploader qq-gallery" qq-drop-area-text="拖放文件到这里进行上传。" style="min-height: 78px;">\n            <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">\n                <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>\n            </div>\n            <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>\n                <span class="qq-upload-drop-area-text-selector"></span>\n            </div>\n            <div class="qq-upload-button-selector qq-upload-button" style="float: right">\n                <div>选择文件</div>\n            </div>\n            <span class="qq-drop-processing-selector qq-drop-processing">\n                <span>Processing dropped files...</span>\n                <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>\n            </span>\n            <ul class="qq-upload-list-selector qq-upload-list" role="region" aria-live="polite" aria-relevant="additions removals" style="display: none">\n                <li>\n                    <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>\n                    <div class="qq-progress-bar-container-selector qq-progress-bar-container">\n                        <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>\n                    </div>\n                    <span class="qq-upload-spinner-selector qq-upload-spinner"></span>\n                    <div class="qq-thumbnail-wrapper">\n                        <img class="qq-thumbnail-selector" qq-max-size="120" qq-server-scale>\n                    </div>\n                    <button type="button" class="qq-upload-cancel-selector qq-upload-cancel">X</button>\n                    <button type="button" class="qq-upload-retry-selector qq-upload-retry">\n                        <span class="qq-btn qq-retry-icon" aria-label="Retry"></span>\n                        Retry\n                    </button>\n\n                    <div class="qq-file-info">\n                        <div class="qq-file-name">\n                            <span class="qq-upload-file-selector qq-upload-file"></span>\n                            <span class="qq-edit-filename-icon-selector qq-btn qq-edit-filename-icon" aria-label="Edit filename"></span>\n                        </div>\n                        <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">\n                        <span class="qq-upload-size-selector qq-upload-size"></span>\n                        <button type="button" class="qq-btn qq-upload-delete-selector qq-upload-delete">\n                            <span class="qq-btn qq-delete-icon" aria-label="Delete"></span>\n                        </button>\n                        <button type="button" class="qq-btn qq-upload-pause-selector qq-upload-pause">\n                            <span class="qq-btn qq-pause-icon" aria-label="Pause"></span>\n                        </button>\n                        <button type="button" class="qq-btn qq-upload-continue-selector qq-upload-continue">\n                            <span class="qq-btn qq-continue-icon" aria-label="Continue"></span>\n                        </button>\n                    </div>\n                </li>\n            </ul>\n\n            <dialog class="qq-alert-dialog-selector">\n                <div class="qq-dialog-message-selector"></div>\n                <div class="qq-dialog-buttons">\n                    <button type="button" class="qq-cancel-button-selector">Close</button>\n                </div>\n            </dialog>\n\n            <dialog class="qq-confirm-dialog-selector">\n                <div class="qq-dialog-message-selector"></div>\n                <div class="qq-dialog-buttons">\n                    <button type="button" class="qq-cancel-button-selector">No</button>\n                    <button type="button" class="qq-ok-button-selector">Yes</button>\n                </div>\n            </dialog>\n\n            <dialog class="qq-prompt-dialog-selector">\n                <div class="qq-dialog-message-selector"></div>\n                <input type="text">\n                <div class="qq-dialog-buttons">\n                    <button type="button" class="qq-cancel-button-selector">Cancel</button>\n                    <button type="button" class="qq-ok-button-selector">Ok</button>\n                </div>\n            </dialog>\n        </div>\n    <\/script>')},BuildUploadContainer:function(){if(this._prop.uploadEnable){var e=this._prop.$singleControlElem,t="uploadWarp_"+this._prop.elemId;this._prop.uploadWarpId=t;var n=$("<div id='"+t+"'></div>");e.append(n);var a="qq-template_"+this._prop.elemId;"defaultTemplate"==this._prop.useTemplate&&this.CreateDefaultTemplate(a);var i=this;new qq.FineUploader({element:n[0],template:a,multiple:!1,request:this.GetUploadEndPointRequest(),callbacks:{onComplete:function(e,t,n,a){n.success?i.BuildFileList():DialogUtility.AlertText(n.message)}}})}},BuildFileList:function BuildFileList(){var $singleControlElem=this._prop.$singleControlElem,upload_file_list_wrap_id="upload_file_list_warp_"+this._prop.elemId;$("#"+upload_file_list_wrap_id).remove();var $divWarp=$("<div class='upload_file_list_wrap' id='"+upload_file_list_wrap_id+"'><table class='file_list_table'><thead><tr><th style='width: 80px'>编号</th><th>文件名称</th><th style='width: 140px'>上传时间</th><th style='width: 140px'>上传人</th><th style='width: 140px'>文件大小</th><th style='width: 140px'>操作</th></tr></thead><tbody></tbody></table></div>"),$tbody=$divWarp.find("tbody"),objId=eval(this._prop.getBindRecordIdJsMethod),category=this._prop.categoryType;AjaxUtility.Post(this.acInterface.getFileListData,{objId:objId,categoryType:category},function(e){if(e.success)for(var t=0;t<e.data.length;t++){var n=e.data[t];$tbody.append(this.BuildFileInfoTableRow(e,n))}BaseUtility.IsViewOperation(formRuntimeInst.GetOperationType())&&this.ToViewStatus()},this),$($singleControlElem.append($divWarp))},BuildFileInfoTableRow:function(e,t){var n=t.fileCode,a=StringUtility.EncodeHtml(t.fileName),i=DateUtility.DataFormatByTimeStamp(t.fileCreateTime,"yyyy-MM-dd"),r=HardDiskUtility.ByteConvert(t.fileSize),l=StringUtility.EncodeHtml(t.fileCreatorName),o=$('<tr><td style="text-align: center">'.concat(n,"</td><td>").concat(a,'</td><td style="text-align: center">').concat(i,'</td><td style="text-align: center">').concat(l,'</td><td style="text-align: center">').concat(r,'</td><td style="text-align: center"></td></tr>'));return this.BuildFileInfoTableRowInnerButtons(e,t,o),o},BuildFileInfoTableRowInnerButtons:function(e,t,n){!this._prop.downloadEnable&&!this._prop.deleteEnable&&this._prop.previewEnable&&this._prop.moveOrderEnable;var a=n.find("td:last"),i=this;if(this._prop.deleteEnable){var r=$("<div class='file-list-inner-button delete-button-elem' title='点击删除'></div>");r.click(function(){DialogUtility.Confirm(window,"确认删除附件【"+t.fileName+"】吗?",function(){AjaxUtility.Post(i.acInterface.deleteFile,{fileId:t.fileId},function(e){e.success&&r.parent().parent().remove()},i)})}),a.append(r)}this._prop.moveOrderEnable;var l=$("<div class='file-list-inner-button move-up-button-elem' title='点击上移'></div>");l.click(function(){DialogUtility.AlertText("暂不支持!")});var o=$("<div class='file-list-inner-button move-down-button-elem' title='点击下移'></div>");if(o.click(function(){DialogUtility.AlertText("暂不支持!")}),a.append(l),a.append(o),this._prop.downloadEnable){var s=$("<div class='file-list-inner-button download-button-elem' title='点击下载'></div>");s.click(function(){var e=BaseUtility.GetRootPath()+i.acInterface.downloadFile+"?fileId="+t.fileId;window.open(e)}),a.append(s)}this._prop.previewEnable;var d=$("<div class='file-list-inner-button preview-button-elem' title='点击预览'></div>");d.click(function(){DialogUtility.AlertText("暂不支持!")}),a.append(d)},TestFilePreviewEnable:function(e){return!0}},WFDCT_RadioGroup={radioGroupName:"",radioGroupWrapId:"",level2BindControlId:"",InitStyle:HTMLControl.InitStyle,RendererChain:function(e){var t=e.$singleControlElem,n=decodeURIComponent(t.attr("datasource"));n=JsonUtility.StringToJson(n);t.hide();var a=t.attr("defaultselected");this.radioGroupName="radioGroupName_"+t.attr("id"),this.radioGroupWrapId="radioGroupWrap_"+t.attr("id"),this.level2BindControlId=t.attr("level2bindcontrolid"),$("#"+this.radioGroupWrapId).remove();for(var i=$("<div class='radioGroupContainer' id='"+this.radioGroupWrapId+"' style='margin: 4px 0px;' />"),r=t.attr("rownum"),l=this,o=0;o<n.length;o++){var s=n[o],d=s.ITEXT,u=s.IVALUE,c=!1;if(0!=o&&1<r?c=o%r==0:1==r&&(c=!0),"--请选择--"!=d){var f=this.radioGroupName+"_"+o,h=$("<input type='radio' name='"+this.radioGroupName+"' id='"+f+"' />");h.val(u),u==a&&h.prop("checked",!0),i.append(h),i.append("<label for='"+f+"' style='margin-right: 8px'>"+d+"</label>"),c&&i.append("<br />"),this.Is2LevelDD()&&h.change(function(){var e=$(this).val();l.TryBind2LevelDD(t,e)})}}t.after(i)},RendererDataChain:function(){},GetValue:function(e,t,n){return t.value=$("[name='"+this.radioGroupName+"']:checked").val(),null==t.value&&(t.value=""),t},SetValue:function(e,t,n,a){t&&(e.val(t.value),e.attr("control_value",t.value),$("[name='"+this.radioGroupName+"'][value='"+t.value+"']").prop("checked",!0),t.value&&this.TryBind2LevelDD(e,t.value))},ToViewStatus:function(e,t,n,a){$("[name='"+this.radioGroupName+"']").parent().remove();var i=BaseUtility.GetElemAllAttr(e),r=$("<label />");r.attr(i),r.removeClass(),r.show(),r.text(e.val()),e.replaceWith(r)},Is2LevelDD:function(){return StringUtility.IsNotNullOrEmpty(this.level2BindControlId)},TryBind2LevelDD:function(e,t){var n=e.attr("level2bindcontrolid");if(n){var a=decodeURIComponent(e.attr("datasourcealllevel"));a=JsonUtility.StringToJson(a);var i=ArrayUtility.Where(a,function(e){return e.PARENTVALUE==t}),r=$("#"+n),l=JsonUtility.JsonToString(i);r.attr("datasource",l),HTMLControl.GetControlInstanceByElem(r).RendererChain({$singleControlElem:r})}}},WFDCT_SelectOrganUser={acInterface:{getOrganTreeData:"/Rest/Builder/RunTime/OrganRuntime/GetFullEnableOrgan",reloadListData:"/Rest/Builder/RunTime/UserRuntime/GetUserByOrganId"},treeConfig:{treeIdFieldName:"organId",treeObj:null,treeSelectedNode:null,treeSetting:{async:{enable:!0,url:""},data:{key:{name:"organName"},simpleData:{enable:!0,idKey:"organId",pIdKey:"organParentId"}},callback:{onClick:function(e,t,n){this.getZTreeObj(t)._host.SelectedOrganNode(e,t,n)},onAsyncSuccess:function(e,t,n,a){}}}},userConfig:{userWarpElemObj:null},selectedUser:{data:[]},_objectType:"Instance",_prop:{buttonId:null,buttonText:null,multipleSplit:null,resultNameBindToControlField:null,resultValueBindToControlField:null,resultNameBindToControlId:null,resultValueBindToControlId:null,selectCondition:null,windowCaption:null,selectNumber:null,settingType:null,defaultSelectedOrganId:null,containerId:null,singleSelectAutoClose:null},RendererChain:function(e){var t=e.$singleControlElem,n=t.attr("buttontext");t.text(n),t.css({padding:"2px 6px"}),t.bind("click",{buttonElem:t,selfInstance:this},this.ClickEvent)},RendererDataChain:function(){},GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,ToViewStatus:HTMLControl.ToViewStatus,BuildContentHTML:function(e,n){var t="dialogContainer_"+e,a=t+"_userWrap",i="treeULId_"+e;if(0==$("#"+t).length){var r="<div id='".concat(t,'\' class="select_organ_user_wrap">\n                    <div class="left_tree_wrap"><ul ref="zTreeUL" class="ztree" id="').concat(i,'"></ul></div>\n                    <div class="right_selected_wrap" id="').concat(a,'"></div>\n                    <div class="buttons_outer_wrap"><div class="buttons_inner_wrap"><button class="button button-primary" name="btnEnsure">确认</button><button class="button" name="btnClose">关闭</button><button class="button" name="btnClear">清空选择</button></div></div>\n                </div>'),l=$(r);l.hide(),$(document.body).append(l);var o=this;l.find("[name='btnEnsure']").click(function(){o.EnsureClickEvent()}),l.find("[name='btnClose']").click(function(){o.CloseClickEvent()}),l.find("[name='btnClear']").click(function(){o.ClearClickEvent()}),this.userConfig.userWarpElemObj=l.find("#"+a),AjaxUtility.Post(this.acInterface.getOrganTreeData,{},function(e){if(e.success){if(console.log(e),this.treeConfig.treeObj=$.fn.zTree.init($("#"+i),this.treeConfig.treeSetting,e.data),this.treeConfig.treeObj.expandAll(!0),this.treeConfig.treeObj._host=this,!StringUtility.IsNullOrEmpty(n)){var t=this.treeConfig.treeObj.getNodeByParam("organId",n,null);this.treeConfig.treeObj.selectNode(t),this.BuildUserTable(n)}}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,function(){})},this)}return t},ClearUserTable:function(){this.userConfig.userWarpElemObj.html("")},BuildUserTable:function(e){AjaxUtility.Post(this.acInterface.reloadListData,{organId:e},function(e){if(e.success){console.log(e);this.ClearUserTable();for(var t=$('<table class="userTable"><tr><th style="width: 40px">选择</th><th style="width: 80px">姓名</th><th style="width: 100px">手机号码</th><th>备注</th></tr></table>'),n=0;n<e.data.length;n++){var a=e.data[n],i=a.userId,r=StringUtility.EncodeHtml(a.userName),l=StringUtility.EncodeHtml(a.userPhoneNumber?a.userPhoneNumber:""),o=StringUtility.EncodeHtml(a.userDesc?a.userDesc:""),s="cbx_user_"+i,d=this._prop.selectNumber,u=this.TestUserIsSelected(a),c=$('<tr><td style="text-align: center"><input type="checkbox" id="'.concat(s,'" /></td><td style="text-align: center">').concat(r,'</td><td style="text-align: center">').concat(l,"</td><td>").concat(o,"</td></tr>"));c.bind("click",{selfInstance:this,userData:a,userId:i,userName:r,checkBoxId:s,selectNumber:d},this.UserClickEvent),c.find("#"+s).bind("click",{selfInstance:this,userData:a,userId:i,userName:r,checkBoxId:s,selectNumber:d},this.UserClickEvent),u&&c.find("#"+s).prop("checked",!0),t.find("tbody").append(c)}this.userConfig.userWarpElemObj.append(t)}else DialogUtility.Alert(window,DialogUtility.DialogAlertId,{},e.message,function(){})},this)},SelectedOrganNode:function(e,t,n){console.log(n),this.BuildUserTable(n.organId)},UnCheckAllUserExclude:function(e){this.userConfig.userWarpElemObj.find("input[type='checkbox'][id!='"+e+"']").prop("checked",!1)},ClearSelectedUser:function(){this.selectedUser.data=[]},AddUserToSelectedData:function(e,t){"single"==e?(this.ClearSelectedUser(),this.selectedUser.data.push(t)):"multiple"==e&&this.selectedUser.data.push(t)},DeleteUserToSelectedData:function(e,t){for(var n=0;n<this.selectedUser.data.length;n++)this.selectedUser.data[n].userId==t.userId&&ArrayUtility.Delete(this.selectedUser.data,n)},TestUserIsSelected:function(e){if(0<this.selectedUser.data.length)for(var t=0;t<this.selectedUser.data.length;t++)if(this.selectedUser.data[t].userId==e.userId)return!0;return!1},UserClickEvent:function(e){var t=e.data.selfInstance,n=e.data.userData,a=(e.data.userId,e.data.userName,e.data.checkBoxId),i=e.data.selectNumber;"single"==i&&t.UnCheckAllUserExclude(a),$("#"+a).prop("checked")?($("#"+a).prop("checked",!1),t.DeleteUserToSelectedData(i,n)):($("#"+a).prop("checked",!0),t.AddUserToSelectedData(i,n)),1==t.selectedUser.data.length&&"true"==t._prop.singleSelectAutoClose&&t.EnsureClickEvent(),e.stopPropagation()},ClickEvent:function(e){var t=e.data.buttonElem,n=e.data.selfInstance;n._prop.buttonId=t.attr("id");n._prop.containerId=n.BuildContentHTML(n._prop.buttonId,n._prop.defaultSelectedOrganId),DialogUtility.DialogElem(n._prop.containerId,{width:700,height:500,title:n._prop.windowCaption,modal:!0},1,!0)},BuildSelectedName:function(){for(var e=[],t=0;t<this.selectedUser.data.length;t++)e.push(this.selectedUser.data[t].userName);return e.join(this._prop.multipleSplit)},BuildSelectedValue:function(){for(var e=[],t=0;t<this.selectedUser.data.length;t++)e.push(this.selectedUser.data[t].userId);return e.join(this._prop.multipleSplit)},EnsureClickEvent:function(){var e=this._prop;"bingToControl"==e.settingType&&(e.resultNameBindToControlId&&$("#"+e.resultNameBindToControlId).val(this.BuildSelectedName()),e.resultValueBindToControlId&&$("#"+e.resultValueBindToControlId).val(this.BuildSelectedValue()),e.resultNameBindToControlField,e.resultValueBindToControlField),this.BindResultTo(this.BuildSelectedValue(),this.BuildSelectedName()),this.CloseClickEvent()},CloseClickEvent:function(){DialogUtility.CloseByElemId(this._prop.containerId)},ClearClickEvent:function(){this.ClearSelectedUser(),this.UnCheckAllUserExclude("not"),this.BindResultTo("",""),this.CloseClickEvent()},BindResultTo:function(e,t){var n=this._prop;"bingToControl"==n.settingType&&(n.resultNameBindToControlId&&$("#"+n.resultNameBindToControlId).val(t),n.resultValueBindToControlId&&$("#"+n.resultValueBindToControlId).val(e),n.resultNameBindToControlField,n.resultValueBindToControlField)}},WFDCT_SimpleLabel={RendererChain:HTMLControl.RendererChain,RendererDataChain:HTMLControl.RendererDataChain,GetValue:function(e,t,n){return t.value=e.text(),t},SetValue:function(e,t,n,a){if(t){var i=e.attr("defformat");if("yyyy-MM-dd"==i){var r=t.value;if(r){var l=DateUtility.ConvertFromString(r);r=DateUtility.Format(l,i)}e.text(r),e.attr("control_value",r),e.attr("control_source_value",t.value)}else e.text(t.value),e.attr("control_value",t.value),e.attr("control_source_value",t.value)}}},WFDCT_SubFormListContainer={_AddButtonElem:null,_$TemplateTableRow:null,_$SingleControlElem:null,_$TableElem:null,_$TableHeadElem:null,_$TableBodyElem:null,_EditInRow:!0,_Display_OPButtons_Add:!0,_Display_OPButtons_Update:!0,_Display_OPButtons_Del:!0,_Display_OPButtons_View:!0,_FormRuntimeHost:null,_FormDataRelationList:null,RendererChain:function(e){var t=e.$singleControlElem;this._$SingleControlElem=t,this._$TableElem=this._$SingleControlElem.find("table"),this._$TableBodyElem=this._$TableElem.find("tbody"),this._$TableHeadElem=this._$TableElem.find("thead"),this._EditInRow="false"!=t.attr("editinrow"),this._FormRuntimeHost=e.formRuntimeInstance,this._FormDataRelationList=this._FormRuntimeHost._FormDataRelationList;var n=t.attr("opbuttons");this._Display_OPButtons_Add=0<=n.indexOf("add"),this._Display_OPButtons_Update=0<=n.indexOf("update"),this._Display_OPButtons_Del=0<=n.indexOf("delete"),this._Display_OPButtons_View=0<=n.indexOf("view");t.html();var a=t.find("table[is_template_table='true']");a.addClass("sub-form-list-table"),t.html(""),this._AddButtonElem=$("<div class='sflb-button sflb-add' title='新增'>新增</div>"),this._Display_OPButtons_Add&&t.prepend("<div class='sub-form-list-button-wrap'></div>").find("div").append(this._AddButtonElem),(this._Display_OPButtons_Del||this._Display_OPButtons_Update||this._Display_OPButtons_View)&&this._$TableHeadElem.find("tr").append("<th style='width: 120px'>操作</th>"),t.append(a);var i=HTMLControl.GetControlInstanceNameByElem(t);this._AddButtonElem.bind("click",{hostElem:t,_rendererChainParas:e,selfObj:this,instanceName:i},this.AddEvent),this._$TemplateTableRow=t.find("table tbody tr").clone(),t.find("table tbody tr").remove();var r=this.ValidateRendererChainEnable();r.success||DialogUtility.AlertText(r.msg);var l=this.TryGetRelationPOClone();t.attr("relation_po_id",l.id)},RendererDataChain:function(e){for(var t=e.$singleControlElem,n=e.relationFormRecordComplexPo,a=t.attr("relation_po_id"),i=FormRelationPOUtility.FindRelationPOInRelationFormRecordComplexPo(n,a),r=FormRelationPOUtility.Get1ToNDataRecord(i),l=0;l<r.length;l++){var o=r[l];if(this._EditInRow)this.InnerRow_AddRowToContainer(o,i.pkFieldName);else{var s=ArrayUtility.WhereSingle(n.formRecordDataRelationPOList,function(e){return e.parentId==a}),d=ArrayUtility.WhereSingle(this._FormDataRelationList,function(e){return e.parentId==a});if(s){for(var u=s.selfKeyFieldName,c=s.outerKeyFieldName,f=FormRelationPOUtility.FindFieldValueInOneDataRecord(o,c),h=JsonUtility.CloneSimple(d),p=FormRelationPOUtility.Get1ToNDataRecord(s),m=[],T=0;T<p.length;T++){var g=p[T],_=FormRelationPOUtility.FindRecordFieldPOArray(g);ArrayUtility.True(_,function(e){return e.fieldName==u&&e.value==f})&&m.push(g)}FormRelationPOUtility.Add1ToNDataRecord(h,m),[].push(h)}this.Dialog_AddRowToContainer(o,!0,i.pkFieldName)}}this.InnerRow_CompletedLastEdit()},SerializationValue:function(e,t,n){this.InnerRow_CompletedLastEdit();for(var a=[],i=this._$SingleControlElem.find("tr[is_sub_list_tr='true']"),r=this.TryGetRelationPOClone(),l=0;l<i.length;l++){var o=$(i[l]),s=this.GetRowData(o),d=FormRelationPOUtility.Get1To1DataRecord(s),u=FormRelationPOUtility.FindFieldPOInOneDataRecord(d,r.pkFieldName).value,c=this.TryBuildRecord(s,u,d.recordFieldPOList);a.push(c)}console.log(a),this._EditInRow||(t.isSave=!1),FormRelationPOUtility.Add1ToNDataRecord(t,a)},GetValue:function(e,t,n){DialogUtility.AlertText("DynamicContainer类型的控件的序列化交由SerializationValue方法自行完成!")},SetValue:function(e,t,n){},ToViewStatus:function(e,t,n){e.find(".sub-form-list-button-wrap").hide(),e.find(".sflt-td-operation-update").hide(),e.find(".sflt-td-operation-del").hide()},AddEvent:function(e){var t=e.data.hostElem,n=e.data.selfObj,a=e.data.instanceName,i=e.data._rendererChainParas;n._EditInRow?n.InnerRow_AddRowToContainer(null,null):n.Dialog_ShowAddRowSubFormDialog(e,t,i,a)},ValidateSerializationSubFormDataEnable:function(e){return!0},ValidateRendererChainEnable:function(){return{success:!0,msg:""}},GetRowId:function(e){return e.attr("tr_record_id")},SetRowId:function(e,t){e.attr("tr_record_id",t)},GetRowData:function(e){var t=e.attr("tr_record_data");return JsonUtility.StringToJson(t)},GetChildRelationPOArray:function(e){var t=e.attr("child_relation_po_array");return StringUtility.IsNullOrEmpty(t)?null:JsonUtility.StringToJson(t)},SaveDataToRowAttr:function(e,t,n){t.attr("is_sub_list_tr","true"),t.attr("tr_record_id",FormRelationPOUtility.FindFieldPOByRelationPO(e,e.pkFieldName).value),t.attr("tr_record_data",JsonUtility.JsonToString(e)),n&&0<n.length&&t.attr("child_relation_po_array",JsonUtility.JsonToString(n))},TryGetChildRelationPOArrayClone:function(t){var e=ArrayUtility.Where(this._FormDataRelationList,function(e){return e.parentId==t.id});return JsonUtility.CloneArraySimple(e)},TryGetRelationPOClone:function(){if(this._po)return JsonUtility.CloneSimple(this._po);var e=this.TryGetBindDataSourceAttr(),t=null;if("autoTesting"==e){var n=this.TryGetInnerControlBindTableName();if(null==(t=FormRelationPOUtility.FindRelationPOByTableName(this._FormDataRelationList,n))){var a="WFDCT_SubFormListContainer.TryGetRelationPO:通过内部控件绑定的表找不到具体的数据关联实体！";throw DialogUtility.AlertText(a),a}}else if(null==(t=FormRelationPOUtility.FindRelationPOById(this._FormDataRelationList,e))){a="WFDCT_SubFormListContainer.TryGetRelationPO:通过ID"+e+"找不到具体的数据关联实体！";throw DialogUtility.AlertText(a),a}return this._po=t,JsonUtility.CloneSimple(this._po)},TryGetInnerControlBindTableName:function(){var e=HTMLControl.FindALLControls(this._$TemplateTableRow),t=null;return e.each(function(){t?t!=HTMLControl.GetControlBindTableName($(this))&&DialogUtility.AlertText("子表区域中的控件绑定了多个表!"):t=HTMLControl.GetControlBindTableName($(this))}),t},TryGetBindDataSourceAttr:function(){return this._$SingleControlElem.attr("binddatasource")},TryBuildRecord:function(t,e,n){var a=t.outerKeyFieldName,i=t.selfKeyFieldName,r="",l=ArrayUtility.WhereSingle(this._FormDataRelationList,function(e){return e.id==t.parentId});if(StringUtility.IsNullOrEmpty(a)){var o="数据源未设置外键关联字段!";throw DialogUtility.AlertText(o),o}if(StringUtility.IsNullOrEmpty(i)){o="数据源未设置本身关联字段!";throw DialogUtility.AlertText(o),o}if(FormRelationPOUtility.IsMainRelationPO(l))r=this._FormRuntimeHost.GetRecordId();else{var s=l.tableId,d=HTMLControl.GetSimpleControlValue(s,a);if(StringUtility.IsNullOrEmpty(d)){o="找不到绑定了表:"+s+",字段:"+a+"的控件,请确认页面放置了该控件,并存在值!";throw DialogUtility.AlertText(o),o}}return FormRelationPOUtility.BuildRecord(n,"",e,a,r,i)},_$LastEditRow:null,InnerRow_AddRowToContainer:function(e,t){this.InnerRow_CompletedLastEdit();var n=this._$TemplateTableRow.clone(),a=$("<td><div class='sflt-td-operation-outer-wrap'></div></td>"),i=a.find("div"),r=$("<div title='删除' class='sflt-td-operation-del'></div>");r.bind("click",{selfObj:this},function(e){e.data.selfObj.InnerRow_Delete($(this).parent().parent().parent())}),i.append(r);var l=$("<div title='编辑' class='sflt-td-operation-update'></div>");l.bind("click",{selfObj:this},function(e){e.data.selfObj.InnerRow_ToEditStatus($(this).parent().parent().parent())}),i.append(l),n.append(a),this._$TableBodyElem.append(n),this._$LastEditRow=n;for(var o=HTMLControl.FindALLControls(this._$LastEditRow),s=0;s<o.length;s++){var d=$(o[s]),u=HTMLControl.GetControlInstanceByElem(d),c=HTMLControl.GetControlBindFieldName(d);u.RendererChain({$singleControlElem:d})}if(e){for(o=HTMLControl.FindALLControls(this._$LastEditRow),s=0;s<o.length;s++){d=$(o[s]),u=HTMLControl.GetControlInstanceByElem(d),c=HTMLControl.GetControlBindFieldName(d);var f=FormRelationPOUtility.FindFieldPOInOneDataRecordEnableNull(e,c);u.SetValue(d,f,null,null)}var h=FormRelationPOUtility.FindFieldPOInOneDataRecord(e,t).value;this.SetRowId(n,h)}},InnerRow_ToEditStatus:function(e){this.InnerRow_CompletedLastEdit();for(var t=this.GetRowData(e),n=e.find("[is_inner_row_span='true']"),a=0;a<n.length;a++){var i=$(n[a]),r=i.attr("edit_control_id"),l=this._$TemplateTableRow.find("#"+r).clone(),o=HTMLControl.GetControlBindFieldName(l),s=FormRelationPOUtility.FindFieldPOByRelationPO(t,o);HTMLControl.GetControlInstanceByElem(l).SetValue(l,s,{}),i.parent().append(l),i.remove()}this._$LastEditRow=e},InnerRow_ToViewStatus:function(e,t){if(this._$LastEditRow)for(var n=HTMLControl.FindALLControls(this._$LastEditRow),a=0;a<n.length;a++){var i=$(n[a]),r=HTMLControl.GetControlBindFieldName(i),l=FormRelationPOUtility.FindFieldPOByRelationPO(e,r).value,o=$("<span is_inner_row_span='true' edit_control_id='"+i.attr("id")+"'>"+l+"</span>");i.before(o),i.remove()}this._$LastEditRow=null},InnerRow_Delete:function(a){this.InnerRow_CompletedLastEdit(),console.log(this._FormRuntimeHost),this._FormRuntimeHost._Prop_Config.OperationType!=BaseUtility.GetAddOperationName()?DialogUtility.Confirm(window,"确认删除当前记录?",function(){var e=this.GetRowData(a);console.log(e);var t=e.oneDataRecord.recordId,n=e.tableId;RuntimeGeneralInstance.DeleteTableRecord(n,t,function(e){a.remove()},this)},this):a.remove()},InnerRow_CompletedLastEdit:function(){if(this._$LastEditRow){for(var e=HTMLControl.FindALLControls(this._$LastEditRow),t=this.TryGetRelationPOClone(),n=[],a=0;a<e.length;a++){var i=$(e[a]),r=HTMLControl.TryGetFieldTransferPO(i,t.id,t.singleName,t.relationType);n.push(r)}var l=this.GetRowId(this._$LastEditRow);l||(l=StringUtility.Guid()),FormRelationPOUtility.CreateIdFieldInRecordFieldPOArray(n,l,this._FormRuntimeHost._FormPO,t.tableId);var o=this.TryBuildRecord(t,l,n);t=FormRelationPOUtility.Add1To1DataRecordFieldPOList(t,n,"",o.recordId,o.outerFieldName,o.outerFieldValue,o.selfFieldName),this.SaveDataToRowAttr(t,this._$LastEditRow),this.InnerRow_ToViewStatus(t,this._$LastEditRow)}},Dialog_Get_Button_Click_Para:function(e){var t=this.TryGetRelationPOClone();return console.log("子表外键:"+t.outerKeyFieldName),{formId:e.attr("formid"),buttonId:"",elemId:"",recordId:"",windowHeight:e.attr("windowheight"),windowWidth:e.attr("windowwidth"),instanceName:e.attr("client_instance_name"),dialogWindowTitle:e.attr("dialogwindowtitle"),parentRecordId:this._FormRuntimeHost.GetRecordId(),selfKeyFieldName:t.selfKeyFieldName,outerKeyFieldName:t.outerKeyFieldName}},Dialog_AddRow_AddViewButton:function(e,t,n,a,i,r){var l=$("<div title='查看' class='sflt-td-operation-view'></div>"),o=this.Dialog_Get_Button_Click_Para(i);l.bind("click",{$tr:t,idValue:n,oneDataRecord:a,dialogWindowPara:o,isPreview:r},function(e){var t,n=e.data.dialogWindowPara;n.OperationType="view",n.recordId=e.data.idValue,t=r?BaseUtility.BuildView("/HTML/Builder/Form/SubFormPreview.html",n):BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormSubRuntime.html",n),DialogUtility.OpenIframeWindow(window,DialogUtility.DialogId,t,{title:n.dialogWindowTitle,width:n.windowWidth,height:n.windowHeight},1)}),e.append(l)},Dialog_AddRow_AddUpdateButton:function(e,t,n,a,i,r){var l=$("<div title='编辑' class='sflt-td-operation-update'></div>"),o=this.Dialog_Get_Button_Click_Para(i);l.bind("click",{$tr:t,idValue:n,oneDataRecord:a,dialogWindowPara:o,isPreview:r},function(e){var t,n=e.data.dialogWindowPara;n.operationType="update",n.recordId=e.data.idValue,t=r?BaseUtility.BuildView("/HTML/Builder/Form/SubFormPreview.html",n):BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormSubRuntime.html",n),DialogUtility.OpenIframeWindow(window,DialogUtility.DialogId,t,{title:n.dialogWindowTitle,width:n.windowWidth,height:n.windowHeight},1)}),e.append(l)},Dialog_AddRow_AddDeleteButton:function(e,t,n,a,i,r){var l=$("<div title='删除' class='sflt-td-operation-del'></div>");l.bind("click",{$tr:t,idValue:n,oneDataRecord:a,isPreview:r},function(e){e.data.$tr.remove()}),e.append(l)},Dialog_ShowAddRowSubFormDialog:function(e,t,n,a){var i,r=this.Dialog_Get_Button_Click_Para(t);r.dialogWindowTitle||(r.dialogWindowTitle="应用构建系统"),r.operationType="add",r.recordId=StringUtility.Guid(),i=this._FormRuntimeHost.IsPreview()?BaseUtility.BuildView("/HTML/Builder/Form/SubFormPreview.html",r):BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormSubRuntime.html",r),DialogUtility.OpenIframeWindow(window,DialogUtility.DialogId,i,{title:r.dialogWindowTitle,width:r.windowWidth,height:r.windowHeight},1)},Dialog_SubFormDialogCompletedEdit:function(e,t,n){var a=HTMLControl.GetInstance(e);(function(e,t){var n=FormRelationPOUtility.FindMainRelationPO(t.formRecordDataRelationPOList),a=FormRelationPOUtility.Get1To1DataRecord(n);this.Dialog_AddRowToContainer(a,!1,n.pkFieldName)}).call(a,t,n)},Dialog_AddRowToContainer:function(e,t,n){if(e){for(var a=this._$TemplateTableRow.clone(),i=HTMLControl.FindALLControls(a),r=0;r<i.length;r++){var l=$(i[r]),o=HTMLControl.GetControlInstanceByElem(l),s=HTMLControl.GetControlBindFieldName(l),d=FormRelationPOUtility.FindFieldPOInOneDataRecord(e,s);o.SetValue(l,d,null,null)}console.log(n);var u=FormRelationPOUtility.FindFieldPOInOneDataRecord(e,n),c=$("<td><div class='sflt-td-operation-outer-wrap'></div></td>"),f=c.find("div");t?(this._Display_OPButtons_View&&this.Dialog_AddRow_AddViewButton(f,a,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this._Display_OPButtons_Update&&this.Dialog_AddRow_AddUpdateButton(f,a,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this._Display_OPButtons_Del&&this.Dialog_AddRow_AddDeleteButton(f,a,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview())):(this.Dialog_AddRow_AddViewButton(f,a,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this.Dialog_AddRow_AddUpdateButton(f,a,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview()),this.Dialog_AddRow_AddDeleteButton(f,a,u.value,e,this._$SingleControlElem,this._FormRuntimeHost.IsPreview())),a.append(c);var h=u.value,p=this._$SingleControlElem.find("tr[tr_record_id='"+h+"']");0==p.length?this._$TableBodyElem.append(a):(p.after(a),p.remove());var m=this.TryGetRelationPOClone();m=FormRelationPOUtility.Add1To1DataRecord(m,e),this.SaveDataToRowAttr(m,a)}}},WFDCT_TabContainer={RendererChain:function(e){var t=e.$singleControlElem;t.hide();for(var n=t.children("[tab_id]"),a=$("<ul></ul>"),i=0;i<n.length;i++){var r=$(n[i]);a.append("<li><a href='#"+r.attr("tab_id")+"'>"+r.text()+"</a><li>")}n.remove(),t.prepend(a),$("#"+t.attr("id")).tabs(),t.show(),HTMLControl.RendererChain(e)},RendererDataChain:HTMLControl.RendererDataChain,GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue},WFDCT_TextArea={RendererChain:function(e){},RendererDataChain:function(){},GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,ToViewStatus:HTMLControl.ToViewStatus},WFDCT_TextBox={InitStyle:HTMLControl.InitStyle,RendererChain:function(e){e.$singleControlElem.attr("autocomplete","off")},RendererDataChain:function(){},GetValue:HTMLControl.GetValue,SetValue:HTMLControl.SetValue,ToViewStatus:HTMLControl.ToViewStatus,TryBindUrlValue:HTMLControl.TryBindUrlValue},WFDCT_TextDateTime={InitStyle:HTMLControl.InitStyle,RendererChain:function(e){e.$singleControlElem.attr("autocomplete","off")},RendererDataChain:HTMLControl.RendererDataChain,GetValue:HTMLControl.GetValue,SetValue:function(e,t,n,a){if(t){var i=t.value,r=DateUtility.ConvertFromString(i);i=DateUtility.Format(r,e.attr("datetimeformat")),e.val(i),e.attr("control_value",i),e.attr("control_time_value",t.value)}},ToViewStatus:HTMLControl.ToViewStatus},WLDCT_DeleteButton={_ListTableContainerInstance:null,RendererChain:HTMLControl.RendererChain,ResolveSelf:function(e){var t=e.$singleControlElem,n=t.attr("buttoncaption"),a=$("<button class='wldct-list-button'>"+n+"</button>"),i=t.prop("attributes");return $.each(i,function(){a.attr(this.name,this.value)}),a.bind("click",{buttonElem:a,selfInstance:this},this.ClickEvent),"false"==a.attr("isshow")&&a.hide(),a},RendererDataChain:function(e){var t=e.$singleControlElem.parents("[singlename='WLDCT_ListButtonContainer']").nextAll("[client_resolve='WLDCT_ListTableContainer']");this._ListTableContainerInstance=HTMLControl.GetControlInstanceByElem(t)},ClickEvent:function(e){var t=e.data.buttonElem,n=e.data.selfInstance,a=(t.attr("bindauthority"),t.attr("buttoncaption"),t.attr("buttontype"),t.attr("custclientclickbeforemethod"),t.attr("custclientclickbeforemethodpara"),t.attr("custclientrendereraftermethodpara"),t.attr("custclientrendereraftermethodparapara"),t.attr("custclientrenderermethod"),t.attr("custclientrenderermethodpara"),t.attr("custserverresolvemethod"),t.attr("custserverresolvemethodpara"),t.attr("id")),i=(t.attr("buttonid"),t.attr("opentype"),t.attr("operation")),r=(t.attr("singlename"),t.attr("windowcaption"),t.attr("client_resolve"),t.attr("isconfirm")),l=(t.attr("deletetableat"),t.attr("deletetype"),t.attr("confirmfield"),t.attr("confirmformat"),t.attr("binddatasetid")),o="";if("delete"==i){var s=n._ListTableContainerInstance.GetCheckedRecord();if(0==s.length)return void DialogUtility.AlertText("请选择需要进行操作的记录!");if(1<s.length)return void DialogUtility.AlertText("一次只能操作一条记录!");o=s[0].Id}"TRUE"==StringUtility.toUpperCase(r)&&DialogUtility.Confirm(window,"您确认要删除吗?",function(){RuntimeGeneralInstance.DeleteDataSetRecord(a,l,o,this)},this)}},WLDCT_FormButton={_ListTableContainerInstance:null,RendererChain:HTMLControl.RendererChain,ResolveSelf:function(e){var t=e.$singleControlElem,n=t.attr("buttoncaption"),a=$("<button class='wldct-list-button'>"+n+"</button>"),i=t.prop("attributes");return $.each(i,function(){a.attr(this.name,this.value)}),a.bind("click",{buttonElem:a,selfInstance:this},this.ClickEvent),"false"==a.attr("isshow")&&a.hide(),a},RendererDataChain:function(e){var t=e.$singleControlElem.parents("[singlename='WLDCT_ListButtonContainer']").nextAll("[client_resolve='WLDCT_ListTableContainer']");this._ListTableContainerInstance=HTMLControl.GetControlInstanceByElem(t)},ClickEvent:function(e){var t=e.data.buttonElem,n=e.data.selfInstance,a=(t.attr("bindauthority"),t.attr("buttoncaption"),t.attr("buttontype"),t.attr("custclientclickbeforemethod"),t.attr("custclientclickbeforemethodpara"),t.attr("custclientrendereraftermethodpara"),t.attr("custclientrendereraftermethodparapara"),t.attr("custclientrenderermethod"),t.attr("custclientrenderermethodpara"),t.attr("custserverresolvemethod"),t.attr("custserverresolvemethodpara"),t.attr("formcode"),t.attr("formid")),i=(t.attr("formmoduleid"),t.attr("formmodulename"),t.attr("formname"),t.attr("id")),r=t.attr("buttonid"),l=(t.attr("innerbuttonjsonstring"),t.attr("opentype"),t.attr("operation")),o=(t.attr("singlename"),t.attr("windowcaption")),s=t.attr("windowheight"),d=t.attr("windowwidth"),u=(t.attr("client_resolve"),"");if("update"==l||"view"==l){var c=n._ListTableContainerInstance.GetCheckedRecord();if(0==c.length)return void DialogUtility.AlertText("请选择需要进行操作的记录!");if(1<c.length)return void DialogUtility.AlertText("一次只能操作一条记录!");u=c[0].Id}var f=BaseUtility.GetUrlParaValue("menuRightUrlPara");DialogUtility.Frame_OpenIframeWindow(window,DialogUtility.DialogId,BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormRuntime.html",{formId:a,buttonId:r,listFormButtonElemId:i,recordId:u,operationType:l,windowWidth:d,windowHeight:s,menuRightUrlPara:f}),{width:d,height:s,title:o},1,!0)}},WLDCT_ListButtonContainer={_objectType:"Instance",_prop:{$singleControlElem:null,instanceName:null,elemId:null,status:null},RendererChain:function RendererChain(_rendererChainParas){var $singleControlElem=_rendererChainParas.$singleControlElem,$buttonDivElemList=$singleControlElem.find("div"+HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM);$singleControlElem.find("[is-op-button-wrap-table='true']").hide();for(var innerWrap=$singleControlElem.find(".wldct-list-button-inner-wrap"),innerInsideWrapDiv=$("<div class='wldct-list-button-inner-inside-wrap' />"),i=0;i<$buttonDivElemList.length;i++){var $buttonElem=$($buttonDivElemList[i]),clientResolveName=$buttonElem.attr(HTMLControlAttrs.CLIENT_RESOLVE),clientResolveObject=Object.create(eval(clientResolveName)),$resolvedElem=clientResolveObject.ResolveSelf({sourceHTML:_rendererChainParas.sourceHTML,$rootElem:_rendererChainParas.$rootElem,$parentControlElem:$singleControlElem,$singleControlElem:$buttonElem,allData:_rendererChainParas.allData});innerInsideWrapDiv.append($resolvedElem)}innerWrap.append(innerInsideWrapDiv),innerWrap.append('<div style="clear: both;"></div>'),("disable"==this._prop.status||RuntimeGeneralInstance.TryGetUrlParaViewOnly())&&$singleControlElem.hide()},RendererDataChain:HTMLControl.RendererDataChain},WLDCT_ListComplexSearchContainer={_objectType:"Instance",_prop:{$singleControlElem:null,instanceName:null,elemId:null,status:null},_$SingleControlElem:null,_$ComplexSearchButton:null,_$ClearButton:null,_$CloseButton:null,RendererChain:function(e){var t=e.$singleControlElem;(this._$SingleControlElem=t).hide(),t.find(".wldct-list-complex-search-inner-wrap").height("305px"),t.find(".wldct-list-complex-search-inner-wrap").css("overflow","auto"),t.find(".wldct-list-complex-search-inner-wrap").addClass("div-custom-scroll");var n=$("<div class='wldct-list-complex-search-button-inner-wrap'><div class='button-inner-wrap'></div></div>");this._$ComplexSearchButton=$("<button>查询</button>"),this._$ClearButton=$("<button>清空</button>"),this._$CloseButton=$("<button>关闭</button>"),n.find(".button-inner-wrap").append(this._$ComplexSearchButton).append(this._$ClearButton).append(this._$CloseButton),t.append(n)},RendererDataChain:HTMLControl.RendererDataChain,BuilderSearchCondition:function(){for(var e=[],t=this._$SingleControlElem.find(HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM),n=0;n<t.length;n++){var a=$(t[n]),i=HTMLControl.GetControlInstanceByElem(a).GetValue(a,{}).value;i&&e.push({operator:a.attr("columnoperator"),value:i,tableName:a.attr("columntablename"),fieldName:a.attr("columnname")})}return e},GetStatus:function(){var e=this._$SingleControlElem.attr("status");return""==e&&(e="enable"),e},Hide:function(){this._$SingleControlElem.hide()}},WLDCT_ListSimpleSearchContainer={_objectType:"Instance",_prop:{$singleControlElem:null,instanceName:null,elemId:null,status:null},_$SimpleSearchButton:null,_$ShowComplexSearchButton:null,_$SingleControlElem:null,RendererChain:function(e){var t=e.$singleControlElem;this._$SingleControlElem=t;var n=PageStyleUtility.GetPageWidth();t.find("table:first").width(n-200);var a=$("<div class='wldct-list-simple-search-button-inner-wrap' />");a.width(160),this._$SimpleSearchButton=$("<button>查询</button>"),this._$ShowComplexSearchButton=$("<button>高级查询</button>"),a.append(this._$SimpleSearchButton),a.append(this._$ShowComplexSearchButton),t.append(a),HTMLControl.RendererChain(e)},RendererDataChain:HTMLControl.RendererDataChain,BuilderSearchCondition:function(){var e=[],t=this._$SingleControlElem.find(HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM),n=this._$SingleControlElem.parent().find("[singlename='WLDCT_HideContainer']").find("[columnname][columnoperator]");$.merge(t,n);for(var a=0;a<t.length;a++){var i=$(t[a]),r=HTMLControl.GetControlInstanceByElem(i).GetValue(i,{}).value;r&&(r=StringUtility.Trim(r))&&e.push({operator:i.attr("columnoperator"),value:r,tableName:i.attr("columntablename"),fieldName:i.attr("columnname")})}return e},GetStatus:function(){var e=this._$SingleControlElem.attr("status");return""==e&&(e="enable"),e},Hide:function(){this._$SingleControlElem.hide()},HideComplexButton:function(){this._$ShowComplexSearchButton.remove(),this._$SimpleSearchButton.parent().width("80px");var e=PageStyleUtility.GetPageWidth();this._$SingleControlElem.find("table:first").width(e-120)}},WLDCT_ListTableCheckBox={RendererChain:HTMLControl.RendererChain,RendererDataChain:function(e){var t=e.val,n=e.$td;n.css("textAlign","center");var a=$('<input isrow_checkbox="true" type="checkbox" class="list-checkbox-c" value="'+t+'" row_checkbox_record_id="'+t+'">');a.bind("click",{selfInstance:this,$elem:a},this.ClickEvent),n.html(""),n.append(a)},ClickEvent:function(e){var t=e.data.$elem,n=WLDCT_ListTableContainer.__InnerElemGetInstance(t);t.prop("checked")?n.SaveCheckedRowData(t.val()):n.DeleteCheckedRowData(t.val())}},WLDCT_ListTableContainer={GetHTML:function(){return"<table id=\"example\" class=\"stripe row-border order-column\" style=\"width:100%\">\n        <thead>\n            <tr>\n                <th colspan='2'>First name</th>\n                <th>Position</th>\n                <th>Office</th>\n                <th colspan='2'>Age</th>\n                <th>Salary</th>\n                <th>Extn.</th>\n                <th>E-mail</th>\n            </tr>\n            <tr>\n                <th>First name</th>\n                <th>Last name</th>\n                <th>Position</th>\n                <th>Office</th>\n                <th>Age</th>\n                <th>Start date</th>\n                <th>Salary</th>\n                <th>Extn.</th>\n                <th>E-mail</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td><a onclick='alert(1)'>Tiger</a></td>\n                <td>Nixon</td>\n                <td>System Architect</td>\n                <td>Edinburgh</td>\n                <td>61</td>\n                <td>2011/04/25</td>\n                <td>$320,800</td>\n                <td>5421</td>\n                <td>t.nixon@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Garrett</td>\n                <td>Winters</td>\n                <td>Accountant</td>\n                <td>Tokyo</td>\n                <td>63</td>\n                <td>2011/07/25</td>\n                <td>$170,750</td>\n                <td>8422</td>\n                <td>g.winters@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Ashton</td>\n                <td>Cox</td>\n                <td>Junior Technical Author</td>\n                <td>San Francisco</td>\n                <td>66</td>\n                <td>2009/01/12</td>\n                <td>$86,000</td>\n                <td>1562</td>\n                <td>a.cox@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Cedric</td>\n                <td>Kelly</td>\n                <td>Senior Javascript Developer</td>\n                <td>Edinburgh</td>\n                <td>22</td>\n                <td>2012/03/29</td>\n                <td>$433,060</td>\n                <td>6224</td>\n                <td>c.kelly@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Airi</td>\n                <td>Satou</td>\n                <td>Accountant</td>\n                <td>Tokyo</td>\n                <td>33</td>\n                <td>2008/11/28</td>\n                <td>$162,700</td>\n                <td>5407</td>\n                <td>a.satou@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Brielle</td>\n                <td>Williamson</td>\n                <td>Integration Specialist</td>\n                <td>New York</td>\n                <td>61</td>\n                <td>2012/12/02</td>\n                <td>$372,000</td>\n                <td>4804</td>\n                <td>b.williamson@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Herrod</td>\n                <td>Chandler</td>\n                <td>Sales Assistant</td>\n                <td>San Francisco</td>\n                <td>59</td>\n                <td>2012/08/06</td>\n                <td>$137,500</td>\n                <td>9608</td>\n                <td>h.chandler@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Rhona</td>\n                <td>Davidson</td>\n                <td>Integration Specialist</td>\n                <td>Tokyo</td>\n                <td>55</td>\n                <td>2010/10/14</td>\n                <td>$327,900</td>\n                <td>6200</td>\n                <td>r.davidson@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Colleen</td>\n                <td>Hurst</td>\n                <td>Javascript Developer</td>\n                <td>San Francisco</td>\n                <td>39</td>\n                <td>2009/09/15</td>\n                <td>$205,500</td>\n                <td>2360</td>\n                <td>c.hurst@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Sonya</td>\n                <td>Frost</td>\n                <td>Software Engineer</td>\n                <td>Edinburgh</td>\n                <td>23</td>\n                <td>2008/12/13</td>\n                <td>$103,600</td>\n                <td>1667</td>\n                <td>s.frost@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Jena</td>\n                <td>Gaines</td>\n                <td>Office Manager</td>\n                <td>London</td>\n                <td>30</td>\n                <td>2008/12/19</td>\n                <td>$90,560</td>\n                <td>3814</td>\n                <td>j.gaines@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Quinn</td>\n                <td>Flynn</td>\n                <td>Support Lead</td>\n                <td>Edinburgh</td>\n                <td>22</td>\n                <td>2013/03/03</td>\n                <td>$342,000</td>\n                <td>9497</td>\n                <td>q.flynn@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Charde</td>\n                <td>Marshall</td>\n                <td>Regional Director</td>\n                <td>San Francisco</td>\n                <td>36</td>\n                <td>2008/10/16</td>\n                <td>$470,600</td>\n                <td>6741</td>\n                <td>c.marshall@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Haley</td>\n                <td>Kennedy</td>\n                <td>Senior Marketing Designer</td>\n                <td>London</td>\n                <td>43</td>\n                <td>2012/12/18</td>\n                <td>$313,500</td>\n                <td>3597</td>\n                <td>h.kennedy@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Tatyana</td>\n                <td>Fitzpatrick</td>\n                <td>Regional Director</td>\n                <td>London</td>\n                <td>19</td>\n                <td>2010/03/17</td>\n                <td>$385,750</td>\n                <td>1965</td>\n                <td>t.fitzpatrick@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Michael</td>\n                <td>Silva</td>\n                <td>Marketing Designer</td>\n                <td>London</td>\n                <td>66</td>\n                <td>2012/11/27</td>\n                <td>$198,500</td>\n                <td>1581</td>\n                <td>m.silva@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Charde</td>\n                <td>Marshall</td>\n                <td>Regional Director</td>\n                <td>San Francisco</td>\n                <td>36</td>\n                <td>2008/10/16</td>\n                <td>$470,600</td>\n                <td>6741</td>\n                <td>c.marshall@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Haley</td>\n                <td>Kennedy</td>\n                <td>Senior Marketing Designer</td>\n                <td>London</td>\n                <td>43</td>\n                <td>2012/12/18</td>\n                <td>$313,500</td>\n                <td>3597</td>\n                <td>h.kennedy@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Tatyana</td>\n                <td>Fitzpatrick</td>\n                <td>Regional Director</td>\n                <td>London</td>\n                <td>19</td>\n                <td>2010/03/17</td>\n                <td>$385,750</td>\n                <td>1965</td>\n                <td>t.fitzpatrick@datatables.net</td>\n            </tr>\n            <tr>\n                <td>Michael</td>\n                <td>Silva</td>\n                <td>Marketing Designer</td>\n                <td>London</td>\n                <td>66</td>\n                <td>2012/11/27</td>\n                <td>$198,500</td>\n                <td>1581</td>\n                <td>m.silva@datatables.net</td>\n            </tr>\n        </tbody>\n    </table>"},_objectType:"Instance",_prop:{$singleControlElem:null,instanceName:null,elemId:null},_InstanceMap:{},_CurrentPageNum:1,_DataSet:null,_Cache$SingleControlElem:null,_CacheRendererDataChainParas:null,_SimpleSearchContainerInstance:null,_ComplexSearchContainerInstance:null,_QueryPOList:[],_CheckedRecordArray:[],_$Elem:null,_ListRuntimeInstance:null,GetInstance:function GetInstance(name){for(var key in this._InstanceMap)if(key==name)return this._InstanceMap[key];var instance=eval(name);return this._InstanceMap[name]=instance,instance},Initialize:function(){},RendererChain:function(e){var t=e.$singleControlElem;this._ListRuntimeInstance=e.listRuntimeInstance;var n=(this._$Elem=t).prevAll("[client_resolve='WLDCT_ListSimpleSearchContainer']"),a=t.prevAll("[client_resolve='WLDCT_ListComplexSearchContainer']");this._SimpleSearchContainerInstance=HTMLControl.GetControlInstanceByElem(n),this._ComplexSearchContainerInstance=HTMLControl.GetControlInstanceByElem(a),this._SimpleSearchContainerInstance._$SimpleSearchButton.bind("click",{listInstance:this},this.SimpleSearchClickEvent),this._SimpleSearchContainerInstance._$ShowComplexSearchButton.bind("click",{listInstance:this},this.ShowComplexSearchClickEvent),this._ComplexSearchContainerInstance._$ComplexSearchButton.bind("click",{listInstance:this},this.ComplexSearchClickEvent),this._ComplexSearchContainerInstance._$ClearButton.bind("click",{listInstance:this},this.ComplexSearchClearClickEvent),this._ComplexSearchContainerInstance._$CloseButton.bind("click",{listInstance:this},this.ComplexSearchCloseClickEvent),"disable"==this._SimpleSearchContainerInstance.GetStatus()&&this._SimpleSearchContainerInstance.Hide(),"disable"==this._ComplexSearchContainerInstance.GetStatus()&&this._SimpleSearchContainerInstance.HideComplexButton();var i=t.find("table"),r=t.find("table tbody tr"),l=t.find("table thead tr");this.AppendCheckBoxColumnTemplate(i,l,r),HTMLControl.RendererChain(e)},RendererDataChain:function(t,e){var n,a;if(n=t.topDataSetId,a=t.po.listDatasetPageSize,RuntimeGeneralInstance.TryGetUrlParaChangeMainDataSetId()&&(n=RuntimeGeneralInstance.TryGetUrlParaChangeMainDataSetId()),this._CacheRendererDataChainParas||(this._CacheRendererDataChainParas=t,this._Cache$SingleControlElem=t.$singleControlElem.clone()),e){var i=StringUtility.RemoveScript(this._Cache$SingleControlElem.html());t.$singleControlElem.html(i)}else{var r=this._SimpleSearchContainerInstance.BuilderSearchCondition();this._QueryPOList=r}if(t.listRuntimeInstance.IsPreview()){var l={total:1e3,list:[],pageNum:1,pageSize:5,size:5,startRow:1,endRow:5,pages:200,prePage:0,nextPage:2,isFirstPage:!0,isLastPage:!1,hasPreviousPage:!1,hasNextPage:!0,navigatePages:8,navigatepageNums:[1,2,3,4,5,6,7,8],navigateFirstPage:1,navigateLastPage:8,firstPage:1,lastPage:8};this._DataSet=l,this.CreateTable(t.$singleControlElem,l,!0)}else DialogUtility.AlertLoading(window,DialogUtility.DialogLoadingId,{title:"系统提示",hide:{effect:"fade",duration:500}},"数据加载中,请稍候...."),RuntimeGeneralInstance.GetDataSetData({dataSetId:n,pageSize:a,pageNum:this._CurrentPageNum,listQueryPOList:this._QueryPOList,exValue1:"",exValue2:"",exValue3:""},function(e){t.dataSet=e.data,this._DataSet=e.data,this._CheckedRecordArray=[],this.CreateTable(t.$singleControlElem,this._DataSet,!1),window.setTimeout(function(){DialogUtility.CloseDialog(DialogUtility.DialogLoadingId)},500)},this)},CreateTable:function(e,t,n){var a=e.find("table"),i=e.find("table tbody tr");e.find("table thead tr");if(0<i.length){for(var r=e.find("table tbody"),l=0;l<t.list.length;l++)r.append(this.RendererSingleRow(a,i,t,t.list[l]));i.remove(),n&&a.find("[singlename='WLDCT_ListTableInnerButtonContainer']").remove()}e.find(".wldct-list-table-inner-wrap").append(this.CreatePaging()),e.find(".wldct-list-table-inner-wrap").width(PageStyleUtility.GetPageWidth()-20),a.addClass("stripe row-border order-column"),a.width("100%");var o=PageStyleUtility.GetPageHeight();o-=110,"none"!=$(".wldct-list-button-outer-wrap").css("display")&&(o=o-$(".wldct-list-button-outer-wrap").height()-12),"none"!=$(".wldct-list-simple-search-outer-wrap").css("display")&&(o=o-$(".wldct-list-simple-search-outer-wrap").height()-10),RuntimeGeneralInstance.TryGetUrlParaViewOnly()&&"操作"==e.find("tr").find("th:last").text()&&(e.find("tr").find("th:last").hide(),e.find("tr").find("td:last").hide());a.DataTable({scrollY:o,scrollX:!0,paging:!1,ordering:!1,searching:!1,info:!1})},AppendCheckBoxColumnTemplate:function(e,t,n){var a=$("<th style='width: 30px'>选择</th>");1<t.length&&a.attr("rowspan",t.length);var i=this._ListRuntimeInstance._ListPO.listDatasetPrimaryKey;$(t[0]).prepend(a),$(n.eq(0)).prepend('<td>\n                                    <div \n                                    columnalign="居中对齐" \n                                    columncaption='+i+' \n                                    columndatatypename="字符串" \n                                    columnname='+i+' \n                                    columntablename="" \n                                    control_category="InputControl" \n                                    custclientrenderermethod="" \n                                    custclientrenderermethodpara="" \n                                    custserverresolvemethod="" \n                                    custserverresolvemethodpara="" \n                                    defaulttext="" \n                                    defaulttype="" \n                                    defaultvalue="" \n                                    desc="" \n                                    id="check_box_template" \n                                    is_jbuild4dc_data="true" \n                                    jbuild4dc_custom="true" \n                                    name="check_box_template" \n                                    placeholder="" \n                                    serialize="true" \n                                    show_remove_button="true" \n                                    singlename="WLDCT_ListTableCheckBox" \n                                    style="" \n                                    targetbuttonid="" \n                                    client_resolve="WLDCT_ListTableCheckBox">\n                                        ID\n                                    </div>\n                                  </td>')},RendererSingleRow:function(e,t,n,a){for(var i=t.clone(),r=i.find("td"),l=0;l<r.length;l++){var o=$(r[l]),s=o.find("div"+HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM);if(0<s.length){var d=s.attr("columnname"),u=a[d]?a[d]:"",c=s.attr(HTMLControlAttrs.CLIENT_RESOLVE);WLDCT_ListTableContainer.GetInstance(c).RendererDataChain({$templateTable:e,$templateTableRow:t,$singleControlElem:s,dataSet:n,rowData:a,$cloneRow:i,$td:o,val:u,listRuntimeInstance:this._ListRuntimeInstance})}}return i},CreatePaging:function(e,t,n,a,i,r,l){var o=this,s=$("<div class='table-paging-outer'><div class='table-paging-inner'></div></div>"),d=s.find("div"),u=$("<div class='table-paging-button'>第一页</div>");u.click(function(){o.ChangePageNum(1)});var c=$("<div class='table-paging-button'>上一页</div>");c.click(function(){1<o._CurrentPageNum?o.ChangePageNum(o._CurrentPageNum-1):DialogUtility.AlertText("已经到达第一页!")});var f=$("<div class='table-paging-button'>末页</div>");f.click(function(){o.ChangePageNum(o._DataSet.pages)});var h=$("<div class='table-paging-button'>下一页</div>");h.click(function(){o._CurrentPageNum<o._DataSet.pages?o.ChangePageNum(o._CurrentPageNum+1):DialogUtility.AlertText("已经到达最末页!")});var p=$("<div class='table-paging-info'>总条数【"+o._DataSet.total+"】&nbsp;&nbsp;页数【"+o._CurrentPageNum+"/"+o._DataSet.pages+"】</div>");return d.append(u).append(c).append(h).append(f).append(p),s},ChangePageNum:function(e){this._CurrentPageNum=e,this.RendererDataChain(this._CacheRendererDataChainParas,!0)},TryReloadForListFormButton:function(e){var t=$("#"+e).parentsUntil("[singlename='WLDCT_ListTemplate']").last().parent().find("[singlename='WLDCT_ListTableContainer']"),n=HTMLControl.GetControlInstanceByElem(t);n.RendererDataChain(n._CacheRendererDataChainParas,!0)},SimpleSearchClickEvent:function(e){var t=e.data.listInstance,n=t._SimpleSearchContainerInstance.BuilderSearchCondition();t._QueryPOList=n,t.RendererDataChain(t._CacheRendererDataChainParas,!0)},ShowComplexSearchClickEvent:function(e){var t=e.data.listInstance;DialogUtility.DialogElemObj(t._ComplexSearchContainerInstance._$SingleControlElem,{title:"高级查询",height:410,width:800,modal:!0})},ComplexSearchClickEvent:function(e){console.log("高级查询.");var t=e.data.listInstance,n=t._SimpleSearchContainerInstance.BuilderSearchCondition(),a=t._ComplexSearchContainerInstance.BuilderSearchCondition();t._QueryPOList=a.concat(n),t.RendererDataChain(t._CacheRendererDataChainParas,!0),DialogUtility.CloseDialogElem(t._ComplexSearchContainerInstance._$SingleControlElem)},ComplexSearchCloseClickEvent:function(e){var t=e.data.listInstance;DialogUtility.CloseDialogElem(t._ComplexSearchContainerInstance._$SingleControlElem)},ComplexSearchClearClickEvent:function(e){e.data.listInstance;DialogUtility.AlertText("未实现!")},GetRecordData:function(e){var t=this._ListRuntimeInstance.GetPrimaryKey();if(this._ListRuntimeInstance.CheckPrimaryKeyInDataSet(this._DataSet,t)){console.log("主键为:"+t);for(var n=0;n<this._DataSet.list.length;n++){var a=this._DataSet.list[n];if(a[t]==e)return a}return DialogUtility.AlertText("找不到主键"+t+"为:"+e+"的记录!"),null}DialogUtility.AlertText("数据集中找不到主键:"+t+",请设置配置是否正确!")},SaveCheckedRowData:function(e){var t=this.GetRecordData(e);null!=t&&this._CheckedRecordArray.push({Id:e,Record:t})},DeleteCheckedRowData:function(e){for(var t=0;t<this._CheckedRecordArray.length;t++)this._CheckedRecordArray[t].Id==e&&ArrayUtility.Delete(this._CheckedRecordArray,t)},GetCheckedRecord:function(){return this._CheckedRecordArray},GetLastCheckedRecord:function(){return 0<this._CheckedRecordArray.length?this._CheckedRecordArray[this._CheckedRecordArray.length-1]:null},ClearAllCheckBox:function(){this._$Elem.find(":checkbox").prop("checked",!1),this._CheckedRecordArray=[]},SetCheckBoxToCheckedStatus:function(e){this._$Elem.find("[row_checkbox_record_id='"+e+"']:checkbox").prop("checked",!0),this.SaveCheckedRowData(e)},__InnerElemGetInstance:function(e){var t=e.parents("[singlename='WLDCT_ListTableContainer']");return HTMLControl.GetControlInstanceByElem(t)}},WLDCT_ListTableInnerButtonContainer={RendererChain:function(e){var t=e.$singleControlElem,n=t.find("div"+HTMLControlAttrs.SELECTED_JBUILD4DC_CUSTOM);t.html(""),t.append(n)},RendererDataChain:HTMLControl.RendererDataChain},WLDCT_ListTableInnerButtonSingle={RendererChain:function(e){},_ListRuntimeInstance:null,RendererDataChain:function(e){var t=e.$singleControlElem;this._ListRuntimeInstance=e.listRuntimeInstance,t.bind("click",{selfInstance:this,$elem:t,rowData:e.rowData},this.ClickEvent),t.html(""),t.attr("title",t.attr("caption"))},ClickEvent:function(e){var t=e.data.$elem,n=t.attr("targetbuttonid"),a=t.parentsUntil("[singlename='WLDCT_ListTableContainer']").last().parent(),i=HTMLControl.GetControlInstanceByElem(a);i.ClearAllCheckBox();var r=e.data.selfInstance._ListRuntimeInstance.GetPrimaryKey();i.SetCheckBoxToCheckedStatus(e.data.rowData[r]),console.log(n),$("button#"+n).trigger("click"),console.log(i)}},WLDCT_ListTableLabel={_objectType:"Static",_propMap:{},_prop:{$singleControlElem:null,instanceName:null,elemId:null,columnAlign:null,defFormat:null,targetButtonId:null,dictionaryGroupDataSourceId:null,omitLength:null},RendererChain:HTMLControl.RendererChain,RendererDataChain:function(e){var t=e.$singleControlElem,n=e.val,a=t.attr("id"),i=this._propMap[a];i._ListRuntimeInstance=e.listRuntimeInstance;var r=e.$td;if("居中对齐"==i.columnAlign?r.css("textAlign","center"):"左对齐"==i.columnAlign&&r.css("textAlign","left"),"yyyy-MM-dd"==i.defFormat){if(n){var l=DateUtility.ConvertFromString(n);n=DateUtility.Format(l,i.defFormat)}}else if("convertOrganIdToOrganName"==i.defFormat){if(StringUtility.IsNotNullOrEmpty(n)){var o=e.listRuntimeInstance._ListPO.exData.minOrganData[n];if(null!=o&&null!=o)n=o.organName}}else if("convertDDValueToDDText"==i.defFormat&&StringUtility.IsNotNullOrEmpty(n)&&i.dictionaryGroupDataSourceId){var s=i.dictionaryGroupDataSourceId+"_"+n;n=e.listRuntimeInstance._ListPO.exData.minDictionaryData[s].TEXT}if(i.targetButtonId&&(r.addClass("list-td-click-enable"),r.bind("click",{prop:i,rowData:e.rowData},this.ClickEvent)),i.omitLength&&n){var d=parseInt(i.omitLength);n.length>d&&(n=n.substring(0,d)+"...")}r.html(n)},ClickEvent:function(e){var t=e.data.prop,n=e.data.rowData,a=t.targetButtonId,i=$(this).parentsUntil("[singlename='WLDCT_ListTableContainer']").last().parent(),r=HTMLControl.GetControlInstanceByElem(i);r.ClearAllCheckBox();var l=t._ListRuntimeInstance.GetPrimaryKey();r.SetCheckBoxToCheckedStatus(n[l]),console.log(a),$("button#"+a).trigger("click"),console.log(r)}},WLDCT_PrintButton={_ListTableContainerInstance:null,RendererChain:HTMLControl.RendererChain,ResolveSelf:function(e){var t=e.$singleControlElem,n=t.attr("buttoncaption"),a=$("<button class='wldct-list-button'>"+n+"</button>"),i=t.prop("attributes");return $.each(i,function(){a.attr(this.name,this.value)}),a.bind("click",{buttonElem:a,selfInstance:this},this.ClickEvent),"false"==a.attr("isshow")&&a.hide(),a},RendererDataChain:function(e){var t=e.$singleControlElem.parents("[singlename='WLDCT_ListButtonContainer']").nextAll("[client_resolve='WLDCT_ListTableContainer']");this._ListTableContainerInstance=HTMLControl.GetControlInstanceByElem(t)},ClickEvent:function(e){var t=e.data.buttonElem,n=e.data.selfInstance,a=(t.attr("bindauthority"),t.attr("buttoncaption"),t.attr("buttontype"),t.attr("custclientclickbeforemethod"),t.attr("custclientclickbeforemethodpara"),t.attr("custclientrendereraftermethodpara"),t.attr("custclientrendereraftermethodparapara"),t.attr("custclientrenderermethod"),t.attr("custclientrenderermethodpara"),t.attr("custserverresolvemethod"),t.attr("custserverresolvemethodpara"),t.attr("formcode"),t.attr("formid")),i=(t.attr("formmoduleid"),t.attr("formmodulename"),t.attr("formname"),t.attr("id")),r=t.attr("buttonid"),l=(t.attr("innerbuttonjsonstring"),t.attr("opentype"),t.attr("operation")),o=(t.attr("singlename"),t.attr("windowcaption"),t.attr("windowheight")),s=t.attr("windowwidth"),d=(t.attr("client_resolve"),"");if("update"==l||"view"==l){var u=n._ListTableContainerInstance.GetCheckedRecord();if(0==u.length)return void DialogUtility.AlertText("请选择需要进行操作的记录!");if(1<u.length)return void DialogUtility.AlertText("一次只能操作一条记录!");d=u[0].Id}var c=BaseUtility.GetUrlParaValue("menuRightUrlPara"),f=BaseUtility.BuildView("/HTML/Builder/Runtime/WebFormRuntimePrint.html",{formId:a,buttonId:r,listFormButtonElemId:i,recordId:d,operationType:l,windowWidth:s,windowHeight:o,menuRightUrlPara:c});DialogUtility.OpenNewTabWindow(f)}},WLDCT_Search_DropDownSelect={RendererChain:function(e){},RendererDataChain:function(e){e.$singleControlElem},GetValue:HTMLControl.GetValue,TryBindUrlValue:HTMLControl.TryBindUrlValue},WLDCT_Search_TextBox={RendererChain:HTMLControl.RendererChain,RendererDataChain:HTMLControl.RendererDataChain,GetValue:HTMLControl.GetValue,TryBindUrlValue:HTMLControl.TryBindUrlValue},WLDCT_Search_TextDateTime={RendererChain:HTMLControl.RendererChain,RendererDataChain:HTMLControl.RendererDataChain,GetValue:HTMLControl.GetValue,TryBindUrlValue:HTMLControl.TryBindUrlValue};function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(n){"function"==typeof define&&define.amd?define(["jquery","datatables.net"],function(e){return n(e,window,document)}):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=function(e,t){return e||(e=window),t&&t.fn.dataTable||(t=require("datatables.net")(e,t).$),n(t,e,e.document)}:n(jQuery,window,document)}(function(v,s,d,S){var t,r=v.fn.dataTable,u=function e(t,n){var a=this;if(this instanceof e){n!==S&&!0!==n||(n={});var i=v.fn.dataTable.camelToHungarian;i&&(i(e.defaults,e.defaults,!0),i(e.defaults,n));var r=new v.fn.dataTable.Api(t).settings()[0];if(this.s={dt:r,iTableColumns:r.aoColumns.length,aiOuterWidths:[],aiInnerWidths:[],rtl:"rtl"===v(r.nTable).css("direction")},this.dom={scroller:null,header:null,body:null,footer:null,grid:{wrapper:null,dt:null,left:{wrapper:null,head:null,body:null,foot:null},right:{wrapper:null,head:null,body:null,foot:null}},clone:{left:{header:null,body:null,footer:null},right:{header:null,body:null,footer:null}}},r._oFixedColumns)throw"FixedColumns already initialised on this table";r._oFixedColumns=this,r._bInitComplete?this._fnConstruct(n):r.oApi._fnCallbackReg(r,"aoInitComplete",function(){a._fnConstruct(n)},"FixedColumns")}else alert("FixedColumns warning: FixedColumns must be initialised with the 'new' keyword.")};return v.extend(u.prototype,{fnUpdate:function(){this._fnDraw(!0)},fnRedrawLayout:function(){this._fnColCalc(),this._fnGridLayout(),this.fnUpdate()},fnRecalculateHeight:function(e){delete e._DTTC_iHeight,e.style.height="auto"},fnSetRowHeight:function(e,t){e.style.height=t+"px"},fnGetPosition:function(e){var t,n=this.s.dt.oInstance;if(v(e).parents(".DTFC_Cloned").length){if("tr"===e.nodeName.toLowerCase())return t=v(e).index(),n.fnGetPosition(v("tr",this.s.dt.nTBody)[t]);var a=v(e).index();return t=v(e.parentNode).index(),[n.fnGetPosition(v("tr",this.s.dt.nTBody)[t]),a,n.oApi._fnVisibleToColumnIndex(this.s.dt,a)]}return n.fnGetPosition(e)},_fnConstruct:function(e){var r=this;if("function"==typeof this.s.dt.oInstance.fnVersionCheck&&!0===this.s.dt.oInstance.fnVersionCheck("1.8.0"))if(""!==this.s.dt.oScroll.sX){this.s=v.extend(!0,this.s,u.defaults,e);var t,n=this.s.dt.oClasses;this.dom.grid.dt=v(this.s.dt.nTable).parents("div."+n.sScrollWrapper)[0],this.dom.scroller=v("div."+n.sScrollBody,this.dom.grid.dt)[0],this._fnColCalc(),this._fnGridSetup();var a=!1;v(this.s.dt.nTableWrapper).on("mousedown.DTFC",function(e){0===e.button&&(a=!0,v(d).one("mouseup",function(){a=!1}))}),v(this.dom.scroller).on("mouseover.DTFC touchstart.DTFC",function(){a||(t="main")}).on("scroll.DTFC",function(e){!t&&e.originalEvent&&(t="main"),"main"===t&&(0<r.s.iLeftColumns&&(r.dom.grid.left.liner.scrollTop=r.dom.scroller.scrollTop),0<r.s.iRightColumns&&(r.dom.grid.right.liner.scrollTop=r.dom.scroller.scrollTop))});var i="onwheel"in d.createElement("div")?"wheel.DTFC":"mousewheel.DTFC";0<r.s.iLeftColumns&&v(r.dom.grid.left.liner).on("mouseover.DTFC touchstart.DTFC",function(){a||(t="left")}).on("scroll.DTFC",function(e){!t&&e.originalEvent&&(t="left"),"left"===t&&(r.dom.scroller.scrollTop=r.dom.grid.left.liner.scrollTop,0<r.s.iRightColumns&&(r.dom.grid.right.liner.scrollTop=r.dom.grid.left.liner.scrollTop))}).on(i,function(e){var t="wheel"===e.type?-e.originalEvent.deltaX:e.originalEvent.wheelDeltaX;r.dom.scroller.scrollLeft-=t}),0<r.s.iRightColumns&&v(r.dom.grid.right.liner).on("mouseover.DTFC touchstart.DTFC",function(){a||(t="right")}).on("scroll.DTFC",function(e){!t&&e.originalEvent&&(t="right"),"right"===t&&(r.dom.scroller.scrollTop=r.dom.grid.right.liner.scrollTop,0<r.s.iLeftColumns&&(r.dom.grid.left.liner.scrollTop=r.dom.grid.right.liner.scrollTop))}).on(i,function(e){var t="wheel"===e.type?-e.originalEvent.deltaX:e.originalEvent.wheelDeltaX;r.dom.scroller.scrollLeft-=t}),v(s).on("resize.DTFC",function(){r._fnGridLayout.call(r)});var l=!0,o=v(this.s.dt.nTable);o.on("draw.dt.DTFC",function(){r._fnColCalc(),r._fnDraw.call(r,l),l=!1}).on("column-sizing.dt.DTFC",function(){r._fnColCalc(),r._fnGridLayout(r)}).on("column-visibility.dt.DTFC",function(e,t,n,a,i){(i===S||i)&&(r._fnColCalc(),r._fnGridLayout(r),r._fnDraw(!0))}).on("select.dt.DTFC deselect.dt.DTFC",function(e,t,n,a){"dt"===e.namespace&&r._fnDraw(!1)}).on("destroy.dt.DTFC",function(){o.off(".DTFC"),v(r.dom.scroller).off(".DTFC"),v(s).off(".DTFC"),v(r.s.dt.nTableWrapper).off(".DTFC"),v(r.dom.grid.left.liner).off(".DTFC "+i),v(r.dom.grid.left.wrapper).remove(),v(r.dom.grid.right.liner).off(".DTFC "+i),v(r.dom.grid.right.wrapper).remove()}),this._fnGridLayout(),this.s.dt.oInstance.fnDraw(!1)}else this.s.dt.oInstance.oApi._fnLog(this.s.dt,1,"FixedColumns is not needed (no x-scrolling in DataTables enabled), so no action will be taken. Use 'FixedHeader' for column fixing when scrolling is not enabled");else alert("FixedColumns "+u.VERSION+" required DataTables 1.8.0 or later. Please upgrade your DataTables installation")},_fnColCalc:function(){var r=this,l=0,o=0;this.s.aiInnerWidths=[],this.s.aiOuterWidths=[],v.each(this.s.dt.aoColumns,function(e,t){var n,a=v(t.nTh);if(a.filter(":visible").length){var i=a.outerWidth();0===r.s.aiOuterWidths.length&&(i+="string"==typeof(n=v(r.s.dt.nTable).css("border-left-width"))&&-1===n.indexOf("px")?1:parseInt(n,10)),r.s.aiOuterWidths.length===r.s.dt.aoColumns.length-1&&(i+="string"==typeof(n=v(r.s.dt.nTable).css("border-right-width"))&&-1===n.indexOf("px")?1:parseInt(n,10)),r.s.aiOuterWidths.push(i),r.s.aiInnerWidths.push(a.width()),e<r.s.iLeftColumns&&(l+=i),r.s.iTableColumns-r.s.iRightColumns<=e&&(o+=i)}else r.s.aiInnerWidths.push(0),r.s.aiOuterWidths.push(0)}),this.s.iLeftWidth=l,this.s.iRightWidth=o},_fnGridSetup:function(){var e,t=this._fnDTOverflow();this.dom.body=this.s.dt.nTable,this.dom.header=this.s.dt.nTHead.parentNode,this.dom.header.parentNode.parentNode.style.position="relative";var n=v('<div class="DTFC_ScrollWrapper" style="position:relative; clear:both;"><div class="DTFC_LeftWrapper" style="position:absolute; top:0; left:0;" aria-hidden="true"><div class="DTFC_LeftHeadWrapper" style="position:relative; top:0; left:0; overflow:hidden;"></div><div class="DTFC_LeftBodyWrapper" style="position:relative; top:0; left:0; overflow:hidden;"><div class="DTFC_LeftBodyLiner" style="position:relative; top:0; left:0; overflow-y:scroll;"></div></div><div class="DTFC_LeftFootWrapper" style="position:relative; top:0; left:0; overflow:hidden;"></div></div><div class="DTFC_RightWrapper" style="position:absolute; top:0; right:0;" aria-hidden="true"><div class="DTFC_RightHeadWrapper" style="position:relative; top:0; left:0;"><div class="DTFC_RightHeadBlocker DTFC_Blocker" style="position:absolute; top:0; bottom:0;"></div></div><div class="DTFC_RightBodyWrapper" style="position:relative; top:0; left:0; overflow:hidden;"><div class="DTFC_RightBodyLiner" style="position:relative; top:0; left:0; overflow-y:scroll;"></div></div><div class="DTFC_RightFootWrapper" style="position:relative; top:0; left:0;"><div class="DTFC_RightFootBlocker DTFC_Blocker" style="position:absolute; top:0; bottom:0;"></div></div></div></div>')[0],a=n.childNodes[0],i=n.childNodes[1];this.dom.grid.dt.parentNode.insertBefore(n,this.dom.grid.dt),n.appendChild(this.dom.grid.dt),this.dom.grid.wrapper=n,0<this.s.iLeftColumns&&(this.dom.grid.left.wrapper=a,this.dom.grid.left.head=a.childNodes[0],this.dom.grid.left.body=a.childNodes[1],this.dom.grid.left.liner=v("div.DTFC_LeftBodyLiner",n)[0],n.appendChild(a)),0<this.s.iRightColumns&&(this.dom.grid.right.wrapper=i,this.dom.grid.right.head=i.childNodes[0],this.dom.grid.right.body=i.childNodes[1],this.dom.grid.right.liner=v("div.DTFC_RightBodyLiner",n)[0],i.style.right=t.bar+"px",(e=v("div.DTFC_RightHeadBlocker",n)[0]).style.width=t.bar+"px",e.style.right=-t.bar+"px",this.dom.grid.right.headBlock=e,(e=v("div.DTFC_RightFootBlocker",n)[0]).style.width=t.bar+"px",e.style.right=-t.bar+"px",this.dom.grid.right.footBlock=e,n.appendChild(i)),this.s.dt.nTFoot&&(this.dom.footer=this.s.dt.nTFoot.parentNode,0<this.s.iLeftColumns&&(this.dom.grid.left.foot=a.childNodes[2]),0<this.s.iRightColumns&&(this.dom.grid.right.foot=i.childNodes[2])),this.s.rtl&&v("div.DTFC_RightHeadBlocker",n).css({left:-t.bar+"px",right:""})},_fnGridLayout:function(){var e,n=this,t=this.dom.grid,a=(v(t.wrapper).width(),this.s.dt.nTable.parentNode.offsetHeight),i=this.s.dt.nTable.parentNode.parentNode.offsetHeight,r=this._fnDTOverflow(),l=this.s.iLeftWidth,o=this.s.iRightWidth,s="rtl"===v(this.dom.body).css("direction"),d=function(e,t){r.bar?n._firefoxScrollError()?34<v(e).height()&&(e.style.width=t+r.bar+"px"):e.style.width=t+r.bar+"px":(e.style.width=t+20+"px",e.style.paddingRight="20px",e.style.boxSizing="border-box")};r.x&&(a-=r.bar),t.wrapper.style.height=i+"px",0<this.s.iLeftColumns&&((e=t.left.wrapper).style.width=l+"px",e.style.height="1px",e.style.right=s?(e.style.left="",0):(e.style.left=0,""),t.left.body.style.height=a+"px",t.left.foot&&(t.left.foot.style.top=(r.x?r.bar:0)+"px"),d(t.left.liner,l),t.left.liner.style.height=a+"px",t.left.liner.style.maxHeight=a+"px"),0<this.s.iRightColumns&&((e=t.right.wrapper).style.width=o+"px",e.style.height="1px",this.s.rtl?(e.style.left=r.y?r.bar+"px":0,e.style.right=""):(e.style.left="",e.style.right=r.y?r.bar+"px":0),t.right.body.style.height=a+"px",t.right.foot&&(t.right.foot.style.top=(r.x?r.bar:0)+"px"),d(t.right.liner,o),t.right.liner.style.height=a+"px",t.right.liner.style.maxHeight=a+"px",t.right.headBlock.style.display=r.y?"block":"none",t.right.footBlock.style.display=r.y?"block":"none")},_fnDTOverflow:function(){var e=this.s.dt.nTable,t=e.parentNode,n={x:!1,y:!1,bar:this.s.dt.oScroll.iBarWidth};return e.offsetWidth>t.clientWidth&&(n.x=!0),e.offsetHeight>t.clientHeight&&(n.y=!0),n},_fnDraw:function(e){this._fnGridLayout(),this._fnCloneLeft(e),this._fnCloneRight(e),null!==this.s.fnDrawCallback&&this.s.fnDrawCallback.call(this,this.dom.clone.left,this.dom.clone.right),v(this).trigger("draw.dtfc",{leftClone:this.dom.clone.left,rightClone:this.dom.clone.right})},_fnCloneRight:function(e){if(!(this.s.iRightColumns<=0)){var t,n=[];for(t=this.s.iTableColumns-this.s.iRightColumns;t<this.s.iTableColumns;t++)this.s.dt.aoColumns[t].bVisible&&n.push(t);this._fnClone(this.dom.clone.right,this.dom.grid.right,n,e)}},_fnCloneLeft:function(e){if(!(this.s.iLeftColumns<=0)){var t,n=[];for(t=0;t<this.s.iLeftColumns;t++)this.s.dt.aoColumns[t].bVisible&&n.push(t);this._fnClone(this.dom.clone.left,this.dom.grid.left,n,e)}},_fnCopyLayout:function(e,t,n){for(var a=[],i=[],r=[],l=0,o=e.length;l<o;l++){var s=[];s.nTr=v(e[l].nTr).clone(n,!1)[0];for(var d=0,u=this.s.iTableColumns;d<u;d++)if(-1!==v.inArray(d,t)){var c=v.inArray(e[l][d].cell,r);if(-1===c){var f=v(e[l][d].cell).clone(n,!1)[0];i.push(f),r.push(e[l][d].cell),s.push({cell:f,unique:e[l][d].unique})}else s.push({cell:i[c],unique:e[l][d].unique})}a.push(s)}return a},_fnClone:function(e,t,i,n){var a,r,l,o,s,d,u,c,f,h,p=this,m=this.s.dt;if(n){for(v(e.header).remove(),e.header=v(this.dom.header).clone(!0,!1)[0],e.header.className+=" DTFC_Cloned",e.header.style.width="100%",t.head.appendChild(e.header),c=this._fnCopyLayout(m.aoHeader,i,!0),(f=v(">thead",e.header)).empty(),a=0,r=c.length;a<r;a++)f[0].appendChild(c[a].nTr);m.oApi._fnDrawHead(m,c,!0)}else for(c=this._fnCopyLayout(m.aoHeader,i,!1),h=[],m.oApi._fnDetectHeader(h,v(">thead",e.header)[0]),a=0,r=c.length;a<r;a++)for(l=0,o=c[a].length;l<o;l++)h[a][l].cell.className=c[a][l].cell.className,v("span.DataTables_sort_icon",h[a][l].cell).each(function(){this.className=v("span.DataTables_sort_icon",c[a][l].cell)[0].className});this._fnEqualiseHeights("thead",this.dom.header,e.header),"auto"==this.s.sHeightMatch&&v(">tbody>tr",p.dom.body).css("height","auto"),null!==e.body&&(v(e.body).remove(),e.body=null),e.body=v(this.dom.body).clone(!0)[0],e.body.className+=" DTFC_Cloned",e.body.style.paddingBottom=m.oScroll.iBarWidth+"px",e.body.style.marginBottom=2*m.oScroll.iBarWidth+"px",null!==e.body.getAttribute("id")&&e.body.removeAttribute("id"),v(">thead>tr",e.body).empty(),v(">tfoot",e.body).remove();var T=v("tbody",e.body)[0];if(v(T).empty(),0<m.aiDisplay.length){var g=v(">thead>tr",e.body)[0];for(u=0;u<i.length;u++){s=i[u],(d=v(m.aoColumns[s].nTh).clone(!0)[0]).innerHTML="";var _=d.style;_.paddingTop="0",_.paddingBottom="0",_.borderTopWidth="0",_.borderBottomWidth="0",_.height=0,_.width=p.s.aiInnerWidths[s]+"px",g.appendChild(d)}v(">tbody>tr",p.dom.body).each(function(e){var t=!1===p.s.dt.oFeatures.bServerSide?p.s.dt.aiDisplay[p.s.dt._iDisplayStart+e]:e,n=p.s.dt.aoData[t].anCells||v(this).children("td, th"),a=this.cloneNode(!1);for(a.removeAttribute("id"),a.setAttribute("data-dt-row",t),u=0;u<i.length;u++)s=i[u],0<n.length&&((d=v(n[s]).clone(!0,!0)[0]).removeAttribute("id"),d.setAttribute("data-dt-row",t),d.setAttribute("data-dt-column",s),a.appendChild(d));T.appendChild(a)})}else v(">tbody>tr",p.dom.body).each(function(e){(d=this.cloneNode(!0)).className+=" DTFC_NoData",v("td",d).html(""),T.appendChild(d)});if(e.body.style.width="100%",e.body.style.margin="0",e.body.style.padding="0",m.oScroller!==S){var b=m.oScroller.dom.force;t.forcer?t.forcer.style.height=b.style.height:(t.forcer=b.cloneNode(!0),t.liner.appendChild(t.forcer))}if(t.liner.appendChild(e.body),this._fnEqualiseHeights("tbody",p.dom.body,e.body),null!==m.nTFoot){if(n){null!==e.footer&&e.footer.parentNode.removeChild(e.footer),e.footer=v(this.dom.footer).clone(!0,!0)[0],e.footer.className+=" DTFC_Cloned",e.footer.style.width="100%",t.foot.appendChild(e.footer),c=this._fnCopyLayout(m.aoFooter,i,!0);var C=v(">tfoot",e.footer);for(C.empty(),a=0,r=c.length;a<r;a++)C[0].appendChild(c[a].nTr);m.oApi._fnDrawHead(m,c,!0)}else{c=this._fnCopyLayout(m.aoFooter,i,!1);var y=[];for(m.oApi._fnDetectHeader(y,v(">tfoot",e.footer)[0]),a=0,r=c.length;a<r;a++)for(l=0,o=c[a].length;l<o;l++)y[a][l].cell.className=c[a][l].cell.className}this._fnEqualiseHeights("tfoot",this.dom.footer,e.footer)}var D=m.oApi._fnGetUniqueThs(m,v(">thead",e.header)[0]);v(D).each(function(e){s=i[e],this.style.width=p.s.aiInnerWidths[s]+"px"}),null!==p.s.dt.nTFoot&&(D=m.oApi._fnGetUniqueThs(m,v(">tfoot",e.footer)[0]),v(D).each(function(e){s=i[e],this.style.width=p.s.aiInnerWidths[s]+"px"}))},_fnGetTrNodes:function(e){for(var t=[],n=0,a=e.childNodes.length;n<a;n++)"TR"==e.childNodes[n].nodeName.toUpperCase()&&t.push(e.childNodes[n]);return t},_fnEqualiseHeights:function(e,t,n){if("none"!=this.s.sHeightMatch||"thead"===e||"tfoot"===e){var a,i,r,l,o,s=t.getElementsByTagName(e)[0],d=n.getElementsByTagName(e)[0],u=v(">"+e+">tr:eq(0)",t).children(":first"),c=(u.outerHeight(),u.height(),this._fnGetTrNodes(s)),f=this._fnGetTrNodes(d),h=[];for(a=0,i=f.length;a<i;a++)r=(l=c[a].offsetHeight)<(o=f[a].offsetHeight)?o:l,"semiauto"==this.s.sHeightMatch&&(c[a]._DTTC_iHeight=r),h.push(r);for(a=0,i=f.length;a<i;a++)f[a].style.height=h[a]+"px",c[a].style.height=h[a]+"px"}},_firefoxScrollError:function(){if(t===S){var e=v("<div/>").css({position:"absolute",top:0,left:0,height:10,width:50,overflow:"scroll"}).appendTo("body");t=e[0].clientWidth===e[0].offsetWidth&&0!==this._fnDTOverflow().bar,e.remove()}return t}}),u.defaults={iLeftColumns:1,iRightColumns:0,fnDrawCallback:null,sHeightMatch:"semiauto"},u.version="3.2.5",r.Api.register("fixedColumns()",function(){return this}),r.Api.register("fixedColumns().update()",function(){return this.iterator("table",function(e){e._oFixedColumns&&e._oFixedColumns.fnUpdate()})}),r.Api.register("fixedColumns().relayout()",function(){return this.iterator("table",function(e){e._oFixedColumns&&e._oFixedColumns.fnRedrawLayout()})}),r.Api.register("rows().recalcHeight()",function(){return this.iterator("row",function(e,t){e._oFixedColumns&&e._oFixedColumns.fnRecalculateHeight(this.row(t).node())})}),r.Api.register("fixedColumns().rowIndex()",function(e){return(e=v(e)).parents(".DTFC_Cloned").length?this.rows({page:"current"}).indexes()[e.index()]:this.row(e).index()}),r.Api.register("fixedColumns().cellIndex()",function(e){if((e=v(e)).parents(".DTFC_Cloned").length){var t,n=e.parent().index(),a=this.rows({page:"current"}).indexes()[n];if(e.parents(".DTFC_LeftWrapper").length)t=e.index();else t=this.columns().flatten().length-this.context[0]._oFixedColumns.s.iRightColumns+e.index();return{row:a,column:this.column.index("toData",t),columnVisible:t}}return this.cell(e).index()}),v(d).on("init.dt.fixedColumns",function(e,t){if("dt"===e.namespace){var n=t.oInit.fixedColumns,a=r.defaults.fixedColumns;if(n||a){var i=v.extend({},n,a);!1!==n&&new u(t,i)}}}),v.fn.dataTable.FixedColumns=u,v.fn.DataTable.FixedColumns=u}),function(n){"function"==typeof define&&define.amd?define(["jquery","datatables.net"],function(e){return n(e,window,document)}):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=function(e,t){return e||(e=window),t&&t.fn.dataTable||(t=require("datatables.net")(e,t).$),n(t,e,e.document)}:n(jQuery,window,document)}(function(o,i,s,r){var l=o.fn.dataTable,d=0,u=function e(t,n){if(!(this instanceof e))throw"FixedHeader must be initialised with the 'new' keyword.";!0===n&&(n={}),t=new l.Api(t),this.c=o.extend(!0,{},e.defaults,n),this.s={dt:t,position:{theadTop:0,tbodyTop:0,tfootTop:0,tfootBottom:0,width:0,left:0,tfootHeight:0,theadHeight:0,windowHeight:o(i).height(),visible:!0},headerMode:null,footerMode:null,autoWidth:t.settings()[0].oFeatures.bAutoWidth,namespace:".dtfc"+d++,scrollLeft:{header:-1,footer:-1},enable:!0},this.dom={floatingHeader:null,thead:o(t.table().header()),tbody:o(t.table().body()),tfoot:o(t.table().footer()),header:{host:null,floating:null,placeholder:null},footer:{host:null,floating:null,placeholder:null}},this.dom.header.host=this.dom.thead.parent(),this.dom.footer.host=this.dom.tfoot.parent();var a=t.settings()[0];if(a._fixedHeader)throw"FixedHeader already initialised on table "+a.nTable.id;(a._fixedHeader=this)._constructor()};return o.extend(u.prototype,{enable:function(e){this.s.enable=e,this.c.header&&this._modeChange("in-place","header",!0),this.c.footer&&this.dom.tfoot.length&&this._modeChange("in-place","footer",!0),this.update()},headerOffset:function(e){return e!==r&&(this.c.headerOffset=e,this.update()),this.c.headerOffset},footerOffset:function(e){return e!==r&&(this.c.footerOffset=e,this.update()),this.c.footerOffset},update:function(){this._positions(),this._scroll(!0)},_constructor:function(){var e=this,t=this.s.dt;o(i).on("scroll"+this.s.namespace,function(){e._scroll()}).on("resize"+this.s.namespace,l.util.throttle(function(){e.s.position.windowHeight=o(i).height(),e.update()},50));var n=o(".fh-fixedHeader");!this.c.headerOffset&&n.length&&(this.c.headerOffset=n.outerHeight());var a=o(".fh-fixedFooter");!this.c.footerOffset&&a.length&&(this.c.footerOffset=a.outerHeight()),t.on("column-reorder.dt.dtfc column-visibility.dt.dtfc draw.dt.dtfc column-sizing.dt.dtfc responsive-display.dt.dtfc",function(){e.update()}),t.on("destroy.dtfc",function(){e.c.header&&e._modeChange("in-place","header",!0),e.c.footer&&e.dom.tfoot.length&&e._modeChange("in-place","footer",!0),t.off(".dtfc"),o(i).off(e.s.namespace)}),this._positions(),this._scroll()},_clone:function(e,t){var n=this.s.dt,a=this.dom[e],i="header"===e?this.dom.thead:this.dom.tfoot;!t&&a.floating?a.floating.removeClass("fixedHeader-floating fixedHeader-locked"):(a.floating&&(a.placeholder.remove(),this._unsize(e),a.floating.children().detach(),a.floating.remove()),a.floating=o(n.table().node().cloneNode(!1)).css("table-layout","fixed").attr("aria-hidden","true").removeAttr("id").append(i).appendTo("body"),a.placeholder=i.clone(!1),a.placeholder.find("*[id]").removeAttr("id"),a.host.prepend(a.placeholder),this._matchWidths(a.placeholder,a.floating))},_matchWidths:function(t,n){var e=function(e){return o(e,t).map(function(){return o(this).width()}).toArray()},a=function(e,t){o(e,n).each(function(e){o(this).css({width:t[e],minWidth:t[e]})})},i=e("th"),r=e("td");a("th",i),a("td",r)},_unsize:function(e){var t=this.dom[e].floating;t&&("footer"===e||"header"===e&&!this.s.autoWidth)?o("th, td",t).css({width:"",minWidth:""}):t&&"header"===e&&o("th, td",t).css("min-width","")},_horizontal:function(e,t){var n=this.dom[e],a=this.s.position,i=this.s.scrollLeft;n.floating&&i[e]!==t&&(n.floating.css("left",a.left-t),i[e]=t)},_modeChange:function(e,t,n){this.s.dt;var a=this.dom[t],i=this.s.position,r=this.dom["footer"===t?"tfoot":"thead"],l=o.contains(r[0],s.activeElement)?s.activeElement:null;l&&l.blur(),"in-place"===e?(a.placeholder&&(a.placeholder.remove(),a.placeholder=null),this._unsize(t),"header"===t?a.host.prepend(r):a.host.append(r),a.floating&&(a.floating.remove(),a.floating=null)):"in"===e?(this._clone(t,n),a.floating.addClass("fixedHeader-floating").css("header"===t?"top":"bottom",this.c[t+"Offset"]).css("left",i.left+"px").css("width",i.width+"px"),"footer"===t&&a.floating.css("top","")):"below"===e?(this._clone(t,n),a.floating.addClass("fixedHeader-locked").css("top",i.tfootTop-i.theadHeight).css("left",i.left+"px").css("width",i.width+"px")):"above"===e&&(this._clone(t,n),a.floating.addClass("fixedHeader-locked").css("top",i.tbodyTop).css("left",i.left+"px").css("width",i.width+"px")),l&&l!==s.activeElement&&setTimeout(function(){l.focus()},10),this.s.scrollLeft.header=-1,this.s.scrollLeft.footer=-1,this.s[t+"Mode"]=e},_positions:function(){var e=this.s.dt.table(),t=this.s.position,n=this.dom,a=o(e.node()),i=a.children("thead"),r=a.children("tfoot"),l=n.tbody;t.visible=a.is(":visible"),t.width=a.outerWidth(),t.left=a.offset().left,t.theadTop=i.offset().top,t.tbodyTop=l.offset().top,t.theadHeight=t.tbodyTop-t.theadTop,r.length?(t.tfootTop=r.offset().top,t.tfootBottom=t.tfootTop+r.outerHeight(),t.tfootHeight=t.tfootBottom-t.tfootTop):(t.tfootTop=t.tbodyTop+l.outerHeight(),t.tfootBottom=t.tfootTop,t.tfootHeight=t.tfootTop)},_scroll:function(e){var t,n,a=o(s).scrollTop(),i=o(s).scrollLeft(),r=this.s.position;this.s.enable&&(this.c.header&&(t=!r.visible||a<=r.theadTop-this.c.headerOffset?"in-place":a<=r.tfootTop-r.theadHeight-this.c.headerOffset?"in":"below",(e||t!==this.s.headerMode)&&this._modeChange(t,"header",e),this._horizontal("header",i)),this.c.footer&&this.dom.tfoot.length&&(n=!r.visible||a+r.windowHeight>=r.tfootBottom+this.c.footerOffset?"in-place":r.windowHeight+a>r.tbodyTop+r.tfootHeight+this.c.footerOffset?"in":"above",(e||n!==this.s.footerMode)&&this._modeChange(n,"footer",e),this._horizontal("footer",i)))}}),u.version="3.1.4",u.defaults={header:!0,footer:!1,headerOffset:0,footerOffset:0},o.fn.dataTable.FixedHeader=u,o.fn.DataTable.FixedHeader=u,o(s).on("init.dt.dtfh",function(e,t,n){if("dt"===e.namespace){var a=t.oInit.fixedHeader,i=l.defaults.fixedHeader;if((a||i)&&!t._fixedHeader){var r=o.extend({},i,a);!1!==a&&new u(t,r)}}}),l.Api.register("fixedHeader()",function(){}),l.Api.register("fixedHeader.adjust()",function(){return this.iterator("table",function(e){var t=e._fixedHeader;t&&t.update()})}),l.Api.register("fixedHeader.enable()",function(n){return this.iterator("table",function(e){var t=e._fixedHeader;n=n===r||n,t&&n!==t.s.enable&&t.enable(n)})}),l.Api.register("fixedHeader.disable()",function(){return this.iterator("table",function(e){var t=e._fixedHeader;t&&t.s.enable&&t.enable(!1)})}),o.each(["header","footer"],function(e,a){l.Api.register("fixedHeader."+a+"Offset()",function(n){var e=this.context;return n===r?e.length&&e[0]._fixedHeader?e[0]._fixedHeader[a+"Offset"]():r:this.iterator("table",function(e){var t=e._fixedHeader;t&&t[a+"Offset"](n)})})}),u});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRhdGFTZXRSdW50aW1lLmpzIiwiRm9ybVJlbGF0aW9uUE9VdGlsaXR5LmpzIiwiRm9ybVJ1bnRpbWUuanMiLCJIVE1MSlNSdW50aW1lLmpzIiwiSFRNTFBhZ2VPYmplY3RJbnN0YW5jZVByb3h5LmpzIiwiSW5uZXJGb3JtQnV0dG9uUnVudGltZS5qcyIsIkxpc3RSdW50aW1lLmpzIiwiUnVudGltZUdlbmVyYWwuanMiLCJWYWxpZGF0ZVJ1bGVzUnVudGltZS5qcyIsIkNvbnRyb2wvSFRNTENvbnRyb2wuanMiLCJDb250cm9sL1ZpcnR1YWxCb2R5Q29udHJvbC5qcyIsIkV4dGVybmFsL2RhdGF0YWJsZXMuanMiLCJJbm5lckZvcm1CdXR0b24vSW5uZXJGb3JtQnV0dG9uLmpzIiwiSW5uZXJGb3JtQnV0dG9uL0lubmVyRm9ybUNsb3NlQnV0dG9uLmpzIiwiSW5uZXJGb3JtQnV0dG9uL0lubmVyRm9ybUpzQ2xpZW50QnV0dG9uLmpzIiwiSW5uZXJGb3JtQnV0dG9uL0lubmVyRm9ybVNhdmVCdXR0b24uanMiLCJDb250cm9sL1dlYkZvcm1Db250cm9sL1dGRENUX0JhaWR1TWFwQ29udGFpbmVyLmpzIiwiQ29udHJvbC9XZWJGb3JtQ29udHJvbC9XRkRDVF9DS0VkaXRvcjQuanMiLCJDb250cm9sL1dlYkZvcm1Db250cm9sL1dGRENUX0RvY3VtZW50Q29udGVudFVwbG9hZENvbnZlcnRUb1BERkNvbnRhaW5lci5qcyIsIkNvbnRyb2wvV2ViRm9ybUNvbnRyb2wvV0ZEQ1RfRHJvcERvd25TZWxlY3QuanMiLCJDb250cm9sL1dlYkZvcm1Db250cm9sL1dGRENUX0ZpbGVJbWFnZUxpc3QuanMiLCJDb250cm9sL1dlYkZvcm1Db250cm9sL1dGRENUX0ZpbGVVcGxvYWRDb250YWluZXIuanMiLCJDb250cm9sL1dlYkZvcm1Db250cm9sL1dGRENUX1JhZGlvR3JvdXAuanMiLCJDb250cm9sL1dlYkZvcm1Db250cm9sL1dGRENUX1NlbGVjdE9yZ2FuVXNlci5qcyIsIkNvbnRyb2wvV2ViRm9ybUNvbnRyb2wvV0ZEQ1RfU2ltcGxlTGFiZWwuanMiLCJDb250cm9sL1dlYkZvcm1Db250cm9sL1dGRENUX1N1YkZvcm1MaXN0Q29udGFpbmVyLmpzIiwiQ29udHJvbC9XZWJGb3JtQ29udHJvbC9XRkRDVF9UYWJDb250YWluZXIuanMiLCJDb250cm9sL1dlYkZvcm1Db250cm9sL1dGRENUX1RleHRBcmVhLmpzIiwiQ29udHJvbC9XZWJGb3JtQ29udHJvbC9XRkRDVF9UZXh0Qm94LmpzIiwiQ29udHJvbC9XZWJGb3JtQ29udHJvbC9XRkRDVF9UZXh0RGF0ZVRpbWUuanMiLCJDb250cm9sL1dlYkxpc3RDb250cm9sL1dMRENUX0RlbGV0ZUJ1dHRvbi5qcyIsIkNvbnRyb2wvV2ViTGlzdENvbnRyb2wvV0xEQ1RfRm9ybUJ1dHRvbi5qcyIsIkNvbnRyb2wvV2ViTGlzdENvbnRyb2wvV0xEQ1RfTGlzdEJ1dHRvbkNvbnRhaW5lci5qcyIsIkNvbnRyb2wvV2ViTGlzdENvbnRyb2wvV0xEQ1RfTGlzdENvbXBsZXhTZWFyY2hDb250YWluZXIuanMiLCJDb250cm9sL1dlYkxpc3RDb250cm9sL1dMRENUX0xpc3RTaW1wbGVTZWFyY2hDb250YWluZXIuanMiLCJDb250cm9sL1dlYkxpc3RDb250cm9sL1dMRENUX0xpc3RUYWJsZUNoZWNrQm94LmpzIiwiQ29udHJvbC9XZWJMaXN0Q29udHJvbC9XTERDVF9MaXN0VGFibGVDb250YWluZXIuanMiLCJDb250cm9sL1dlYkxpc3RDb250cm9sL1dMRENUX0xpc3RUYWJsZUlubmVyQnV0dG9uQ29udGFpbmVyLmpzIiwiQ29udHJvbC9XZWJMaXN0Q29udHJvbC9XTERDVF9MaXN0VGFibGVJbm5lckJ1dHRvblNpbmdsZS5qcyIsIkNvbnRyb2wvV2ViTGlzdENvbnRyb2wvV0xEQ1RfTGlzdFRhYmxlTGFiZWwuanMiLCJDb250cm9sL1dlYkxpc3RDb250cm9sL1dMRENUX1ByaW50QnV0dG9uLmpzIiwiQ29udHJvbC9XZWJMaXN0Q29udHJvbC9XTERDVF9TZWFyY2hfRHJvcERvd25TZWxlY3QuanMiLCJDb250cm9sL1dlYkxpc3RDb250cm9sL1dMRENUX1NlYXJjaF9UZXh0Qm94LmpzIiwiQ29udHJvbC9XZWJMaXN0Q29udHJvbC9XTERDVF9TZWFyY2hfVGV4dERhdGVUaW1lLmpzIiwiRXh0ZXJuYWwvRml4ZWRDb2x1bW5zLTMuMi41L2RhdGFUYWJsZXMuZml4ZWRDb2x1bW5zLmpzIiwiRXh0ZXJuYWwvRml4ZWRIZWFkZXItMy4xLjQvZGF0YVRhYmxlcy5maXhlZEhlYWRlci5qcyJdLCJuYW1lcyI6WyJGb3JtUmVsYXRpb25QT1V0aWxpdHkiLCJfRmllbGRQT0NhY2hlIiwiQnVpbGRSZWNvcmQiLCJmaWVsZFBPQXJyYXkiLCJkZXNjIiwicmVjb3JkSWQiLCJvdXRlckZpZWxkTmFtZSIsIm91dGVyRmllbGRWYWx1ZSIsInNlbGZGaWVsZE5hbWUiLCJ1bmRlZmluZWQiLCJyZWNvcmRGaWVsZFBPTGlzdCIsIkZpbmRSZWNvcmRGaWVsZFBPQXJyYXkiLCJyZWNvcmQiLCJBZGQxVG8xRGF0YVJlY29yZEZpZWxkUE9MaXN0IiwicmVsYXRpb25QTyIsImZpZWxkUE9MaXN0Iiwib25lRGF0YVJlY29yZCIsInRoaXMiLCJBZGQxVG8xRGF0YVJlY29yZCIsInJlY29yZFBPIiwiR2V0MVRvMURhdGFSZWNvcmQiLCJHZXQxVG8xRGF0YVJlY29yZEZpZWxkUE9BcnJheSIsIkFkZDFUb05EYXRhUmVjb3JkIiwiYXJyYXlEYXRhIiwiaSIsImxlbmd0aCIsImxpc3REYXRhUmVjb3JkIiwiR2V0MVRvTkRhdGFSZWNvcmQiLCJGaW5kRmllbGRQT0luT25lRGF0YVJlY29yZEVuYWJsZU51bGwiLCJmaWVsZE5hbWUiLCJmaWVsZFBPIiwiQXJyYXlVdGlsaXR5IiwiV2hlcmVTaW5nbGUiLCJpdGVtIiwiRmluZEZpZWxkUE9Jbk9uZURhdGFSZWNvcmQiLCJGaW5kRmllbGRWYWx1ZUluT25lRGF0YVJlY29yZCIsInZhbHVlIiwiRmluZElERmllbGRQT0luT25lRGF0YVJlY29yZCIsIkZpbmRGaWVsZFBPQnlSZWxhdGlvblBPIiwiRmluZElkRmllbGRQT0J5UmVsYXRpb25QTyIsIkZpbmRNYWluUmVsYXRpb25QTyIsInJlbGF0aW9uUE9MaXN0IiwiSXNNYWluUmVsYXRpb25QTyIsImlzTWFpbiIsInBhcmVudElkIiwiRmluZE5vdE1haW5SZWxhdGlvblBPIiwiV2hlcmUiLCJGaW5kUmVsYXRpb25QT0J5SWQiLCJpZCIsInBvIiwiRmluZFJlbGF0aW9uUE9CeVRhYmxlTmFtZSIsInRhYmxlTmFtZSIsIkZpbmRGaWVsZFBPSW5SZWxhdGlvbkZvcm1SZWNvcmRDb21wbGV4UG9PbmVEYXRhUmVjb3JkIiwicmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvIiwicmVsYXRpb25JZCIsImZvcm1SZWNvcmREYXRhUmVsYXRpb25QT0xpc3QiLCJmb3JtUmVjb3JkRGF0YVJlbGF0aW9uUE8iLCJpbm5lclJlbGF0aW9uSWQiLCJqIiwiaW5uZXJGaWVsZE5hbWUiLCJGaW5kUmVsYXRpb25QT0luUmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvIiwiRmluZFBhcmVudEZpZWxkVmFsdWVJbkZvcm1EYXRhUmVsYXRpb25MaXN0V2l0aDFUbzFEYXRhUmVjb3JkIiwiZm9ybURhdGFSZWxhdGlvbkxpc3QiLCJwYXJlbnRSZWxhdGlvblBPSWQiLCJfRm9ybURhdGFSZWxhdGlvbkxpc3QiLCJDcmVhdGVGaWVsZEluUmVjb3JkRmllbGRQT0FycmF5IiwicmVjb3JkRmllbGRQT0FycmF5IiwiZmllbGRWYWx1ZSIsIkpzb25VdGlsaXR5IiwiQ2xvbmVTaW1wbGUiLCJwdXNoIiwiQ3JlYXRlSWRGaWVsZEluUmVjb3JkRmllbGRQT0FycmF5IiwiaWRWYWx1ZSIsImZvcm1QTyIsInRhYmxlSWQiLCJTdHJpbmdVdGlsaXR5IiwiR3VpZCIsInBrRmllbGROYW1lIiwiZm9ybVJlY29yZENvbXBsZXhQTyIsImFsbERhdGFSZWxhdGlvblRhYmxlRmllbGRzTWFwIiwiZmllbGRJc1BrIiwiY29uc29sZSIsImxvZyIsIkZvcm1SdW50aW1lU2luZ2xlUGFnZU9iamVjdCIsIl93ZWJGb3JtUlRQYXJhcyIsIl9mb3JtUnVudGltZUluc3QiLCJGT1JNX1JVTlRJTUVfQ0FURUdPUllfSU5ERVBFTkRFTkNFIiwiRk9STV9SVU5USU1FX0NBVEVHT1JZX0xJU1QiLCJnZXRXZWJGb3JtUlRQYXJhc1dpdGhMaXN0QnV0dG9uSWQiLCJGb3JtSWQiLCJCYXNlVXRpbGl0eSIsIkdldFVybFBhcmFWYWx1ZSIsIkJ1dHRvbklkIiwiT3BlcmF0aW9uVHlwZSIsIkxpc3RGb3JtQnV0dG9uRWxlbUlkIiwiUmVjb3JkSWQiLCJXaW5kb3dXaWR0aCIsIldpbmRvd0hlaWdodCIsIkZvcm1SdW50aW1lQ2F0ZWdvcnkiLCJnZXRXZWJGb3JtUlRQYXJhc1dpdGhJbmRlcGVuZGVuY2UiLCJmb3JtSWQiLCJSdW50aW1lR2VuZXJhbEluc3RhbmNlIiwiVHJ5R2V0TWVudU91dGVySWQiLCJJc051bGxPckVtcHR5IiwiSXNOb3ROdWxsT3JFbXB0eSIsInBhZ2VSZWFkeSIsImlzUHJldmlldyIsInJlbmRlcmVyQ2hhaW5Db21wbGV0ZWRGdW5jIiwiZ2V0V2ViRm9ybVJUUGFyYXNGdW5jIiwiT2JqZWN0IiwiY3JlYXRlIiwiRm9ybVJ1bnRpbWUiLCJ3ZWJGb3JtUlRQYXJhcyIsImNhbGwiLCJJbml0aWFsaXphdGlvbiIsIlJlbmRlcmVyVG9JZCIsIklzUHJldmlldyIsIlJlbmRlcmVyQ2hhaW5Db21wbGV0ZWRGdW5jIiwiV2ViRm9ybVJUUGFyYXMiLCJfUHJvcF9Db25maWciLCJQcmVIYW5kbGVGb3JtSHRtbFJ1bnRpbWVGdW5jIiwiXyRSZW5kZXJlclRvRWxlbSIsIl9Gb3JtUE8iLCJfT3JpZ2luYWxGb3JtRGF0YVJlbGF0aW9uTGlzdCIsIl9Gb3JtSlNSdW50aW1lSW5zdCIsIl9jb25maWciLCIkIiwiZXh0ZW5kIiwiX0xvYWRIVE1MVG9FbCIsIl9SZW5kZXJlckNoYWluSXNDb21wbGV0ZWQiLCJfUmVuZGVyZXJEYXRhQ2hhaW5Jc0NvbXBsZXRlZCIsInVybCIsIkJ1aWxkQWN0aW9uIiwiTG9hZEh0bWxEZXNpZ25Db250ZW50IiwiUmVuZGVyZXJUbyIsImJ1dHRvbklkIiwib3BlcmF0aW9uVHlwZSIsIkdldE9wZXJhdGlvblR5cGUiLCJmb3JtUnVudGltZUNhdGVnb3J5IiwicmVzdWx0IiwiZGF0YSIsImZvcm1EYXRhUmVsYXRpb24iLCJDbG9uZVN0cmluZ2lmeSIsImZvcm1IdG1sUnVudGltZSIsImFwcGVuZCIsIkhUTUxKU1J1bnRpbWUiLCJmb3JtSnNDb250ZW50IiwiX3JlbmRlcmVyQ2hhaW5QYXJhcyIsInNvdXJjZUhUTUwiLCIkcm9vdEVsZW0iLCIkcGFyZW50Q29udHJvbEVsZW0iLCIkc2luZ2xlQ29udHJvbEVsZW0iLCJmb3JtUnVudGltZUluc3RhbmNlIiwiVmlydHVhbEJvZHlDb250cm9sIiwiUmVuZGVyZXJDaGFpbiIsIkluaXRTdHlsZSIsIkNhbGxSZW5kZXJlckNoYWluQ29tcGxldGVkRnVuYyIsImxpc3RCdXR0b25FbnRpdHkiLCJDcmVhdGVBTExJbm5lckZvcm1CdXR0b24iLCJJc1VwZGF0ZU9wZXJhdGlvbiIsIklzVmlld09wZXJhdGlvbiIsIkRlU2VyaWFsaXphdGlvbkZvcm1EYXRhIiwiaGlkZSIsIklzUHJpbnQiLCJIVE1MUGFnZU9iamVjdEluc3RhbmNlUHJveHkiLCJJbml0Iiwid2luZG93Iiwic2V0VGltZW91dCIsIkNhbGxQYWdlUmVhZHkiLCJHZXRSZWNvcmRJZCIsIkdldE9wZW5lZExpc3RGb3JtQnV0dG9uSWQiLCJHZXRPcmlnaW5hbEZvcm1EYXRhUmVsYXRpb24iLCJHZXRGb3JtUE8iLCJTZXJpYWxpemF0aW9uRm9ybURhdGEiLCJmb3JtUmVjb3JkQ29tcGxleFBvIiwiZXhEYXRhIiwib3JpZ2luYWxGb3JtRGF0YVJlbGF0aW9uIiwic2luZ2xlUmVsYXRpb24iLCJyZWxhdGlvblNpbmdsZU5hbWUiLCJzaW5nbGVOYW1lIiwibWFpbiIsInJlbGF0aW9uVHlwZSIsImNvbnRyb2xzIiwibm90IiwiZmluZCIsIm9uZVJvd1JlY29yZCIsIiRjb250cm9sRWxlbSIsImZpZWxkVHJhbnNmZXJQTyIsIkhUTUxDb250cm9sIiwiVHJ5R2V0RmllbGRUcmFuc2ZlclBPIiwib3V0ZXJLZXlGaWVsZE5hbWUiLCJzZWxmS2V5RmllbGROYW1lIiwiY29udHJvbCIsIkdldENvbnRyb2xJbnN0YW5jZUJ5RWxlbSIsIlNlcmlhbGl6YXRpb25WYWx1ZSIsIlJlbmRlcmVyRGF0YUNoYWluIiwiY2FsbFRvVmlld1N0YXR1c0Z1bmMiLCJsaXN0QnV0dG9uUE8iLCJidXR0b25Jbm5lckNvbmZpZyIsIlN0cmluZ1RvSnNvbiIsImlubmVyQnV0dG9uQ29uZmlnIiwiYnV0dG9uRWxlbSIsIklubmVyRm9ybUJ1dHRvblJ1bnRpbWUiLCJSZW5kZXJlclNpbmdsZUlubmVyRm9ybUJ1dHRvbiIsIkdldFdlYkZvcm1SVFBhcmFzIiwiRm9ybVJ1bnRpbWVNb2NrRGF0YVBvb2wiLCJtb2NrRGF0YVBvb2wiLCJTYXZlRGF0YSIsImdyb3VwTmFtZSIsImtleSIsIkdldERhdGEiLCJTYXZlRGF0YVRvUGFyZW50UG9vbCIsInBhcmVudCIsIkdldERhdGFGcm9tUGFyZW50UG9vbCIsIkdldE1vY2tEYXRhIiwiaXNTYXZlIiwiY29uZGl0aW9uIiwidGFibGVDYXB0aW9uIiwidGFibGVDb2RlIiwiZGlzcGxheVRleHQiLCJpY29uIiwiZmllbGRUYWJsZUlkIiwiZmllbGREYXRhVHlwZSIsImZpZWxkRGF0YUxlbmd0aCIsInNlcmlhbGl6ZSIsImRlZmF1bHRUeXBlIiwiZGVmYXVsdFZhbHVlIiwic3VjY2VzcyIsIm1zZyIsIl9Kc0NvbnRlbnQiLCJfUmVwbGFjZUNvbnRleHRQYXRoIiwic291cmNlIiwiY29udGV4dFBhdGgiLCJHZXRSb290UGF0aCIsInJlcGxhY2VBbGwiLCJfUmVwbGFjZVRpbWVTdGFtcCIsInRpbWVzdGFtcCIsIkRhdGUiLCJnZXRUaW1lIiwiUmVwbGFjZUpTUGFyYXMiLCJyZXN1bHRKcyIsIiRyZW5kZXJlclRvRWxlbSIsImpzQ29udGVudCIsIl9Mb2FkSlNUb0VsIiwiaHRtbFBPIiwiRm9ybVBhZ2VPYmplY3RJbnN0YW5jZSIsIkJ1aWxkZXJMaXN0UGFnZVJ1bnRpbWVJbnN0YW5jZSIsImJpbmRSZWNvcmREYXRhUmVhZHkiLCJsaXN0UE8iLCJyZW5kZXJlckNoYWluQ29tcGxldGVkIiwicmVuZGVyZXJEYXRhQ2hhaW5Db21wbGV0ZWQiLCJDYWxsVmFsaWRhdGVFdmVyeUZyb21Db250cm9sIiwidmFsaWRhdGVSZXN1bHQiLCJ2YWxpZGF0ZUV2ZXJ5RnJvbUNvbnRyb2wiLCJuZXdSZXN1bHQiLCJlIiwiRGlhbG9nVXRpbGl0eSIsIkFsZXJ0VGV4dCIsImJ1dHRvblR5cGUiLCJJbm5lckZvcm1DbG9zZUJ1dHRvbiIsIkluc3RhbmNlIiwiZWxlbSIsIklubmVyRm9ybVNhdmVCdXR0b24iLCJlcnJvclRleHQiLCJJbm5lckZvcm1Kc0NsaWVudEJ1dHRvbiIsIlJlbmRlcmVyU2luZ2xlSW5uZXJGb3JtQnV0dG9uQ2xpY2siLCJzZW5kZXIiLCJMaXN0UnVudGltZSIsIl9Qcm9wX1N0YXR1cyIsIkxpc3RJZCIsIl9MaXN0UE8iLCJfSlNSdW50aW1lSW5zdCIsIl9zZWxmIiwibGlzdEh0bWxSdW50aW1lIiwibGlzdEpzQ29udGVudCIsImxpc3RSdW50aW1lSW5zdGFuY2UiLCJSZW5kZXJlckNoYWluQ29tcGxldGVPYmoiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ0b3BEYXRhU2V0SWQiLCJsaXN0RGF0YXNldElkIiwiUmVuZGVyZXJEYXRhQ2hhaW5Db21wbGV0ZU9iaiIsIkNoZWNrUHJpbWFyeUtleUluRGF0YVNldCIsImRhdGFTZXQiLCJwcmltYXJ5S2V5IiwibGlzdCIsInJvd0RhdGEiLCJ0b1VwcGVyQ2FzZSIsIkdldFByaW1hcnlLZXkiLCJsaXN0RGF0YXNldFByaW1hcnlLZXkiLCJfQWpheCIsInBhcmFtcyIsImNhbGxiYWNrIiwialF1ZXJ5IiwiYWpheCIsInR5cGUiLCJkYXRhVHlwZSIsImRvbmUiLCJtZXNzYWdlIiwidHJhY2VNc2ciLCJhbHdheXMiLCJqcVhIUiIsInN0YXR1cyIsImFwcGVuZFRvRWxlbUlkIiwiTG9hZElubmVyRm9ybUJ1dHRvbiIsImxpc3RGb3JtQnV0dG9uSWQiLCJTdWJtaXRGb3JtRGF0YUNvbXBsZXhQT0xpc3RUb1NlcnZlciIsImZvcm1EYXRhQ29tcGxleFBPIiwiaW5uZXJGb3JtQnV0dG9uSWQiLCJsaXN0QnV0dG9uSWQiLCJmb3JtUmVjb3JkQ29tcGxleFBPU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSnNvblRvU3RyaW5nIiwib3BlcmF0aW9uVHlwZU5hbWUiLCJEZWxldGVUYWJsZVJlY29yZCIsInN1Y2Nlc3NGdW5jIiwiY2FsbGVyIiwiQWpheFV0aWxpdHkiLCJQb3N0IiwicGtWYWx1ZSIsIkRlbGV0ZURhdGFTZXRSZWNvcmQiLCJlbGVtaWQiLCJiaW5kRGF0YVNldElkIiwiZGF0YVNldElkIiwiV0xEQ1RfTGlzdFRhYmxlQ29udGFpbmVyIiwiVHJ5UmVsb2FkRm9yTGlzdEZvcm1CdXR0b24iLCJHZXREYXRhU2V0RGF0YSIsImNvbmZpZyIsImZ1bmMiLCJzZW5kRGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJQb3N0UmVxdWVzdEJvZHkiLCJnZXREYXRhU2V0UmVzdWx0IiwiR2V0VXJsUGFyYXMiLCJwYXJhU3RyIiwiY2hhckF0IiwiVHJ5R2V0VXJsUGFyYVZhbHVlQnlGaWVsZE5hbWUiLCJhY3Rpb25OYW1lIiwicGFyYUpzb24iLCJzaW5nbGVQYXJhIiwiQWN0aW9uVHlwZSIsIkZpZWxkTmFtZSIsIlZhbHVlIiwiVHJ5R2V0VXJsUGFyYUNoYW5nZU1haW5EYXRhU2V0SWQiLCJEYXRhU2V0SWQiLCJUcnlHZXRVcmxQYXJhVmlld09ubHkiLCJWYWxpZGF0ZVJ1bGVzUnVudGltZSIsIk5vRW1wdHkiLCJnZXRWYWxpZGF0ZVRpcEVsZW0iLCJnZXRWYWxpZGF0ZVJ1bGVzIiwiJGVsZW0iLCJhdHRyIiwidmFsaWRhdGVSdWxlcyIsImRlY29kZVVSSUNvbXBvbmVudCIsIlZhbGlkYXRlU3VibWl0RW5hYmxlIiwiZXJyb3JzIiwicnVsZXMiLCJzaW5nbGVDb250cm9sRXJyb3JzIiwibGFiTmFtZSIsInRyeUdldFZhbGlkYXRlRXJyb3JOYW1lIiwiY29udHJvbFZhbHVlIiwidmFsaWRhdGVUeXBlIiwiVHJpbSIsIiRjb250cm9sIiwibmFtZSIsIiRwcmV2VGQiLCJwcmV2IiwidGV4dCIsInJlcGxhY2UiLCJBbGVydFZhbGlkYXRlRXJyb3JzIiwic2luZ2xlQ29udHJvbEVycm9yIiwiam9pbiIsIkFsZXJ0IiwiRGlhbG9nSWQwNSIsImF1dG9SZXNpemUiLCJoZWlnaHQiLCJ3aWR0aCIsInRpdGxlIiwiX2kiLCJfc2luZ2xlQ29udHJvbEVycm9yIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsIkhUTUxDb250cm9sQXR0cnMiLCJKQlVJTEQ0RENfQ1VTVE9NIiwiU0VMRUNURURfSkJVSUxENERDX0NVU1RPTSIsIkNMSUVOVF9SRVNPTFZFIiwiX0luc3RhbmNlTWFwIiwiX0dldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJldmFsIiwiR2V0SW5zdGFuY2UiLCJTYXZlQ29udHJvbE5ld0luc3RhbmNlVG9Qb29sIiwiYWxlcnQiLCJfU2F2ZUNvbnRyb2xOZXdJbnN0YW5jZVRvUG9vbCIsImluc3RhbmNlTmFtZSIsIkdldENvbnRyb2xJbnN0YW5jZU5hbWVCeUVsZW0iLCJSZW5kZXJlckNoYWluUGFyYXMiLCJsaXN0RW50aXR5IiwiUmVuZGVyZXJEYXRhQ2hhaW5QYXJhcyIsInRvcERhdGFTZXQiLCJjaGlsZHJlbiIsIiRjaGlsZFNpbmdsZUVsZW0iLCJfY2xvbmVSZW5kZXJlckNoYWluUGFyYXMiLCJTaW1wbGVDbG9uZUF0dHIiLCJJbml0aWFsaXplIiwiX29iamVjdFR5cGUiLCJfcHJvcCIsImluc3RhbmNlUHJvcCIsIlRyeUJpbmRFbGVtZW50QXR0clRvSW5zdGFuY2VQcm9wIiwiZWxlbUlkIiwiX3Byb3BNYXAiLCJUcnlCaW5kVXJsVmFsdWUiLCJfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcyIsIl9jbG9uZVJlbmRlcmVyRGF0YUNoYWluUGFyYXMiLCJTZXRWYWx1ZSIsIlRyeUdldEZpZWxkUE9JblJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQbyIsIlRvVmlld1N0YXR1cyIsIlRyeUFwcGVuZFZhbGlkYXRlU3R5bGUiLCIkdGRUeHQiLCJuZXdUeHQiLCJodG1sIiwiR2V0VmFsdWUiLCJvcmlnaW5hbERhdGEiLCJwYXJhcyIsInZhbCIsIm9sZEFsbEF0dHJzIiwiR2V0RWxlbUFsbEF0dHIiLCIkdmlld0VsZW0iLCJwcm9wIiwicmVwbGFjZVdpdGgiLCJjb2x1bW5OYW1lIiwidXJsVmFsdWUiLCJHZXRDb250cm9sQmluZFJlbGF0aW9uSWQiLCJiaW5kVGFibGVOYW1lIiwiR2V0Q29udHJvbEJpbmRUYWJsZU5hbWUiLCJiaW5kRmllbGROYW1lIiwiR2V0Q29udHJvbEJpbmRGaWVsZE5hbWUiLCJGaW5kQUxMQ29udHJvbHMiLCIkcGFyZW50IiwiR2V0Q29udHJvbFByb3AiLCJwcm9wcyIsInByb3BWYWx1ZSIsIlRvTG93ZXJDYXNlIiwiQnVpbGRTZXJpYWxpemF0aW9uT3JpZ2luYWxEYXRhIiwiR2V0U2VyaWFsaXphdGlvbk9uZURhdGFSZWNvcmRGaWVsZFZhbHVlIiwiY29udHJvbEluc3RhbmNlIiwiSXNGdW5jdGlvbiIsIkdldFNpbXBsZUNvbnRyb2xWYWx1ZSIsIm9ialByb3AiLCJUcnlBdXRvU2V0SGVpZ2h0IiwicGFnZUhlaWdodCIsIkhhc1Jvb3RUYWJDb250YWluZXIiLCJlYWNoIiwiUGVyZmVjdFNjcm9sbGJhciIsIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsImRvY3VtZW50IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJvb3QiLCJyZXF1aXJlIiwiX2V4dCIsIl9BcGkyIiwiX2FwaV9yZWdpc3RlciIsIl9hcGlfcmVnaXN0ZXJQbHVyYWwiLCJEYXRhVGFibGUiLCJvcHRpb25zIiwic1NlbGVjdG9yIiwib09wdHMiLCJhcGkiLCJfIiwicm93cyIsInRyYWRpdGlvbmFsIiwiX2ZuU2V0dGluZ3NGcm9tTm9kZSIsImlBcGlJbmRleCIsImZuQWRkRGF0YSIsInJlZHJhdyIsImlzQXJyYXkiLCJpc1BsYWluT2JqZWN0IiwiYWRkIiwicm93IiwiZHJhdyIsImZsYXR0ZW4iLCJ0b0FycmF5IiwiZm5BZGp1c3RDb2x1bW5TaXppbmciLCJiUmVkcmF3IiwiY29sdW1ucyIsImFkanVzdCIsInNldHRpbmdzIiwic2Nyb2xsIiwib1Njcm9sbCIsInNYIiwic1kiLCJfZm5TY3JvbGxEcmF3IiwiZm5DbGVhclRhYmxlIiwiY2xlYXIiLCJmbkNsb3NlIiwiblRyIiwiY2hpbGQiLCJmbkRlbGV0ZVJvdyIsInRhcmdldCIsImFvRGF0YSIsInJlbW92ZSIsImZuRGVzdHJveSIsImRlc3Ryb3kiLCJmbkRyYXciLCJjb21wbGV0ZSIsImZuRmlsdGVyIiwic0lucHV0IiwiaUNvbHVtbiIsImJSZWdleCIsImJTbWFydCIsImJTaG93R2xvYmFsIiwiYkNhc2VJbnNlbnNpdGl2ZSIsInNlYXJjaCIsImNvbHVtbiIsImZuR2V0RGF0YSIsInNyYyIsImNvbCIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJjZWxsIiwiZm5HZXROb2RlcyIsImlSb3ciLCJub2RlIiwibm9kZXMiLCJmbkdldFBvc2l0aW9uIiwiaW5kZXgiLCJjb2x1bW5WaXNpYmxlIiwiZm5Jc09wZW4iLCJpc1Nob3duIiwiZm5PcGVuIiwibUh0bWwiLCJzQ2xhc3MiLCJzaG93IiwiZm5QYWdlQ2hhbmdlIiwibUFjdGlvbiIsInBhZ2UiLCJmblNldENvbHVtblZpcyIsImlDb2wiLCJiU2hvdyIsInZpc2libGUiLCJmblNldHRpbmdzIiwiZm5Tb3J0IiwiYWFTb3J0Iiwib3JkZXIiLCJmblNvcnRMaXN0ZW5lciIsIm5Ob2RlIiwiZm5DYWxsYmFjayIsImxpc3RlbmVyIiwiZm5VcGRhdGUiLCJtRGF0YSIsIm1Sb3ciLCJiQWN0aW9uIiwiZm5WZXJzaW9uQ2hlY2siLCJfdGhhdCIsImVtcHR5SW5pdCIsImxlbiIsImZuIiwib0FwaSIsImludGVybmFsIiwiZXh0IiwiX2ZuRXh0ZXJuQXBpRnVuYyIsImlMZW4iLCJvSW5pdCIsIl9mbkV4dGVuZCIsInNJZCIsImdldEF0dHJpYnV0ZSIsImJJbml0SGFuZGVkT2ZmIiwiZGVmYXVsdHMiLCIkdGhpcyIsIl9mbkNvbXBhdE9wdHMiLCJfZm5Db21wYXRDb2xzIiwiX2ZuQ2FtZWxUb0h1bmdhcmlhbiIsImFsbFNldHRpbmdzIiwicyIsIm5UYWJsZSIsIm5USGVhZCIsInBhcmVudE5vZGUiLCJuVEZvb3QiLCJiUmV0cmlldmUiLCJiRGVzdHJveSIsIm9JbnN0YW5jZSIsIl9mbkxvZyIsInNUYWJsZUlkIiwic3BsaWNlIiwiX3VuaXF1ZSIsIm9TZXR0aW5ncyIsIm1vZGVscyIsInNEZXN0cm95V2lkdGgiLCJzdHlsZSIsInNJbnN0YW5jZSIsImRhdGFUYWJsZSIsIl9mbkxhbmd1YWdlQ29tcGF0Iiwib0xhbmd1YWdlIiwiYUxlbmd0aE1lbnUiLCJpRGlzcGxheUxlbmd0aCIsIl9mbk1hcCIsIm9GZWF0dXJlcyIsIl9mbkNhbGxiYWNrUmVnIiwiZm5EcmF3Q2FsbGJhY2siLCJmblNlcnZlclBhcmFtcyIsImZuU3RhdGVTYXZlUGFyYW1zIiwiZm5TdGF0ZUxvYWRQYXJhbXMiLCJmblN0YXRlTG9hZGVkIiwiZm5Sb3dDYWxsYmFjayIsImZuQ3JlYXRlZFJvdyIsImZuSGVhZGVyQ2FsbGJhY2siLCJmbkZvb3RlckNhbGxiYWNrIiwiZm5Jbml0Q29tcGxldGUiLCJmblByZURyYXdDYWxsYmFjayIsInJvd0lkRm4iLCJfZm5HZXRPYmplY3REYXRhRm4iLCJyb3dJZCIsIl9mbkJyb3dzZXJEZXRlY3QiLCJvQ2xhc3NlcyIsImNsYXNzZXMiLCJzVGFibGUiLCJpSW5pdERpc3BsYXlTdGFydCIsImlEaXNwbGF5U3RhcnQiLCJfaURpc3BsYXlTdGFydCIsImlEZWZlckxvYWRpbmciLCJiRGVmZXJMb2FkaW5nIiwidG1wIiwiX2lSZWNvcmRzRGlzcGxheSIsIl9pUmVjb3Jkc1RvdGFsIiwic1VybCIsImpzb24iLCJfZm5Jbml0aWFsaXNlIiwiZXJyb3IiLCJhc1N0cmlwZUNsYXNzZXMiLCJzU3RyaXBlT2RkIiwic1N0cmlwZUV2ZW4iLCJzdHJpcGVDbGFzc2VzIiwicm93T25lIiwiZXEiLCJpbkFycmF5IiwibWFwIiwiZWwiLCJoYXNDbGFzcyIsImFzRGVzdHJveVN0cmlwZXMiLCJzbGljZSIsImFvQ29sdW1uc0luaXQiLCJhblRocyIsIm5UaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiX2ZuRGV0ZWN0SGVhZGVyIiwiYW9IZWFkZXIiLCJfZm5HZXRVbmlxdWVUaHMiLCJhb0NvbHVtbnMiLCJfZm5BZGRDb2x1bW4iLCJfZm5BcHBseUNvbHVtbkRlZnMiLCJhb0NvbHVtbkRlZnMiLCJvRGVmIiwiX2ZuQ29sdW1uT3B0aW9ucyIsImEiLCJzb3J0IiwiZmlsdGVyIiwiZmVhdHVyZXMiLCJsb2FkZWRJbml0IiwiYWFTb3J0aW5nIiwic29ydGluZyIsImFzU29ydGluZyIsIl9mblNvcnRpbmdDbGFzc2VzIiwiYlNvcnQiLCJiU29ydGVkIiwiYVNvcnQiLCJfZm5Tb3J0RmxhdHRlbiIsInNvcnRlZENvbHVtbnMiLCJkaXIiLCJfZm5DYWxsYmFja0ZpcmUiLCJfZm5Tb3J0QXJpYSIsIl9mbkRhdGFTb3VyY2UiLCJiRGVmZXJSZW5kZXIiLCJjYXB0aW9ucyIsIl9jYXB0aW9uU2lkZSIsImNzcyIsInRoZWFkIiwiYXBwZW5kVG8iLCJ0Ym9keSIsIm5UQm9keSIsInRmb290Iiwic05vRm9vdGVyIiwiYW9Gb290ZXIiLCJhYURhdGEiLCJfZm5BZGREYXRhIiwiX2ZuQWRkVHIiLCJhaURpc3BsYXkiLCJhaURpc3BsYXlNYXN0ZXIiLCJiSW5pdGlhbGlzZWQiLCJiU3RhdGVTYXZlIiwiX2ZuU2F2ZVN0YXRlIiwiX2ZuTG9hZFN0YXRlIiwiX3JlX2RpYyIsIl9yZV9uZXdfbGluZXMiLCJfcmVfaHRtbCIsIl9yZV9kYXRlIiwiX3JlX2VzY2FwZV9yZWdleCIsIlJlZ0V4cCIsIl9yZV9mb3JtYXR0ZWRfbnVtZXJpYyIsIl9lbXB0eSIsImQiLCJfaW50VmFsIiwiaW50ZWdlciIsInBhcnNlSW50IiwiaXNOYU4iLCJpc0Zpbml0ZSIsIl9udW1Ub0RlY2ltYWwiLCJudW0iLCJkZWNpbWFsUG9pbnQiLCJfZm5Fc2NhcGVSZWdleCIsIl9pc051bWJlciIsImZvcm1hdHRlZCIsInN0clR5cGUiLCJwYXJzZUZsb2F0IiwiX2h0bWxOdW1lcmljIiwiX3N0cmlwSHRtbCIsIl9wbHVjayIsInByb3AyIiwib3V0IiwiaWVuIiwiX3BsdWNrX29yZGVyIiwiX3JhbmdlIiwic3RhcnQiLCJlbmQiLCJfcmVtb3ZlRW1wdHkiLCJzb3J0ZWQiLCJsYXN0IiwiX2FyZUFsbFVuaXF1ZSIsImsiLCJhZ2FpbiIsIl9mbkh1bmdhcmlhbk1hcCIsIm8iLCJtYXRjaCIsIm5ld0tleSIsImluZGV4T2YiLCJfaHVuZ2FyaWFuTWFwIiwidXNlciIsImZvcmNlIiwiaHVuZ2FyaWFuS2V5IiwibGFuZyIsImRlZmF1bHREZWNpbWFsIiwic0RlY2ltYWwiLCJfYWRkTnVtZXJpY1NvcnQiLCJ6ZXJvUmVjb3JkcyIsInNaZXJvUmVjb3JkcyIsInNFbXB0eVRhYmxlIiwic0xvYWRpbmdSZWNvcmRzIiwic0luZm9UaG91c2FuZHMiLCJzVGhvdXNhbmRzIiwiZGVjaW1hbCIsInV0aWwiLCJ0aHJvdHRsZSIsImZyZXEiLCJ0aW1lciIsImZyZXF1ZW5jeSIsInRoYXQiLCJub3ciLCJhcmdzIiwiYXJndW1lbnRzIiwiY2xlYXJUaW1lb3V0IiwiYXBwbHkiLCJlc2NhcGVSZWdleCIsIl9mbkNvbXBhdE1hcCIsImtuZXciLCJvbGQiLCJpbml0Iiwic1Njcm9sbFgiLCJzY3JvbGxYIiwic2VhcmNoQ29scyIsImFvU2VhcmNoQ29scyIsIm9TZWFyY2giLCJkYXRhU29ydCIsImFEYXRhU29ydCIsIl9fYnJvd3NlciIsImJyb3dzZXIiLCJuIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsIm92ZXJmbG93Iiwib3V0ZXIiLCJpbm5lciIsImJhcldpZHRoIiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsImJTY3JvbGxPdmVyc2l6ZSIsImJTY3JvbGxiYXJMZWZ0IiwiTWF0aCIsInJvdW5kIiwib2Zmc2V0IiwiYkJvdW5kaW5nIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwib0Jyb3dzZXIiLCJpQmFyV2lkdGgiLCJfZm5SZWR1Y2UiLCJpbmMiLCJpc1NldCIsImhhc093blByb3BlcnR5IiwiblRoIiwib0RlZmF1bHRzIiwib0NvbCIsIm9Db2x1bW4iLCJjcmVhdGVFbGVtZW50Iiwic1RpdGxlIiwiaW5uZXJIVE1MIiwiaWR4IiwiYW9QcmVTZWFyY2hDb2xzIiwib09wdGlvbnMiLCJ0aCIsInNXaWR0aE9yaWciLCJ0IiwibURhdGFQcm9wIiwic1R5cGUiLCJfc01hbnVhbFR5cGUiLCJjbGFzc05hbWUiLCJpRGF0YVNvcnQiLCJtRGF0YVNyYyIsIm1SZW5kZXIiLCJhdHRyVGVzdCIsIl9iQXR0clNyYyIsIl9zZXR0ZXIiLCJtZXRhIiwiaW5uZXJEYXRhIiwiZm5TZXREYXRhIiwiX2ZuU2V0T2JqZWN0RGF0YUZuIiwiX3Jvd1JlYWRPYmplY3QiLCJiU29ydGFibGUiLCJzU29ydGFibGVOb25lIiwiYkFzYyIsImJEZXNjIiwic1NvcnRpbmdDbGFzc0pVSSIsInNTb3J0aW5nQ2xhc3MiLCJzU29ydGFibGVBc2MiLCJzU29ydEpVSUFzY0FsbG93ZWQiLCJzU29ydGFibGVEZXNjIiwic1NvcnRKVUlEZXNjQWxsb3dlZCIsInNTb3J0YWJsZSIsInNTb3J0SlVJIiwiX2ZuQWRqdXN0Q29sdW1uU2l6aW5nIiwiYkF1dG9XaWR0aCIsIl9mbkNhbGN1bGF0ZUNvbHVtbldpZHRocyIsInNXaWR0aCIsIl9mblZpc2libGVUb0NvbHVtbkluZGV4IiwiaU1hdGNoIiwiYWlWaXMiLCJfZm5HZXRDb2x1bW5zIiwiX2ZuQ29sdW1uSW5kZXhUb1Zpc2libGUiLCJpUG9zIiwiX2ZuVmlzYmxlQ29sdW1ucyIsInZpcyIsImJWaXNpYmxlIiwic1BhcmFtIiwiX2ZuQ29sdW1uVHlwZXMiLCJqZW4iLCJrZW4iLCJkZXRlY3RlZFR5cGUiLCJjYWNoZSIsInR5cGVzIiwiZGV0ZWN0IiwiX2ZuR2V0Q2VsbERhdGEiLCJhb0NvbERlZnMiLCJhb0NvbHMiLCJqTGVuIiwia0xlbiIsImRlZiIsImFUYXJnZXRzIiwidGFyZ2V0cyIsImFEYXRhSW4iLCJhblRkcyIsIm9EYXRhIiwib1JvdyIsIl9hRGF0YSIsImFJZHMiLCJfZm5DcmVhdGVUciIsInRycyIsIl9mbkdldFJvd0VsZW1lbnRzIiwiY2VsbHMiLCJyb3dJZHgiLCJjb2xJZHgiLCJpRHJhdyIsImRlZmF1bHRDb250ZW50Iiwic0RlZmF1bHRDb250ZW50IiwiY2VsbERhdGEiLCJpRHJhd0Vycm9yIiwiX2ZuU2V0Q2VsbERhdGEiLCJfX3JlQXJyYXkiLCJfX3JlRm4iLCJfZm5TcGxpdE9iak5vdGF0aW9uIiwic3RyIiwibVNvdXJjZSIsImZldGNoRGF0YSIsImFycmF5Tm90YXRpb24iLCJmdW5jTm90YXRpb24iLCJpbm5lclNyYyIsInN1YnN0cmluZyIsInNldERhdGEiLCJiIiwiYUxhc3QiLCJfZm5HZXREYXRhTWFzdGVyIiwiX2ZuQ2xlYXJUYWJsZSIsIl9mbkRlbGV0ZUluZGV4IiwiaVRhcmdldCIsImlUYXJnZXRJbmRleCIsIl9mbkludmFsaWRhdGUiLCJjZWxsV3JpdGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJmaXJzdENoaWxkIiwiYW5DZWxscyIsIl9hU29ydERhdGEiLCJfYUZpbHRlckRhdGEiLCJjb2xzIiwiX2ZuUm93QXR0cmlidXRlcyIsImNvbnRlbnRzIiwidGRzIiwidGQiLCJvYmplY3RSZWFkIiwic2V0dGVyIiwiY2VsbFByb2Nlc3MiLCJ0cmltIiwibmV4dFNpYmxpbmciLCJyb3dOb2RlIiwiblRySW4iLCJuVGQiLCJfRFRfUm93SW5kZXgiLCJzQ2VsbFR5cGUiLCJfRFRfQ2VsbEluZGV4IiwiYXBwZW5kQ2hpbGQiLCJmbkNyZWF0ZWRDZWxsIiwic2V0QXR0cmlidXRlIiwidHIiLCJEVF9Sb3dDbGFzcyIsInNwbGl0IiwiX19yb3djIiwiY29uY2F0IiwiRFRfUm93QXR0ciIsIkRUX1Jvd0RhdGEiLCJfZm5CdWlsZEhlYWQiLCJjcmVhdGVIZWFkZXIiLCJpVGFiSW5kZXgiLCJfZm5Tb3J0QXR0YWNoTGlzdGVuZXIiLCJfZm5SZW5kZXJlciIsInNIZWFkZXJUSCIsInNGb290ZXJUSCIsIm5UZiIsIl9mbkRyYXdIZWFkIiwiYW9Tb3VyY2UiLCJiSW5jbHVkZUhpZGRlbiIsIm5Mb2NhbFRyIiwiaVJvd3NwYW4iLCJpQ29sc3BhbiIsImFvTG9jYWwiLCJhQXBwbGllZCIsImlDb2x1bW5zIiwiX2ZuRHJhdyIsImFQcmVEcmF3IiwiYW5Sb3dzIiwiaVJvd0NvdW50IiwiaVN0cmlwZXMiLCJvTGFuZyIsImFvT3BlblJvd3MiLCJiU2VydmVyU2lkZSIsImJEcmF3aW5nIiwiZm5SZWNvcmRzRGlzcGxheSIsImlEaXNwbGF5RW5kIiwiZm5EaXNwbGF5RW5kIiwiX2ZuUHJvY2Vzc2luZ0Rpc3BsYXkiLCJiRGVzdHJveWluZyIsIl9mbkFqYXhVcGRhdGUiLCJpU3RhcnQiLCJpRW5kIiwiaURhdGFJbmRleCIsIm5Sb3ciLCJzU3RyaXBlIiwiX3NSb3dTdHJpcGUiLCJzWmVybyIsImZuUmVjb3Jkc1RvdGFsIiwiY2xhc3MiLCJ2YWxpZ24iLCJjb2xTcGFuIiwic1Jvd0VtcHR5IiwiYm9keSIsImRldGFjaCIsImJGaWx0ZXJlZCIsIl9mblJlRHJhdyIsImhvbGRQb3NpdGlvbiIsImJGaWx0ZXIiLCJfZm5Tb3J0IiwiX2ZuRmlsdGVyQ29tcGxldGUiLCJvUHJldmlvdXNTZWFyY2giLCJfZHJhd0hvbGQiLCJfZm5BZGRPcHRpb25zSHRtbCIsInRhYmxlIiwiaG9sZGluZyIsImluc2VydEJlZm9yZSIsImluc2VydCIsInNXcmFwcGVyIiwibkhvbGRpbmciLCJuVGFibGVXcmFwcGVyIiwiblRhYmxlUmVpbnNlcnRCZWZvcmUiLCJmZWF0dXJlTm9kZSIsImNPcHRpb24iLCJuTmV3Tm9kZSIsImNOZXh0Iiwic0F0dHIiLCJhRG9tIiwic0RvbSIsInNKVUlIZWFkZXIiLCJzSlVJRm9vdGVyIiwiYVNwbGl0Iiwic3Vic3RyIiwiYlBhZ2luYXRlIiwiYkxlbmd0aENoYW5nZSIsIl9mbkZlYXR1cmVIdG1sTGVuZ3RoIiwiX2ZuRmVhdHVyZUh0bWxGaWx0ZXIiLCJiUHJvY2Vzc2luZyIsIl9mbkZlYXR1cmVIdG1sUHJvY2Vzc2luZyIsIl9mbkZlYXR1cmVIdG1sVGFibGUiLCJiSW5mbyIsIl9mbkZlYXR1cmVIdG1sSW5mbyIsIl9mbkZlYXR1cmVIdG1sUGFnaW5hdGUiLCJmZWF0dXJlIiwiYW9GZWF0dXJlcyIsImNGZWF0dXJlIiwiZm5Jbml0IiwiYWFuRmVhdHVyZXMiLCJhTGF5b3V0IiwibkNlbGwiLCJsIiwiaUNvbFNoaWZ0ZWQiLCJiVW5pcXVlIiwiblRycyIsImZuU2hpZnRDb2wiLCJ1bmlxdWUiLCJuSGVhZGVyIiwiYVJldHVybiIsImJTb3J0Q2VsbHNUb3AiLCJfZm5CdWlsZEFqYXgiLCJyYnJhY2tldCIsImFqYXhEYXRhIiwibmV3RGF0YSIsImJhc2VBamF4Iiwic0Vycm9yIiwic1NlcnZlck1ldGhvZCIsInhociIsIl9lcnJvciIsInRocm93biIsInJldCIsInJlYWR5U3RhdGUiLCJvQWpheERhdGEiLCJmblNlcnZlckRhdGEiLCJzQWpheFNvdXJjZSIsImJBamF4RGF0YUdldCIsIl9mbkFqYXhQYXJhbWV0ZXJzIiwiX2ZuQWpheFVwZGF0ZURyYXciLCJkYXRhUHJvcCIsImNvbHVtblNlYXJjaCIsImNvbHVtbkNvdW50IiwicHJlU2VhcmNoIiwicHJlQ29sU2VhcmNoIiwiZGlzcGxheVN0YXJ0IiwiZGlzcGxheUxlbmd0aCIsIl9pRGlzcGxheUxlbmd0aCIsInBhcmFtIiwic1NlYXJjaCIsInJlZ2V4Iiwic05hbWUiLCJzZWFyY2hhYmxlIiwiYlNlYXJjaGFibGUiLCJvcmRlcmFibGUiLCJsZWdhY3kiLCJjb21wYXQiLCJtb2Rlcm4iLCJfZm5BamF4RGF0YVNyYyIsInJlY29yZHNUb3RhbCIsInJlY29yZHNGaWx0ZXJlZCIsIl9iSW5pdENvbXBsZXRlIiwiX2ZuSW5pdENvbXBsZXRlIiwiZGF0YVNyYyIsInNBamF4RGF0YVByb3AiLCJsYW5ndWFnZSIsInByZXZpb3VzU2VhcmNoIiwiaW5wdXQiLCJzRmlsdGVySW5wdXQiLCJmIiwic0ZpbHRlciIsInNlYXJjaEZuIiwic2VhcmNoRGVsYXkiLCJqcUZpbHRlciIsInNTZWFyY2hQbGFjZWhvbGRlciIsIm9uIiwiX2ZuVGhyb3R0bGUiLCJrZXlDb2RlIiwiZXYiLCJhY3RpdmVFbGVtZW50Iiwib0lucHV0IiwiaUZvcmNlIiwib1ByZXZTZWFyY2giLCJhb1ByZXZTZWFyY2giLCJmblNhdmVGaWx0ZXIiLCJvRmlsdGVyIiwiZm5SZWdleCIsImJFc2NhcGVSZWdleCIsIl9mbkZpbHRlciIsIl9mbkZpbHRlckNvbHVtbiIsIl9mbkZpbHRlckN1c3RvbSIsImZpbHRlcnMiLCJkaXNwbGF5Um93cyIsIm1lcmdlIiwic2VhcmNoU3RyIiwic21hcnQiLCJjYXNlSW5zZW5zaXRpdmUiLCJkaXNwbGF5IiwicnBTZWFyY2giLCJfZm5GaWx0ZXJDcmVhdGVTZWFyY2giLCJ0ZXN0IiwiaW52YWxpZGF0ZWQiLCJwcmV2U2VhcmNoIiwiZGlzcGxheU1hc3RlciIsImZpbHRlcmVkIiwiX2ZuRmlsdGVyRGF0YSIsIl9zRmlsdGVyUm93Iiwid29yZCIsIm0iLCJfX2ZpbHRlcl9kaXYiLCJfX2ZpbHRlcl9kaXZfdGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsImZpbHRlckRhdGEiLCJmb21hdHRlcnMiLCJ3YXNJbnZhbGlkYXRlZCIsInRvU3RyaW5nIiwiaW5uZXJUZXh0IiwiX2ZuU2VhcmNoVG9DYW1lbCIsIl9mblNlYXJjaFRvSHVuZyIsInRpZCIsInNJbmZvIiwiYW9EcmF3Q2FsbGJhY2siLCJfZm5VcGRhdGVJbmZvIiwibWF4IiwidG90YWwiLCJzSW5mb0VtcHR5Iiwic0luZm9GaWx0ZXJlZCIsIl9mbkluZm9NYWNyb3MiLCJzSW5mb1Bvc3RGaXgiLCJmbkluZm9DYWxsYmFjayIsImZvcm1hdHRlciIsImZuRm9ybWF0TnVtYmVyIiwiYWxsIiwiY2VpbCIsImlBamF4U3RhcnQiLCJkZWZlckxvYWRpbmciLCJfZm5TdHJpbmdUb0NzcyIsImFEYXRhIiwiX2ZuTGVuZ3RoQ2hhbmdlIiwiX2ZuTGVuZ3RoT3ZlcmZsb3ciLCJtZW51IiwiZDIiLCJsZW5ndGhzIiwic2VsZWN0IiwiYXJpYS1jb250cm9scyIsInNMZW5ndGhTZWxlY3QiLCJPcHRpb24iLCJkaXYiLCJzTGVuZ3RoIiwic0xlbmd0aE1lbnUiLCJvdXRlckhUTUwiLCJzUGFnaW5hdGlvblR5cGUiLCJwbHVnaW4iLCJwYWdlciIsInNQYWdpbmciLCJwIiwidmlzUmVjb3JkcyIsInBhZ2VzIiwiYnV0dG9ucyIsIl9mblBhZ2VDaGFuZ2UiLCJhY3Rpb24iLCJyZWNvcmRzIiwiZmxvb3IiLCJjaGFuZ2VkIiwiciIsInNQcm9jZXNzaW5nIiwic2Nyb2xsWSIsImNhcHRpb24iLCJjYXB0aW9uU2lkZSIsImhlYWRlckNsb25lIiwiY2xvbmVOb2RlIiwiZm9vdGVyQ2xvbmUiLCJmb290ZXIiLCJfZGl2Iiwic2l6ZSIsInNjcm9sbGVyIiwic1Njcm9sbFdyYXBwZXIiLCJzU2Nyb2xsSGVhZCIsImJvcmRlciIsInNTY3JvbGxIZWFkSW5uZXIiLCJib3gtc2l6aW5nIiwic1hJbm5lciIsInJlbW92ZUF0dHIiLCJzU2Nyb2xsQm9keSIsInNTY3JvbGxGb290Iiwic1Njcm9sbEZvb3RJbm5lciIsInNjcm9sbEhlYWQiLCJzY3JvbGxCb2R5Iiwic2Nyb2xsRm9vdCIsImJDb2xsYXBzZSIsIm5TY3JvbGxIZWFkIiwiblNjcm9sbEJvZHkiLCJuU2Nyb2xsRm9vdCIsImhlYWRlclRyZ0VscyIsImZvb3RlclRyZ0VscyIsImhlYWRlclNyY0VscyIsImZvb3RlclNyY0VscyIsImhlYWRlckNvcHkiLCJmb290ZXJDb3B5IiwiY29ycmVjdGlvbiIsInNhbml0eVdpZHRoIiwic2Nyb2xsWElubmVyIiwiZGl2SGVhZGVyIiwiZGl2SGVhZGVyU3R5bGUiLCJkaXZIZWFkZXJJbm5lciIsImRpdkhlYWRlcklubmVyU3R5bGUiLCJkaXZIZWFkZXJUYWJsZSIsImRpdkJvZHlFbCIsImRpdkJvZHkiLCJkaXZCb2R5U3R5bGUiLCJkaXZGb290ZXJJbm5lciIsImRpdkZvb3RlclRhYmxlIiwiaGVhZGVyIiwidGFibGVFbCIsInRhYmxlU3R5bGUiLCJpZTY3IiwiZHRIZWFkZXJDZWxscyIsImhlYWRlcldpZHRocyIsImZvb3RlcldpZHRocyIsImhlYWRlckNvbnRlbnQiLCJmb290ZXJDb250ZW50IiwiemVyb091dCIsIm5TaXplciIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsInNjcm9sbEJhclZpcyIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsImNsb25lIiwicHJlcGVuZFRvIiwiX2ZuQXBwbHlUb0NoaWxkcmVuIiwib3V0ZXJXaWR0aCIsIm9mZnNldEhlaWdodCIsIm5Ub1NpemUiLCJpT3V0ZXJXaWR0aCIsImJTY3JvbGxpbmciLCJwYWRkaW5nIiwic2Nyb2xsVG9wIiwiYW4xIiwiYW4yIiwibk5vZGUxIiwibk5vZGUyIiwibm9kZVR5cGUiLCJfX3JlX2h0bWxfcmVtb3ZlIiwiY29sdW1uSWR4IiwidmlzaWJsZUNvbHVtbnMiLCJoZWFkZXJDZWxscyIsInRhYmxlV2lkdGhBdHRyIiwidGFibGVDb250YWluZXIiLCJ1c2VySW5wdXRzIiwic3R5bGVXaWR0aCIsIl9mbkNvbnZlcnRUb1dpZHRoIiwidG1wVGFibGUiLCJtYXJnaW4iLCJfZm5HZXRXaWRlc3ROb2RlIiwic0NvbnRlbnRQYWRkaW5nIiwiaG9sZGVyIiwicmlnaHQiLCJib3VuZGluZyIsIl9yZXN6RXZ0IiwiYmluZFJlc2l6ZSIsIl9mbkdldE1heExlblN0cmluZyIsIm1heElkeCIsInNyY0NvbCIsImZpeGVkIiwiYWFTb3J0aW5nRml4ZWQiLCJmaXhlZE9iaiIsIm5lc3RlZFNvcnQiLCJwcmUiLCJwb3N0IiwiX2lkeCIsInNvcnRDb2wiLCJhaU9yaWciLCJvRXh0U29ydCIsImZvcm1hdHRlcnMiLCJfZm5Tb3J0RGF0YSIsIngiLCJ5IiwiZGF0YUEiLCJkYXRhQiIsImxhYmVsIiwib0FyaWEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzU29ydEFzY2VuZGluZyIsInNTb3J0RGVzY2VuZGluZyIsIl9mblNvcnRMaXN0ZW5lciIsIm5leHRTb3J0SWR4IiwibmV4dCIsImJTb3J0TXVsdGkiLCJzb3J0SWR4IiwiYXR0YWNoVG8iLCJfZm5CaW5kQWN0aW9uIiwic2hpZnRLZXkiLCJvbGRTb3J0IiwiYUxhc3RTb3J0Iiwic29ydENsYXNzIiwic1NvcnRDb2x1bW4iLCJiU29ydENsYXNzZXMiLCJjdXN0b21EYXRhIiwiY3VzdG9tU29ydCIsInNTb3J0RGF0YVR5cGUiLCJzdGF0ZSIsInRpbWUiLCJvU2F2ZWRTdGF0ZSIsImZuU3RhdGVTYXZlQ2FsbGJhY2siLCJsb2FkZWQiLCJhYlN0YXRlTG9hZCIsImR1cmF0aW9uIiwiaVN0YXRlRHVyYXRpb24iLCJvTG9hZGVkU3RhdGUiLCJmblN0YXRlTG9hZENhbGxiYWNrIiwibGV2ZWwiLCJ0biIsInNFcnJNb2RlIiwiZXJyTW9kZSIsIkVycm9yIiwibWFwcGVkTmFtZSIsImV4dGVuZGVyIiwiYnJlYWtSZWZzIiwiYmx1ciIsIndoaWNoIiwicHJldmVudERlZmF1bHQiLCJzU3RvcmUiLCJjYWxsYmFja0FyciIsImV2ZW50TmFtZSIsInJldmVyc2UiLCJFdmVudCIsInRyaWdnZXIiLCJyZW5kZXJlciIsImhvc3QiLCJfX2FwaVN0cnVjdCIsIl9fYXJyYXlQcm90byIsIkFycmF5IiwiY29udGV4dCIsImN0eFNldHRpbmdzIiwibWl4ZWQiLCJqcSIsInRhYmxlcyIsInNlbGVjdG9yIiwib3B0cyIsIkFwaSIsImFueSIsImNvdW50IiwiY3R4IiwiYWx3YXlzTmV3IiwiaXRlbXMiLCJhcGlJbnN0IiwiX3NlbGVjdG9yX3Jvd19pbmRleGVzIiwiYXBpU2VsZWN0b3IiLCJsYXN0SW5kZXhPZiIsInBsdWNrIiwicG9wIiwicmVkdWNlIiwicmVkdWNlUmlnaHQiLCJzaGlmdCIsInRvJCIsInRvSlF1ZXJ5IiwidW5zaGlmdCIsInNjb3BlIiwiX19kdF93cmFwcGVyIiwic3RydWN0IiwibWV0aG9kU2NvcGluZyIsInN0cnVjIiwibWV0aG9kRXh0IiwicHJvcEV4dCIsInJlZ2lzdGVyIiwibWV0aG9kIiwiaGVpciIsInJlZ2lzdGVyUGx1cmFsIiwicGx1cmFsTmFtZSIsInNpbmd1bGFyTmFtZSIsIl9fdGFibGVfc2VsZWN0b3IiLCJwYWdpbmciLCJpbmZvIiwicmVjb3Jkc0Rpc3BsYXkiLCJzZXJ2ZXJTaWRlIiwiX19yZWxvYWQiLCJvbmUiLCJhYm9ydCIsInJlc2V0UGFnaW5nIiwiX3NlbGVjdG9yX3J1biIsInNlbGVjdEZuIiwicmVzIiwic2VsZWN0b3JUeXBlIiwiX3NlbGVjdG9yX29wdHMiLCJfc2VsZWN0b3JfZmlyc3QiLCJpbnN0IiwiZGlzcGxheUZpbHRlcmVkIiwiZGlzcGxheUZpbHRlcmVkTWFwIiwic2VsIiwic2VsSW50IiwiY2VsbElkeCIsImNsb3Nlc3QiLCJyb3dPYmoiLCJoYXNoIiwidGhhdElkeCIsImxvb3BSb3ciLCJsb29wQ2VsbHMiLCJuZXdSb3dzIiwibW9kUm93cyIsIl9fZGV0YWlsc19yZW1vdmUiLCJfZGV0YWlscyIsIl9kZXRhaWxzU2hvdyIsIl9fZGV0YWlsc19kaXNwbGF5IiwiaW5zZXJ0QWZ0ZXIiLCJfX2RldGFpbHNfZXZlbnRzIiwibmFtZXNwYWNlIiwiZHJhd0V2ZW50IiwiY29sdmlzRXZlbnQiLCJkZXN0cm95RXZlbnQiLCJvZmYiLCJfY2hpbGRfb2JqIiwiX2NoaWxkX210aCIsImtsYXNzIiwiYWRkUm93IiwiY3JlYXRlZCIsIl9fcmVfY29sdW1uX3NlbGVjdG9yIiwiX19jb2x1bW5EYXRhIiwicjEiLCJyMiIsIm5hbWVzIiwidmlzQ29sdW1ucyIsImpxUmVzdWx0IiwiY2FsYyIsIl9fc2V0Q29sdW1uVmlzIiwicm93U2VsZWN0b3IiLCJjb2x1bW5TZWxlY3RvciIsImFsbENlbGxzIiwiZm5TZWxlY3RvciIsInNldCIsImNhc2VJbnNlbiIsInZlcnNpb25DaGVjayIsInZlcnNpb24iLCJpVGhpcyIsImlUaGF0IiwiYVRoaXMiLCJhVGhhdCIsImlzRGF0YVRhYmxlIiwiZm5Jc0RhdGFUYWJsZSIsImdldCIsImlzIiwiaGVhZCIsImZvb3QiLCJmblRhYmxlcyIsImNhbWVsVG9IdW5nYXJpYW4iLCJqcVJvd3MiLCJvcmlnIiwianFUYWJsZSIsImpxVGJvZHkiLCJqcVdyYXBwZXIiLCJyZW1vdmVkTWV0aG9kIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiYXJnNCIsInRva2VuIiwicGx1cmFsIiwicmVzb2x2ZWQiLCJiU2Nyb2xsQ29sbGFwc2UiLCJ0b0Zvcm1hdCIsInBhcnNlIiwic2Vzc2lvblN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwibG9jYXRpb24iLCJwYXRobmFtZSIsInNldEl0ZW0iLCJvUGFnaW5hdGUiLCJzRmlyc3QiLCJzTGFzdCIsInNOZXh0Iiwic1ByZXZpb3VzIiwic1Njcm9sbFhJbm5lciIsInNTY3JvbGxZIiwiYW9Sb3dDYWxsYmFjayIsImFvSGVhZGVyQ2FsbGJhY2siLCJhb0Zvb3RlckNhbGxiYWNrIiwiYW9Sb3dDcmVhdGVkQ2FsbGJhY2siLCJhb1ByZURyYXdDYWxsYmFjayIsImFvSW5pdENvbXBsZXRlIiwiYW9TdGF0ZVNhdmVQYXJhbXMiLCJhb1N0YXRlTG9hZFBhcmFtcyIsImFvU3RhdGVMb2FkZWQiLCJhb1N0YXRlU2F2ZSIsImFvU3RhdGVMb2FkIiwiYW9TZXJ2ZXJQYXJhbXMiLCJhb0Rlc3Ryb3lDYWxsYmFjayIsInBhZ2luYXRlIiwibWluIiwib1BsdWdpbnMiLCJidWlsZCIsInBhZ2VCdXR0b24iLCJvSlVJQ2xhc3NlcyIsInNWZXJzaW9uIiwiYWZuRmlsdGVyaW5nIiwiYVR5cGVzIiwib2ZuU2VhcmNoIiwib1NvcnQiLCJhZm5Tb3J0RGF0YSIsIm9TdGRDbGFzc2VzIiwib1BhZ2luYXRpb24iLCJzUGFnZUJ1dHRvbiIsInNQYWdlQnV0dG9uQWN0aXZlIiwic1BhZ2VCdXR0b25EaXNhYmxlZCIsInNTb3J0QXNjIiwic1NvcnREZXNjIiwic1NvcnRKVUlBc2MiLCJzU29ydEpVSURlc2MiLCJzU29ydEpVSVdyYXBwZXIiLCJzU29ydEljb24iLCJleHRQYWdpbmF0aW9uIiwiX251bWJlcnMiLCJudW1iZXJzIiwibnVtYmVyc19sZW5ndGgiLCJoYWxmIiwiRFRfZWwiLCJzaW1wbGUiLCJmdWxsIiwic2ltcGxlX251bWJlcnMiLCJmdWxsX251bWJlcnMiLCJmaXJzdF9sYXN0X251bWJlcnMiLCJidG5EaXNwbGF5IiwiYnRuQ2xhc3MiLCJhY3RpdmVFbCIsImFyaWEiLCJjb3VudGVyIiwiYXR0YWNoIiwiY29udGFpbmVyIiwiYnV0dG9uIiwiY2xpY2tIYW5kbGVyIiwiYXJpYS1sYWJlbCIsImRhdGEtZHQtaWR4IiwidGFiaW5kZXgiLCJlbXB0eSIsImZvY3VzIiwicGFyc2VkIiwic3RyaW5nIiwiX19udW1lcmljUmVwbGFjZSIsImRlY2ltYWxQbGFjZSIsInJlMSIsInJlMiIsIkluZmluaXR5IiwibnVtLWZtdCIsImh0bWwtbnVtIiwiaHRtbC1udW0tZm10IiwiZGF0ZS1wcmUiLCJ0cyIsImh0bWwtcHJlIiwic3RyaW5nLXByZSIsInN0cmluZy1hc2MiLCJzdHJpbmctZGVzYyIsImpxdWVyeXVpIiwiX19odG1sRXNjYXBlRW50aXRpZXMiLCJyZW5kZXIiLCJudW1iZXIiLCJ0aG91c2FuZHMiLCJwcmVjaXNpb24iLCJwcmVmaXgiLCJwb3N0Zml4IiwibmVnYXRpdmUiLCJmbG8iLCJ0b0ZpeGVkIiwiYWJzIiwiaW50UGFydCIsImZsb2F0UGFydCIsIl9mbk5vZGVUb0RhdGFJbmRleCIsIl9mbk5vZGVUb0NvbHVtbkluZGV4IiwiX2ZuQ2FsY3VsYXRlRW5kIiwiZGF0YVRhYmxlU2V0dGluZ3MiLCJkYXRhVGFibGVFeHQiLCJJbm5lckZvcm1CdXR0b24iLCJiaW5kIiwiX3RoaXMiLCJCdXR0b25DbGlja0V2ZW50IiwiR2V0UHJvcCIsIkZyYW1lX0Nsb3NlRGlhbG9nIiwiR2V0QnV0dG9uRWxlbSIsImFjdGlvblR5cGUiLCJocmVmIiwicHJpbnQiLCJzYXZlQW5kQ2xvc2UiLCJBbGVydExvYWRpbmciLCJEaWFsb2dMb2FkaW5nSWQiLCJsaXN0Rm9ybUJ1dHRvbkVsZW1JZCIsIk9wZW5lcldpbmRvd09iaiIsIkNsb3NlRGlhbG9nIiwiRGlhbG9nSWQwMiIsImZvcm1PcGVyYXRpb25UeXBlIiwiZGV2T3BlcmF0aW9uRW5kRnVuYyIsIldGRENUX0JhaWR1TWFwQ29udGFpbmVyIiwiY2xpZW50SW5zdGFuY2VOYW1lIiwibWFwT2JqIiwibWFwU2VsZWN0ZWRMbmdMYXQiLCJtYXBFZGl0T2JqcyIsIm1hcFZpZXdPYmpzIiwib2xkRWRpdERhdGEiLCJMb2FkQmFpRHVKc0NvbXBsZXRlZCIsIkJNYXBHTCIsIk1hcCIsImNlbnRlckFuZFpvb20iLCJQb2ludCIsImVuYWJsZVNjcm9sbFdoZWVsWm9vbSIsImFkZEV2ZW50TGlzdGVuZXIiLCJsYXRsbmciLCJJbml0RHJhd0NvbnRyb2wiLCJtYXBEYXRhIiwicG9pbnQiLCJwYXRoIiwibG5nIiwibGF0IiwibWFya2VyIiwiTWFya2VyIiwiYWRkT3ZlcmxheSIsInBhblRvIiwiYWRkVG9NYXBFZGl0T2JqcyIsIkluaXRpYWxpemVBdEluc3RhbmNlIiwiaW5pdGlhbGl6ZVBhcmFzIiwibG9hZEZ1bmMiLCJCYWlkdU1hcFV0aWxpdHkiLCJMb2FkSnNDb21wbGV0ZWQiLCJnZXRQb3NpdGlvbiIsImVkaXRPYmoiLCIkZHJhd0NvbnRyb2xXcmFwIiwiJGFwcGVuZEFkZFBvaW50Q29udHJvbCIsIiRhcHBlbmRDbGVhckNvbnRyb2wiLCJjbGljayIsInJlbW92ZU92ZXJsYXkiLCJfcmVmX2ZpbGVQYXRoIiwiV0ZEQ1RfQ0tFZGl0b3I0IiwiY2tlZGl0b3JJbnN0YW5jZSIsImFyZWFIZWlnaHQiLCJmaWxlbmFtZSIsImVkaXRvckNvbmZpZ1VybCIsIkFwcGVuZFRpbWVTdGFtcFVybCIsIkNLRURJVE9SIiwiY3VzdG9tQ29uZmlnIiwiZ2V0RGF0YSIsIldGRENUX0RvY3VtZW50Q29udGVudFVwbG9hZENvbnZlcnRUb1BERkNvbnRhaW5lciIsIldGRENUX0Ryb3BEb3duU2VsZWN0IiwiZGVmYXVsdFNlbGVjdGVkIiwiV0ZEQ1RfRmlsZUltYWdlTGlzdCIsIm9wQnV0dG9ucyIsImJlZm9yZVNlbGVjdEpTTWV0aG9kIiwiYWZ0ZXJVcGxvYWRlZEpzTWV0aG9kIiwiZmlsZUV4VHlwZSIsImF1dGhUeXBlIiwicmVuZGVyZXJDb250YWluZXJKc01ldGhvZCIsInJlbmRlcmVyU2luZ2xlUm93SnNNZXRob2QiLCJjYXRlZ29yeVR5cGUiLCJnZXRCaW5kUmVjb3JkSWRKc01ldGhvZCIsImdldEJpbmRSZWNvcmRUeXBlSnNNZXRob2QiLCJ1c2VUZW1wbGF0ZSIsInVwbG9hZEVuYWJsZSIsImRvd25sb2FkRW5hYmxlIiwiZGVsZXRlRW5hYmxlIiwicHJldmlld0VuYWJsZSIsIm1vdmVPcmRlckVuYWJsZSIsImNsaWNrRmlsZU5hbWVBY3Rpb24iLCJvYmpUeXBlIiwiYWNJbnRlcmZhY2UiLCJnZXRGaWxlTGlzdERhdGEiLCJkb3duTG9hZEZpbGVCeUZpbGVJZCIsIkJpbmRFbGVtZW50QXR0clRvSW5zdGFuY2VQcm9wIiwiQnVpbGRGaWxlTGlzdCIsIkdldFRoaXNSZWNvcmRJZCIsIm9iaklkIiwiZm9ybVJ1bnRpbWVJbnN0IiwiR2V0VGhpc1JlY29yZFR5cGUiLCJmaWxlX2ltYWdlX2xpc3Rfd3JhcF9pZCIsIiRkaXZXYXJwIiwiY2F0ZWdvcnkiLCJmaWxlSW5mbyIsImltZ0VsZW0iLCJCdWlsZEZpbGVEaXNsYXkiLCJyZXNwb25zZUpTT04iLCJmaWxlSWQiLCJXRkRDVF9GaWxlVXBsb2FkQ29udGFpbmVyIiwidXBsb2FkRmlsZSIsImRvd25sb2FkRmlsZSIsImRlbGV0ZUZpbGUiLCJCdWlsZFVwbG9hZENvbnRhaW5lciIsInVwbG9hZFdhcnBJZCIsIkdldFVwbG9hZEVuZFBvaW50UmVxdWVzdCIsImVuZFBvaW50IiwiZW5kcG9pbnQiLCJDcmVhdGVEZWZhdWx0VGVtcGxhdGUiLCJ0ZW1wbGF0ZUlkIiwiJHVwbG9hZFdhcnAiLCJxcSIsIkZpbmVVcGxvYWRlciIsImVsZW1lbnQiLCJ0ZW1wbGF0ZSIsIm11bHRpcGxlIiwicmVxdWVzdCIsImNhbGxiYWNrcyIsIm9uQ29tcGxldGUiLCJ1cGxvYWRfZmlsZV9saXN0X3dyYXBfaWQiLCIkdGJvZHkiLCJCdWlsZEZpbGVJbmZvVGFibGVSb3ciLCJmaWxlQ29kZSIsImZpbGVOYW1lIiwiRW5jb2RlSHRtbCIsImZpbGVDcmVhdGVUaW1lIiwiRGF0ZVV0aWxpdHkiLCJEYXRhRm9ybWF0QnlUaW1lU3RhbXAiLCJmaWxlU2l6ZSIsIkhhcmREaXNrVXRpbGl0eSIsIkJ5dGVDb252ZXJ0IiwiZmlsZUNyZWF0b3JOYW1lIiwiJHRyT2JqIiwiQnVpbGRGaWxlSW5mb1RhYmxlUm93SW5uZXJCdXR0b25zIiwiJHRyIiwiJHRyTGFzdFRkIiwiJGRlbGV0ZUVsZW0iLCJDb25maXJtIiwiJG1vdmVVcEVsZW0iLCIkbW92ZURvd25FbGVtIiwiJGRvd25sb2FkRWxlbSIsIm9wZW4iLCIkcHJldmlld0VsZW0iLCJUZXN0RmlsZVByZXZpZXdFbmFibGUiLCJXRkRDVF9SYWRpb0dyb3VwIiwicmFkaW9Hcm91cE5hbWUiLCJyYWRpb0dyb3VwV3JhcElkIiwibGV2ZWwyQmluZENvbnRyb2xJZCIsImRhdGFTb3VyY2UiLCJyYWRpb0dyb3VwRGl2Iiwicm93bnVtIiwiSVRFWFQiLCJJVkFMVUUiLCJuZXdSb3ciLCJpdGVtUmFkaW9JZCIsIml0ZW1SYWRpbyIsIklzMkxldmVsREQiLCJjaGFuZ2UiLCJUcnlCaW5kMkxldmVsREQiLCJhZnRlciIsImRhdGFTb3VyY2VBbGxMZXZlbCIsImNoaWxkRERBcnJheSIsIlBBUkVOVFZBTFVFIiwiJGwyRWxlbSIsImNoaWxkRERBcnJheUpzb24iLCJXRkRDVF9TZWxlY3RPcmdhblVzZXIiLCJnZXRPcmdhblRyZWVEYXRhIiwicmVsb2FkTGlzdERhdGEiLCJ0cmVlQ29uZmlnIiwidHJlZUlkRmllbGROYW1lIiwidHJlZU9iaiIsInRyZWVTZWxlY3RlZE5vZGUiLCJ0cmVlU2V0dGluZyIsImFzeW5jIiwiZW5hYmxlIiwic2ltcGxlRGF0YSIsImlkS2V5IiwicElkS2V5Iiwib25DbGljayIsImV2ZW50IiwidHJlZUlkIiwidHJlZU5vZGUiLCJnZXRaVHJlZU9iaiIsIl9ob3N0IiwiU2VsZWN0ZWRPcmdhbk5vZGUiLCJvbkFzeW5jU3VjY2VzcyIsInVzZXJDb25maWciLCJ1c2VyV2FycEVsZW1PYmoiLCJzZWxlY3RlZFVzZXIiLCJidXR0b25UZXh0IiwibXVsdGlwbGVTcGxpdCIsInJlc3VsdE5hbWVCaW5kVG9Db250cm9sRmllbGQiLCJyZXN1bHRWYWx1ZUJpbmRUb0NvbnRyb2xGaWVsZCIsInJlc3VsdE5hbWVCaW5kVG9Db250cm9sSWQiLCJyZXN1bHRWYWx1ZUJpbmRUb0NvbnRyb2xJZCIsInNlbGVjdENvbmRpdGlvbiIsIndpbmRvd0NhcHRpb24iLCJzZWxlY3ROdW1iZXIiLCJzZXR0aW5nVHlwZSIsImRlZmF1bHRTZWxlY3RlZE9yZ2FuSWQiLCJjb250YWluZXJJZCIsInNpbmdsZVNlbGVjdEF1dG9DbG9zZSIsIiRidXR0b24iLCJzZWxmSW5zdGFuY2UiLCJDbGlja0V2ZW50IiwiQnVpbGRDb250ZW50SFRNTCIsInNlbGVjdGVkT3JnYW5JZCIsInVzZXJDb250YWluZXJJZCIsInRyZWVVTElkIiwiaHRtbFRlbXBsYXRlIiwiJGNvbnRhaW5lckRpdiIsIkVuc3VyZUNsaWNrRXZlbnQiLCJDbG9zZUNsaWNrRXZlbnQiLCJDbGVhckNsaWNrRXZlbnQiLCJ6VHJlZSIsImV4cGFuZEFsbCIsImdldE5vZGVCeVBhcmFtIiwic2VsZWN0Tm9kZSIsIkJ1aWxkVXNlclRhYmxlIiwiRGlhbG9nQWxlcnRJZCIsIkNsZWFyVXNlclRhYmxlIiwib3JnYW5JZCIsIiR1c2VyVGFibGUiLCJ1c2VyRGF0YSIsInVzZXJJZCIsInVzZXJOYW1lIiwidXNlclBob25lTnVtYmVyIiwidXNlckRlc2MiLCJjaGVja0JveElkIiwidXNlcklzU2VsZWN0ZWQiLCJUZXN0VXNlcklzU2VsZWN0ZWQiLCJVc2VyQ2xpY2tFdmVudCIsIlVuQ2hlY2tBbGxVc2VyRXhjbHVkZSIsIkNsZWFyU2VsZWN0ZWRVc2VyIiwiQWRkVXNlclRvU2VsZWN0ZWREYXRhIiwiRGVsZXRlVXNlclRvU2VsZWN0ZWREYXRhIiwiRGVsZXRlIiwic3RvcFByb3BhZ2F0aW9uIiwiRGlhbG9nRWxlbSIsIm1vZGFsIiwiQnVpbGRTZWxlY3RlZE5hbWUiLCJCdWlsZFNlbGVjdGVkVmFsdWUiLCJ2YWx1ZXMiLCJCaW5kUmVzdWx0VG8iLCJDbG9zZUJ5RWxlbUlkIiwiV0ZEQ1RfU2ltcGxlTGFiZWwiLCJkZWZmb3JtYXQiLCJjdFZhbHVlIiwiY3REYXRlIiwiQ29udmVydEZyb21TdHJpbmciLCJGb3JtYXQiLCJXRkRDVF9TdWJGb3JtTGlzdENvbnRhaW5lciIsIl9BZGRCdXR0b25FbGVtIiwiXyRUZW1wbGF0ZVRhYmxlUm93IiwiXyRTaW5nbGVDb250cm9sRWxlbSIsIl8kVGFibGVFbGVtIiwiXyRUYWJsZUhlYWRFbGVtIiwiXyRUYWJsZUJvZHlFbGVtIiwiX0VkaXRJblJvdyIsIl9EaXNwbGF5X09QQnV0dG9uc19BZGQiLCJfRGlzcGxheV9PUEJ1dHRvbnNfVXBkYXRlIiwiX0Rpc3BsYXlfT1BCdXR0b25zX0RlbCIsIl9EaXNwbGF5X09QQnV0dG9uc19WaWV3IiwiX0Zvcm1SdW50aW1lSG9zdCIsIm9wYnV0dG9ucyIsInNvdXJjZVRhYmxlIiwicHJlcGVuZCIsImhvc3RFbGVtIiwic2VsZk9iaiIsIkFkZEV2ZW50IiwidmFsaWRhdGVSZW5kZXJlckNoYWluRW5hYmxlIiwiVmFsaWRhdGVSZW5kZXJlckNoYWluRW5hYmxlIiwiVHJ5R2V0UmVsYXRpb25QT0Nsb25lIiwicmVsYXRpb25fcG9faWQiLCJJbm5lclJvd19BZGRSb3dUb0NvbnRhaW5lciIsInN1YlJlbGF0aW9uUE8iLCJjbG9uZVN1YlJlbGF0aW9uUE8iLCJvdXRlcktleUZpZWxkVmFsdWUiLCJ0ZW1wUE8iLCJhbGxSZWNvcmRMaXN0IiwidGhpc1BPTGlzdERhdGFSZWNvcmQiLCJvbmVSZWNvcmQiLCJUcnVlIiwiZmllbGRJdGVtIiwiRGlhbG9nX0FkZFJvd1RvQ29udGFpbmVyIiwiSW5uZXJSb3dfQ29tcGxldGVkTGFzdEVkaXQiLCJhbGxEYXRhIiwic2VsZlBPIiwic2luZ2xlUmVsYXRpb25QTyIsIkdldFJvd0RhdGEiLCJ0ZW1wUmVjb3JkIiwidGVtcFNlbGZSZWNvcmQiLCJUcnlCdWlsZFJlY29yZCIsIiRob3N0RWxlbSIsInJlbmRlcmVyQ2hhaW5QYXJhcyIsIkRpYWxvZ19TaG93QWRkUm93U3ViRm9ybURpYWxvZyIsIlZhbGlkYXRlU2VyaWFsaXphdGlvblN1YkZvcm1EYXRhRW5hYmxlIiwic2VyaWFsaXphdGlvblN1YkZvcm1EYXRhIiwiR2V0Um93SWQiLCJTZXRSb3dJZCIsIkdldENoaWxkUmVsYXRpb25QT0FycmF5IiwiU2F2ZURhdGFUb1Jvd0F0dHIiLCJhYm91dFJlbGF0aW9uUE9BcnJheSIsIlRyeUdldENoaWxkUmVsYXRpb25QT0FycmF5Q2xvbmUiLCJjaGlsZFJlbGF0aW9uIiwiQ2xvbmVBcnJheVNpbXBsZSIsIl9wbyIsImJpbmREYXRhU291cmNlIiwiVHJ5R2V0QmluZERhdGFTb3VyY2VBdHRyIiwiVHJ5R2V0SW5uZXJDb250cm9sQmluZFRhYmxlTmFtZSIsImVyck1zZyIsInBhcmVudFJlbGF0aW9uUE8iLCJlcnJvck1lc3NhZ2UiLCJfJExhc3RFZGl0Um93Iiwic3ViVGFibGVQS0ZpZWxkTmFtZSIsImxhc3RPcGVyYXRpb25UZCIsImxhc3RPcGVyYXRpb25PdXRlckRpdiIsImJ0bl9vcGVyYXRpb25fZGVsIiwiYnRuX2RlbF9zZW5kZXIiLCJJbm5lclJvd19EZWxldGUiLCJidG5fb3BlcmF0aW9uX3VwZGF0ZSIsImJ0bl91cGRhdGVfc2VuZGVyIiwiSW5uZXJSb3dfVG9FZGl0U3RhdHVzIiwicm93UmVsYXRpb25QTyIsInJvd1NwYW5Db250cm9scyIsInNwYW5Db250cm9sIiwiY29udHJvbElkIiwiZWRpdENvbnRyb2wiLCJJbm5lclJvd19Ub1ZpZXdTdGF0dXMiLCJzaW5nbGVDb250cm9sIiwidHh0U3BhbiIsImJlZm9yZSIsIkdldEFkZE9wZXJhdGlvbk5hbWUiLCJ0aGlzUmVjb3JkSWQiLCJ0aGlzVGFibGVJZCIsIkRpYWxvZ19HZXRfQnV0dG9uX0NsaWNrX1BhcmEiLCJ3aW5kb3dIZWlnaHQiLCJ3aW5kb3dXaWR0aCIsImRpYWxvZ1dpbmRvd1RpdGxlIiwicGFyZW50UmVjb3JkSWQiLCJEaWFsb2dfQWRkUm93X0FkZFZpZXdCdXR0b24iLCJvcGVyYXRpb25PdXRlckRpdiIsImJ0bl9vcGVyYXRpb25fdmlldyIsImRpYWxvZ1dpbmRvd1BhcmEiLCJCdWlsZFZpZXciLCJPcGVuSWZyYW1lV2luZG93IiwiRGlhbG9nSWQiLCJEaWFsb2dfQWRkUm93X0FkZFVwZGF0ZUJ1dHRvbiIsIkRpYWxvZ19BZGRSb3dfQWRkRGVsZXRlQnV0dG9uIiwiRGlhbG9nX1N1YkZvcm1EaWFsb2dDb21wbGV0ZWRFZGl0IiwidGhpc0luc3RhbmNlIiwic3ViRm9ybU1haW5SZWxhdGlvblBPIiwiZGF0YUlzRnJvbVNlcnZlciIsImlkRmllbGRQTyIsIiRvbGRUckVsZW0iLCJXRkRDVF9UYWJDb250YWluZXIiLCIkdGFiYmVyIiwiJGxhYmVycyIsIiR1bCIsIiRsYWJlciIsInRhYnMiLCJXRkRDVF9UZXh0QXJlYSIsIldGRENUX1RleHRCb3giLCJXRkRDVF9UZXh0RGF0ZVRpbWUiLCJXTERDVF9EZWxldGVCdXR0b24iLCJfTGlzdFRhYmxlQ29udGFpbmVySW5zdGFuY2UiLCJSZXNvbHZlU2VsZiIsImF0dHJpYnV0ZXMiLCIkV0xEQ1RfTGlzdFRhYmxlQ29udGFpbmVyRWxlbSIsInBhcmVudHMiLCJuZXh0QWxsIiwib3BlcmF0aW9uIiwiaXNDb25maXJtIiwiY2hlY2tlZFJlY29yZE9ianMiLCJHZXRDaGVja2VkUmVjb3JkIiwiSWQiLCJXTERDVF9Gb3JtQnV0dG9uIiwiZm9ybWlkIiwiYnV0dG9uaWQiLCJ3aW5kb3djYXB0aW9uIiwid2luZG93aGVpZ2h0Iiwid2luZG93d2lkdGgiLCJGcmFtZV9PcGVuSWZyYW1lV2luZG93IiwibWVudVJpZ2h0VXJsUGFyYSIsIldMRENUX0xpc3RCdXR0b25Db250YWluZXIiLCIkYnV0dG9uRGl2RWxlbUxpc3QiLCJpbm5lcldyYXAiLCJpbm5lckluc2lkZVdyYXBEaXYiLCIkYnV0dG9uRWxlbSIsImNsaWVudFJlc29sdmVOYW1lIiwiY2xpZW50UmVzb2x2ZU9iamVjdCIsIiRyZXNvbHZlZEVsZW0iLCJXTERDVF9MaXN0Q29tcGxleFNlYXJjaENvbnRhaW5lciIsIl8kQ29tcGxleFNlYXJjaEJ1dHRvbiIsIl8kQ2xlYXJCdXR0b24iLCJfJENsb3NlQnV0dG9uIiwiJHNlYXJjaEJ1dHRvbnNXcmFwIiwiQnVpbGRlclNlYXJjaENvbmRpdGlvbiIsImFsbENvbnRyb2xzIiwib3BlcmF0b3IiLCJHZXRTdGF0dXMiLCJIaWRlIiwiV0xEQ1RfTGlzdFNpbXBsZVNlYXJjaENvbnRhaW5lciIsIl8kU2ltcGxlU2VhcmNoQnV0dG9uIiwiXyRTaG93Q29tcGxleFNlYXJjaEJ1dHRvbiIsInBhZ2VXaWR0aCIsIlBhZ2VTdHlsZVV0aWxpdHkiLCJHZXRQYWdlV2lkdGgiLCJidXR0b25XcmFwV2lkdGgiLCJoaWRDb250cm9scyIsIkhpZGVDb21wbGV4QnV0dG9uIiwiV0xEQ1RfTGlzdFRhYmxlQ2hlY2tCb3giLCIkdGQiLCIkY2hlY2tib3giLCJsaXN0VGFibGVDb250YWluZXJJbnN0YW5jZSIsIl9fSW5uZXJFbGVtR2V0SW5zdGFuY2UiLCJTYXZlQ2hlY2tlZFJvd0RhdGEiLCJEZWxldGVDaGVja2VkUm93RGF0YSIsIkdldEhUTUwiLCJfQ3VycmVudFBhZ2VOdW0iLCJfRGF0YVNldCIsIl9DYWNoZSRTaW5nbGVDb250cm9sRWxlbSIsIl9DYWNoZVJlbmRlcmVyRGF0YUNoYWluUGFyYXMiLCJfU2ltcGxlU2VhcmNoQ29udGFpbmVySW5zdGFuY2UiLCJfQ29tcGxleFNlYXJjaENvbnRhaW5lckluc3RhbmNlIiwiX1F1ZXJ5UE9MaXN0IiwiX0NoZWNrZWRSZWNvcmRBcnJheSIsIl8kRWxlbSIsIl9MaXN0UnVudGltZUluc3RhbmNlIiwiJHNpbXBsZVNlYXJjaENvbnRhaW5lckVsZW0iLCJwcmV2QWxsIiwiJGNvbXBsZXhTZWFyY2hDb250YWluZXJFbGVtIiwibGlzdEluc3RhbmNlIiwiU2ltcGxlU2VhcmNoQ2xpY2tFdmVudCIsIlNob3dDb21wbGV4U2VhcmNoQ2xpY2tFdmVudCIsIkNvbXBsZXhTZWFyY2hDbGlja0V2ZW50IiwiQ29tcGxleFNlYXJjaENsZWFyQ2xpY2tFdmVudCIsIkNvbXBsZXhTZWFyY2hDbG9zZUNsaWNrRXZlbnQiLCIkdGVtcGxhdGVUYWJsZSIsIiR0ZW1wbGF0ZVRhYmxlUm93IiwiJHRlbXBsYXRlVGFibGVIZWFkZXJSb3dzIiwiQXBwZW5kQ2hlY2tCb3hDb2x1bW5UZW1wbGF0ZSIsImlzUmVSZW5kZXJlciIsInBhZ2VTaXplIiwibGlzdERhdGFzZXRQYWdlU2l6ZSIsIm5vdFNjcmlwdEhUTUwiLCJSZW1vdmVTY3JpcHQiLCJjb25kaXRpb25zIiwibW9ja0RhdGFTZXQiLCJwYWdlTnVtIiwic3RhcnRSb3ciLCJlbmRSb3ciLCJwcmVQYWdlIiwibmV4dFBhZ2UiLCJpc0ZpcnN0UGFnZSIsImlzTGFzdFBhZ2UiLCJoYXNQcmV2aW91c1BhZ2UiLCJoYXNOZXh0UGFnZSIsIm5hdmlnYXRlUGFnZXMiLCJuYXZpZ2F0ZXBhZ2VOdW1zIiwibmF2aWdhdGVGaXJzdFBhZ2UiLCJuYXZpZ2F0ZUxhc3RQYWdlIiwiZmlyc3RQYWdlIiwibGFzdFBhZ2UiLCJDcmVhdGVUYWJsZSIsImVmZmVjdCIsImxpc3RRdWVyeVBPTGlzdCIsImV4VmFsdWUxIiwiZXhWYWx1ZTIiLCJleFZhbHVlMyIsIiR0ZW1wbGF0ZVRhYmxlQm9keSIsIlJlbmRlcmVyU2luZ2xlUm93IiwiQ3JlYXRlUGFnaW5nIiwiR2V0UGFnZUhlaWdodCIsIm9yZGVyaW5nIiwic2VhcmNoaW5nIiwiJHRoIiwiJGNsb25lUm93IiwiJHRkcyIsIiRkaXZDVEVsZW0iLCJiaW5kVG9GaWVsZCIsImNsaWVudFJlc29sdmVJbnN0YW5jZU5hbWUiLCIkcm93IiwicGFnaW5nT3V0ZXJFbGVtIiwicGFnaW5nSW5uZXJFbGVtIiwiQ2hhbmdlUGFnZU51bSIsIiRsaXN0VGFibGVDb250YWluZXIiLCJwYXJlbnRzVW50aWwiLCIkbGlzdFRhYmxlQ29udGFpbmVySW5zdGFuY2UiLCJEaWFsb2dFbGVtT2JqIiwic2ltcGxlQ29uZGl0aW9ucyIsImNvbXBsZXhDb25kaXRpb25zIiwiQ2xvc2VEaWFsb2dFbGVtIiwiR2V0UmVjb3JkRGF0YSIsInJlY29yZERhdGEiLCJSZWNvcmQiLCJHZXRMYXN0Q2hlY2tlZFJlY29yZCIsIkNsZWFyQWxsQ2hlY2tCb3giLCJTZXRDaGVja0JveFRvQ2hlY2tlZFN0YXR1cyIsIiRpbm5lckVsZW0iLCIkV0xEQ1RfTGlzdFRhYmxlQ29udGFpbmVyIiwiV0xEQ1RfTGlzdFRhYmxlSW5uZXJCdXR0b25Db250YWluZXIiLCJXTERDVF9MaXN0VGFibGVJbm5lckJ1dHRvblNpbmdsZSIsInRhcmdldGJ1dHRvbmlkIiwiV0xEQ1RfTGlzdFRhYmxlTGFiZWwiLCJjb2x1bW5BbGlnbiIsImRlZkZvcm1hdCIsInRhcmdldEJ1dHRvbklkIiwiZGljdGlvbmFyeUdyb3VwRGF0YVNvdXJjZUlkIiwib21pdExlbmd0aCIsIm9yZ2FuRGF0YSIsIm1pbk9yZ2FuRGF0YSIsIm9yZ2FuTmFtZSIsIm1pbkRpY3Rpb25hcnlEYXRhIiwiVEVYVCIsImludE9taXRMZW5ndGgiLCJXTERDVF9QcmludEJ1dHRvbiIsIk9wZW5OZXdUYWJXaW5kb3ciLCJXTERDVF9TZWFyY2hfRHJvcERvd25TZWxlY3QiLCJXTERDVF9TZWFyY2hfVGV4dEJveCIsIldMRENUX1NlYXJjaF9UZXh0RGF0ZVRpbWUiLCJfZmlyZWZveFNjcm9sbCIsIkZpeGVkQ29sdW1ucyIsImR0IiwiZHRTZXR0aW5ncyIsImlUYWJsZUNvbHVtbnMiLCJhaU91dGVyV2lkdGhzIiwiYWlJbm5lcldpZHRocyIsInJ0bCIsImRvbSIsImdyaWQiLCJ3cmFwcGVyIiwiX29GaXhlZENvbHVtbnMiLCJfZm5Db25zdHJ1Y3QiLCJmblJlZHJhd0xheW91dCIsIl9mbkNvbENhbGMiLCJfZm5HcmlkTGF5b3V0IiwiZm5SZWNhbGN1bGF0ZUhlaWdodCIsIl9EVFRDX2lIZWlnaHQiLCJmblNldFJvd0hlaWdodCIsIm5UYXJnZXQiLCJpSGVpZ2h0IiwibW91c2VDb250cm9sbGVyIiwiX2ZuR3JpZFNldHVwIiwibW91c2VEb3duIiwib3JpZ2luYWxFdmVudCIsImlMZWZ0Q29sdW1ucyIsImxpbmVyIiwiaVJpZ2h0Q29sdW1ucyIsIndoZWVsVHlwZSIsInhEZWx0YSIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiYkZpcnN0RHJhdyIsInJlY2FsYyIsImluZGV4ZXMiLCJWRVJTSU9OIiwiaUxlZnRXaWR0aCIsImlSaWdodFdpZHRoIiwiaVdpZHRoIiwiYmxvY2siLCJvT3ZlcmZsb3ciLCJfZm5EVE92ZXJmbG93IiwiblNXcmFwcGVyIiwibkxlZnQiLCJuUmlnaHQiLCJiYXIiLCJoZWFkQmxvY2siLCJmb290QmxvY2siLCJvR3JpZCIsImlCb2R5SGVpZ2h0IiwiaUZ1bGxIZWlnaHQiLCJzY3JvbGxiYXJBZGp1c3QiLCJfZmlyZWZveFNjcm9sbEVycm9yIiwicGFkZGluZ1JpZ2h0IiwiYm94U2l6aW5nIiwibWF4SGVpZ2h0IiwiblRhYmxlU2Nyb2xsQm9keSIsImJBbGwiLCJfZm5DbG9uZUxlZnQiLCJfZm5DbG9uZVJpZ2h0IiwibGVmdENsb25lIiwicmlnaHRDbG9uZSIsImFpQ29sdW1ucyIsIl9mbkNsb25lIiwiX2ZuQ29weUxheW91dCIsImFvT3JpZ2luYWwiLCJldmVudHMiLCJhQ2xvbmVzIiwiYUNsb25lZCIsImFSb3ciLCJpQ2xvbmVkIiwibkNsb25lIiwib0Nsb25lIiwiaUluZGV4IiwiYW9DbG9uZUxheW91dCIsImpxQ2xvbmVUaGVhZCIsImFvRml4ZWRIZWFkZXIiLCJfZm5FcXVhbGlzZUhlaWdodHMiLCJzSGVpZ2h0TWF0Y2giLCJtYXJnaW5Cb3R0b20iLCJuQm9keSIsIm5Jbm5lclRoZWFkIiwib1N0eWxlIiwieiIsImFUZHMiLCJvU2Nyb2xsZXIiLCJzY3JvbGxlckZvcmNlciIsImZvcmNlciIsImpxQ2xvbmVUZm9vdCIsImFvQ3VyckZvb3RlciIsImFuVW5pcXVlIiwiX2ZuR2V0VHJOb2RlcyIsIm5JbiIsImFPdXQiLCJvcmlnaW5hbCIsImlIZWlnaHRPcmlnaW5hbCIsImlIZWlnaHRDbG9uZSIsInJvb3RPcmlnaW5hbCIsInJvb3RDbG9uZSIsImpxQm94SGFjayIsImFuT3JpZ2luYWwiLCJvdXRlckhlaWdodCIsImFuQ2xvbmUiLCJoZWlnaHRzIiwicm93Q2xvbmVkSWR4IiwiZml4ZWRDb2x1bW5zIiwiX2luc3RDb3VudGVyIiwiRml4ZWRIZWFkZXIiLCJjIiwidGhlYWRUb3AiLCJ0Ym9keVRvcCIsInRmb290VG9wIiwidGZvb3RCb3R0b20iLCJ0Zm9vdEhlaWdodCIsInRoZWFkSGVpZ2h0IiwiaGVhZGVyTW9kZSIsImZvb3Rlck1vZGUiLCJhdXRvV2lkdGgiLCJmbG9hdGluZ0hlYWRlciIsImZsb2F0aW5nIiwicGxhY2Vob2xkZXIiLCJfZml4ZWRIZWFkZXIiLCJfY29uc3RydWN0b3IiLCJfZW5hYmxlIiwiX21vZGVDaGFuZ2UiLCJ1cGRhdGUiLCJoZWFkZXJPZmZzZXQiLCJmb290ZXJPZmZzZXQiLCJfcG9zaXRpb25zIiwiX3Njcm9sbCIsImF1dG9IZWFkZXIiLCJhdXRvRm9vdGVyIiwiX2Nsb25lIiwiaXRlbURvbSIsIml0ZW1FbGVtZW50IiwiX3Vuc2l6ZSIsIl9tYXRjaFdpZHRocyIsImZyb20iLCJ0byIsInRvV2lkdGhzIiwibWluV2lkdGgiLCJ0aFdpZHRocyIsInRkV2lkdGhzIiwiX2hvcml6b250YWwiLCJsYXN0U2Nyb2xsTGVmdCIsIm1vZGUiLCJmb3JjZUNoYW5nZSIsInRhYmxlUGFydCIsImNvbnRhaW5zIiwidGFibGVOb2RlIiwid2luZG93VG9wIiwid2luZG93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NDJCLGFBQUFoa0QsRUFBQSxZQUFBN25CLEVBR0FRLEtBQUF5YixTQUFBLFFBQUEsU0FBQWc1QixHQUNBLElBQUE0NEIsRUFBQTU0QixFQUFBNDJCLGFBRUFnQyxHQUNBQSxFQUFBaG1ELEVBQUEsVUFBQXlKLFNBS0F5NUMiLCJmaWxlIjoiSFRNTERlc2lnblJ1bnRpbWVGdWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBGb3JtUmVsYXRpb25QT1V0aWxpdHkgPSB7XG4gIF9GaWVsZFBPQ2FjaGU6IG51bGwsXG4gIEJ1aWxkUmVjb3JkOiBmdW5jdGlvbiBCdWlsZFJlY29yZChmaWVsZFBPQXJyYXksIGRlc2MsIHJlY29yZElkLCBvdXRlckZpZWxkTmFtZSwgb3V0ZXJGaWVsZFZhbHVlLCBzZWxmRmllbGROYW1lKSB7XG4gICAgaWYgKGRlc2MgPT0gdW5kZWZpbmVkIHx8IGRlc2MgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgXCLmlrnms5XpnIDopoHmj5DkvptkZXNj5Y+C5pWwIVwiO1xuICAgIH1cblxuICAgIGlmIChyZWNvcmRJZCA9PSB1bmRlZmluZWQgfHwgcmVjb3JkSWQgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgXCLmlrnms5XpnIDopoHmj5DkvptyZWNvcmRJZOWPguaVsCFcIjtcbiAgICB9XG5cbiAgICBpZiAob3V0ZXJGaWVsZE5hbWUgPT0gdW5kZWZpbmVkIHx8IG91dGVyRmllbGROYW1lID09IG51bGwpIHtcbiAgICAgIHRocm93IFwi5pa55rOV6ZyA6KaB5o+Q5L6bb3V0ZXJGaWVsZE5hbWXlj4LmlbAhXCI7XG4gICAgfVxuXG4gICAgaWYgKG91dGVyRmllbGRWYWx1ZSA9PSB1bmRlZmluZWQgfHwgb3V0ZXJGaWVsZFZhbHVlID09IG51bGwpIHtcbiAgICAgIHRocm93IFwi5pa55rOV6ZyA6KaB5o+Q5L6bb3V0ZXJGaWVsZFZhbHVl5Y+C5pWwIVwiO1xuICAgIH1cblxuICAgIGlmIChzZWxmRmllbGROYW1lID09IHVuZGVmaW5lZCB8fCBzZWxmRmllbGROYW1lID09IG51bGwpIHtcbiAgICAgIHRocm93IFwi5pa55rOV6ZyA6KaB5o+Q5L6bc2VsZkZpZWxkTmFtZeWPguaVsCFcIjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgXCJyZWNvcmRJZFwiOiByZWNvcmRJZCxcbiAgICAgIFwiZGVzY1wiOiBkZXNjLFxuICAgICAgXCJyZWNvcmRGaWVsZFBPTGlzdFwiOiBmaWVsZFBPQXJyYXksXG4gICAgICBcIm91dGVyRmllbGROYW1lXCI6IG91dGVyRmllbGROYW1lLFxuICAgICAgXCJvdXRlckZpZWxkVmFsdWVcIjogb3V0ZXJGaWVsZFZhbHVlLFxuICAgICAgXCJzZWxmRmllbGROYW1lXCI6IHNlbGZGaWVsZE5hbWVcbiAgICB9O1xuICB9LFxuICBGaW5kUmVjb3JkRmllbGRQT0FycmF5OiBmdW5jdGlvbiBGaW5kUmVjb3JkRmllbGRQT0FycmF5KHJlY29yZCkge1xuICAgIHJldHVybiByZWNvcmQucmVjb3JkRmllbGRQT0xpc3Q7XG4gIH0sXG4gIEFkZDFUbzFEYXRhUmVjb3JkRmllbGRQT0xpc3Q6IGZ1bmN0aW9uIEFkZDFUbzFEYXRhUmVjb3JkRmllbGRQT0xpc3QocmVsYXRpb25QTywgZmllbGRQT0xpc3QsIGRlc2MsIHJlY29yZElkLCBvdXRlckZpZWxkTmFtZSwgb3V0ZXJGaWVsZFZhbHVlLCBzZWxmRmllbGROYW1lKSB7XG4gICAgcmVsYXRpb25QTy5vbmVEYXRhUmVjb3JkID0gdGhpcy5CdWlsZFJlY29yZChmaWVsZFBPTGlzdCwgZGVzYywgcmVjb3JkSWQsIG91dGVyRmllbGROYW1lLCBvdXRlckZpZWxkVmFsdWUsIHNlbGZGaWVsZE5hbWUpO1xuICAgIHJldHVybiByZWxhdGlvblBPO1xuICB9LFxuICBBZGQxVG8xRGF0YVJlY29yZDogZnVuY3Rpb24gQWRkMVRvMURhdGFSZWNvcmQocmVsYXRpb25QTywgcmVjb3JkUE8pIHtcbiAgICByZWxhdGlvblBPLm9uZURhdGFSZWNvcmQgPSByZWNvcmRQTztcbiAgICByZXR1cm4gcmVsYXRpb25QTztcbiAgfSxcbiAgR2V0MVRvMURhdGFSZWNvcmQ6IGZ1bmN0aW9uIEdldDFUbzFEYXRhUmVjb3JkKHJlbGF0aW9uUE8pIHtcbiAgICByZXR1cm4gcmVsYXRpb25QTy5vbmVEYXRhUmVjb3JkO1xuICB9LFxuICBHZXQxVG8xRGF0YVJlY29yZEZpZWxkUE9BcnJheTogZnVuY3Rpb24gR2V0MVRvMURhdGFSZWNvcmRGaWVsZFBPQXJyYXkocmVsYXRpb25QTykge1xuICAgIGlmIChyZWxhdGlvblBPLm9uZURhdGFSZWNvcmQpIHtcbiAgICAgIHJldHVybiB0aGlzLkZpbmRSZWNvcmRGaWVsZFBPQXJyYXkocmVsYXRpb25QTy5vbmVEYXRhUmVjb3JkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgQWRkMVRvTkRhdGFSZWNvcmQ6IGZ1bmN0aW9uIEFkZDFUb05EYXRhUmVjb3JkKHJlbGF0aW9uUE8sIGFycmF5RGF0YSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJyYXlEYXRhW2ldLmRlc2MgPT0gdW5kZWZpbmVkIHx8IGFycmF5RGF0YVtpXS5kZXNjID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgXCJhcnJheURhdGHkuK3nmoTmlbDmja7lr7nosaHpnIDopoHljIXlkKtkZXNj5bGe5oCnIVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJyYXlEYXRhW2ldLnJlY29yZElkID09IHVuZGVmaW5lZCB8fCBhcnJheURhdGFbaV0ucmVjb3JkSWQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBcImFycmF5RGF0YeS4reeahOaVsOaNruWvueixoemcgOimgeWMheWQq3JlY29yZElk5bGe5oCnIVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJyYXlEYXRhW2ldLnJlY29yZEZpZWxkUE9MaXN0ID09IHVuZGVmaW5lZCB8fCBhcnJheURhdGFbaV0ucmVjb3JkRmllbGRQT0xpc3QgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBcImFycmF5RGF0YeS4reeahOaVsOaNruWvueixoemcgOimgeWMheWQq3JlY29yZEZpZWxkUE9MaXN05bGe5oCnIVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJyYXlEYXRhW2ldLm91dGVyRmllbGROYW1lID09IHVuZGVmaW5lZCB8fCBhcnJheURhdGFbaV0ub3V0ZXJGaWVsZE5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBcImFycmF5RGF0YeS4reeahOaVsOaNruWvueixoemcgOimgeWMheWQq291dGVyRmllbGROYW1l5bGe5oCnIVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJyYXlEYXRhW2ldLm91dGVyRmllbGRWYWx1ZSA9PSB1bmRlZmluZWQgfHwgYXJyYXlEYXRhW2ldLm91dGVyRmllbGRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IFwiYXJyYXlEYXRh5Lit55qE5pWw5o2u5a+56LGh6ZyA6KaB5YyF5ZCrb3V0ZXJGaWVsZFZhbHVl5bGe5oCnIVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJyYXlEYXRhW2ldLnNlbGZGaWVsZE5hbWUgPT0gdW5kZWZpbmVkIHx8IGFycmF5RGF0YVtpXS5zZWxmRmllbGROYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgXCJhcnJheURhdGHkuK3nmoTmlbDmja7lr7nosaHpnIDopoHljIXlkKtzZWxmRmllbGROYW1l5bGe5oCnIVwiO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlbGF0aW9uUE8ubGlzdERhdGFSZWNvcmQgPSBhcnJheURhdGE7XG4gICAgcmV0dXJuIHJlbGF0aW9uUE87XG4gIH0sXG4gIEdldDFUb05EYXRhUmVjb3JkOiBmdW5jdGlvbiBHZXQxVG9ORGF0YVJlY29yZChyZWxhdGlvblBPKSB7XG4gICAgcmV0dXJuIHJlbGF0aW9uUE8ubGlzdERhdGFSZWNvcmQ7XG4gIH0sXG4gIEZpbmRGaWVsZFBPSW5PbmVEYXRhUmVjb3JkRW5hYmxlTnVsbDogZnVuY3Rpb24gRmluZEZpZWxkUE9Jbk9uZURhdGFSZWNvcmRFbmFibGVOdWxsKG9uZURhdGFSZWNvcmQsIGZpZWxkTmFtZSkge1xuICAgIHZhciBmaWVsZFBPQXJyYXkgPSB0aGlzLkZpbmRSZWNvcmRGaWVsZFBPQXJyYXkob25lRGF0YVJlY29yZCk7XG4gICAgdmFyIGZpZWxkUE8gPSBBcnJheVV0aWxpdHkuV2hlcmVTaW5nbGUoZmllbGRQT0FycmF5LCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uZmllbGROYW1lID09IGZpZWxkTmFtZTtcbiAgICB9KTtcblxuICAgIGlmIChmaWVsZFBPKSB7XG4gICAgICByZXR1cm4gZmllbGRQTztcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgRmluZEZpZWxkUE9Jbk9uZURhdGFSZWNvcmQ6IGZ1bmN0aW9uIEZpbmRGaWVsZFBPSW5PbmVEYXRhUmVjb3JkKG9uZURhdGFSZWNvcmQsIGZpZWxkTmFtZSkge1xuICAgIHZhciBmaWVsZFBPID0gdGhpcy5GaW5kRmllbGRQT0luT25lRGF0YVJlY29yZEVuYWJsZU51bGwob25lRGF0YVJlY29yZCwgZmllbGROYW1lKTtcblxuICAgIGlmICghZmllbGRQTykge1xuICAgICAgdGhyb3cgXCJGb3JtUnVudGltZS5GaW5kRmllbGRQT0luT25lRGF0YVJlY29yZDrmib7kuI3liLDlrZfmrrVcIiArIGZpZWxkTmFtZSArIFwi55qE5pWw5o2u5YC8IVwiO1xuICAgIH1cblxuICAgIHJldHVybiBmaWVsZFBPO1xuICB9LFxuICBGaW5kRmllbGRWYWx1ZUluT25lRGF0YVJlY29yZDogZnVuY3Rpb24gRmluZEZpZWxkVmFsdWVJbk9uZURhdGFSZWNvcmQob25lRGF0YVJlY29yZCwgZmllbGROYW1lKSB7XG4gICAgdmFyIHJlY29yZEZpZWxkUE9MaXN0ID0gdGhpcy5GaW5kUmVjb3JkRmllbGRQT0FycmF5KG9uZURhdGFSZWNvcmQpO1xuICAgIHZhciBmaWVsZFBPID0gQXJyYXlVdGlsaXR5LldoZXJlU2luZ2xlKHJlY29yZEZpZWxkUE9MaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uZmllbGROYW1lID09IGZpZWxkTmFtZTtcbiAgICB9KTtcblxuICAgIGlmIChmaWVsZFBPKSB7XG4gICAgICByZXR1cm4gZmllbGRQTy52YWx1ZTtcbiAgICB9XG5cbiAgICB0aHJvdyBcIkZvcm1SdW50aW1lLkZpbmRGaWVsZFBPQnlSZWxhdGlvblBPOuaJvuS4jeWIsOWtl+autVwiICsgZmllbGROYW1lICsgXCLnmoTmlbDmja7lgLwhXCI7XG4gIH0sXG4gIEZpbmRJREZpZWxkUE9Jbk9uZURhdGFSZWNvcmQ6IGZ1bmN0aW9uIEZpbmRJREZpZWxkUE9Jbk9uZURhdGFSZWNvcmQob25lRGF0YVJlY29yZCkge1xuICAgIHJldHVybiB0aGlzLkZpbmRGaWVsZFBPSW5PbmVEYXRhUmVjb3JkKG9uZURhdGFSZWNvcmQsIFwiSURcIik7XG4gIH0sXG4gIEZpbmRGaWVsZFBPQnlSZWxhdGlvblBPOiBmdW5jdGlvbiBGaW5kRmllbGRQT0J5UmVsYXRpb25QTyhyZWxhdGlvblBPLCBmaWVsZE5hbWUpIHtcbiAgICB2YXIgcmVjb3JkRmllbGRQT0xpc3QgPSBGb3JtUmVsYXRpb25QT1V0aWxpdHkuR2V0MVRvMURhdGFSZWNvcmRGaWVsZFBPQXJyYXkocmVsYXRpb25QTyk7XG4gICAgdmFyIGZpZWxkUE8gPSBBcnJheVV0aWxpdHkuV2hlcmVTaW5nbGUocmVjb3JkRmllbGRQT0xpc3QsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbS5maWVsZE5hbWUgPT0gZmllbGROYW1lO1xuICAgIH0pO1xuXG4gICAgaWYgKGZpZWxkUE8pIHtcbiAgICAgIHJldHVybiBmaWVsZFBPO1xuICAgIH1cblxuICAgIHRocm93IFwiRm9ybVJ1bnRpbWUuRmluZEZpZWxkUE9CeVJlbGF0aW9uUE865om+5LiN5Yiw5a2X5q61XCIgKyBmaWVsZE5hbWUgKyBcIueahOaVsOaNruWAvCFcIjtcbiAgfSxcbiAgRmluZElkRmllbGRQT0J5UmVsYXRpb25QTzogZnVuY3Rpb24gRmluZElkRmllbGRQT0J5UmVsYXRpb25QTyhyZWxhdGlvblBPKSB7XG4gICAgcmV0dXJuIHRoaXMuRmluZEZpZWxkUE9CeVJlbGF0aW9uUE8ocmVsYXRpb25QTywgXCJJRFwiKTtcbiAgfSxcbiAgRmluZE1haW5SZWxhdGlvblBPOiBmdW5jdGlvbiBGaW5kTWFpblJlbGF0aW9uUE8ocmVsYXRpb25QT0xpc3QpIHtcbiAgICByZXR1cm4gQXJyYXlVdGlsaXR5LldoZXJlU2luZ2xlKHJlbGF0aW9uUE9MaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIEZvcm1SZWxhdGlvblBPVXRpbGl0eS5Jc01haW5SZWxhdGlvblBPKGl0ZW0pO1xuICAgIH0pO1xuICB9LFxuICBJc01haW5SZWxhdGlvblBPOiBmdW5jdGlvbiBJc01haW5SZWxhdGlvblBPKHJlbGF0aW9uUE8pIHtcbiAgICByZXR1cm4gcmVsYXRpb25QTy5pc01haW4gPT0gdHJ1ZSB8fCByZWxhdGlvblBPLnBhcmVudElkID09IFwiLTFcIjtcbiAgfSxcbiAgRmluZE5vdE1haW5SZWxhdGlvblBPOiBmdW5jdGlvbiBGaW5kTm90TWFpblJlbGF0aW9uUE8ocmVsYXRpb25QT0xpc3QpIHtcbiAgICByZXR1cm4gQXJyYXlVdGlsaXR5LldoZXJlKHJlbGF0aW9uUE9MaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uaXNNYWluICE9IHRydWUgfHwgaXRlbS5wYXJlbnRJZCAhPSBcIi0xXCI7XG4gICAgfSk7XG4gIH0sXG4gIEZpbmRSZWxhdGlvblBPQnlJZDogZnVuY3Rpb24gRmluZFJlbGF0aW9uUE9CeUlkKHJlbGF0aW9uUE9MaXN0LCBpZCkge1xuICAgIHJldHVybiBBcnJheVV0aWxpdHkuV2hlcmVTaW5nbGUocmVsYXRpb25QT0xpc3QsIGZ1bmN0aW9uIChwbykge1xuICAgICAgcmV0dXJuIHBvLmlkID09IGlkO1xuICAgIH0pO1xuICB9LFxuICBGaW5kUmVsYXRpb25QT0J5VGFibGVOYW1lOiBmdW5jdGlvbiBGaW5kUmVsYXRpb25QT0J5VGFibGVOYW1lKHJlbGF0aW9uUE9MaXN0LCB0YWJsZU5hbWUpIHtcbiAgICByZXR1cm4gQXJyYXlVdGlsaXR5LldoZXJlU2luZ2xlKHJlbGF0aW9uUE9MaXN0LCBmdW5jdGlvbiAocG8pIHtcbiAgICAgIHJldHVybiBwby50YWJsZU5hbWUgPT0gdGFibGVOYW1lO1xuICAgIH0pO1xuICB9LFxuICBGaW5kRmllbGRQT0luUmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvT25lRGF0YVJlY29yZDogZnVuY3Rpb24gRmluZEZpZWxkUE9JblJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQb09uZURhdGFSZWNvcmQocmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvLCByZWxhdGlvbklkLCB0YWJsZU5hbWUsIGZpZWxkTmFtZSkge1xuICAgIGlmICh0aGlzLl9GaWVsZFBPQ2FjaGUgPT0gbnVsbCkge1xuICAgICAgdGhpcy5fRmllbGRQT0NhY2hlID0ge307XG4gICAgICB2YXIgZm9ybVJlY29yZERhdGFSZWxhdGlvblBPTGlzdCA9IHJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQby5mb3JtUmVjb3JkRGF0YVJlbGF0aW9uUE9MaXN0O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZvcm1SZWNvcmREYXRhUmVsYXRpb25QT0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGZvcm1SZWNvcmREYXRhUmVsYXRpb25QTyA9IGZvcm1SZWNvcmREYXRhUmVsYXRpb25QT0xpc3RbaV07XG4gICAgICAgIHZhciBpbm5lclJlbGF0aW9uSWQgPSBmb3JtUmVjb3JkRGF0YVJlbGF0aW9uUE8uaWQ7XG4gICAgICAgIHZhciBmaWVsZFBPTGlzdCA9IHRoaXMuR2V0MVRvMURhdGFSZWNvcmRGaWVsZFBPQXJyYXkoZm9ybVJlY29yZERhdGFSZWxhdGlvblBPKTtcblxuICAgICAgICBpZiAoZmllbGRQT0xpc3QpIHtcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZpZWxkUE9MaXN0Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgZmllbGRQTyA9IGZpZWxkUE9MaXN0W2pdO1xuICAgICAgICAgICAgdmFyIGlubmVyRmllbGROYW1lID0gZmllbGRQTy5maWVsZE5hbWU7XG4gICAgICAgICAgICB0aGlzLl9GaWVsZFBPQ2FjaGVbaW5uZXJSZWxhdGlvbklkICsgXCJfXCIgKyBpbm5lckZpZWxkTmFtZV0gPSBmaWVsZFBPO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9GaWVsZFBPQ2FjaGVbcmVsYXRpb25JZCArIFwiX1wiICsgZmllbGROYW1lXTtcbiAgfSxcbiAgRmluZFJlbGF0aW9uUE9JblJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQbzogZnVuY3Rpb24gRmluZFJlbGF0aW9uUE9JblJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQbyhyZWxhdGlvbkZvcm1SZWNvcmRDb21wbGV4UG8sIHJlbGF0aW9uSWQpIHtcbiAgICByZXR1cm4gQXJyYXlVdGlsaXR5LldoZXJlU2luZ2xlKHJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQby5mb3JtUmVjb3JkRGF0YVJlbGF0aW9uUE9MaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uaWQgPT0gcmVsYXRpb25JZDtcbiAgICB9KTtcbiAgfSxcbiAgRmluZFBhcmVudEZpZWxkVmFsdWVJbkZvcm1EYXRhUmVsYXRpb25MaXN0V2l0aDFUbzFEYXRhUmVjb3JkOiBmdW5jdGlvbiBGaW5kUGFyZW50RmllbGRWYWx1ZUluRm9ybURhdGFSZWxhdGlvbkxpc3RXaXRoMVRvMURhdGFSZWNvcmQoZm9ybURhdGFSZWxhdGlvbkxpc3QsIHBhcmVudFJlbGF0aW9uUE9JZCwgb3V0ZXJGaWVsZE5hbWUsIG91dGVyRmllbGRWYWx1ZSkge1xuICAgIHZhciBwYXJlbnRSZWxhdGlvblBPID0gQXJyYXlVdGlsaXR5LldoZXJlU2luZ2xlKHRoaXMuX0Zvcm1EYXRhUmVsYXRpb25MaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uaWQgPT0gcmVsYXRpb25QTy5wYXJlbnRJZDtcbiAgICB9KTtcbiAgfSxcbiAgQ3JlYXRlRmllbGRJblJlY29yZEZpZWxkUE9BcnJheTogZnVuY3Rpb24gQ3JlYXRlRmllbGRJblJlY29yZEZpZWxkUE9BcnJheShyZWNvcmRGaWVsZFBPQXJyYXksIGZpZWxkTmFtZSwgZmllbGRWYWx1ZSkge1xuICAgIHZhciBmaWVsZFBPID0gSnNvblV0aWxpdHkuQ2xvbmVTaW1wbGUocmVjb3JkRmllbGRQT0FycmF5WzBdKTtcbiAgICBmaWVsZFBPLmZpZWxkTmFtZSA9IGZpZWxkTmFtZTtcbiAgICBmaWVsZFBPLnZhbHVlID0gZmllbGRWYWx1ZTtcbiAgICByZWNvcmRGaWVsZFBPQXJyYXkucHVzaChmaWVsZFBPKTtcbiAgfSxcbiAgQ3JlYXRlSWRGaWVsZEluUmVjb3JkRmllbGRQT0FycmF5OiBmdW5jdGlvbiBDcmVhdGVJZEZpZWxkSW5SZWNvcmRGaWVsZFBPQXJyYXkocmVjb3JkRmllbGRQT0FycmF5LCBpZFZhbHVlLCBmb3JtUE8sIHRhYmxlSWQpIHtcbiAgICBpZiAoIWlkVmFsdWUpIHtcbiAgICAgIGlkVmFsdWUgPSBTdHJpbmdVdGlsaXR5Lkd1aWQoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRhYmxlSWQpIHtcbiAgICAgIHRocm93IFwiRm9ybVJlbGF0aW9uUE9VdGlsaXR5LkNyZWF0ZUlkRmllbGRJblJlY29yZEZpZWxkUE9BcnJheTp0YWJsZUlk5LiN6IO95Li656m6IVwiO1xuICAgIH1cblxuICAgIHZhciBwa0ZpZWxkUE8gPSBBcnJheVV0aWxpdHkuV2hlcmVTaW5nbGUoZm9ybVBPLmZvcm1SZWNvcmRDb21wbGV4UE8uYWxsRGF0YVJlbGF0aW9uVGFibGVGaWVsZHNNYXBbdGFibGVJZF0sIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbS5maWVsZElzUGsgPT0gXCLmmK9cIjtcbiAgICB9KTtcbiAgICB2YXIgcGtGaWVsZE5hbWUgPSBwa0ZpZWxkUE8uZmllbGROYW1lO1xuICAgIGNvbnNvbGUubG9nKHBrRmllbGROYW1lKTtcbiAgICB0aGlzLkNyZWF0ZUZpZWxkSW5SZWNvcmRGaWVsZFBPQXJyYXkocmVjb3JkRmllbGRQT0FycmF5LCBwa0ZpZWxkTmFtZSwgaWRWYWx1ZSk7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBGb3JtUnVudGltZVNpbmdsZVBhZ2VPYmplY3QgPSB7XG4gIF93ZWJGb3JtUlRQYXJhczogbnVsbCxcbiAgX2Zvcm1SdW50aW1lSW5zdDogbnVsbCxcbiAgRk9STV9SVU5USU1FX0NBVEVHT1JZX0lOREVQRU5ERU5DRTogXCJJc0luZGVwZW5kZW5jZVwiLFxuICBGT1JNX1JVTlRJTUVfQ0FURUdPUllfTElTVDogXCJJc0RlcGVuZGVuY2VMaXN0XCIsXG4gIGdldFdlYkZvcm1SVFBhcmFzV2l0aExpc3RCdXR0b25JZDogZnVuY3Rpb24gZ2V0V2ViRm9ybVJUUGFyYXNXaXRoTGlzdEJ1dHRvbklkKCkge1xuICAgIGlmICghdGhpcy5fd2ViRm9ybVJUUGFyYXMpIHtcbiAgICAgIHRoaXMuX3dlYkZvcm1SVFBhcmFzID0ge1xuICAgICAgICBcIkZvcm1JZFwiOiBCYXNlVXRpbGl0eS5HZXRVcmxQYXJhVmFsdWUoXCJmb3JtSWRcIiksXG4gICAgICAgIFwiQnV0dG9uSWRcIjogQmFzZVV0aWxpdHkuR2V0VXJsUGFyYVZhbHVlKFwiYnV0dG9uSWRcIiksXG4gICAgICAgIFwiT3BlcmF0aW9uVHlwZVwiOiBCYXNlVXRpbGl0eS5HZXRVcmxQYXJhVmFsdWUoXCJvcGVyYXRpb25UeXBlXCIpLFxuICAgICAgICBcIkxpc3RGb3JtQnV0dG9uRWxlbUlkXCI6IEJhc2VVdGlsaXR5LkdldFVybFBhcmFWYWx1ZShcImxpc3RGb3JtQnV0dG9uRWxlbUlkXCIpLFxuICAgICAgICBcIlJlY29yZElkXCI6IEJhc2VVdGlsaXR5LkdldFVybFBhcmFWYWx1ZShcInJlY29yZElkXCIpLFxuICAgICAgICBcIldpbmRvd1dpZHRoXCI6IEJhc2VVdGlsaXR5LkdldFVybFBhcmFWYWx1ZShcIndpbmRvd1dpZHRoXCIpLFxuICAgICAgICBcIldpbmRvd0hlaWdodFwiOiBCYXNlVXRpbGl0eS5HZXRVcmxQYXJhVmFsdWUoXCJ3aW5kb3dIZWlnaHRcIiksXG4gICAgICAgIFwiRm9ybVJ1bnRpbWVDYXRlZ29yeVwiOiB0aGlzLkZPUk1fUlVOVElNRV9DQVRFR09SWV9MSVNUXG4gICAgICB9O1xuXG4gICAgICBpZiAoIXRoaXMuX3dlYkZvcm1SVFBhcmFzLlJlY29yZElkKSB7XG4gICAgICAgIHRoaXMuX3dlYkZvcm1SVFBhcmFzLlJlY29yZElkID0gU3RyaW5nVXRpbGl0eS5HdWlkKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dlYkZvcm1SVFBhcmFzO1xuICB9LFxuICBnZXRXZWJGb3JtUlRQYXJhc1dpdGhJbmRlcGVuZGVuY2U6IGZ1bmN0aW9uIGdldFdlYkZvcm1SVFBhcmFzV2l0aEluZGVwZW5kZW5jZSgpIHtcbiAgICB2YXIgZm9ybUlkID0gUnVudGltZUdlbmVyYWxJbnN0YW5jZS5UcnlHZXRNZW51T3V0ZXJJZCgpO1xuXG4gICAgaWYgKFN0cmluZ1V0aWxpdHkuSXNOdWxsT3JFbXB0eShmb3JtSWQpKSB7XG4gICAgICBmb3JtSWQgPSBCYXNlVXRpbGl0eS5HZXRVcmxQYXJhVmFsdWUoXCJmb3JtSWRcIik7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl93ZWJGb3JtUlRQYXJhcykge1xuICAgICAgdGhpcy5fd2ViRm9ybVJUUGFyYXMgPSB7XG4gICAgICAgIFwiRm9ybUlkXCI6IGZvcm1JZCxcbiAgICAgICAgXCJCdXR0b25JZFwiOiB0aGlzLkZPUk1fUlVOVElNRV9DQVRFR09SWV9JTkRFUEVOREVOQ0UsXG4gICAgICAgIFwiT3BlcmF0aW9uVHlwZVwiOiB0aGlzLkZPUk1fUlVOVElNRV9DQVRFR09SWV9JTkRFUEVOREVOQ0UsXG4gICAgICAgIFwiTGlzdEZvcm1CdXR0b25FbGVtSWRcIjogdGhpcy5GT1JNX1JVTlRJTUVfQ0FURUdPUllfSU5ERVBFTkRFTkNFLFxuICAgICAgICBcIlJlY29yZElkXCI6IFwiXCIsXG4gICAgICAgIFwiV2luZG93V2lkdGhcIjogXCJcIixcbiAgICAgICAgXCJXaW5kb3dIZWlnaHRcIjogXCJcIixcbiAgICAgICAgXCJGb3JtUnVudGltZUNhdGVnb3J5XCI6IHRoaXMuRk9STV9SVU5USU1FX0NBVEVHT1JZX0lOREVQRU5ERU5DRVxuICAgICAgfTtcblxuICAgICAgaWYgKFN0cmluZ1V0aWxpdHkuSXNOb3ROdWxsT3JFbXB0eShCYXNlVXRpbGl0eS5HZXRVcmxQYXJhVmFsdWUoXCJvcGVyYXRpb25UeXBlXCIpKSkge1xuICAgICAgICB0aGlzLl93ZWJGb3JtUlRQYXJhcy5PcGVyYXRpb25UeXBlID0gQmFzZVV0aWxpdHkuR2V0VXJsUGFyYVZhbHVlKFwib3BlcmF0aW9uVHlwZVwiKTtcbiAgICAgIH1cblxuICAgICAgO1xuXG4gICAgICBpZiAoU3RyaW5nVXRpbGl0eS5Jc05vdE51bGxPckVtcHR5KEJhc2VVdGlsaXR5LkdldFVybFBhcmFWYWx1ZShcInJlY29yZElkXCIpKSkge1xuICAgICAgICB0aGlzLl93ZWJGb3JtUlRQYXJhcy5SZWNvcmRJZCA9IEJhc2VVdGlsaXR5LkdldFVybFBhcmFWYWx1ZShcInJlY29yZElkXCIpO1xuICAgICAgfVxuXG4gICAgICA7XG5cbiAgICAgIGlmICghdGhpcy5fd2ViRm9ybVJUUGFyYXMuUmVjb3JkSWQpIHtcbiAgICAgICAgdGhpcy5fd2ViRm9ybVJUUGFyYXMuUmVjb3JkSWQgPSBTdHJpbmdVdGlsaXR5Lkd1aWQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd2ViRm9ybVJUUGFyYXM7XG4gIH0sXG4gIHBhZ2VSZWFkeTogZnVuY3Rpb24gcGFnZVJlYWR5KGlzUHJldmlldywgcmVuZGVyZXJDaGFpbkNvbXBsZXRlZEZ1bmMsIGdldFdlYkZvcm1SVFBhcmFzRnVuYykge1xuICAgIHRoaXMuX2Zvcm1SdW50aW1lSW5zdCA9IE9iamVjdC5jcmVhdGUoRm9ybVJ1bnRpbWUpO1xuICAgIHZhciB3ZWJGb3JtUlRQYXJhcyA9IGdldFdlYkZvcm1SVFBhcmFzRnVuYy5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5fZm9ybVJ1bnRpbWVJbnN0LkluaXRpYWxpemF0aW9uKHtcbiAgICAgIFwiUmVuZGVyZXJUb0lkXCI6IFwiaHRtbERlc2lnblJ1bnRpbWVXcmFwXCIsXG4gICAgICBcIkZvcm1JZFwiOiB3ZWJGb3JtUlRQYXJhcy5Gb3JtSWQsXG4gICAgICBcIlJlY29yZElkXCI6IHdlYkZvcm1SVFBhcmFzLlJlY29yZElkLFxuICAgICAgXCJCdXR0b25JZFwiOiB3ZWJGb3JtUlRQYXJhcy5CdXR0b25JZCxcbiAgICAgIFwiT3BlcmF0aW9uVHlwZVwiOiB3ZWJGb3JtUlRQYXJhcy5PcGVyYXRpb25UeXBlLFxuICAgICAgXCJJc1ByZXZpZXdcIjogaXNQcmV2aWV3LFxuICAgICAgXCJSZW5kZXJlckNoYWluQ29tcGxldGVkRnVuY1wiOiByZW5kZXJlckNoYWluQ29tcGxldGVkRnVuYyxcbiAgICAgIFwiTGlzdEZvcm1CdXR0b25FbGVtSWRcIjogd2ViRm9ybVJUUGFyYXMuTGlzdEZvcm1CdXR0b25FbGVtSWQsXG4gICAgICBcIldlYkZvcm1SVFBhcmFzXCI6IHdlYkZvcm1SVFBhcmFzLFxuICAgICAgXCJGb3JtUnVudGltZUNhdGVnb3J5XCI6IHdlYkZvcm1SVFBhcmFzLkZvcm1SdW50aW1lQ2F0ZWdvcnlcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLl9mb3JtUnVudGltZUluc3Q7XG4gIH1cbn07XG52YXIgRm9ybVJ1bnRpbWUgPSB7XG4gIF9Qcm9wX0NvbmZpZzoge1xuICAgIFJlbmRlcmVyVG9JZDogbnVsbCxcbiAgICBGb3JtSWQ6IFwiXCIsXG4gICAgUmVjb3JkSWQ6IFwiXCIsXG4gICAgQnV0dG9uSWQ6IFwiXCIsXG4gICAgSXNQcmV2aWV3OiBmYWxzZSxcbiAgICBPcGVyYXRpb25UeXBlOiBcIlwiLFxuICAgIExpc3RGb3JtQnV0dG9uRWxlbUlkOiBcIlwiLFxuICAgIEZvcm1SdW50aW1lQ2F0ZWdvcnk6IFwiSXNEZXBlbmRlbmNlTGlzdFwiLFxuICAgIFByZUhhbmRsZUZvcm1IdG1sUnVudGltZUZ1bmM6IG51bGxcbiAgfSxcbiAgXyRSZW5kZXJlclRvRWxlbTogbnVsbCxcbiAgX0Zvcm1QTzogbnVsbCxcbiAgX0Zvcm1EYXRhUmVsYXRpb25MaXN0OiBudWxsLFxuICBfT3JpZ2luYWxGb3JtRGF0YVJlbGF0aW9uTGlzdDogbnVsbCxcbiAgX0Zvcm1KU1J1bnRpbWVJbnN0OiBudWxsLFxuICBJbml0aWFsaXphdGlvbjogZnVuY3Rpb24gSW5pdGlhbGl6YXRpb24oX2NvbmZpZykge1xuICAgIHRoaXMuX1Byb3BfQ29uZmlnID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX1Byb3BfQ29uZmlnLCBfY29uZmlnKTtcbiAgICB0aGlzLl8kUmVuZGVyZXJUb0VsZW0gPSAkKFwiI1wiICsgdGhpcy5fUHJvcF9Db25maWcuUmVuZGVyZXJUb0lkKTtcblxuICAgIHRoaXMuX0xvYWRIVE1MVG9FbCgpO1xuICB9LFxuICBfUmVuZGVyZXJDaGFpbklzQ29tcGxldGVkOiB0cnVlLFxuICBfUmVuZGVyZXJEYXRhQ2hhaW5Jc0NvbXBsZXRlZDogdHJ1ZSxcbiAgX0xvYWRIVE1MVG9FbDogZnVuY3Rpb24gX0xvYWRIVE1MVG9FbCgpIHtcbiAgICB2YXIgdXJsID0gQmFzZVV0aWxpdHkuQnVpbGRBY3Rpb24oXCIvUmVzdC9CdWlsZGVyL1J1blRpbWUvRm9ybVJ1bnRpbWUvTG9hZEhUTUxcIiwge30pO1xuXG4gICAgaWYgKHRoaXMuX1Byb3BfQ29uZmlnLklzUHJldmlldykge1xuICAgICAgdXJsID0gQmFzZVV0aWxpdHkuQnVpbGRBY3Rpb24oXCIvUmVzdC9CdWlsZGVyL1J1blRpbWUvRm9ybVJ1bnRpbWUvTG9hZEhUTUxGb3JQcmVWaWV3XCIsIHt9KTtcbiAgICB9XG5cbiAgICBSdW50aW1lR2VuZXJhbEluc3RhbmNlLkxvYWRIdG1sRGVzaWduQ29udGVudCh1cmwsIHRoaXMuX1Byb3BfQ29uZmlnLlJlbmRlcmVyVG8sIHtcbiAgICAgIGZvcm1JZDogdGhpcy5fUHJvcF9Db25maWcuRm9ybUlkLFxuICAgICAgcmVjb3JkSWQ6IHRoaXMuX1Byb3BfQ29uZmlnLlJlY29yZElkLFxuICAgICAgYnV0dG9uSWQ6IHRoaXMuX1Byb3BfQ29uZmlnLkJ1dHRvbklkLFxuICAgICAgb3BlcmF0aW9uVHlwZTogdGhpcy5HZXRPcGVyYXRpb25UeXBlKCksXG4gICAgICBmb3JtUnVudGltZUNhdGVnb3J5OiB0aGlzLl9Qcm9wX0NvbmZpZy5Gb3JtUnVudGltZUNhdGVnb3J5XG4gICAgfSwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgdGhpcy5fRm9ybVBPID0gcmVzdWx0LmRhdGE7XG4gICAgICB0aGlzLl9Gb3JtUE8uZm9ybURhdGFSZWxhdGlvbiA9IFwiXCI7XG4gICAgICB0aGlzLl9Gb3JtRGF0YVJlbGF0aW9uTGlzdCA9IHRoaXMuX0Zvcm1QTy5mb3JtUmVjb3JkRGF0YVJlbGF0aW9uUE9MaXN0O1xuICAgICAgdGhpcy5fT3JpZ2luYWxGb3JtRGF0YVJlbGF0aW9uTGlzdCA9IEpzb25VdGlsaXR5LkNsb25lU3RyaW5naWZ5KHRoaXMuX0Zvcm1EYXRhUmVsYXRpb25MaXN0KTtcbiAgICAgIHZhciBmb3JtSHRtbFJ1bnRpbWUgPSByZXN1bHQuZGF0YS5mb3JtSHRtbFJ1bnRpbWU7XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fUHJvcF9Db25maWcuUHJlSGFuZGxlRm9ybUh0bWxSdW50aW1lRnVuYyA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZm9ybUh0bWxSdW50aW1lID0gdGhpcy5fUHJvcF9Db25maWcuUHJlSGFuZGxlRm9ybUh0bWxSdW50aW1lRnVuYyhmb3JtSHRtbFJ1bnRpbWUsIHRoaXMsIHRoaXMuX1Byb3BfQ29uZmlnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fJFJlbmRlcmVyVG9FbGVtLmFwcGVuZChmb3JtSHRtbFJ1bnRpbWUpO1xuXG4gICAgICB0aGlzLl9Gb3JtSlNSdW50aW1lSW5zdCA9IE9iamVjdC5jcmVhdGUoSFRNTEpTUnVudGltZSk7XG5cbiAgICAgIHRoaXMuX0Zvcm1KU1J1bnRpbWVJbnN0LkluaXRpYWxpemF0aW9uKHt9LCB0aGlzLl8kUmVuZGVyZXJUb0VsZW0sIHRoaXMuX0Zvcm1QTy5mb3JtSnNDb250ZW50KTtcblxuICAgICAgdmFyIF9yZW5kZXJlckNoYWluUGFyYXMgPSB7XG4gICAgICAgIHBvOiByZXN1bHQuZGF0YSxcbiAgICAgICAgc291cmNlSFRNTDogZm9ybUh0bWxSdW50aW1lLFxuICAgICAgICAkcm9vdEVsZW06IHRoaXMuXyRSZW5kZXJlclRvRWxlbSxcbiAgICAgICAgJHBhcmVudENvbnRyb2xFbGVtOiB0aGlzLl8kUmVuZGVyZXJUb0VsZW0sXG4gICAgICAgICRzaW5nbGVDb250cm9sRWxlbTogdGhpcy5fJFJlbmRlcmVyVG9FbGVtLFxuICAgICAgICBmb3JtUnVudGltZUluc3RhbmNlOiB0aGlzXG4gICAgICB9O1xuICAgICAgVmlydHVhbEJvZHlDb250cm9sLlJlbmRlcmVyQ2hhaW4oX3JlbmRlcmVyQ2hhaW5QYXJhcyk7XG4gICAgICBWaXJ0dWFsQm9keUNvbnRyb2wuSW5pdFN0eWxlKF9yZW5kZXJlckNoYWluUGFyYXMpO1xuXG4gICAgICBpZiAodGhpcy5Jc1ByZXZpZXcoKSkge1xuICAgICAgICB0aGlzLkNhbGxSZW5kZXJlckNoYWluQ29tcGxldGVkRnVuYygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuX0Zvcm1QTy5saXN0QnV0dG9uRW50aXR5KSB7XG4gICAgICAgICAgdGhpcy5DcmVhdGVBTExJbm5lckZvcm1CdXR0b24odGhpcy5fRm9ybVBPLmxpc3RCdXR0b25FbnRpdHkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChCYXNlVXRpbGl0eS5Jc1VwZGF0ZU9wZXJhdGlvbih0aGlzLkdldE9wZXJhdGlvblR5cGUoKSkgfHwgQmFzZVV0aWxpdHkuSXNWaWV3T3BlcmF0aW9uKHRoaXMuR2V0T3BlcmF0aW9uVHlwZSgpKSkge1xuICAgICAgICB2YXIgZm9ybVJlY29yZENvbXBsZXhQTyA9IHJlc3VsdC5kYXRhLmZvcm1SZWNvcmRDb21wbGV4UE87XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgY29uc29sZS5sb2coZm9ybVJlY29yZENvbXBsZXhQTyk7XG4gICAgICAgIHRoaXMuRGVTZXJpYWxpemF0aW9uRm9ybURhdGEoZm9ybVJlY29yZENvbXBsZXhQTyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChCYXNlVXRpbGl0eS5Jc1ZpZXdPcGVyYXRpb24odGhpcy5HZXRPcGVyYXRpb25UeXBlKCkpICYmIHRoaXMuX1Byb3BfQ29uZmlnLkZvcm1SdW50aW1lQ2F0ZWdvcnkgPT0gRm9ybVJ1bnRpbWVTaW5nbGVQYWdlT2JqZWN0LkZPUk1fUlVOVElNRV9DQVRFR09SWV9JTkRFUEVOREVOQ0UpIHtcbiAgICAgICAgJChcIiNpbm5lckJ1dHRvbldyYXBPdXRlclwiKS5oaWRlKCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuSXNQcmludCgpKSB7XG4gICAgICAgICQoXCIjaW5uZXJCdXR0b25XcmFwT3V0ZXJcIikuaGlkZSgpO1xuICAgICAgICAkKFwiLmh0bWwtZGVzaWduLW9wZXJhdGlvbi1idXR0b24tb3V0ZXItd3JhcFwiKS5oaWRlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuQ2FsbFJlbmRlcmVyQ2hhaW5Db21wbGV0ZWRGdW5jKCk7XG4gICAgfSwgdGhpcyk7XG4gIH0sXG4gIENhbGxSZW5kZXJlckNoYWluQ29tcGxldGVkRnVuYzogZnVuY3Rpb24gQ2FsbFJlbmRlcmVyQ2hhaW5Db21wbGV0ZWRGdW5jKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fUHJvcF9Db25maWcuUmVuZGVyZXJDaGFpbkNvbXBsZXRlZEZ1bmMgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLl9Qcm9wX0NvbmZpZy5SZW5kZXJlckNoYWluQ29tcGxldGVkRnVuYy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIEhUTUxQYWdlT2JqZWN0SW5zdGFuY2VQcm94eS5Jbml0KHRoaXMuX1Byb3BfQ29uZmlnLCB0aGlzLl9Gb3JtUE8pO1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwi5bu26L+f6LCD55SoXCIpO1xuICAgICAgSFRNTFBhZ2VPYmplY3RJbnN0YW5jZVByb3h5LkNhbGxQYWdlUmVhZHkoKTtcbiAgICB9LCA1MDApO1xuICB9LFxuICBJc1ByaW50OiBmdW5jdGlvbiBJc1ByaW50KCkge1xuICAgIHJldHVybiBCYXNlVXRpbGl0eS5HZXRVcmxQYXJhVmFsdWUoXCJJc1ByaW50XCIpID09IFwidHJ1ZVwiO1xuICB9LFxuICBJc1ByZXZpZXc6IGZ1bmN0aW9uIElzUHJldmlldygpIHtcbiAgICByZXR1cm4gdGhpcy5fUHJvcF9Db25maWcuSXNQcmV2aWV3O1xuICB9LFxuICBHZXRSZWNvcmRJZDogZnVuY3Rpb24gR2V0UmVjb3JkSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX1Byb3BfQ29uZmlnLlJlY29yZElkO1xuICB9LFxuICBHZXRPcGVyYXRpb25UeXBlOiBmdW5jdGlvbiBHZXRPcGVyYXRpb25UeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9Qcm9wX0NvbmZpZy5PcGVyYXRpb25UeXBlO1xuICB9LFxuICBHZXRPcGVuZWRMaXN0Rm9ybUJ1dHRvbklkOiBmdW5jdGlvbiBHZXRPcGVuZWRMaXN0Rm9ybUJ1dHRvbklkKCkge1xuICAgIHJldHVybiB0aGlzLl9Qcm9wX0NvbmZpZy5MaXN0Rm9ybUJ1dHRvbkVsZW1JZDtcbiAgfSxcbiAgR2V0T3JpZ2luYWxGb3JtRGF0YVJlbGF0aW9uOiBmdW5jdGlvbiBHZXRPcmlnaW5hbEZvcm1EYXRhUmVsYXRpb24oKSB7XG4gICAgcmV0dXJuIEpzb25VdGlsaXR5LkNsb25lU3RyaW5naWZ5KHRoaXMuX09yaWdpbmFsRm9ybURhdGFSZWxhdGlvbkxpc3QpO1xuICB9LFxuICBHZXRGb3JtUE86IGZ1bmN0aW9uIEdldEZvcm1QTygpIHtcbiAgICByZXR1cm4gdGhpcy5fRm9ybVBPO1xuICB9LFxuICBTZXJpYWxpemF0aW9uRm9ybURhdGE6IGZ1bmN0aW9uIFNlcmlhbGl6YXRpb25Gb3JtRGF0YSgpIHtcbiAgICB2YXIgZm9ybVJlY29yZENvbXBsZXhQbyA9IHtcbiAgICAgIHJlY29yZElkOiB0aGlzLl9Qcm9wX0NvbmZpZy5SZWNvcmRJZCxcbiAgICAgIGZvcm1JZDogdGhpcy5fUHJvcF9Db25maWcuRm9ybUlkLFxuICAgICAgYnV0dG9uSWQ6IHRoaXMuX1Byb3BfQ29uZmlnLkJ1dHRvbklkLFxuICAgICAgZm9ybVJ1bnRpbWVDYXRlZ29yeTogdGhpcy5fUHJvcF9Db25maWcuRm9ybVJ1bnRpbWVDYXRlZ29yeSxcbiAgICAgIGZvcm1SZWNvcmREYXRhUmVsYXRpb25QT0xpc3Q6IG51bGwsXG4gICAgICBleERhdGE6IG51bGxcbiAgICB9O1xuICAgIHZhciBvcmlnaW5hbEZvcm1EYXRhUmVsYXRpb24gPSB0aGlzLkdldE9yaWdpbmFsRm9ybURhdGFSZWxhdGlvbigpO1xuICAgIGNvbnNvbGUubG9nKG9yaWdpbmFsRm9ybURhdGFSZWxhdGlvbik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yaWdpbmFsRm9ybURhdGFSZWxhdGlvbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNpbmdsZVJlbGF0aW9uID0gb3JpZ2luYWxGb3JtRGF0YVJlbGF0aW9uW2ldO1xuICAgICAgdmFyIHJlbGF0aW9uU2luZ2xlTmFtZSA9IHNpbmdsZVJlbGF0aW9uLnNpbmdsZU5hbWU7XG4gICAgICB2YXIgdGFibGVOYW1lID0gc2luZ2xlUmVsYXRpb24udGFibGVOYW1lO1xuICAgICAgdmFyIHRhYmxlSWQgPSBzaW5nbGVSZWxhdGlvbi50YWJsZUlkO1xuICAgICAgdmFyIGlzTWFpbiA9IHNpbmdsZVJlbGF0aW9uLm1haW47XG4gICAgICBzaW5nbGVSZWxhdGlvbi5pc01haW4gPSBpc01haW47XG5cbiAgICAgIGlmIChpc01haW4pIHtcbiAgICAgICAgc2luZ2xlUmVsYXRpb24ucmVsYXRpb25UeXBlID0gXCIxVG8xXCI7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGlvblR5cGUgPSBzaW5nbGVSZWxhdGlvbi5yZWxhdGlvblR5cGU7XG5cbiAgICAgIGlmIChyZWxhdGlvblR5cGUgPT0gXCIxVG8xXCIpIHtcbiAgICAgICAgdmFyIGNvbnRyb2xzID0gJChcIlt0YWJsZW5hbWU9J1wiICsgdGFibGVOYW1lICsgXCInXVtzZXJpYWxpemU9J3RydWUnXVwiKS5ub3QoJChcIltjb250cm9sX2NhdGVnb3J5PSdEeW5hbWljQ29udGFpbmVyJ11cIikuZmluZChcIltqYnVpbGQ0ZGNfY3VzdG9tPSd0cnVlJ11cIikpO1xuICAgICAgICB2YXIgb25lUm93UmVjb3JkID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjb250cm9scy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHZhciAkY29udHJvbEVsZW0gPSAkKGNvbnRyb2xzW2pdKTtcbiAgICAgICAgICB2YXIgZmllbGRUcmFuc2ZlclBPID0gSFRNTENvbnRyb2wuVHJ5R2V0RmllbGRUcmFuc2ZlclBPKCRjb250cm9sRWxlbSwgc2luZ2xlUmVsYXRpb24uaWQsIHJlbGF0aW9uU2luZ2xlTmFtZSwgcmVsYXRpb25UeXBlKTtcbiAgICAgICAgICBvbmVSb3dSZWNvcmQucHVzaChmaWVsZFRyYW5zZmVyUE8pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlY29yZElkID0gXCJcIjtcbiAgICAgICAgdmFyIG91dGVyRmllbGROYW1lID0gXCJcIjtcbiAgICAgICAgdmFyIG91dGVyRmllbGRWYWx1ZSA9IFwiXCI7XG4gICAgICAgIHZhciBzZWxmRmllbGROYW1lID0gXCJcIjtcblxuICAgICAgICBpZiAoaXNNYWluKSB7XG4gICAgICAgICAgRm9ybVJlbGF0aW9uUE9VdGlsaXR5LkNyZWF0ZUlkRmllbGRJblJlY29yZEZpZWxkUE9BcnJheShvbmVSb3dSZWNvcmQsIGZvcm1SZWNvcmRDb21wbGV4UG8ucmVjb3JkSWQsIHRoaXMuR2V0Rm9ybVBPKCksIHRhYmxlSWQpO1xuICAgICAgICAgIHJlY29yZElkID0gZm9ybVJlY29yZENvbXBsZXhQby5yZWNvcmRJZDtcbiAgICAgICAgICBvdXRlckZpZWxkTmFtZSA9IFwiTm90T3V0ZXJGaWVsZFwiO1xuICAgICAgICAgIG91dGVyRmllbGRWYWx1ZSA9IFwiTm90T3V0ZXJGaWVsZFwiO1xuICAgICAgICAgIHNlbGZGaWVsZE5hbWUgPSBcIk5vdE91dGVyRmllbGRcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWNvcmRJZCA9IEZvcm1SZWxhdGlvblBPVXRpbGl0eS5GaW5kRmllbGRQT0luT25lRGF0YVJlY29yZChvbmVSb3dSZWNvcmQsIHNpbmdsZVJlbGF0aW9uLnBrRmllbGROYW1lKS52YWx1ZTtcbiAgICAgICAgICBvdXRlckZpZWxkTmFtZSA9IHNpbmdsZVJlbGF0aW9uLm91dGVyS2V5RmllbGROYW1lO1xuICAgICAgICAgIG91dGVyRmllbGRWYWx1ZSA9IHNpbmdsZVJlbGF0aW9uLm91dGVyS2V5RmllbGROYW1lO1xuICAgICAgICAgIHNlbGZGaWVsZE5hbWUgPSBzaW5nbGVSZWxhdGlvbi5zZWxmS2V5RmllbGROYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgRm9ybVJlbGF0aW9uUE9VdGlsaXR5LkFkZDFUbzFEYXRhUmVjb3JkRmllbGRQT0xpc3Qoc2luZ2xlUmVsYXRpb24sIG9uZVJvd1JlY29yZCwgXCJcIiwgcmVjb3JkSWQsIG91dGVyRmllbGROYW1lLCBvdXRlckZpZWxkVmFsdWUsIHNlbGZGaWVsZE5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNvbnRyb2wgPSAkKFwiW3NlcmlhbGl6ZT0ndHJ1ZSddW2NvbnRyb2xfY2F0ZWdvcnk9J0R5bmFtaWNDb250YWluZXInXVtyZWxhdGlvbl9wb19pZD0nXCIgKyBzaW5nbGVSZWxhdGlvbi5pZCArIFwiJ11cIik7XG5cbiAgICAgICAgaWYgKGNvbnRyb2wubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBjb250cm9sSW5zdGFuY2UgPSBIVE1MQ29udHJvbC5HZXRDb250cm9sSW5zdGFuY2VCeUVsZW0oY29udHJvbCk7XG4gICAgICAgICAgY29udHJvbEluc3RhbmNlLlNlcmlhbGl6YXRpb25WYWx1ZShvcmlnaW5hbEZvcm1EYXRhUmVsYXRpb24sIHNpbmdsZVJlbGF0aW9uLCBjb250cm9sKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvcm1SZWNvcmRDb21wbGV4UG8uZm9ybVJlY29yZERhdGFSZWxhdGlvblBPTGlzdCA9IG9yaWdpbmFsRm9ybURhdGFSZWxhdGlvbjtcbiAgICByZXR1cm4gZm9ybVJlY29yZENvbXBsZXhQbztcbiAgfSxcbiAgRGVTZXJpYWxpemF0aW9uRm9ybURhdGE6IGZ1bmN0aW9uIERlU2VyaWFsaXphdGlvbkZvcm1EYXRhKHJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQbykge1xuICAgIFZpcnR1YWxCb2R5Q29udHJvbC5SZW5kZXJlckRhdGFDaGFpbih7XG4gICAgICAkcm9vdEVsZW06IHRoaXMuXyRSZW5kZXJlclRvRWxlbSxcbiAgICAgICRwYXJlbnRDb250cm9sRWxlbTogdGhpcy5fJFJlbmRlcmVyVG9FbGVtLFxuICAgICAgJHNpbmdsZUNvbnRyb2xFbGVtOiB0aGlzLl8kUmVuZGVyZXJUb0VsZW0sXG4gICAgICBmb3JtUnVudGltZUluc3RhbmNlOiB0aGlzLFxuICAgICAgcmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvOiByZWxhdGlvbkZvcm1SZWNvcmRDb21wbGV4UG8sXG4gICAgICBjYWxsVG9WaWV3U3RhdHVzRnVuYzogQmFzZVV0aWxpdHkuSXNWaWV3T3BlcmF0aW9uKHRoaXMuR2V0T3BlcmF0aW9uVHlwZSgpKVxuICAgIH0pO1xuICB9LFxuICBDcmVhdGVBTExJbm5lckZvcm1CdXR0b246IGZ1bmN0aW9uIENyZWF0ZUFMTElubmVyRm9ybUJ1dHRvbihsaXN0QnV0dG9uUE8pIHtcbiAgICBpZiAoIVN0cmluZ1V0aWxpdHkuSXNOdWxsT3JFbXB0eShsaXN0QnV0dG9uUE8uYnV0dG9uSW5uZXJDb25maWcpKSB7XG4gICAgICB2YXIgYnV0dG9uSW5uZXJDb25maWcgPSBKc29uVXRpbGl0eS5TdHJpbmdUb0pzb24obGlzdEJ1dHRvblBPLmJ1dHRvbklubmVyQ29uZmlnKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidXR0b25Jbm5lckNvbmZpZy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgaW5uZXJCdXR0b25Db25maWcgPSBidXR0b25Jbm5lckNvbmZpZ1tpXTtcbiAgICAgICAgdmFyIGJ1dHRvbkVsZW0gPSBJbm5lckZvcm1CdXR0b25SdW50aW1lLlJlbmRlcmVyU2luZ2xlSW5uZXJGb3JtQnV0dG9uKGlubmVyQnV0dG9uQ29uZmlnLCB0aGlzLCBsaXN0QnV0dG9uUE8pO1xuICAgICAgICAkKFwiI2lubmVyQnV0dG9uV3JhcE91dGVyXCIpLmFwcGVuZChidXR0b25FbGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIEdldFdlYkZvcm1SVFBhcmFzOiBmdW5jdGlvbiBHZXRXZWJGb3JtUlRQYXJhcygpIHtcbiAgICByZXR1cm4gdGhpcy5fUHJvcF9Db25maWcuV2ViRm9ybVJUUGFyYXM7XG4gIH1cbn07XG52YXIgRm9ybVJ1bnRpbWVNb2NrRGF0YVBvb2wgPSB7XG4gIG1vY2tEYXRhUG9vbDoge30sXG4gIFNhdmVEYXRhOiBmdW5jdGlvbiBTYXZlRGF0YShncm91cE5hbWUsIHJlY29yZElkLCBkYXRhKSB7XG4gICAgdmFyIGtleSA9IGdyb3VwTmFtZSArIFwiLVwiICsgcmVjb3JkSWQ7XG4gICAgdGhpcy5tb2NrRGF0YVBvb2xba2V5XSA9IGRhdGE7XG4gIH0sXG4gIEdldERhdGE6IGZ1bmN0aW9uIEdldERhdGEoZ3JvdXBOYW1lLCByZWNvcmRJZCkge1xuICAgIHZhciBrZXkgPSBncm91cE5hbWUgKyBcIi1cIiArIHJlY29yZElkO1xuXG4gICAgaWYgKHRoaXMubW9ja0RhdGFQb29sW2tleV0pIHtcbiAgICAgIHJldHVybiB0aGlzLm1vY2tEYXRhUG9vbFtrZXldO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBTYXZlRGF0YVRvUGFyZW50UG9vbDogZnVuY3Rpb24gU2F2ZURhdGFUb1BhcmVudFBvb2woZ3JvdXBOYW1lLCByZWNvcmRJZCwgZGF0YSkge1xuICAgIHdpbmRvdy5wYXJlbnQuRm9ybVJ1bnRpbWVNb2NrRGF0YVBvb2wuU2F2ZURhdGEoZ3JvdXBOYW1lLCByZWNvcmRJZCwgZGF0YSk7XG4gIH0sXG4gIEdldERhdGFGcm9tUGFyZW50UG9vbDogZnVuY3Rpb24gR2V0RGF0YUZyb21QYXJlbnRQb29sKGdyb3VwTmFtZSwgcmVjb3JkSWQpIHtcbiAgICByZXR1cm4gd2luZG93LnBhcmVudC5Gb3JtUnVudGltZU1vY2tEYXRhUG9vbC5HZXREYXRhKGdyb3VwTmFtZSwgcmVjb3JkSWQpO1xuICB9LFxuICBHZXRNb2NrRGF0YTogZnVuY3Rpb24gR2V0TW9ja0RhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFwicmVjb3JkSWRcIjogXCJcIixcbiAgICAgIFwiZm9ybUlkXCI6IFwiMzRkYjBkNmYtNzk3OC00YWNmLThhNDUtMTNhNmVlNWY2M2UyXCIsXG4gICAgICBcImJ1dHRvbklkXCI6IFwiXCIsXG4gICAgICBcImZvcm1SZWNvcmREYXRhUmVsYXRpb25QT0xpc3RcIjogW3tcbiAgICAgICAgXCJpZFwiOiBcImQ5YmM5MzMyLTNjOTQtMjhiYi0xYzExLTA0OTc2NGM2OWViNVwiLFxuICAgICAgICBcInBhcmVudElkXCI6IFwiLTFcIixcbiAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwicGtGaWVsZE5hbWVcIjogXCJcIixcbiAgICAgICAgXCJkZXNjXCI6IFwiXCIsXG4gICAgICAgIFwic2VsZktleUZpZWxkTmFtZVwiOiBcIlwiLFxuICAgICAgICBcIm91dGVyS2V5RmllbGROYW1lXCI6IFwiXCIsXG4gICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvMVwiLFxuICAgICAgICBcImlzU2F2ZVwiOiBcInRydWVcIixcbiAgICAgICAgXCJjb25kaXRpb25cIjogXCJcIixcbiAgICAgICAgXCJ0YWJsZUlkXCI6IFwiVERFVl9URVNUXzFcIixcbiAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfMVwiLFxuICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIuW8gOWPkea1i+ivleihqDExXCIsXG4gICAgICAgIFwidGFibGVDb2RlXCI6IFwiVF8xMDQzN1wiLFxuICAgICAgICBcImRpc3BsYXlUZXh0XCI6IFwiVERFVl9URVNUXzFb5byA5Y+R5rWL6K+V6KGoMV1cIixcbiAgICAgICAgXCJpY29uXCI6IFwiLi4vLi4vLi4vVGhlbWVzL1BuZzE2WDE2L3RhYmxlLnBuZ1wiLFxuICAgICAgICBcImlzTWFpblwiOiB0cnVlLFxuICAgICAgICBcIm9uZURhdGFSZWNvcmRcIjoge1xuICAgICAgICAgIFwiZGVzY1wiOiBcIuS4gOWvueS4gOaVsOaNrlwiLFxuICAgICAgICAgIFwicmVjb3JkRmllbGRQT0xpc3RcIjogW3tcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImQ5YmM5MzMyLTNjOTQtMjhiYi0xYzExLTA0OTc2NGM2OWViNVwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvMVwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfMVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCLlvIDlj5HmtYvor5XooagxXCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJUREVWX1RFU1RfMVwiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiRl9USVRMRVwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0Xzg5Nzk0OTI5NVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIua1i+ivlVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIua1i+ivlTE1XCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJkOWJjOTMzMi0zYzk0LTI4YmItMWMxMS0wNDk3NjRjNjllYjVcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUbzFcIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHREYXRlVGltZVwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfMVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCLlvIDlj5HmtYvor5XooagxXCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJUREVWX1RFU1RfMVwiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiRl9QVUJMSUNfVElNRVwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5pel5pyf5pe26Ze0XCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfZHRfMzc1MTg2ODkxXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiRW52VmFyXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIkVOVl9EQVRFVElNRV9ZWVlZX01NX0REXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiMjAxOS0xMC0zMVwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZDliYzkzMzItM2M5NC0yOGJiLTFjMTEtMDQ5NzY0YzY5ZWI1XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG8xXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9Ecm9wRG93blNlbGVjdFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfMVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCLlvIDlj5HmtYvor5XooagxXCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJUREVWX1RFU1RfMVwiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiRl9QVUJMSUNfU1RBVFVTXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiNTBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInNlbF8yNDY0MTA2ODhcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiNFwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZDliYzkzMzItM2M5NC0yOGJiLTFjMTEtMDQ5NzY0YzY5ZWI1XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG8xXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF8xXCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIuW8gOWPkea1i+ivleihqDFcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcIlRERVZfVEVTVF8xXCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJGX09SR0FOX0lEXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiNTBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF84OTc5MDk3NTVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJFbnZWYXJcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiRU5WX1NZU1RFTV9DVVJSRU5UX1VTRVJfT1JHQU5fSURcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIxMDAwMVwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZDliYzkzMzItM2M5NC0yOGJiLTFjMTEtMDQ5NzY0YzY5ZWI1XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG8xXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF8xXCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIuW8gOWPkea1i+ivleihqDFcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcIlRERVZfVEVTVF8xXCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJJRFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0Xzg5Nzk0OTI5NVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIua1i+ivlVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjBkNTYxYzBlLWI4M2ItYTlmZi1jODhhLTY1MmQ0YTRhYTI1NlwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfV1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBcImlkXCI6IFwiMmQ3ZGVmNzUtMTQzOC03NjE0LWFmN2QtNjBjZTA2NTBlYmE2XCIsXG4gICAgICAgIFwicGFyZW50SWRcIjogXCJkOWJjOTMzMi0zYzk0LTI4YmItMWMxMS0wNDk3NjRjNjllYjVcIixcbiAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwicGtGaWVsZE5hbWVcIjogXCJcIixcbiAgICAgICAgXCJkZXNjXCI6IFwiXCIsXG4gICAgICAgIFwic2VsZktleUZpZWxkTmFtZVwiOiBcIlwiLFxuICAgICAgICBcIm91dGVyS2V5RmllbGROYW1lXCI6IFwiXCIsXG4gICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICBcImlzU2F2ZVwiOiBcInRydWVcIixcbiAgICAgICAgXCJjb25kaXRpb25cIjogXCJcIixcbiAgICAgICAgXCJ0YWJsZUlkXCI6IFwiVERFVl9URVNUXzJcIixcbiAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfMlwiLFxuICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIuW8gOWPkea1i+ivleihqDJcIixcbiAgICAgICAgXCJ0YWJsZUNvZGVcIjogXCJUXzEwNDM4XCIsXG4gICAgICAgIFwiZGlzcGxheVRleHRcIjogXCJUREVWX1RFU1RfMlvlvIDlj5HmtYvor5XooagyXSgxVG9OKVwiLFxuICAgICAgICBcImljb25cIjogXCIuLi8uLi8uLi9UaGVtZXMvUG5nMTZYMTYvdGFibGUucG5nXCIsXG4gICAgICAgIFwiaXNNYWluXCI6IGZhbHNlLFxuICAgICAgICBcImxpc3REYXRhUmVjb3JkXCI6IFt7XG4gICAgICAgICAgXCJkZXNjXCI6IFwi5LiA5a+55LiA5pWw5o2uXCIsXG4gICAgICAgICAgXCJyZWNvcmRGaWVsZFBPTGlzdFwiOiBbe1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiMTllNWY0ZWEtNGZiYS00ZjRiLTBkM2ItOGI2ZjU2ZGRlZGExXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG8xXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF8yXCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIuW8gOWPkea1i+ivleihqDJcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcIlRERVZfVEVTVF8yXCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJGX1RJVExFXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjAwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfNjk4MDM1MDgyXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiQ29uc3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcIjE5ZTVmNGVhLTRmYmEtNGY0Yi0wZDNiLThiNmY1NmRkZWRhMVwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvMVwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dERhdGVUaW1lXCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF8yXCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIuW8gOWPkea1i+ivleihqDJcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcIlRERVZfVEVTVF8yXCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJGX1BVQkxJQ19USU1FXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLml6XmnJ/ml7bpl7RcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF9kdF82OTgwNjAyODFcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJFbnZWYXJcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiRU5WX0RBVEVUSU1FX1lZWVlfTU1fRERcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIyMDE5LTEwLTMwXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCIxOWU1ZjRlYS00ZmJhLTRmNGItMGQzYi04YjZmNTZkZGVkYTFcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUbzFcIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHRCb3hcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzJcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwi5byA5Y+R5rWL6K+V6KGoMlwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiVERFVl9URVNUXzJcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIklEXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjAwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfNjk4MDM1MDgyXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiQ29uc3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcImYxODcwNmI5LWM4YTUtOTNjYi04YmUwLWY3ZmNhMmQ3NzcwMlwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfV1cbiAgICAgICAgfSwge1xuICAgICAgICAgIFwiZGVzY1wiOiBcIuS4gOWvueS4gOaVsOaNrlwiLFxuICAgICAgICAgIFwicmVjb3JkRmllbGRQT0xpc3RcIjogW3tcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcIjE5ZTVmNGVhLTRmYmEtNGY0Yi0wZDNiLThiNmY1NmRkZWRhMVwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvMVwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfMlwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCLlvIDlj5HmtYvor5XooagyXCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJUREVWX1RFU1RfMlwiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiRl9USVRMRVwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0XzY5ODAzNTA4MlwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIyXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCIxOWU1ZjRlYS00ZmJhLTRmNGItMGQzYi04YjZmNTZkZGVkYTFcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUbzFcIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHREYXRlVGltZVwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfMlwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCLlvIDlj5HmtYvor5XooagyXCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJUREVWX1RFU1RfMlwiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiRl9QVUJMSUNfVElNRVwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5pel5pyf5pe26Ze0XCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfZHRfNjk4MDYwMjgxXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiRW52VmFyXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIkVOVl9EQVRFVElNRV9ZWVlZX01NX0REXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiMjAxOS0xMC0zMFwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiMTllNWY0ZWEtNGZiYS00ZjRiLTBkM2ItOGI2ZjU2ZGRlZGExXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG8xXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF8yXCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIuW8gOWPkea1i+ivleihqDJcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcIlRERVZfVEVTVF8yXCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJJRFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0XzY5ODAzNTA4MlwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJlNjg4MTc3OS1lY2QyLTgzNDUtMDNmMS03YzhlZjA2NWRjY2JcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH1dXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBcImRlc2NcIjogXCLkuIDlr7nkuIDmlbDmja5cIixcbiAgICAgICAgICBcInJlY29yZEZpZWxkUE9MaXN0XCI6IFt7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCIxOWU1ZjRlYS00ZmJhLTRmNGItMGQzYi04YjZmNTZkZGVkYTFcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUbzFcIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHRCb3hcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzJcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwi5byA5Y+R5rWL6K+V6KGoMlwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiVERFVl9URVNUXzJcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIkZfVElUTEVcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMDBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF82OTgwMzUwODJcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJDb25zdFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCIxXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiM1wiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiMTllNWY0ZWEtNGZiYS00ZjRiLTBkM2ItOGI2ZjU2ZGRlZGExXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG8xXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0RGF0ZVRpbWVcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzJcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwi5byA5Y+R5rWL6K+V6KGoMlwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiVERFVl9URVNUXzJcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIkZfUFVCTElDX1RJTUVcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuaXpeacn+aXtumXtFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0X2R0XzY5ODA2MDI4MVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkVudlZhclwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCJFTlZfREFURVRJTUVfWVlZWV9NTV9ERFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjIwMTktMTAtMzBcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcIjE5ZTVmNGVhLTRmYmEtNGY0Yi0wZDNiLThiNmY1NmRkZWRhMVwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvMVwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfMlwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCLlvIDlj5HmtYvor5XooagyXCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJUREVWX1RFU1RfMlwiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiSURcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMDBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF82OTgwMzUwODJcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJDb25zdFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCIxXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiZDlmZTJmMTAtZTVlYi1mNTlhLTU4ZWUtNzg3ZmRjZTc1MWYxXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9XVxuICAgICAgICB9XVxuICAgICAgfSwge1xuICAgICAgICBcImlkXCI6IFwiNDMxMzM2NmItY2FhMC00MjcyLTI2OTAtMTIzNzc1MDY1MWY2XCIsXG4gICAgICAgIFwicGFyZW50SWRcIjogXCIyZDdkZWY3NS0xNDM4LTc2MTQtYWY3ZC02MGNlMDY1MGViYTZcIixcbiAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwicGtGaWVsZE5hbWVcIjogXCJcIixcbiAgICAgICAgXCJkZXNjXCI6IFwiXCIsXG4gICAgICAgIFwic2VsZktleUZpZWxkTmFtZVwiOiBcIlRERVZfVEVTVF8yX0lEXCIsXG4gICAgICAgIFwib3V0ZXJLZXlGaWVsZE5hbWVcIjogXCJJRFwiLFxuICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgXCJpc1NhdmVcIjogXCJ0cnVlXCIsXG4gICAgICAgIFwiY29uZGl0aW9uXCI6IFwiXCIsXG4gICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgXCJ0YWJsZUNvZGVcIjogXCJUXzEwODcxXCIsXG4gICAgICAgIFwiZGlzcGxheVRleHRcIjogXCJUREVWX1RFU1RfNVtUREVWX1RFU1RfNV0oMVRvTilcIixcbiAgICAgICAgXCJpY29uXCI6IFwiLi4vLi4vLi4vVGhlbWVzL1BuZzE2WDE2L3RhYmxlLnBuZ1wiLFxuICAgICAgICBcImxpc3REYXRhUmVjb3JkXCI6IFt7XG4gICAgICAgICAgXCJkZXNjXCI6IFwi5LiA5a+55LiA5pWw5o2uXCIsXG4gICAgICAgICAgXCJyZWNvcmRGaWVsZFBPTGlzdFwiOiBbe1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIkZfVElUTEVcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMDBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF83Njg2NTk2ODVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJDb25zdFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCIxXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0RGF0ZVRpbWVcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiRl9QVUJMSUNfVElNRVwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5pel5pyf5pe26Ze0XCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfZHRfNzY4NzI5MzE3XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiRW52VmFyXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIkVOVl9EQVRFVElNRV9ZWVlZX01NX0REX0hIX01NX1NTXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiMjAxOS0xMC0zMCAyMDo1OTozMlwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIklEXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjAwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfNzY4NjU5Njg1XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiQ29uc3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjhiZTY3MDg2LTNmMmUtOWViNy03YjlkLWY1MzUwZGI5ZGU5MlwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIlRERVZfVEVTVF8yX0lEXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjAwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfNzY4NjU5Njg1XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiQ29uc3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcImYxODcwNmI5LWM4YTUtOTNjYi04YmUwLWY3ZmNhMmQ3NzcwMlwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfV1cbiAgICAgICAgfSwge1xuICAgICAgICAgIFwiZGVzY1wiOiBcIuS4gOWvueS4gOaVsOaNrlwiLFxuICAgICAgICAgIFwicmVjb3JkRmllbGRQT0xpc3RcIjogW3tcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJGX1RJVExFXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjAwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfNzY4NjU5Njg1XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiQ29uc3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjExXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHREYXRlVGltZVwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJGX1BVQkxJQ19USU1FXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLml6XmnJ/ml7bpl7RcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF9kdF83Njg3MjkzMTdcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJFbnZWYXJcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiRU5WX0RBVEVUSU1FX1lZWVlfTU1fRERfSEhfTU1fU1NcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIyMDE5LTEwLTMwIDIwOjU5OjMyXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHRCb3hcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiSURcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMDBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF83Njg2NTk2ODVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJDb25zdFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCIxXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiM2E0ZjUxMmYtNWZkNS0yZDhmLTk4YTAtNmU4YWEwMTc4OTk5XCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHRCb3hcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiVERFVl9URVNUXzJfSURcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMDBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF83Njg2NTk2ODVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJDb25zdFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCIxXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiZjE4NzA2YjktYzhhNS05M2NiLThiZTAtZjdmY2EyZDc3NzAyXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9XVxuICAgICAgICB9LCB7XG4gICAgICAgICAgXCJkZXNjXCI6IFwi5LiA5a+55LiA5pWw5o2uXCIsXG4gICAgICAgICAgXCJyZWNvcmRGaWVsZFBPTGlzdFwiOiBbe1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIkZfVElUTEVcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMDBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF83Njg2NTk2ODVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJDb25zdFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCIxXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiMTExXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHREYXRlVGltZVwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJGX1BVQkxJQ19USU1FXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLml6XmnJ/ml7bpl7RcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF9kdF83Njg3MjkzMTdcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJFbnZWYXJcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiRU5WX0RBVEVUSU1FX1lZWVlfTU1fRERfSEhfTU1fU1NcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIyMDE5LTEwLTMwIDIwOjU5OjMyXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHRCb3hcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiSURcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMDBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF83Njg2NTk2ODVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJDb25zdFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCIxXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiODViZTljYjUtNDhiYy1lYzAxLTZmMGMtN2E2MzQ5MzRmMjVlXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHRCb3hcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiVERFVl9URVNUXzJfSURcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMDBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF83Njg2NTk2ODVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJDb25zdFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCIxXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiZjE4NzA2YjktYzhhNS05M2NiLThiZTAtZjdmY2EyZDc3NzAyXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9XVxuICAgICAgICB9LCB7XG4gICAgICAgICAgXCJkZXNjXCI6IFwi5LiA5a+55LiA5pWw5o2uXCIsXG4gICAgICAgICAgXCJyZWNvcmRGaWVsZFBPTGlzdFwiOiBbe1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIkZfVElUTEVcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMDBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF83Njg2NTk2ODVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJDb25zdFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCIxXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiMTExMVwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0RGF0ZVRpbWVcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiRl9QVUJMSUNfVElNRVwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5pel5pyf5pe26Ze0XCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfZHRfNzY4NzI5MzE3XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiRW52VmFyXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIkVOVl9EQVRFVElNRV9ZWVlZX01NX0REX0hIX01NX1NTXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiMjAxOS0xMC0zMCAyMDo1OTozMlwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIklEXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjAwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfNzY4NjU5Njg1XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiQ29uc3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjhiZDliNzBiLTdhMDMtNWNiZC04NjNmLWJmOTk0NjEyNjQ3YlwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIlRERVZfVEVTVF8yX0lEXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjAwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfNzY4NjU5Njg1XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiQ29uc3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcImYxODcwNmI5LWM4YTUtOTNjYi04YmUwLWY3ZmNhMmQ3NzcwMlwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfV1cbiAgICAgICAgfSwge1xuICAgICAgICAgIFwiZGVzY1wiOiBcIuS4gOWvueS4gOaVsOaNrlwiLFxuICAgICAgICAgIFwicmVjb3JkRmllbGRQT0xpc3RcIjogW3tcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJGX1RJVExFXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjAwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfNzY4NjU5Njg1XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiQ29uc3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjJcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dERhdGVUaW1lXCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIkZfUFVCTElDX1RJTUVcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuaXpeacn+aXtumXtFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0X2R0Xzc2ODcyOTMxN1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkVudlZhclwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCJFTlZfREFURVRJTUVfWVlZWV9NTV9ERF9ISF9NTV9TU1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjIwMTktMTAtMzAgMjA6NTk6NDlcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJJRFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0Xzc2ODY1OTY4NVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJkYmY0NmIxMy0zMjg1LTU4OTEtYWM1MC1lZDc4M2I4ZmJjZGFcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJUREVWX1RFU1RfMl9JRFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0Xzc2ODY1OTY4NVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJlNjg4MTc3OS1lY2QyLTgzNDUtMDNmMS03YzhlZjA2NWRjY2JcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH1dXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBcImRlc2NcIjogXCLkuIDlr7nkuIDmlbDmja5cIixcbiAgICAgICAgICBcInJlY29yZEZpZWxkUE9MaXN0XCI6IFt7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHRCb3hcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiRl9USVRMRVwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0Xzc2ODY1OTY4NVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIyMlwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0RGF0ZVRpbWVcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiRl9QVUJMSUNfVElNRVwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5pel5pyf5pe26Ze0XCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfZHRfNzY4NzI5MzE3XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiRW52VmFyXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIkVOVl9EQVRFVElNRV9ZWVlZX01NX0REX0hIX01NX1NTXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiMjAxOS0xMC0zMCAyMDo1OTo0OVwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIklEXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjAwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfNzY4NjU5Njg1XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiQ29uc3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcImRmZWVlYWRjLTM0MTgtODliOC0yZmMzLTk4ZjkyNjM5MDBjNFwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIlRERVZfVEVTVF8yX0lEXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjAwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfNzY4NjU5Njg1XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiQ29uc3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcImU2ODgxNzc5LWVjZDItODM0NS0wM2YxLTdjOGVmMDY1ZGNjYlwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfV1cbiAgICAgICAgfSwge1xuICAgICAgICAgIFwiZGVzY1wiOiBcIuS4gOWvueS4gOaVsOaNrlwiLFxuICAgICAgICAgIFwicmVjb3JkRmllbGRQT0xpc3RcIjogW3tcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJGX1RJVExFXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjAwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfNzY4NjU5Njg1XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiQ29uc3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjIyMlwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0RGF0ZVRpbWVcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiRl9QVUJMSUNfVElNRVwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5pel5pyf5pe26Ze0XCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfZHRfNzY4NzI5MzE3XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiRW52VmFyXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIkVOVl9EQVRFVElNRV9ZWVlZX01NX0REX0hIX01NX1NTXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiMjAxOS0xMC0zMCAyMDo1OTo0OVwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIklEXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjAwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfNzY4NjU5Njg1XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiQ29uc3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjAwNWQxMjY1LWYxNjUtMzRmOS1kZmM3LTFlNzAwYmE3ZmZhNFwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIlRERVZfVEVTVF8yX0lEXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjAwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfNzY4NjU5Njg1XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiQ29uc3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcImU2ODgxNzc5LWVjZDItODM0NS0wM2YxLTdjOGVmMDY1ZGNjYlwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1zZ1wiOiBcIlwiXG4gICAgICAgICAgfV1cbiAgICAgICAgfSwge1xuICAgICAgICAgIFwiZGVzY1wiOiBcIuS4gOWvueS4gOaVsOaNrlwiLFxuICAgICAgICAgIFwicmVjb3JkRmllbGRQT0xpc3RcIjogW3tcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJGX1RJVExFXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLlrZfnrKbkuLJcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjAwXCIsXG4gICAgICAgICAgICBcInNlcmlhbGl6ZVwiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJ0eHRfNzY4NjU5Njg1XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRUeXBlXCI6IFwiQ29uc3RcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjIyMjJcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dERhdGVUaW1lXCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIkZfUFVCTElDX1RJTUVcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuaXpeacn+aXtumXtFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0X2R0Xzc2ODcyOTMxN1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkVudlZhclwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCJFTlZfREFURVRJTUVfWVlZWV9NTV9ERF9ISF9NTV9TU1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjIwMTktMTAtMzAgMjA6NTk6NDlcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJJRFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0Xzc2ODY1OTY4NVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIwNThlODU2My1hZGMxLTdjM2QtNDE3Zi03ODNmZTE5ZGQ5MzZcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJUREVWX1RFU1RfMl9JRFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0Xzc2ODY1OTY4NVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJlNjg4MTc3OS1lY2QyLTgzNDUtMDNmMS03YzhlZjA2NWRjY2JcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH1dXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBcImRlc2NcIjogXCLkuIDlr7nkuIDmlbDmja5cIixcbiAgICAgICAgICBcInJlY29yZEZpZWxkUE9MaXN0XCI6IFt7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHRCb3hcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiRl9USVRMRVwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0Xzc2ODY1OTY4NVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIzXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHREYXRlVGltZVwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJGX1BVQkxJQ19USU1FXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLml6XmnJ/ml7bpl7RcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF9kdF83Njg3MjkzMTdcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJFbnZWYXJcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiRU5WX0RBVEVUSU1FX1lZWVlfTU1fRERfSEhfTU1fU1NcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIyMDE5LTEwLTMwIDIxOjAwOjEyXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHRCb3hcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiSURcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMDBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF83Njg2NTk2ODVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJDb25zdFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCIxXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiODI4NDJhODgtMjc5ZS00NTk5LTBmNTctMGI5NGM2NWI1YTRjXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHRCb3hcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiVERFVl9URVNUXzJfSURcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMDBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF83Njg2NTk2ODVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJDb25zdFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCIxXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiZDlmZTJmMTAtZTVlYi1mNTlhLTU4ZWUtNzg3ZmRjZTc1MWYxXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9XVxuICAgICAgICB9LCB7XG4gICAgICAgICAgXCJkZXNjXCI6IFwi5LiA5a+55LiA5pWw5o2uXCIsXG4gICAgICAgICAgXCJyZWNvcmRGaWVsZFBPTGlzdFwiOiBbe1xuICAgICAgICAgICAgXCJyZWxhdGlvbklkXCI6IFwiZmQ2Y2MxYTEtODIyYi03YTZjLTllZTQtZjBlNmQzNmJkNTM4XCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uU2luZ2xlTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblR5cGVcIjogXCIxVG9OXCIsXG4gICAgICAgICAgICBcInNpbmdsZU5hbWVcIjogXCJXRkRDVF9UZXh0Qm94XCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIkZfVElUTEVcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMDBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF83Njg2NTk2ODVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJDb25zdFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCIxXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiMzNcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dERhdGVUaW1lXCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIkZfUFVCTElDX1RJTUVcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuaXpeacn+aXtumXtFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0X2R0Xzc2ODcyOTMxN1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkVudlZhclwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCJFTlZfREFURVRJTUVfWVlZWV9NTV9ERF9ISF9NTV9TU1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjIwMTktMTAtMzAgMjE6MDA6MTJcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJJRFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0Xzc2ODY1OTY4NVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJjMmIzYjg2Yi1kNmMzLWNiNGItYjIxNS02ZGI5OTE1MmI1NmVcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJUREVWX1RFU1RfMl9JRFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0Xzc2ODY1OTY4NVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJkOWZlMmYxMC1lNWViLWY1OWEtNThlZS03ODdmZGNlNzUxZjFcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH1dXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBcImRlc2NcIjogXCLkuIDlr7nkuIDmlbDmja5cIixcbiAgICAgICAgICBcInJlY29yZEZpZWxkUE9MaXN0XCI6IFt7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHRCb3hcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiRl9USVRMRVwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0Xzc2ODY1OTY4NVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIzMzNcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dERhdGVUaW1lXCIsXG4gICAgICAgICAgICBcInRhYmxlTmFtZVwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlQ2FwdGlvblwiOiBcIlRERVZfVEVTVF81XCIsXG4gICAgICAgICAgICBcInRhYmxlSWRcIjogXCJlMTU1NDljYi1lMDc0LTQ4YTMtODkzOS00NDM0MGUzODdmMTdcIixcbiAgICAgICAgICAgIFwiZmllbGRUYWJsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZpZWxkTmFtZVwiOiBcIkZfUFVCTElDX1RJTUVcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuaXpeacn+aXtumXtFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0X2R0Xzc2ODcyOTMxN1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkVudlZhclwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCJFTlZfREFURVRJTUVfWVlZWV9NTV9ERF9ISF9NTV9TU1wiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjIwMTktMTAtMzAgMjE6MDA6MTJcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJJRFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0Xzc2ODY1OTY4NVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJiMDZmYzk4NC00NTQ4LTA5MTQtYjA0MS1lOGM5ODIxNTFiODZcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIFwicmVsYXRpb25JZFwiOiBcImZkNmNjMWExLTgyMmItN2E2Yy05ZWU0LWYwZTZkMzZiZDUzOFwiLFxuICAgICAgICAgICAgXCJyZWxhdGlvblNpbmdsZU5hbWVcIjogXCJcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25UeXBlXCI6IFwiMVRvTlwiLFxuICAgICAgICAgICAgXCJzaW5nbGVOYW1lXCI6IFwiV0ZEQ1RfVGV4dEJveFwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJUREVWX1RFU1RfMl9JRFwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0Xzc2ODY1OTY4NVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJkOWZlMmYxMC1lNWViLWY1OWEtNThlZS03ODdmZGNlNzUxZjFcIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJtc2dcIjogXCJcIlxuICAgICAgICAgIH1dXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBcImRlc2NcIjogXCLkuIDlr7nkuIDmlbDmja5cIixcbiAgICAgICAgICBcInJlY29yZEZpZWxkUE9MaXN0XCI6IFt7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHRCb3hcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiRl9USVRMRVwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFUeXBlXCI6IFwi5a2X56ym5LiyXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YUxlbmd0aFwiOiBcIjIwMFwiLFxuICAgICAgICAgICAgXCJzZXJpYWxpemVcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwidHh0Xzc2ODY1OTY4NVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VHlwZVwiOiBcIkNvbnN0XCIsXG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBcIjFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIzMzMzXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHREYXRlVGltZVwiLFxuICAgICAgICAgICAgXCJ0YWJsZU5hbWVcIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUNhcHRpb25cIjogXCJUREVWX1RFU1RfNVwiLFxuICAgICAgICAgICAgXCJ0YWJsZUlkXCI6IFwiZTE1NTQ5Y2ItZTA3NC00OGEzLTg5MzktNDQzNDBlMzg3ZjE3XCIsXG4gICAgICAgICAgICBcImZpZWxkVGFibGVJZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJmaWVsZE5hbWVcIjogXCJGX1BVQkxJQ19USU1FXCIsXG4gICAgICAgICAgICBcImZpZWxkRGF0YVR5cGVcIjogXCLml6XmnJ/ml7bpl7RcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhTGVuZ3RoXCI6IFwiMjBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF9kdF83Njg3MjkzMTdcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJFbnZWYXJcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IFwiRU5WX0RBVEVUSU1FX1lZWVlfTU1fRERfSEhfTU1fU1NcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIyMDE5LTEwLTMwIDIxOjAwOjEyXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHRCb3hcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiSURcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMDBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF83Njg2NTk2ODVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJDb25zdFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCIxXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiMWE2NDg4ODItY2U0Yi1hZjg4LTU0NzEtODg0Njk2MjQxNGFhXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcInJlbGF0aW9uSWRcIjogXCJmZDZjYzFhMS04MjJiLTdhNmMtOWVlNC1mMGU2ZDM2YmQ1MzhcIixcbiAgICAgICAgICAgIFwicmVsYXRpb25TaW5nbGVOYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICBcInJlbGF0aW9uVHlwZVwiOiBcIjFUb05cIixcbiAgICAgICAgICAgIFwic2luZ2xlTmFtZVwiOiBcIldGRENUX1RleHRCb3hcIixcbiAgICAgICAgICAgIFwidGFibGVOYW1lXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVDYXB0aW9uXCI6IFwiVERFVl9URVNUXzVcIixcbiAgICAgICAgICAgIFwidGFibGVJZFwiOiBcImUxNTU0OWNiLWUwNzQtNDhhMy04OTM5LTQ0MzQwZTM4N2YxN1wiLFxuICAgICAgICAgICAgXCJmaWVsZFRhYmxlSWRcIjogXCJcIixcbiAgICAgICAgICAgIFwiZmllbGROYW1lXCI6IFwiVERFVl9URVNUXzJfSURcIixcbiAgICAgICAgICAgIFwiZmllbGREYXRhVHlwZVwiOiBcIuWtl+espuS4slwiLFxuICAgICAgICAgICAgXCJmaWVsZERhdGFMZW5ndGhcIjogXCIyMDBcIixcbiAgICAgICAgICAgIFwic2VyaWFsaXplXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBcInR4dF83Njg2NTk2ODVcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFR5cGVcIjogXCJDb25zdFwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogXCIxXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiZDlmZTJmMTAtZTVlYi1mNTlhLTU4ZWUtNzg3ZmRjZTc1MWYxXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibXNnXCI6IFwiXCJcbiAgICAgICAgICB9XVxuICAgICAgICB9XSxcbiAgICAgICAgXCJpc01haW5cIjogZmFsc2VcbiAgICAgIH1dLFxuICAgICAgXCJleERhdGFcIjogbnVsbFxuICAgIH07XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBIVE1MSlNSdW50aW1lID0ge1xuICBfUHJvcF9Db25maWc6IHt9LFxuICBfJFJlbmRlcmVyVG9FbGVtOiBudWxsLFxuICBfSnNDb250ZW50OiBudWxsLFxuICBfUmVwbGFjZUNvbnRleHRQYXRoOiBmdW5jdGlvbiBfUmVwbGFjZUNvbnRleHRQYXRoKHNvdXJjZSkge1xuICAgIHZhciBjb250ZXh0UGF0aCA9IEJhc2VVdGlsaXR5LkdldFJvb3RQYXRoKCk7XG4gICAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlQWxsKFwiJHtjb250ZXh0UGF0aH1cIiwgY29udGV4dFBhdGgpO1xuICB9LFxuICBfUmVwbGFjZVRpbWVTdGFtcDogZnVuY3Rpb24gX1JlcGxhY2VUaW1lU3RhbXAoc291cmNlKSB7XG4gICAgdmFyIHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIHJldHVybiBzb3VyY2UucmVwbGFjZUFsbChcIiR7dGltZVN0YW1wfVwiLCB0aW1lc3RhbXApO1xuICB9LFxuICBSZXBsYWNlSlNQYXJhczogZnVuY3Rpb24gUmVwbGFjZUpTUGFyYXMoc291cmNlKSB7XG4gICAgdmFyIHJlc3VsdEpzID0gdGhpcy5fUmVwbGFjZUNvbnRleHRQYXRoKHNvdXJjZSk7XG5cbiAgICByZXN1bHRKcyA9IHRoaXMuX1JlcGxhY2VUaW1lU3RhbXAocmVzdWx0SnMpO1xuICAgIHJldHVybiByZXN1bHRKcztcbiAgfSxcbiAgSW5pdGlhbGl6YXRpb246IGZ1bmN0aW9uIEluaXRpYWxpemF0aW9uKF9jb25maWcsICRyZW5kZXJlclRvRWxlbSwganNDb250ZW50KSB7XG4gICAgdGhpcy5fUHJvcF9Db25maWcgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fUHJvcF9Db25maWcsIF9jb25maWcpO1xuICAgIHRoaXMuXyRSZW5kZXJlclRvRWxlbSA9ICRyZW5kZXJlclRvRWxlbTtcbiAgICB0aGlzLl9Kc0NvbnRlbnQgPSBqc0NvbnRlbnQ7XG5cbiAgICB0aGlzLl9Mb2FkSlNUb0VsKCk7XG4gIH0sXG4gIF9Mb2FkSlNUb0VsOiBmdW5jdGlvbiBfTG9hZEpTVG9FbCgpIHtcbiAgICBjb25zb2xlLmxvZyhcIuW8leWFpeiEmuacrDpcIik7XG5cbiAgICB0aGlzLl8kUmVuZGVyZXJUb0VsZW0uYXBwZW5kKHRoaXMuUmVwbGFjZUpTUGFyYXModGhpcy5fSnNDb250ZW50KSk7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBIVE1MUGFnZU9iamVjdEluc3RhbmNlUHJveHkgPSB7XG4gIHdlYkZvcm1SVFBhcmFzOiBudWxsLFxuICBodG1sUE86IG51bGwsXG4gIGZvcm1SZWNvcmRDb21wbGV4UE86IG51bGwsXG4gIEZvcm1QYWdlT2JqZWN0SW5zdGFuY2U6IG51bGwsXG4gIEJ1aWxkZXJMaXN0UGFnZVJ1bnRpbWVJbnN0YW5jZTogbnVsbCxcbiAgSW5pdDogZnVuY3Rpb24gSW5pdCh3ZWJGb3JtUlRQYXJhcywgaHRtbFBPKSB7XG4gICAgdGhpcy53ZWJGb3JtUlRQYXJhcyA9IHdlYkZvcm1SVFBhcmFzO1xuICAgIHRoaXMuaHRtbFBPID0gaHRtbFBPO1xuXG4gICAgaWYgKHRoaXMuaHRtbFBPLmZvcm1SZWNvcmRDb21wbGV4UE8pIHtcbiAgICAgIHRoaXMuZm9ybVJlY29yZENvbXBsZXhQTyA9IHRoaXMuaHRtbFBPLmZvcm1SZWNvcmRDb21wbGV4UE87XG4gICAgfVxuICB9LFxuICBDYWxsUGFnZVJlYWR5OiBmdW5jdGlvbiBDYWxsUGFnZVJlYWR5KCkge1xuICAgIGlmICh0eXBlb2YgRm9ybVBhZ2VPYmplY3RJbnN0YW5jZSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLkZvcm1QYWdlT2JqZWN0SW5zdGFuY2UgPSBGb3JtUGFnZU9iamVjdEluc3RhbmNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLkZvcm1QYWdlT2JqZWN0SW5zdGFuY2UpIHtcbiAgICAgIHRoaXMuRm9ybVBhZ2VPYmplY3RJbnN0YW5jZS5kYXRhLndlYkZvcm1SVFBhcmFzID0gdGhpcy53ZWJGb3JtUlRQYXJhcztcbiAgICAgIHRoaXMuRm9ybVBhZ2VPYmplY3RJbnN0YW5jZS5kYXRhLmZvcm1QTyA9IHRoaXMuaHRtbFBPO1xuICAgICAgdGhpcy5Gb3JtUGFnZU9iamVjdEluc3RhbmNlLmRhdGEuZm9ybVJlY29yZENvbXBsZXhQTyA9IHRoaXMuZm9ybVJlY29yZENvbXBsZXhQTztcblxuICAgICAgaWYgKHRoaXMuRm9ybVBhZ2VPYmplY3RJbnN0YW5jZS5wYWdlUmVhZHkpIHtcbiAgICAgICAgdGhpcy5Gb3JtUGFnZU9iamVjdEluc3RhbmNlLnBhZ2VSZWFkeSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5Gb3JtUGFnZU9iamVjdEluc3RhbmNlLmJpbmRSZWNvcmREYXRhUmVhZHkpIHtcbiAgICAgICAgdGhpcy5Gb3JtUGFnZU9iamVjdEluc3RhbmNlLmJpbmRSZWNvcmREYXRhUmVhZHkoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIEJ1aWxkZXJMaXN0UGFnZVJ1bnRpbWVJbnN0YW5jZSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLkJ1aWxkZXJMaXN0UGFnZVJ1bnRpbWVJbnN0YW5jZSA9IEJ1aWxkZXJMaXN0UGFnZVJ1bnRpbWVJbnN0YW5jZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5CdWlsZGVyTGlzdFBhZ2VSdW50aW1lSW5zdGFuY2UpIHtcbiAgICAgIHRoaXMuQnVpbGRlckxpc3RQYWdlUnVudGltZUluc3RhbmNlLmRhdGEubGlzdFBPID0gdGhpcy5odG1sUE87XG5cbiAgICAgIGlmICh0aGlzLkJ1aWxkZXJMaXN0UGFnZVJ1bnRpbWVJbnN0YW5jZS5wYWdlUmVhZHkpIHtcbiAgICAgICAgdGhpcy5CdWlsZGVyTGlzdFBhZ2VSdW50aW1lSW5zdGFuY2UucGFnZVJlYWR5KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLkJ1aWxkZXJMaXN0UGFnZVJ1bnRpbWVJbnN0YW5jZS5yZW5kZXJlckNoYWluQ29tcGxldGVkKSB7XG4gICAgICAgIHRoaXMuQnVpbGRlckxpc3RQYWdlUnVudGltZUluc3RhbmNlLnJlbmRlcmVyQ2hhaW5Db21wbGV0ZWQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuQnVpbGRlckxpc3RQYWdlUnVudGltZUluc3RhbmNlLnJlbmRlcmVyRGF0YUNoYWluQ29tcGxldGVkKSB7XG4gICAgICAgIHRoaXMuQnVpbGRlckxpc3RQYWdlUnVudGltZUluc3RhbmNlLnJlbmRlcmVyRGF0YUNoYWluQ29tcGxldGVkKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBDYWxsVmFsaWRhdGVFdmVyeUZyb21Db250cm9sOiBmdW5jdGlvbiBDYWxsVmFsaWRhdGVFdmVyeUZyb21Db250cm9sKHZhbGlkYXRlUmVzdWx0KSB7XG4gICAgaWYgKHRoaXMuRm9ybVBhZ2VPYmplY3RJbnN0YW5jZS52YWxpZGF0ZUV2ZXJ5RnJvbUNvbnRyb2wpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdSZXN1bHQgPSB0aGlzLkZvcm1QYWdlT2JqZWN0SW5zdGFuY2UudmFsaWRhdGVFdmVyeUZyb21Db250cm9sKHZhbGlkYXRlUmVzdWx0KTtcblxuICAgICAgICBpZiAobmV3UmVzdWx0KSB7XG4gICAgICAgICAgdmFsaWRhdGVSZXN1bHQgPSBuZXdSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgRGlhbG9nVXRpbGl0eS5BbGVydFRleHQoXCLoh6rlrprkuYnmoKHpqozmlrnms5XmiafooYzlpLHotKUhXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0ZVJlc3VsdDtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIElubmVyRm9ybUJ1dHRvblJ1bnRpbWUgPSB7XG4gIFJlbmRlcmVyU2luZ2xlSW5uZXJGb3JtQnV0dG9uOiBmdW5jdGlvbiBSZW5kZXJlclNpbmdsZUlubmVyRm9ybUJ1dHRvbihpbm5lckJ1dHRvbkNvbmZpZywgZm9ybVJ1bnRpbWVJbnN0YW5jZSwgbGlzdEJ1dHRvblBPKSB7XG4gICAgdmFyIElubmVyRm9ybUJ1dHRvbjtcbiAgICB2YXIgYnV0dG9uRWxlbTtcbiAgICB2YXIgZm9ybVJ1bnRpbWVDYXRlZ29yeSA9IGZvcm1SdW50aW1lSW5zdGFuY2UuX1Byb3BfQ29uZmlnLkZvcm1SdW50aW1lQ2F0ZWdvcnk7XG5cbiAgICBpZiAoaW5uZXJCdXR0b25Db25maWcuYnV0dG9uVHlwZSA9PSBcIuWFs+mXreaMiemSrlwiKSB7XG4gICAgICBJbm5lckZvcm1CdXR0b24gPSBPYmplY3QuY3JlYXRlKElubmVyRm9ybUNsb3NlQnV0dG9uKTtcbiAgICAgIGJ1dHRvbkVsZW0gPSBJbm5lckZvcm1CdXR0b24uSW5zdGFuY2UoaW5uZXJCdXR0b25Db25maWcsIGZvcm1SdW50aW1lSW5zdGFuY2UsIGxpc3RCdXR0b25QTywgZm9ybVJ1bnRpbWVDYXRlZ29yeSkuZWxlbTtcbiAgICB9IGVsc2UgaWYgKGlubmVyQnV0dG9uQ29uZmlnLmJ1dHRvblR5cGUgPT0gXCLkv53lrZjmjInpkq5cIikge1xuICAgICAgSW5uZXJGb3JtQnV0dG9uID0gT2JqZWN0LmNyZWF0ZShJbm5lckZvcm1TYXZlQnV0dG9uKTtcbiAgICAgIGJ1dHRvbkVsZW0gPSBJbm5lckZvcm1CdXR0b24uSW5zdGFuY2UoaW5uZXJCdXR0b25Db25maWcsIGZvcm1SdW50aW1lSW5zdGFuY2UsIGxpc3RCdXR0b25QTywgZm9ybVJ1bnRpbWVDYXRlZ29yeSkuZWxlbTtcbiAgICB9IGVsc2UgaWYgKGlubmVyQnV0dG9uQ29uZmlnLmJ1dHRvblR5cGUgPT0gXCLohJrmnKzmjInpkq5cIikge1xuICAgICAgSW5uZXJGb3JtQnV0dG9uID0gT2JqZWN0LmNyZWF0ZShJbm5lckZvcm1Kc0NsaWVudEJ1dHRvbik7XG4gICAgICBidXR0b25FbGVtID0gSW5uZXJGb3JtQnV0dG9uLkluc3RhbmNlKGlubmVyQnV0dG9uQ29uZmlnLCBmb3JtUnVudGltZUluc3RhbmNlLCBsaXN0QnV0dG9uUE8sIGZvcm1SdW50aW1lQ2F0ZWdvcnkpLmVsZW07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlcnJvclRleHQgPSBcIuS4jeaUr+aMgeeahOaMiemSruexu+WeizpJbm5lckZvcm1CdXR0b25SdW50aW1lLlJlbmRlcmVyU2luZ2xlSW5uZXJGb3JtQnV0dG9uXCI7XG4gICAgICBEaWFsb2dVdGlsaXR5LkFsZXJ0VGV4dChlcnJvclRleHQpO1xuICAgICAgdGhyb3cgZXJyb3JUZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBidXR0b25FbGVtO1xuICB9LFxuICBSZW5kZXJlclNpbmdsZUlubmVyRm9ybUJ1dHRvbkNsaWNrOiBmdW5jdGlvbiBSZW5kZXJlclNpbmdsZUlubmVyRm9ybUJ1dHRvbkNsaWNrKHNlbmRlcikge31cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBMaXN0UnVudGltZSA9IHtcbiAgX1Byb3BfU3RhdHVzOiBcIkVkaXRcIixcbiAgX1Byb3BfQ29uZmlnOiB7XG4gICAgUmVuZGVyZXJUb0lkOiBudWxsLFxuICAgIExpc3RJZDogXCJcIixcbiAgICBJc1ByZXZpZXc6IGZhbHNlXG4gIH0sXG4gIF9MaXN0UE86IG51bGwsXG4gIF8kUmVuZGVyZXJUb0VsZW06IG51bGwsXG4gIF9KU1J1bnRpbWVJbnN0OiBudWxsLFxuICBJbml0aWFsaXphdGlvbjogZnVuY3Rpb24gSW5pdGlhbGl6YXRpb24oX2NvbmZpZykge1xuICAgIHRoaXMuX1Byb3BfQ29uZmlnID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX1Byb3BfQ29uZmlnLCBfY29uZmlnKTtcbiAgICB0aGlzLl8kUmVuZGVyZXJUb0VsZW0gPSAkKFwiI1wiICsgdGhpcy5fUHJvcF9Db25maWcuUmVuZGVyZXJUb0lkKTtcblxuICAgIHRoaXMuX0xvYWRIVE1MVG9FbCgpO1xuICB9LFxuICBfUmVuZGVyZXJDaGFpbklzQ29tcGxldGVkOiB0cnVlLFxuICBfUmVuZGVyZXJEYXRhQ2hhaW5Jc0NvbXBsZXRlZDogdHJ1ZSxcbiAgX0xvYWRIVE1MVG9FbDogZnVuY3Rpb24gX0xvYWRIVE1MVG9FbCgpIHtcbiAgICBSdW50aW1lR2VuZXJhbEluc3RhbmNlLkxvYWRIdG1sRGVzaWduQ29udGVudChCYXNlVXRpbGl0eS5HZXRSb290UGF0aCgpICsgXCIvUmVzdC9CdWlsZGVyL1J1blRpbWUvTGlzdFJ1bnRpbWUvTG9hZEhUTUw/bGlzdElkPVwiICsgdGhpcy5fUHJvcF9Db25maWcuTGlzdElkLCB0aGlzLl9Qcm9wX0NvbmZpZy5SZW5kZXJlclRvLCB7fSwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcblxuICAgICAgdmFyIF9zZWxmID0gdGhpcztcblxuICAgICAgX3NlbGYuX0xpc3RQTyA9IHJlc3VsdC5kYXRhO1xuXG4gICAgICB0aGlzLl8kUmVuZGVyZXJUb0VsZW0uYXBwZW5kKHJlc3VsdC5kYXRhLmxpc3RIdG1sUnVudGltZSk7XG5cbiAgICAgIHRoaXMuX0pTUnVudGltZUluc3QgPSBPYmplY3QuY3JlYXRlKEhUTUxKU1J1bnRpbWUpO1xuXG4gICAgICB0aGlzLl9KU1J1bnRpbWVJbnN0LkluaXRpYWxpemF0aW9uKHt9LCB0aGlzLl8kUmVuZGVyZXJUb0VsZW0sIHRoaXMuX0xpc3RQTy5saXN0SnNDb250ZW50KTtcblxuICAgICAgVmlydHVhbEJvZHlDb250cm9sLlJlbmRlcmVyQ2hhaW4oe1xuICAgICAgICBwbzogcmVzdWx0LmRhdGEsXG4gICAgICAgIHNvdXJjZUhUTUw6IHJlc3VsdC5kYXRhLmxpc3RIdG1sUnVudGltZSxcbiAgICAgICAgJHJvb3RFbGVtOiB0aGlzLl8kUmVuZGVyZXJUb0VsZW0sXG4gICAgICAgICRwYXJlbnRDb250cm9sRWxlbTogdGhpcy5fJFJlbmRlcmVyVG9FbGVtLFxuICAgICAgICAkc2luZ2xlQ29udHJvbEVsZW06IHRoaXMuXyRSZW5kZXJlclRvRWxlbSxcbiAgICAgICAgbGlzdFJ1bnRpbWVJbnN0YW5jZTogdGhpc1xuICAgICAgfSk7XG4gICAgICB2YXIgUmVuZGVyZXJDaGFpbkNvbXBsZXRlT2JqID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF9zZWxmLl9SZW5kZXJlckNoYWluSXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChSZW5kZXJlckNoYWluQ29tcGxldGVPYmopO1xuICAgICAgICB9XG4gICAgICB9LCA1MDApO1xuICAgICAgdmFyIHRvcERhdGFTZXRJZCA9IHJlc3VsdC5kYXRhLmxpc3REYXRhc2V0SWQ7XG4gICAgICBWaXJ0dWFsQm9keUNvbnRyb2wuUmVuZGVyZXJEYXRhQ2hhaW4oe1xuICAgICAgICBwbzogcmVzdWx0LmRhdGEsXG4gICAgICAgIHNvdXJjZUhUTUw6IHJlc3VsdC5kYXRhLmxpc3RIdG1sUnVudGltZSxcbiAgICAgICAgJHJvb3RFbGVtOiB0aGlzLl8kUmVuZGVyZXJUb0VsZW0sXG4gICAgICAgICRwYXJlbnRDb250cm9sRWxlbTogdGhpcy5fJFJlbmRlcmVyVG9FbGVtLFxuICAgICAgICAkc2luZ2xlQ29udHJvbEVsZW06IHRoaXMuXyRSZW5kZXJlclRvRWxlbSxcbiAgICAgICAgdG9wRGF0YVNldElkOiB0b3BEYXRhU2V0SWQsXG4gICAgICAgIGxpc3RSdW50aW1lSW5zdGFuY2U6IHRoaXNcbiAgICAgIH0pO1xuICAgICAgdmFyIFJlbmRlcmVyRGF0YUNoYWluQ29tcGxldGVPYmogPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoX3NlbGYuX1JlbmRlcmVyRGF0YUNoYWluSXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChSZW5kZXJlckRhdGFDaGFpbkNvbXBsZXRlT2JqKTtcblxuICAgICAgICAgIF9zZWxmLkNhbGxSZW5kZXJlckNoYWluQ29tcGxldGVkRnVuYygpO1xuICAgICAgICB9XG4gICAgICB9LCA3MDApO1xuICAgIH0sIHRoaXMpO1xuICB9LFxuICBDYWxsUmVuZGVyZXJDaGFpbkNvbXBsZXRlZEZ1bmM6IGZ1bmN0aW9uIENhbGxSZW5kZXJlckNoYWluQ29tcGxldGVkRnVuYygpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX1Byb3BfQ29uZmlnLlJlbmRlcmVyQ2hhaW5Db21wbGV0ZWRGdW5jID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhpcy5fUHJvcF9Db25maWcuUmVuZGVyZXJDaGFpbkNvbXBsZXRlZEZ1bmMuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICBIVE1MUGFnZU9iamVjdEluc3RhbmNlUHJveHkuSW5pdCh0aGlzLl9Qcm9wX0NvbmZpZywgdGhpcy5fTGlzdFBPKTtcbiAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIuW7tui/n+iwg+eUqFwiKTtcbiAgICAgIEhUTUxQYWdlT2JqZWN0SW5zdGFuY2VQcm94eS5DYWxsUGFnZVJlYWR5KCk7XG4gICAgfSwgNTAwKTtcbiAgfSxcbiAgQ2hlY2tQcmltYXJ5S2V5SW5EYXRhU2V0OiBmdW5jdGlvbiBDaGVja1ByaW1hcnlLZXlJbkRhdGFTZXQoZGF0YVNldCwgcHJpbWFyeUtleSkge1xuICAgIGlmIChkYXRhU2V0Lmxpc3QgJiYgZGF0YVNldC5saXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciByb3dEYXRhID0gZGF0YVNldC5saXN0WzBdO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gcm93RGF0YSkge1xuICAgICAgICBpZiAoU3RyaW5nVXRpbGl0eS50b1VwcGVyQ2FzZShrZXkpID09IFN0cmluZ1V0aWxpdHkudG9VcHBlckNhc2UocHJpbWFyeUtleSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgR2V0UHJpbWFyeUtleTogZnVuY3Rpb24gR2V0UHJpbWFyeUtleSgpIHtcbiAgICB2YXIgcHJpbWFyeUtleSA9IHRoaXMuX0xpc3RQTy5saXN0RGF0YXNldFByaW1hcnlLZXk7XG4gICAgcmV0dXJuIHByaW1hcnlLZXk7XG4gIH0sXG4gIElzUHJldmlldzogZnVuY3Rpb24gSXNQcmV2aWV3KCkge1xuICAgIHJldHVybiB0aGlzLl9Qcm9wX0NvbmZpZy5Jc1ByZXZpZXc7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSdW50aW1lR2VuZXJhbEluc3RhbmNlID0ge1xuICBfQWpheDogZnVuY3Rpb24gX0FqYXgodXJsLCBwYXJhbXMsIGNhbGxiYWNrLCBzZW5kZXIpIHtcbiAgICBqUXVlcnkuYWpheCh7XG4gICAgICB1cmw6IHVybCxcbiAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgZGF0YTogcGFyYW1zXG4gICAgfSkuZG9uZShmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICBpZiAoIXJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gcmVzdWx0Lm1lc3NhZ2U7XG5cbiAgICAgICAgaWYgKFN0cmluZ1V0aWxpdHkuSXNOdWxsT3JFbXB0eShtZXNzYWdlKSkge1xuICAgICAgICAgIG1lc3NhZ2UgPSByZXN1bHQudHJhY2VNc2c7XG4gICAgICAgIH1cblxuICAgICAgICBEaWFsb2dVdGlsaXR5LkFsZXJ0VGV4dChtZXNzYWdlLCBzZW5kZXIpO1xuICAgICAgfVxuXG4gICAgICBjYWxsYmFjay5jYWxsKHNlbmRlciwgcmVzdWx0KTtcbiAgICB9KS5hbHdheXMoY2FsbGJhY2sgJiYgZnVuY3Rpb24gKGpxWEhSLCBzdGF0dXMpIHt9KTtcbiAgfSxcbiAgTG9hZEh0bWxEZXNpZ25Db250ZW50OiBmdW5jdGlvbiBMb2FkSHRtbERlc2lnbkNvbnRlbnQodXJsLCBhcHBlbmRUb0VsZW1JZCwgcGFyYW1zLCBjYWxsYmFjaywgc2VuZGVyKSB7XG4gICAgdGhpcy5fQWpheCh1cmwsIHBhcmFtcywgY2FsbGJhY2ssIHNlbmRlcik7XG4gIH0sXG4gIExvYWRJbm5lckZvcm1CdXR0b246IGZ1bmN0aW9uIExvYWRJbm5lckZvcm1CdXR0b24obGlzdEZvcm1CdXR0b25JZCwgcGFyYW1zLCBjYWxsYmFjaywgc2VuZGVyKSB7XG4gICAgdmFyIHVybCA9IEJhc2VVdGlsaXR5LkJ1aWxkQWN0aW9uKFwiL1Jlc3QvQnVpbGRlci9SdW5UaW1lL0xpc3RCdXR0b25SdW50aW1lL0dldEJ1dHRvblBPXCIsIHtcbiAgICAgIGJ1dHRvbklkOiBsaXN0Rm9ybUJ1dHRvbklkXG4gICAgfSk7XG5cbiAgICB0aGlzLl9BamF4KHVybCwgcGFyYW1zLCBjYWxsYmFjaywgc2VuZGVyKTtcbiAgfSxcbiAgU3VibWl0Rm9ybURhdGFDb21wbGV4UE9MaXN0VG9TZXJ2ZXI6IGZ1bmN0aW9uIFN1Ym1pdEZvcm1EYXRhQ29tcGxleFBPTGlzdFRvU2VydmVyKGZvcm1EYXRhQ29tcGxleFBPLCByZWNvcmRJZCwgaW5uZXJGb3JtQnV0dG9uSWQsIGxpc3RCdXR0b25JZCwgb3BlcmF0aW9uVHlwZSwgY2FsbGJhY2ssIHNlbmRlcikge1xuICAgIHZhciB1cmwgPSBCYXNlVXRpbGl0eS5CdWlsZEFjdGlvbihcIi9SZXN0L0J1aWxkZXIvUnVuVGltZS9Jbm5lckZvcm1CdXR0b25SdW50aW1lL1JlY2VpdmVIYW5kbGVyXCIsIHt9KTtcbiAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgXCJmb3JtUmVjb3JkQ29tcGxleFBPU3RyaW5nXCI6IGVuY29kZVVSSUNvbXBvbmVudChKc29uVXRpbGl0eS5Kc29uVG9TdHJpbmcoZm9ybURhdGFDb21wbGV4UE8pKSxcbiAgICAgIFwiaW5uZXJGb3JtQnV0dG9uSWRcIjogaW5uZXJGb3JtQnV0dG9uSWQsXG4gICAgICBcImxpc3RCdXR0b25JZFwiOiBsaXN0QnV0dG9uSWQsXG4gICAgICBcInJlY29yZElkXCI6IHJlY29yZElkLFxuICAgICAgXCJvcGVyYXRpb25UeXBlTmFtZVwiOiBvcGVyYXRpb25UeXBlXG4gICAgfTtcblxuICAgIHRoaXMuX0FqYXgodXJsLCBwYXJhbXMsIGNhbGxiYWNrLCBzZW5kZXIpO1xuXG4gICAgY29uc29sZS5sb2coZm9ybURhdGFDb21wbGV4UE8pO1xuICB9LFxuICBEZWxldGVUYWJsZVJlY29yZDogZnVuY3Rpb24gRGVsZXRlVGFibGVSZWNvcmQodGFibGVJZCwgcmVjb3JkSWQsIHN1Y2Nlc3NGdW5jLCBjYWxsZXIpIHtcbiAgICBBamF4VXRpbGl0eS5Qb3N0KFwiL1Jlc3QvQnVpbGRlci9SdW5UaW1lL0RhdGFTZXRSdW50aW1lL0RlbGV0ZVRhYmxlUmVjb3JkXCIsIHtcbiAgICAgIHRhYmxlSWQ6IHRhYmxlSWQsXG4gICAgICBwa1ZhbHVlOiByZWNvcmRJZFxuICAgIH0sIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICBzdWNjZXNzRnVuYyhyZXN1bHQpO1xuICAgICAgfVxuICAgIH0sIGNhbGxlcik7XG4gIH0sXG4gIERlbGV0ZURhdGFTZXRSZWNvcmQ6IGZ1bmN0aW9uIERlbGV0ZURhdGFTZXRSZWNvcmQoZWxlbWlkLCBiaW5kRGF0YVNldElkLCByZWNvcmRJZCwgY2FsbGVyKSB7XG4gICAgQWpheFV0aWxpdHkuUG9zdChcIi9SZXN0L0J1aWxkZXIvUnVuVGltZS9EYXRhU2V0UnVudGltZS9EZWxldGVEYXRhU2V0UmVjb3JkXCIsIHtcbiAgICAgIGRhdGFTZXRJZDogYmluZERhdGFTZXRJZCxcbiAgICAgIHBrVmFsdWU6IHJlY29yZElkXG4gICAgfSwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgIFdMRENUX0xpc3RUYWJsZUNvbnRhaW5lci5UcnlSZWxvYWRGb3JMaXN0Rm9ybUJ1dHRvbihlbGVtaWQpO1xuICAgICAgfVxuICAgIH0sIGNhbGxlcik7XG4gIH0sXG4gIEdldERhdGFTZXREYXRhOiBmdW5jdGlvbiBHZXREYXRhU2V0RGF0YShjb25maWcsIGZ1bmMsIHNlbmRlcikge1xuICAgIHZhciBzZW5kRGF0YSA9IEpTT04uc3RyaW5naWZ5KGNvbmZpZyk7XG4gICAgQWpheFV0aWxpdHkuUG9zdFJlcXVlc3RCb2R5KFwiL1Jlc3QvQnVpbGRlci9SdW5UaW1lL0RhdGFTZXRSdW50aW1lL0dldERhdGFTZXREYXRhXCIsIHNlbmREYXRhLCBmdW5jdGlvbiAoZ2V0RGF0YVNldFJlc3VsdCkge1xuICAgICAgZnVuYy5jYWxsKHNlbmRlciwgZ2V0RGF0YVNldFJlc3VsdCk7XG4gICAgfSwgc2VuZGVyKTtcbiAgfSxcbiAgR2V0VXJsUGFyYXM6IGZ1bmN0aW9uIEdldFVybFBhcmFzKCkge1xuICAgIGlmICh0aGlzW1wibWVudVJpZ2h0VXJsUGFyYUpzb25cIl0pIHtcbiAgICAgIHJldHVybiB0aGlzW1wibWVudVJpZ2h0VXJsUGFyYUpzb25cIl07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJhU3RyID0gQmFzZVV0aWxpdHkuR2V0VXJsUGFyYVZhbHVlKFwibWVudVJpZ2h0VXJsUGFyYVwiKTtcblxuICAgICAgaWYgKFN0cmluZ1V0aWxpdHkuSXNOdWxsT3JFbXB0eShwYXJhU3RyKSkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFTdHIuY2hhckF0KDApID09IFwie1wiIHx8IHBhcmFTdHIuY2hhckF0KDApID09IFwiW1wiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIGpzb24gPSBKc29uVXRpbGl0eS5TdHJpbmdUb0pzb24ocGFyYVN0cik7XG4gICAgICAgICAgcmV0dXJuIGpzb247XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG5cbiAgICAgIHRoaXNbXCJtZW51UmlnaHRVcmxQYXJhSnNvblwiXSA9IHBhcmFTdHI7XG4gICAgICByZXR1cm4gcGFyYVN0cjtcbiAgICB9XG4gIH0sXG4gIFRyeUdldFVybFBhcmFWYWx1ZUJ5RmllbGROYW1lOiBmdW5jdGlvbiBUcnlHZXRVcmxQYXJhVmFsdWVCeUZpZWxkTmFtZShhY3Rpb25OYW1lLCBmaWVsZE5hbWUpIHtcbiAgICB2YXIgcGFyYUpzb24gPSB0aGlzLkdldFVybFBhcmFzKCk7XG5cbiAgICBpZiAocGFyYUpzb24gJiYgdHlwZW9mIHBhcmFKc29uICE9IFwic3RyaW5nXCIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYUpzb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNpbmdsZVBhcmEgPSBwYXJhSnNvbltpXTtcblxuICAgICAgICBpZiAoc2luZ2xlUGFyYS5BY3Rpb25UeXBlID09IGFjdGlvbk5hbWUgJiYgc2luZ2xlUGFyYS5GaWVsZE5hbWUgPT0gZmllbGROYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHNpbmdsZVBhcmEuVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIjtcbiAgfSxcbiAgVHJ5R2V0VXJsUGFyYUNoYW5nZU1haW5EYXRhU2V0SWQ6IGZ1bmN0aW9uIFRyeUdldFVybFBhcmFDaGFuZ2VNYWluRGF0YVNldElkKCkge1xuICAgIHZhciBwYXJhSnNvbiA9IHRoaXMuR2V0VXJsUGFyYXMoKTtcblxuICAgIGlmIChwYXJhSnNvbiAmJiB0eXBlb2YgcGFyYUpzb24gIT0gXCJzdHJpbmdcIikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhSnNvbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc2luZ2xlUGFyYSA9IHBhcmFKc29uW2ldO1xuXG4gICAgICAgIGlmIChzaW5nbGVQYXJhLkFjdGlvblR5cGUgPT0gXCJDaGFuZ2VNYWluRGF0YVNldFwiKSB7XG4gICAgICAgICAgcmV0dXJuIHNpbmdsZVBhcmEuRGF0YVNldElkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXCI7XG4gIH0sXG4gIFRyeUdldFVybFBhcmFWaWV3T25seTogZnVuY3Rpb24gVHJ5R2V0VXJsUGFyYVZpZXdPbmx5KCkge1xuICAgIHZhciBwYXJhSnNvbiA9IHRoaXMuR2V0VXJsUGFyYXMoKTtcblxuICAgIGlmIChwYXJhSnNvbiAmJiB0eXBlb2YgcGFyYUpzb24gIT0gXCJzdHJpbmdcIikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhSnNvbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc2luZ2xlUGFyYSA9IHBhcmFKc29uW2ldO1xuXG4gICAgICAgIGlmIChzaW5nbGVQYXJhLkFjdGlvblR5cGUgPT0gXCJWaWV3T25seVwiKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIFRyeUdldE1lbnVPdXRlcklkOiBmdW5jdGlvbiBUcnlHZXRNZW51T3V0ZXJJZCgpIHtcbiAgICByZXR1cm4gQmFzZVV0aWxpdHkuR2V0VXJsUGFyYVZhbHVlKFwibWVudU91dGVySWRcIik7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBWYWxpZGF0ZVJ1bGVzUnVudGltZSA9IHtcbiAgXCJOb0VtcHR5XCI6IFwiTm9FbXB0eVwiLFxuICBnZXRWYWxpZGF0ZVRpcEVsZW06IGZ1bmN0aW9uIGdldFZhbGlkYXRlVGlwRWxlbSgpIHtcbiAgICByZXR1cm4gXCI8c3BhbiBuYW1lPSd2YWxpZGF0ZS10aXAnIHN0eWxlPSdjb2xvcjogcmVkJz4qPC9zcGFuPiBcIjtcbiAgfSxcbiAgZ2V0VmFsaWRhdGVSdWxlczogZnVuY3Rpb24gZ2V0VmFsaWRhdGVSdWxlcygkZWxlbSkge1xuICAgIGlmICgkZWxlbS5hdHRyKFwidmFsaWRhdGVydWxlc1wiKSkge1xuICAgICAgdmFyIHZhbGlkYXRlUnVsZXMgPSBkZWNvZGVVUklDb21wb25lbnQoJGVsZW0uYXR0cihcInZhbGlkYXRlcnVsZXNcIikpO1xuICAgICAgcmV0dXJuIEpzb25VdGlsaXR5LlN0cmluZ1RvSnNvbih2YWxpZGF0ZVJ1bGVzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgVmFsaWRhdGVTdWJtaXRFbmFibGU6IGZ1bmN0aW9uIFZhbGlkYXRlU3VibWl0RW5hYmxlKCkge1xuICAgIHZhciBjb250cm9scyA9ICQoXCJbdGFibGVuYW1lXVtzZXJpYWxpemU9J3RydWUnXVwiKS5ub3QoJChcIltjb250cm9sX2NhdGVnb3J5PSdEeW5hbWljQ29udGFpbmVyJ11cIikuZmluZChcIltqYnVpbGQ0ZGNfY3VzdG9tPSd0cnVlJ11cIikpO1xuICAgIHZhciB2YWxpZGF0ZVJlc3VsdCA9IHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBlcnJvcnM6IFtdXG4gICAgfTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udHJvbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciAkY29udHJvbEVsZW0gPSAkKGNvbnRyb2xzW2ldKTtcbiAgICAgIHZhciB2YWxpZGF0ZVJ1bGVzID0gVmFsaWRhdGVSdWxlc1J1bnRpbWUuZ2V0VmFsaWRhdGVSdWxlcygkY29udHJvbEVsZW0pO1xuXG4gICAgICBpZiAodmFsaWRhdGVSdWxlcyAmJiB2YWxpZGF0ZVJ1bGVzLnJ1bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHNpbmdsZUNvbnRyb2xFcnJvcnMgPSB7XG4gICAgICAgICAgbGFiTmFtZTogdGhpcy50cnlHZXRWYWxpZGF0ZUVycm9yTmFtZSgkY29udHJvbEVsZW0pLFxuICAgICAgICAgIGVycm9yczogW10sXG4gICAgICAgICAgJGVsZW06IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGZpZWxkVHJhbnNmZXJQTyA9IEhUTUxDb250cm9sLlRyeUdldEZpZWxkVHJhbnNmZXJQTygkY29udHJvbEVsZW0sIFwiVmFsaWRhdGVTdWJtaXRFbmFibGVcIiwgXCJWYWxpZGF0ZVN1Ym1pdEVuYWJsZVwiLCBcIlZhbGlkYXRlU3VibWl0RW5hYmxlXCIpO1xuICAgICAgICB2YXIgY29udHJvbFZhbHVlID0gZmllbGRUcmFuc2ZlclBPLnZhbHVlO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsaWRhdGVSdWxlcy5ydWxlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHZhciBzaW5nbGVSdWxlID0gdmFsaWRhdGVSdWxlcy5ydWxlc1tqXTtcblxuICAgICAgICAgIGlmIChzaW5nbGVSdWxlLnZhbGlkYXRlVHlwZSA9PSBWYWxpZGF0ZVJ1bGVzUnVudGltZS5Ob0VtcHR5KSB7XG4gICAgICAgICAgICBpZiAoU3RyaW5nVXRpbGl0eS5UcmltKGNvbnRyb2xWYWx1ZSkgPT0gXCJcIiB8fCBTdHJpbmdVdGlsaXR5LklzTnVsbE9yRW1wdHkoY29udHJvbFZhbHVlKSkge1xuICAgICAgICAgICAgICBzaW5nbGVDb250cm9sRXJyb3JzLmVycm9ycy5wdXNoKFwi5LiN6IO95Li656m6IVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2luZ2xlQ29udHJvbEVycm9ycy5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2luZ2xlQ29udHJvbEVycm9ycy4kZWxlbSA9ICRjb250cm9sRWxlbTtcbiAgICAgICAgICAgIHZhbGlkYXRlUmVzdWx0LnN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhbGlkYXRlUmVzdWx0LmVycm9ycy5wdXNoKHNpbmdsZUNvbnRyb2xFcnJvcnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB2YWxpZGF0ZVJlc3VsdCA9IEhUTUxQYWdlT2JqZWN0SW5zdGFuY2VQcm94eS5DYWxsVmFsaWRhdGVFdmVyeUZyb21Db250cm9sKHZhbGlkYXRlUmVzdWx0KTtcbiAgICByZXR1cm4gdmFsaWRhdGVSZXN1bHQ7XG4gIH0sXG4gIHRyeUdldFZhbGlkYXRlRXJyb3JOYW1lOiBmdW5jdGlvbiB0cnlHZXRWYWxpZGF0ZUVycm9yTmFtZSgkY29udHJvbCkge1xuICAgIHZhciBuYW1lID0gXCJcIjtcbiAgICB2YXIgJHByZXZUZCA9ICRjb250cm9sLnBhcmVudCgpLnByZXYoKTtcblxuICAgIGlmICgkcHJldlRkICYmICRwcmV2VGQubGVuZ3RoID4gMCkge1xuICAgICAgbmFtZSA9ICRwcmV2VGQudGV4dCgpLnJlcGxhY2UoXCIqXCIsIFwiXCIpLnJlcGxhY2UoXCLvvJpcIiwgXCJcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWU7XG4gIH0sXG4gIEFsZXJ0VmFsaWRhdGVFcnJvcnM6IGZ1bmN0aW9uIEFsZXJ0VmFsaWRhdGVFcnJvcnModmFsaWRhdGVSZXN1bHQpIHtcbiAgICBpZiAoIXZhbGlkYXRlUmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIHZhciBtZXNzYWdlID0gXCJcIjtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWxpZGF0ZVJlc3VsdC5lcnJvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNpbmdsZUNvbnRyb2xFcnJvciA9IHZhbGlkYXRlUmVzdWx0LmVycm9yc1tpXTtcbiAgICAgICAgbWVzc2FnZSArPSBzaW5nbGVDb250cm9sRXJyb3IubGFiTmFtZSArIFwiICAg44CQXCIgKyBzaW5nbGVDb250cm9sRXJyb3IuZXJyb3JzLmpvaW4oXCIsXCIpICsgXCLjgJE8YnIgLz5cIjtcbiAgICAgIH1cblxuICAgICAgRGlhbG9nVXRpbGl0eS5BbGVydCh3aW5kb3csIERpYWxvZ1V0aWxpdHkuRGlhbG9nSWQwNSwge1xuICAgICAgICBhdXRvUmVzaXplOiB0cnVlLFxuICAgICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgICAgd2lkdGg6IDMwMCxcbiAgICAgICAgdGl0bGU6IFwi57O757uf5o+Q56S6XCJcbiAgICAgIH0sIG1lc3NhZ2UpO1xuXG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdmFsaWRhdGVSZXN1bHQuZXJyb3JzLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgX3NpbmdsZUNvbnRyb2xFcnJvciA9IHZhbGlkYXRlUmVzdWx0LmVycm9yc1tfaV07XG5cbiAgICAgICAgaWYgKF9zaW5nbGVDb250cm9sRXJyb3IuJGVsZW0uYXR0cihcImNsaWVudF9yZXNvbHZlXCIpID09IFwiV0ZEQ1RfUmFkaW9Hcm91cFwiKSB7XG4gICAgICAgICAgX3NpbmdsZUNvbnRyb2xFcnJvci4kZWxlbS5wYXJlbnQoKS5hZGRDbGFzcyhcImh0bWwtZGVzaWduLWlucHV0LWNvbnRyb2wtZXJyb3Itc3RhdHVzLXJhZGlvLWdyb3VwXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9zaW5nbGVDb250cm9sRXJyb3IuJGVsZW0uYWRkQ2xhc3MoXCJodG1sLWRlc2lnbi1pbnB1dC1jb250cm9sLWVycm9yLXN0YXR1c1wiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoXCIuaHRtbC1kZXNpZ24taW5wdXQtY29udHJvbC1lcnJvci1zdGF0dXNcIikucmVtb3ZlQ2xhc3MoXCJodG1sLWRlc2lnbi1pbnB1dC1jb250cm9sLWVycm9yLXN0YXR1c1wiKTtcbiAgICAgICAgJChcIi5odG1sLWRlc2lnbi1pbnB1dC1jb250cm9sLWVycm9yLXN0YXR1cy1yYWRpby1ncm91cFwiKS5yZW1vdmVDbGFzcyhcImh0bWwtZGVzaWduLWlucHV0LWNvbnRyb2wtZXJyb3Itc3RhdHVzLXJhZGlvLWdyb3VwXCIpO1xuICAgICAgfSwgNDAwMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRlUmVzdWx0LnN1Y2Nlc3M7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBIVE1MQ29udHJvbEF0dHJzID0ge1xuICBKQlVJTEQ0RENfQ1VTVE9NOiBcImpidWlsZDRkY19jdXN0b21cIixcbiAgU0VMRUNURURfSkJVSUxENERDX0NVU1RPTTogXCJbamJ1aWxkNGRjX2N1c3RvbT10cnVlXVwiLFxuICBDTElFTlRfUkVTT0xWRTogXCJjbGllbnRfcmVzb2x2ZVwiXG59O1xudmFyIEhUTUxDb250cm9sID0ge1xuICBfSW5zdGFuY2VNYXA6IHt9LFxuICBfR2V0SW5zdGFuY2U6IGZ1bmN0aW9uIF9HZXRJbnN0YW5jZShuYW1lKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuX0luc3RhbmNlTWFwKSB7XG4gICAgICBpZiAoa2V5ID09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX0luc3RhbmNlTWFwW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGluc3RhbmNlID0gZXZhbChuYW1lKTtcbiAgICB0aGlzLl9JbnN0YW5jZU1hcFtuYW1lXSA9IGluc3RhbmNlO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSxcbiAgR2V0SW5zdGFuY2U6IGZ1bmN0aW9uIEdldEluc3RhbmNlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fR2V0SW5zdGFuY2UobmFtZSk7XG4gIH0sXG4gIFNhdmVDb250cm9sTmV3SW5zdGFuY2VUb1Bvb2w6IGZ1bmN0aW9uIFNhdmVDb250cm9sTmV3SW5zdGFuY2VUb1Bvb2woJGVsZW0sIGluc3RhbmNlKSB7XG4gICAgYWxlcnQoXCLmlLnmlrnms5Xlt7Lnu4/lup/lvIMs5pS55Li65pyN5Yqh56uv5Yib5bu65Yid5aeL5YyW6ISa5pysMSFcIik7XG4gICAgcmV0dXJuIG51bGw7XG4gICAgdmFyIGluc3RhbmNlTmFtZSA9ICRlbGVtLmF0dHIoXCJjbGllbnRfcmVzb2x2ZVwiKSArIFwiX1wiICsgU3RyaW5nVXRpbGl0eS5HdWlkU3BsaXQoXCJcIik7XG4gICAgJGVsZW0uYXR0cihcImNsaWVudF9pbnN0YW5jZV9uYW1lXCIsIGluc3RhbmNlTmFtZSk7XG4gICAgdGhpcy5fSW5zdGFuY2VNYXBbaW5zdGFuY2VOYW1lXSA9IGluc3RhbmNlO1xuICAgIHJldHVybiBpbnN0YW5jZU5hbWU7XG4gIH0sXG4gIF9TYXZlQ29udHJvbE5ld0luc3RhbmNlVG9Qb29sOiBmdW5jdGlvbiBfU2F2ZUNvbnRyb2xOZXdJbnN0YW5jZVRvUG9vbChpbnN0YW5jZU5hbWUsIGluc3RhbmNlKSB7XG4gICAgdGhpcy5fSW5zdGFuY2VNYXBbaW5zdGFuY2VOYW1lXSA9IGluc3RhbmNlO1xuICAgIHJldHVybiBpbnN0YW5jZU5hbWU7XG4gIH0sXG4gIEdldENvbnRyb2xJbnN0YW5jZUJ5RWxlbTogZnVuY3Rpb24gR2V0Q29udHJvbEluc3RhbmNlQnlFbGVtKCRlbGVtKSB7XG4gICAgcmV0dXJuIHRoaXMuX0dldEluc3RhbmNlKHRoaXMuR2V0Q29udHJvbEluc3RhbmNlTmFtZUJ5RWxlbSgkZWxlbSkpO1xuICB9LFxuICBHZXRDb250cm9sSW5zdGFuY2VOYW1lQnlFbGVtOiBmdW5jdGlvbiBHZXRDb250cm9sSW5zdGFuY2VOYW1lQnlFbGVtKCRlbGVtKSB7XG4gICAgdmFyIGluc3RhbmNlTmFtZSA9IFwiXCI7XG5cbiAgICBpZiAoJGVsZW0uYXR0cihcImNsaWVudF9pbnN0YW5jZV9uYW1lXCIpICYmICRlbGVtLmF0dHIoXCJjbGllbnRfaW5zdGFuY2VfbmFtZVwiKS5sZW5ndGggPiAwKSB7XG4gICAgICBpbnN0YW5jZU5hbWUgPSAkZWxlbS5hdHRyKFwiY2xpZW50X2luc3RhbmNlX25hbWVcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlTmFtZSA9ICRlbGVtLmF0dHIoXCJjbGllbnRfcmVzb2x2ZVwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFuY2VOYW1lO1xuICB9LFxuICBSZW5kZXJlckNoYWluUGFyYXM6IHtcbiAgICBsaXN0RW50aXR5OiBudWxsLFxuICAgIHNvdXJjZUhUTUw6IG51bGwsXG4gICAgJHJvb3RFbGVtOiBudWxsLFxuICAgICRwYXJlbnRDb250cm9sRWxlbTogbnVsbCxcbiAgICAkc2luZ2xlQ29udHJvbEVsZW06IG51bGwsXG4gICAgZm9ybVJ1bnRpbWVJbnN0YW5jZTogbnVsbCxcbiAgICBsaXN0UnVudGltZUluc3RhbmNlOiBudWxsXG4gIH0sXG4gIFJlbmRlcmVyRGF0YUNoYWluUGFyYXM6IHtcbiAgICBsaXN0RW50aXR5OiBudWxsLFxuICAgIHNvdXJjZUhUTUw6IG51bGwsXG4gICAgJHJvb3RFbGVtOiBudWxsLFxuICAgICRwYXJlbnRDb250cm9sRWxlbTogbnVsbCxcbiAgICAkc2luZ2xlQ29udHJvbEVsZW06IG51bGwsXG4gICAgdG9wRGF0YVNldDogbnVsbCxcbiAgICBmb3JtUnVudGltZUluc3RhbmNlOiBudWxsLFxuICAgIGxpc3RSdW50aW1lSW5zdGFuY2U6IG51bGxcbiAgfSxcbiAgUmVuZGVyZXJDaGFpbjogZnVuY3Rpb24gUmVuZGVyZXJDaGFpbihfcmVuZGVyZXJDaGFpblBhcmFzKSB7XG4gICAgdmFyICRzaW5nbGVDb250cm9sRWxlbSA9IF9yZW5kZXJlckNoYWluUGFyYXMuJHNpbmdsZUNvbnRyb2xFbGVtO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkc2luZ2xlQ29udHJvbEVsZW0uY2hpbGRyZW4oKS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyICRjaGlsZFNpbmdsZUVsZW0gPSAkKCRzaW5nbGVDb250cm9sRWxlbS5jaGlsZHJlbigpW2ldKTtcbiAgICAgIHZhciBfY2xvbmVSZW5kZXJlckNoYWluUGFyYXMgPSB7fTtcbiAgICAgIEpzb25VdGlsaXR5LlNpbXBsZUNsb25lQXR0cihfY2xvbmVSZW5kZXJlckNoYWluUGFyYXMsIF9yZW5kZXJlckNoYWluUGFyYXMpO1xuICAgICAgX2Nsb25lUmVuZGVyZXJDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbSA9ICRjaGlsZFNpbmdsZUVsZW07XG5cbiAgICAgIGlmICgkY2hpbGRTaW5nbGVFbGVtLmF0dHIoSFRNTENvbnRyb2xBdHRycy5KQlVJTEQ0RENfQ1VTVE9NKSA9PSBcInRydWVcIiAmJiAkY2hpbGRTaW5nbGVFbGVtLmF0dHIoSFRNTENvbnRyb2xBdHRycy5DTElFTlRfUkVTT0xWRSkpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gSFRNTENvbnRyb2wuR2V0Q29udHJvbEluc3RhbmNlQnlFbGVtKCRjaGlsZFNpbmdsZUVsZW0pO1xuXG4gICAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuSW5pdGlhbGl6ZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBpbnN0YW5jZS5Jbml0aWFsaXplKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5zdGFuY2UuX29iamVjdFR5cGUgPT0gXCJJbnN0YW5jZVwiKSB7XG4gICAgICAgICAgaWYgKGluc3RhbmNlLl9wcm9wKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VQcm9wID0gSFRNTENvbnRyb2wuVHJ5QmluZEVsZW1lbnRBdHRyVG9JbnN0YW5jZVByb3AoJGNoaWxkU2luZ2xlRWxlbSwgaW5zdGFuY2UuX3Byb3ApO1xuICAgICAgICAgICAgaW5zdGFuY2UuX3Byb3AgPSBpbnN0YW5jZVByb3A7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBlbGVtSWQgPSAkY2hpbGRTaW5nbGVFbGVtLmF0dHIoXCJpZFwiKTtcblxuICAgICAgICAgIGlmIChlbGVtSWQgJiYgaW5zdGFuY2UuX3Byb3BNYXAgJiYgaW5zdGFuY2UuX3Byb3ApIHtcbiAgICAgICAgICAgIGlmICghaW5zdGFuY2UuX3Byb3BNYXBbZWxlbUlkXSkge1xuICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VQcm9wID0gSFRNTENvbnRyb2wuVHJ5QmluZEVsZW1lbnRBdHRyVG9JbnN0YW5jZVByb3AoJGNoaWxkU2luZ2xlRWxlbSwgaW5zdGFuY2UuX3Byb3ApO1xuICAgICAgICAgICAgICBpbnN0YW5jZS5fcHJvcE1hcFtlbGVtSWRdID0gaW5zdGFuY2VQcm9wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGluc3RhbmNlLlJlbmRlcmVyQ2hhaW4oX2Nsb25lUmVuZGVyZXJDaGFpblBhcmFzKTtcblxuICAgICAgICBpZiAodHlwZW9mIGluc3RhbmNlLkluaXRTdHlsZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBpbnN0YW5jZS5Jbml0U3R5bGUoX2Nsb25lUmVuZGVyZXJDaGFpblBhcmFzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuVHJ5QmluZFVybFZhbHVlID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGluc3RhbmNlLlRyeUJpbmRVcmxWYWx1ZShfY2xvbmVSZW5kZXJlckNoYWluUGFyYXMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBIVE1MQ29udHJvbC5SZW5kZXJlckNoYWluKF9jbG9uZVJlbmRlcmVyQ2hhaW5QYXJhcyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBSZW5kZXJlckRhdGFDaGFpbjogZnVuY3Rpb24gUmVuZGVyZXJEYXRhQ2hhaW4oX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMpIHtcbiAgICB2YXIgJHNpbmdsZUNvbnRyb2xFbGVtID0gX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMuJHNpbmdsZUNvbnRyb2xFbGVtO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkc2luZ2xlQ29udHJvbEVsZW0uY2hpbGRyZW4oKS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyICRjaGlsZFNpbmdsZUVsZW0gPSAkKCRzaW5nbGVDb250cm9sRWxlbS5jaGlsZHJlbigpW2ldKTtcbiAgICAgIHZhciBfY2xvbmVSZW5kZXJlckRhdGFDaGFpblBhcmFzID0ge307XG4gICAgICBKc29uVXRpbGl0eS5TaW1wbGVDbG9uZUF0dHIoX2Nsb25lUmVuZGVyZXJEYXRhQ2hhaW5QYXJhcywgX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMpO1xuICAgICAgX2Nsb25lUmVuZGVyZXJEYXRhQ2hhaW5QYXJhcy4kc2luZ2xlQ29udHJvbEVsZW0gPSAkY2hpbGRTaW5nbGVFbGVtO1xuXG4gICAgICBpZiAoJGNoaWxkU2luZ2xlRWxlbS5hdHRyKEhUTUxDb250cm9sQXR0cnMuSkJVSUxENERDX0NVU1RPTSkgPT0gXCJ0cnVlXCIgJiYgJGNoaWxkU2luZ2xlRWxlbS5hdHRyKEhUTUxDb250cm9sQXR0cnMuQ0xJRU5UX1JFU09MVkUpKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IEhUTUxDb250cm9sLkdldENvbnRyb2xJbnN0YW5jZUJ5RWxlbSgkY2hpbGRTaW5nbGVFbGVtKTtcbiAgICAgICAgaW5zdGFuY2UuUmVuZGVyZXJEYXRhQ2hhaW4oX2Nsb25lUmVuZGVyZXJEYXRhQ2hhaW5QYXJhcyk7XG4gICAgICAgIHZhciBmaWVsZFBPO1xuXG4gICAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuU2V0VmFsdWUgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgZmllbGRQTyA9IEhUTUxDb250cm9sLlRyeUdldEZpZWxkUE9JblJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQbygkY2hpbGRTaW5nbGVFbGVtLCBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcy5yZWxhdGlvbkZvcm1SZWNvcmRDb21wbGV4UG8pO1xuICAgICAgICAgIGluc3RhbmNlLlNldFZhbHVlKCRjaGlsZFNpbmdsZUVsZW0sIGZpZWxkUE8sIF9yZW5kZXJlckRhdGFDaGFpblBhcmFzLnJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQbywgX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9yZW5kZXJlckRhdGFDaGFpblBhcmFzLmNhbGxUb1ZpZXdTdGF0dXNGdW5jKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5Ub1ZpZXdTdGF0dXMgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5Ub1ZpZXdTdGF0dXMoJGNoaWxkU2luZ2xlRWxlbSwgZmllbGRQTywgX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMucmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvLCBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBIVE1MQ29udHJvbC5SZW5kZXJlckRhdGFDaGFpbihfY2xvbmVSZW5kZXJlckRhdGFDaGFpblBhcmFzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIEluaXRTdHlsZTogZnVuY3Rpb24gSW5pdFN0eWxlKF9yZW5kZXJlckNoYWluUGFyYXMpIHtcbiAgICB2YXIgJHNpbmdsZUNvbnRyb2xFbGVtID0gX3JlbmRlcmVyQ2hhaW5QYXJhcy4kc2luZ2xlQ29udHJvbEVsZW07XG4gICAgSFRNTENvbnRyb2wuVHJ5QXBwZW5kVmFsaWRhdGVTdHlsZSgkc2luZ2xlQ29udHJvbEVsZW0pO1xuICB9LFxuICBUcnlBcHBlbmRWYWxpZGF0ZVN0eWxlOiBmdW5jdGlvbiBUcnlBcHBlbmRWYWxpZGF0ZVN0eWxlKCRzaW5nbGVDb250cm9sRWxlbSkge1xuICAgIHZhciB2YWxpZGF0ZVJ1bGVzID0gVmFsaWRhdGVSdWxlc1J1bnRpbWUuZ2V0VmFsaWRhdGVSdWxlcygkc2luZ2xlQ29udHJvbEVsZW0pO1xuXG4gICAgaWYgKHZhbGlkYXRlUnVsZXMgJiYgdmFsaWRhdGVSdWxlcy5ydWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbGlkYXRlUnVsZXMucnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHZhbGlkYXRlUnVsZXMucnVsZXNbaV0udmFsaWRhdGVUeXBlID09IFZhbGlkYXRlUnVsZXNSdW50aW1lLk5vRW1wdHkpIHtcbiAgICAgICAgICB2YXIgJHRkVHh0ID0gJHNpbmdsZUNvbnRyb2xFbGVtLnBhcmVudCgpLnByZXYoKTtcbiAgICAgICAgICB2YXIgbmV3VHh0ID0gVmFsaWRhdGVSdWxlc1J1bnRpbWUuZ2V0VmFsaWRhdGVUaXBFbGVtKCkgKyAkdGRUeHQudGV4dCgpO1xuICAgICAgICAgICR0ZFR4dC5odG1sKG5ld1R4dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIEdldFZhbHVlOiBmdW5jdGlvbiBHZXRWYWx1ZSgkZWxlbSwgb3JpZ2luYWxEYXRhLCBwYXJhcykge1xuICAgIG9yaWdpbmFsRGF0YS52YWx1ZSA9ICRlbGVtLnZhbCgpO1xuICAgIHJldHVybiBvcmlnaW5hbERhdGE7XG4gIH0sXG4gIFNldFZhbHVlOiBmdW5jdGlvbiBTZXRWYWx1ZSgkZWxlbSwgZmllbGRQTywgcmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvLCBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcykge1xuICAgIGlmIChmaWVsZFBPKSB7XG4gICAgICAkZWxlbS52YWwoZmllbGRQTy52YWx1ZSk7XG4gICAgICAkZWxlbS5hdHRyKFwiY29udHJvbF92YWx1ZVwiLCBmaWVsZFBPLnZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIFRvVmlld1N0YXR1czogZnVuY3Rpb24gVG9WaWV3U3RhdHVzKCRlbGVtLCBmaWVsZFBPLCByZWxhdGlvbkZvcm1SZWNvcmRDb21wbGV4UG8sIF9yZW5kZXJlckRhdGFDaGFpblBhcmFzKSB7XG4gICAgdmFyIG9sZEFsbEF0dHJzID0gQmFzZVV0aWxpdHkuR2V0RWxlbUFsbEF0dHIoJGVsZW0pO1xuICAgIHZhciAkdmlld0VsZW0gPSAkKFwiPGxhYmVsIC8+XCIpO1xuICAgICR2aWV3RWxlbS5hdHRyKG9sZEFsbEF0dHJzKTtcbiAgICAkdmlld0VsZW0ucmVtb3ZlQ2xhc3MoKTtcblxuICAgIGlmICgkZWxlbS5wcm9wKFwidGFnTmFtZVwiKSA9PSBcIlNFTEVDVFwiKSB7XG4gICAgICB2YXIgdGV4dCA9ICRlbGVtLmZpbmQoXCJvcHRpb246c2VsZWN0ZWRcIikudGV4dCgpO1xuICAgICAgJHZpZXdFbGVtLnRleHQodGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICR2aWV3RWxlbS50ZXh0KCRlbGVtLnZhbCgpKTtcbiAgICB9XG5cbiAgICAkZWxlbS5yZXBsYWNlV2l0aCgkdmlld0VsZW0pO1xuICB9LFxuICBUcnlCaW5kVXJsVmFsdWU6IGZ1bmN0aW9uIFRyeUJpbmRVcmxWYWx1ZShfcmVuZGVyZXJDaGFpblBhcmFzKSB7XG4gICAgdmFyICRzaW5nbGVDb250cm9sRWxlbSA9IF9yZW5kZXJlckNoYWluUGFyYXMuJHNpbmdsZUNvbnRyb2xFbGVtO1xuICAgIHZhciBjb2x1bW5OYW1lID0gJHNpbmdsZUNvbnRyb2xFbGVtLmF0dHIoXCJjb2x1bW5uYW1lXCIpO1xuXG4gICAgaWYgKCFjb2x1bW5OYW1lKSB7XG4gICAgICBjb2x1bW5OYW1lID0gJHNpbmdsZUNvbnRyb2xFbGVtLmF0dHIoXCJmaWVsZG5hbWVcIik7XG4gICAgfVxuXG4gICAgdmFyIHVybFZhbHVlID0gUnVudGltZUdlbmVyYWxJbnN0YW5jZS5UcnlHZXRVcmxQYXJhVmFsdWVCeUZpZWxkTmFtZShcIkJpbmRUb0ZpZWxkXCIsIGNvbHVtbk5hbWUpO1xuXG4gICAgaWYgKHVybFZhbHVlKSB7XG4gICAgICAkc2luZ2xlQ29udHJvbEVsZW0udmFsKHVybFZhbHVlKTtcbiAgICAgIGNvbnNvbGUubG9nKHVybFZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIFRyeUdldEZpZWxkUE9JblJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQbzogZnVuY3Rpb24gVHJ5R2V0RmllbGRQT0luUmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvKCRlbGVtLCByZWxhdGlvbkZvcm1SZWNvcmRDb21wbGV4UG8pIHtcbiAgICB2YXIgcmVsYXRpb25JZCA9IEhUTUxDb250cm9sLkdldENvbnRyb2xCaW5kUmVsYXRpb25JZCgkZWxlbSk7XG4gICAgdmFyIGJpbmRUYWJsZU5hbWUgPSBIVE1MQ29udHJvbC5HZXRDb250cm9sQmluZFRhYmxlTmFtZSgkZWxlbSk7XG4gICAgdmFyIGJpbmRGaWVsZE5hbWUgPSBIVE1MQ29udHJvbC5HZXRDb250cm9sQmluZEZpZWxkTmFtZSgkZWxlbSk7XG5cbiAgICBpZiAocmVsYXRpb25JZCAmJiBiaW5kRmllbGROYW1lKSB7XG4gICAgICB2YXIgZmllbGRQTyA9IEZvcm1SZWxhdGlvblBPVXRpbGl0eS5GaW5kRmllbGRQT0luUmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvT25lRGF0YVJlY29yZChyZWxhdGlvbkZvcm1SZWNvcmRDb21wbGV4UG8sIHJlbGF0aW9uSWQsIGJpbmRUYWJsZU5hbWUsIGJpbmRGaWVsZE5hbWUpO1xuICAgICAgcmV0dXJuIGZpZWxkUE87XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcbiAgRmluZEFMTENvbnRyb2xzOiBmdW5jdGlvbiBGaW5kQUxMQ29udHJvbHMoJHBhcmVudCkge1xuICAgIGlmICgkcGFyZW50KSB7XG4gICAgICByZXR1cm4gJHBhcmVudC5maW5kKFwiW2pidWlsZDRkY19jdXN0b209J3RydWUnXVwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJChcIltqYnVpbGQ0ZGNfY3VzdG9tPSd0cnVlJ11cIik7XG4gIH0sXG4gIEdldENvbnRyb2xCaW5kVGFibGVOYW1lOiBmdW5jdGlvbiBHZXRDb250cm9sQmluZFRhYmxlTmFtZSgkY29udHJvbEVsZW0pIHtcbiAgICByZXR1cm4gJGNvbnRyb2xFbGVtLmF0dHIoXCJ0YWJsZW5hbWVcIik7XG4gIH0sXG4gIEdldENvbnRyb2xCaW5kRmllbGROYW1lOiBmdW5jdGlvbiBHZXRDb250cm9sQmluZEZpZWxkTmFtZSgkY29udHJvbEVsZW0pIHtcbiAgICByZXR1cm4gJGNvbnRyb2xFbGVtLmF0dHIoXCJmaWVsZG5hbWVcIik7XG4gIH0sXG4gIEdldENvbnRyb2xCaW5kUmVsYXRpb25JZDogZnVuY3Rpb24gR2V0Q29udHJvbEJpbmRSZWxhdGlvbklkKCRjb250cm9sRWxlbSkge1xuICAgIHJldHVybiAkY29udHJvbEVsZW0uYXR0cihcInJlbGF0aW9uaWRcIik7XG4gIH0sXG4gIEdldENvbnRyb2xQcm9wOiBmdW5jdGlvbiBHZXRDb250cm9sUHJvcCgkY29udHJvbEVsZW0pIHtcbiAgICB2YXIgcHJvcHMgPSB7XG4gICAgICBzaW5nbGVOYW1lOiBcIlwiLFxuICAgICAgdGFibGVOYW1lOiBcIlwiLFxuICAgICAgdGFibGVDYXB0aW9uOiBcIlwiLFxuICAgICAgdGFibGVJZDogXCJcIixcbiAgICAgIGZpZWxkVGFibGVJZDogXCJcIixcbiAgICAgIGZpZWxkTmFtZTogXCJcIixcbiAgICAgIGZpZWxkRGF0YVR5cGU6IFwiXCIsXG4gICAgICBmaWVsZERhdGFMZW5ndGg6IFwiXCIsXG4gICAgICBkZWZhdWx0VHlwZTogXCJcIixcbiAgICAgIGRlZmF1bHRWYWx1ZTogXCJcIixcbiAgICAgIGlkOiBcIlwiLFxuICAgICAgc2VyaWFsaXplOiBcIlwiLFxuICAgICAgdmFsdWU6IFwiXCJcbiAgICB9O1xuXG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gJGNvbnRyb2xFbGVtLmF0dHIoU3RyaW5nVXRpbGl0eS5Ub0xvd2VyQ2FzZShrZXkpKTtcblxuICAgICAgaWYgKCFTdHJpbmdVdGlsaXR5LklzTnVsbE9yRW1wdHkocHJvcFZhbHVlKSkge1xuICAgICAgICBwcm9wc1trZXldID0gcHJvcFZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHByb3BzLmZpZWxkRGF0YUxlbmd0aCA9ICRjb250cm9sRWxlbS5hdHRyKFwiZmllbGRsZW5ndGhcIik7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9LFxuICBCdWlsZFNlcmlhbGl6YXRpb25PcmlnaW5hbERhdGE6IGZ1bmN0aW9uIEJ1aWxkU2VyaWFsaXphdGlvbk9yaWdpbmFsRGF0YShwcm9wcywgcmVsYXRpb25JZCwgcmVsYXRpb25TaW5nbGVOYW1lLCByZWxhdGlvblR5cGUpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRhID0ge1xuICAgICAgcmVsYXRpb25JZDogcmVsYXRpb25JZCxcbiAgICAgIHJlbGF0aW9uU2luZ2xlTmFtZTogcmVsYXRpb25TaW5nbGVOYW1lLFxuICAgICAgcmVsYXRpb25UeXBlOiByZWxhdGlvblR5cGUsXG4gICAgICBzaW5nbGVOYW1lOiBwcm9wcy5zaW5nbGVOYW1lLFxuICAgICAgdGFibGVOYW1lOiBwcm9wcy50YWJsZU5hbWUsXG4gICAgICB0YWJsZUNhcHRpb246IHByb3BzLnRhYmxlQ2FwdGlvbixcbiAgICAgIHRhYmxlSWQ6IHByb3BzLnRhYmxlSWQsXG4gICAgICBmaWVsZFRhYmxlSWQ6IHByb3BzLmZpZWxkVGFibGVJZCxcbiAgICAgIGZpZWxkTmFtZTogcHJvcHMuZmllbGROYW1lLFxuICAgICAgZmllbGREYXRhVHlwZTogcHJvcHMuZmllbGREYXRhVHlwZSxcbiAgICAgIGZpZWxkRGF0YUxlbmd0aDogcHJvcHMuZmllbGREYXRhTGVuZ3RoLFxuICAgICAgc2VyaWFsaXplOiBwcm9wcy5zZXJpYWxpemUsXG4gICAgICBpZDogcHJvcHMuaWQsXG4gICAgICBkZWZhdWx0VHlwZTogcHJvcHMuZGVmYXVsdFR5cGUsXG4gICAgICBkZWZhdWx0VmFsdWU6IHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgIHZhbHVlOiBcIlwiLFxuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIG1zZzogXCJcIlxuICAgIH07XG4gICAgcmV0dXJuIG9yaWdpbmFsRGF0YTtcbiAgfSxcbiAgR2V0U2VyaWFsaXphdGlvbk9uZURhdGFSZWNvcmRGaWVsZFZhbHVlOiBmdW5jdGlvbiBHZXRTZXJpYWxpemF0aW9uT25lRGF0YVJlY29yZEZpZWxkVmFsdWUob25lRGF0YVJlY29yZCwgdGFibGVOYW1lLCBmaWVsZE5hbWUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9uZURhdGFSZWNvcmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChvbmVEYXRhUmVjb3JkW2ldLnRhYmxlTmFtZSA9PSB0YWJsZU5hbWUgJiYgb25lRGF0YVJlY29yZFtpXS5maWVsZE5hbWUgPT0gZmllbGROYW1lKSB7XG4gICAgICAgIHJldHVybiBvbmVEYXRhUmVjb3JkW2ldLnZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBcIlwiO1xuICB9LFxuICBUcnlHZXRGaWVsZFRyYW5zZmVyUE86IGZ1bmN0aW9uIFRyeUdldEZpZWxkVHJhbnNmZXJQTygkY29udHJvbEVsZW0sIHJlbGF0aW9uSWQsIHJlbGF0aW9uU2luZ2xlTmFtZSwgcmVsYXRpb25UeXBlKSB7XG4gICAgdmFyIHByb3BzID0gSFRNTENvbnRyb2wuR2V0Q29udHJvbFByb3AoJGNvbnRyb2xFbGVtKTtcbiAgICB2YXIgb3JpZ2luYWxEYXRhID0gSFRNTENvbnRyb2wuQnVpbGRTZXJpYWxpemF0aW9uT3JpZ2luYWxEYXRhKHByb3BzLCByZWxhdGlvbklkLCByZWxhdGlvblNpbmdsZU5hbWUsIHJlbGF0aW9uVHlwZSk7XG4gICAgdmFyIGNvbnRyb2xJbnN0YW5jZSA9IEhUTUxDb250cm9sLkdldENvbnRyb2xJbnN0YW5jZUJ5RWxlbSgkY29udHJvbEVsZW0pO1xuXG4gICAgaWYgKEJhc2VVdGlsaXR5LklzRnVuY3Rpb24oY29udHJvbEluc3RhbmNlLkdldFZhbHVlKSkge1xuICAgICAgdmFyIGZpZWxkVHJhbnNmZXJQTyA9IGNvbnRyb2xJbnN0YW5jZS5HZXRWYWx1ZSgkY29udHJvbEVsZW0sIG9yaWdpbmFsRGF0YSwge30pO1xuXG4gICAgICBpZiAoZmllbGRUcmFuc2ZlclBPLnN1Y2Nlc3MpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkVHJhbnNmZXJQTztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBEaWFsb2dVdGlsaXR5LkFsZXJ0VGV4dChcIuaOp+S7tjpcIiArICRjb250cm9sRWxlbS5hdHRyKFwic2luZ2xlbmFtZVwiKSArIFwi5pyq5YyF5ZCrR2V0VmFsdWXnmoTmlrnms5UhXCIpO1xuICAgIH1cbiAgfSxcbiAgR2V0U2ltcGxlQ29udHJvbFZhbHVlOiBmdW5jdGlvbiBHZXRTaW1wbGVDb250cm9sVmFsdWUodGFibGVJZCwgZmllbGROYW1lKSB7XG4gICAgdmFyIGVsZW0gPSAkKFwiW3RhYmxlaWQ9J1wiICsgdGFibGVJZCArIFwiJ11bZmllbGRuYW1lPSdcIiArIGZpZWxkTmFtZSArIFwiJ11cIik7XG5cbiAgICBpZiAoZWxlbS5sZW5ndGggPT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsZW0udmFsKCk7XG4gIH0sXG4gIFRyeUJpbmRFbGVtZW50QXR0clRvSW5zdGFuY2VQcm9wOiBmdW5jdGlvbiBUcnlCaW5kRWxlbWVudEF0dHJUb0luc3RhbmNlUHJvcCgkZWxlbSwgb2JqUHJvcCkge1xuICAgIHZhciByZXN1bHQgPSB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiBvYmpQcm9wKSB7XG4gICAgICBpZiAoJGVsZW0uYXR0cihrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gJGVsZW0uYXR0cihrZXkpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT0gXCJlbGVtSWRcIikge1xuICAgICAgICByZXN1bHQuZWxlbUlkID0gJGVsZW0uYXR0cihcImlkXCIpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT0gXCJpbnN0YW5jZU5hbWVcIikge1xuICAgICAgICByZXN1bHQuaW5zdGFuY2VOYW1lID0gJGVsZW0uYXR0cihcImNsaWVudF9pbnN0YW5jZV9uYW1lXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBvYmpQcm9wW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVzdWx0LiRzaW5nbGVDb250cm9sRWxlbSA9ICRlbGVtO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBWaXJ0dWFsQm9keUNvbnRyb2wgPSB7XG4gIFJlbmRlcmVyQ2hhaW46IEhUTUxDb250cm9sLlJlbmRlcmVyQ2hhaW4sXG4gIFJlbmRlcmVyRGF0YUNoYWluOiBIVE1MQ29udHJvbC5SZW5kZXJlckRhdGFDaGFpbixcbiAgSW5pdFN0eWxlOiBmdW5jdGlvbiBJbml0U3R5bGUoX3JlbmRlcmVyQ2hhaW5QYXJhcykge1xuICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSBfcmVuZGVyZXJDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgICB2YXIgZm9ybVJ1bnRpbWVJbnN0YW5jZSA9IF9yZW5kZXJlckNoYWluUGFyYXMuZm9ybVJ1bnRpbWVJbnN0YW5jZTtcbiAgICB0aGlzLlRyeUF1dG9TZXRIZWlnaHQoZm9ybVJ1bnRpbWVJbnN0YW5jZSk7XG4gIH0sXG4gIFRyeUF1dG9TZXRIZWlnaHQ6IGZ1bmN0aW9uIFRyeUF1dG9TZXRIZWlnaHQoZm9ybVJ1bnRpbWVJbnN0YW5jZSkge1xuICAgIGlmICgkKFwiLmF1dG8tZnVsbC1wYWdlLWhlaWdodC13cmFwXCIpLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBwYWdlSGVpZ2h0ID0gZm9ybVJ1bnRpbWVJbnN0YW5jZS5fUHJvcF9Db25maWcuV2ViRm9ybVJUUGFyYXMuV2luZG93SGVpZ2h0O1xuXG4gICAgICBpZiAocGFnZUhlaWdodCkge1xuICAgICAgICBwYWdlSGVpZ2h0ID0gcGFnZUhlaWdodCAtIDEzMDtcblxuICAgICAgICBpZiAodGhpcy5IYXNSb290VGFiQ29udGFpbmVyKCkpIHtcbiAgICAgICAgICBwYWdlSGVpZ2h0ID0gcGFnZUhlaWdodCAtIDcwO1xuICAgICAgICB9XG5cbiAgICAgICAgJChcIi5hdXRvLWZ1bGwtcGFnZS1oZWlnaHQtd3JhcFwiKS5oZWlnaHQocGFnZUhlaWdodCk7XG4gICAgICAgICQoXCIuYXV0by1mdWxsLXBhZ2UtaGVpZ2h0LXdyYXBcIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGVsZW0gPSAkKHRoaXMpO1xuICAgICAgICAgIHZhciBwcyA9IG5ldyBQZXJmZWN0U2Nyb2xsYmFyKGVsZW1bMF0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIEhhc1Jvb3RUYWJDb250YWluZXI6IGZ1bmN0aW9uIEhhc1Jvb3RUYWJDb250YWluZXIoKSB7XG4gICAgcmV0dXJuICQoXCIjaHRtbERlc2lnblJ1bnRpbWVXcmFwXCIpLmNoaWxkcmVuKFwiW3NpbmdsZW5hbWU9J1dGRENUX1RhYkNvbnRhaW5lciddXCIpLmxlbmd0aCA+IDA7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbihmdW5jdGlvbiAoZmFjdG9yeSkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZ1bmN0aW9uICgkKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSgkLCB3aW5kb3csIGRvY3VtZW50KTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICgodHlwZW9mIGV4cG9ydHMgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihleHBvcnRzKSkgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdCwgJCkge1xuICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgIHJvb3QgPSB3aW5kb3c7XG4gICAgICB9XG5cbiAgICAgIGlmICghJCkge1xuICAgICAgICAkID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyByZXF1aXJlKCdqcXVlcnknKSA6IHJlcXVpcmUoJ2pxdWVyeScpKHJvb3QpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFjdG9yeSgkLCByb290LCByb290LmRvY3VtZW50KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGZhY3RvcnkoalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcbiAgfVxufSkoZnVuY3Rpb24gKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgRGF0YVRhYmxlID0gZnVuY3Rpb24gRGF0YVRhYmxlKG9wdGlvbnMpIHtcbiAgICB0aGlzLiQgPSBmdW5jdGlvbiAoc1NlbGVjdG9yLCBvT3B0cykge1xuICAgICAgcmV0dXJuIHRoaXMuYXBpKHRydWUpLiQoc1NlbGVjdG9yLCBvT3B0cyk7XG4gICAgfTtcblxuICAgIHRoaXMuXyA9IGZ1bmN0aW9uIChzU2VsZWN0b3IsIG9PcHRzKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcGkodHJ1ZSkucm93cyhzU2VsZWN0b3IsIG9PcHRzKS5kYXRhKCk7XG4gICAgfTtcblxuICAgIHRoaXMuYXBpID0gZnVuY3Rpb24gKHRyYWRpdGlvbmFsKSB7XG4gICAgICByZXR1cm4gdHJhZGl0aW9uYWwgPyBuZXcgX0FwaTIoX2ZuU2V0dGluZ3NGcm9tTm9kZSh0aGlzW19leHQuaUFwaUluZGV4XSkpIDogbmV3IF9BcGkyKHRoaXMpO1xuICAgIH07XG5cbiAgICB0aGlzLmZuQWRkRGF0YSA9IGZ1bmN0aW9uIChkYXRhLCByZWRyYXcpIHtcbiAgICAgIHZhciBhcGkgPSB0aGlzLmFwaSh0cnVlKTtcbiAgICAgIHZhciByb3dzID0gJC5pc0FycmF5KGRhdGEpICYmICgkLmlzQXJyYXkoZGF0YVswXSkgfHwgJC5pc1BsYWluT2JqZWN0KGRhdGFbMF0pKSA/IGFwaS5yb3dzLmFkZChkYXRhKSA6IGFwaS5yb3cuYWRkKGRhdGEpO1xuXG4gICAgICBpZiAocmVkcmF3ID09PSB1bmRlZmluZWQgfHwgcmVkcmF3KSB7XG4gICAgICAgIGFwaS5kcmF3KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByb3dzLmZsYXR0ZW4oKS50b0FycmF5KCk7XG4gICAgfTtcblxuICAgIHRoaXMuZm5BZGp1c3RDb2x1bW5TaXppbmcgPSBmdW5jdGlvbiAoYlJlZHJhdykge1xuICAgICAgdmFyIGFwaSA9IHRoaXMuYXBpKHRydWUpLmNvbHVtbnMuYWRqdXN0KCk7XG4gICAgICB2YXIgc2V0dGluZ3MgPSBhcGkuc2V0dGluZ3MoKVswXTtcbiAgICAgIHZhciBzY3JvbGwgPSBzZXR0aW5ncy5vU2Nyb2xsO1xuXG4gICAgICBpZiAoYlJlZHJhdyA9PT0gdW5kZWZpbmVkIHx8IGJSZWRyYXcpIHtcbiAgICAgICAgYXBpLmRyYXcoZmFsc2UpO1xuICAgICAgfSBlbHNlIGlmIChzY3JvbGwuc1ggIT09IFwiXCIgfHwgc2Nyb2xsLnNZICE9PSBcIlwiKSB7XG4gICAgICAgIF9mblNjcm9sbERyYXcoc2V0dGluZ3MpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmZuQ2xlYXJUYWJsZSA9IGZ1bmN0aW9uIChiUmVkcmF3KSB7XG4gICAgICB2YXIgYXBpID0gdGhpcy5hcGkodHJ1ZSkuY2xlYXIoKTtcblxuICAgICAgaWYgKGJSZWRyYXcgPT09IHVuZGVmaW5lZCB8fCBiUmVkcmF3KSB7XG4gICAgICAgIGFwaS5kcmF3KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuZm5DbG9zZSA9IGZ1bmN0aW9uIChuVHIpIHtcbiAgICAgIHRoaXMuYXBpKHRydWUpLnJvdyhuVHIpLmNoaWxkLmhpZGUoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5mbkRlbGV0ZVJvdyA9IGZ1bmN0aW9uICh0YXJnZXQsIGNhbGxiYWNrLCByZWRyYXcpIHtcbiAgICAgIHZhciBhcGkgPSB0aGlzLmFwaSh0cnVlKTtcbiAgICAgIHZhciByb3dzID0gYXBpLnJvd3ModGFyZ2V0KTtcbiAgICAgIHZhciBzZXR0aW5ncyA9IHJvd3Muc2V0dGluZ3MoKVswXTtcbiAgICAgIHZhciBkYXRhID0gc2V0dGluZ3MuYW9EYXRhW3Jvd3NbMF1bMF1dO1xuICAgICAgcm93cy5yZW1vdmUoKTtcblxuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgc2V0dGluZ3MsIGRhdGEpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVkcmF3ID09PSB1bmRlZmluZWQgfHwgcmVkcmF3KSB7XG4gICAgICAgIGFwaS5kcmF3KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH07XG5cbiAgICB0aGlzLmZuRGVzdHJveSA9IGZ1bmN0aW9uIChyZW1vdmUpIHtcbiAgICAgIHRoaXMuYXBpKHRydWUpLmRlc3Ryb3kocmVtb3ZlKTtcbiAgICB9O1xuXG4gICAgdGhpcy5mbkRyYXcgPSBmdW5jdGlvbiAoY29tcGxldGUpIHtcbiAgICAgIHRoaXMuYXBpKHRydWUpLmRyYXcoY29tcGxldGUpO1xuICAgIH07XG5cbiAgICB0aGlzLmZuRmlsdGVyID0gZnVuY3Rpb24gKHNJbnB1dCwgaUNvbHVtbiwgYlJlZ2V4LCBiU21hcnQsIGJTaG93R2xvYmFsLCBiQ2FzZUluc2Vuc2l0aXZlKSB7XG4gICAgICB2YXIgYXBpID0gdGhpcy5hcGkodHJ1ZSk7XG5cbiAgICAgIGlmIChpQ29sdW1uID09PSBudWxsIHx8IGlDb2x1bW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhcGkuc2VhcmNoKHNJbnB1dCwgYlJlZ2V4LCBiU21hcnQsIGJDYXNlSW5zZW5zaXRpdmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBpLmNvbHVtbihpQ29sdW1uKS5zZWFyY2goc0lucHV0LCBiUmVnZXgsIGJTbWFydCwgYkNhc2VJbnNlbnNpdGl2ZSk7XG4gICAgICB9XG5cbiAgICAgIGFwaS5kcmF3KCk7XG4gICAgfTtcblxuICAgIHRoaXMuZm5HZXREYXRhID0gZnVuY3Rpb24gKHNyYywgY29sKSB7XG4gICAgICB2YXIgYXBpID0gdGhpcy5hcGkodHJ1ZSk7XG5cbiAgICAgIGlmIChzcmMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgdHlwZSA9IHNyYy5ub2RlTmFtZSA/IHNyYy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIDogJyc7XG4gICAgICAgIHJldHVybiBjb2wgIT09IHVuZGVmaW5lZCB8fCB0eXBlID09ICd0ZCcgfHwgdHlwZSA9PSAndGgnID8gYXBpLmNlbGwoc3JjLCBjb2wpLmRhdGEoKSA6IGFwaS5yb3coc3JjKS5kYXRhKCkgfHwgbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFwaS5kYXRhKCkudG9BcnJheSgpO1xuICAgIH07XG5cbiAgICB0aGlzLmZuR2V0Tm9kZXMgPSBmdW5jdGlvbiAoaVJvdykge1xuICAgICAgdmFyIGFwaSA9IHRoaXMuYXBpKHRydWUpO1xuICAgICAgcmV0dXJuIGlSb3cgIT09IHVuZGVmaW5lZCA/IGFwaS5yb3coaVJvdykubm9kZSgpIDogYXBpLnJvd3MoKS5ub2RlcygpLmZsYXR0ZW4oKS50b0FycmF5KCk7XG4gICAgfTtcblxuICAgIHRoaXMuZm5HZXRQb3NpdGlvbiA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgYXBpID0gdGhpcy5hcGkodHJ1ZSk7XG4gICAgICB2YXIgbm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgIGlmIChub2RlTmFtZSA9PSAnVFInKSB7XG4gICAgICAgIHJldHVybiBhcGkucm93KG5vZGUpLmluZGV4KCk7XG4gICAgICB9IGVsc2UgaWYgKG5vZGVOYW1lID09ICdURCcgfHwgbm9kZU5hbWUgPT0gJ1RIJykge1xuICAgICAgICB2YXIgY2VsbCA9IGFwaS5jZWxsKG5vZGUpLmluZGV4KCk7XG4gICAgICAgIHJldHVybiBbY2VsbC5yb3csIGNlbGwuY29sdW1uVmlzaWJsZSwgY2VsbC5jb2x1bW5dO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgdGhpcy5mbklzT3BlbiA9IGZ1bmN0aW9uIChuVHIpIHtcbiAgICAgIHJldHVybiB0aGlzLmFwaSh0cnVlKS5yb3coblRyKS5jaGlsZC5pc1Nob3duKCk7XG4gICAgfTtcblxuICAgIHRoaXMuZm5PcGVuID0gZnVuY3Rpb24gKG5UciwgbUh0bWwsIHNDbGFzcykge1xuICAgICAgcmV0dXJuIHRoaXMuYXBpKHRydWUpLnJvdyhuVHIpLmNoaWxkKG1IdG1sLCBzQ2xhc3MpLnNob3coKS5jaGlsZCgpWzBdO1xuICAgIH07XG5cbiAgICB0aGlzLmZuUGFnZUNoYW5nZSA9IGZ1bmN0aW9uIChtQWN0aW9uLCBiUmVkcmF3KSB7XG4gICAgICB2YXIgYXBpID0gdGhpcy5hcGkodHJ1ZSkucGFnZShtQWN0aW9uKTtcblxuICAgICAgaWYgKGJSZWRyYXcgPT09IHVuZGVmaW5lZCB8fCBiUmVkcmF3KSB7XG4gICAgICAgIGFwaS5kcmF3KGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5mblNldENvbHVtblZpcyA9IGZ1bmN0aW9uIChpQ29sLCBiU2hvdywgYlJlZHJhdykge1xuICAgICAgdmFyIGFwaSA9IHRoaXMuYXBpKHRydWUpLmNvbHVtbihpQ29sKS52aXNpYmxlKGJTaG93KTtcblxuICAgICAgaWYgKGJSZWRyYXcgPT09IHVuZGVmaW5lZCB8fCBiUmVkcmF3KSB7XG4gICAgICAgIGFwaS5jb2x1bW5zLmFkanVzdCgpLmRyYXcoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5mblNldHRpbmdzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9mblNldHRpbmdzRnJvbU5vZGUodGhpc1tfZXh0LmlBcGlJbmRleF0pO1xuICAgIH07XG5cbiAgICB0aGlzLmZuU29ydCA9IGZ1bmN0aW9uIChhYVNvcnQpIHtcbiAgICAgIHRoaXMuYXBpKHRydWUpLm9yZGVyKGFhU29ydCkuZHJhdygpO1xuICAgIH07XG5cbiAgICB0aGlzLmZuU29ydExpc3RlbmVyID0gZnVuY3Rpb24gKG5Ob2RlLCBpQ29sdW1uLCBmbkNhbGxiYWNrKSB7XG4gICAgICB0aGlzLmFwaSh0cnVlKS5vcmRlci5saXN0ZW5lcihuTm9kZSwgaUNvbHVtbiwgZm5DYWxsYmFjayk7XG4gICAgfTtcblxuICAgIHRoaXMuZm5VcGRhdGUgPSBmdW5jdGlvbiAobURhdGEsIG1Sb3csIGlDb2x1bW4sIGJSZWRyYXcsIGJBY3Rpb24pIHtcbiAgICAgIHZhciBhcGkgPSB0aGlzLmFwaSh0cnVlKTtcblxuICAgICAgaWYgKGlDb2x1bW4gPT09IHVuZGVmaW5lZCB8fCBpQ29sdW1uID09PSBudWxsKSB7XG4gICAgICAgIGFwaS5yb3cobVJvdykuZGF0YShtRGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcGkuY2VsbChtUm93LCBpQ29sdW1uKS5kYXRhKG1EYXRhKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJBY3Rpb24gPT09IHVuZGVmaW5lZCB8fCBiQWN0aW9uKSB7XG4gICAgICAgIGFwaS5jb2x1bW5zLmFkanVzdCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYlJlZHJhdyA9PT0gdW5kZWZpbmVkIHx8IGJSZWRyYXcpIHtcbiAgICAgICAgYXBpLmRyYXcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfTtcblxuICAgIHRoaXMuZm5WZXJzaW9uQ2hlY2sgPSBfZXh0LmZuVmVyc2lvbkNoZWNrO1xuXG4gICAgdmFyIF90aGF0ID0gdGhpcztcblxuICAgIHZhciBlbXB0eUluaXQgPSBvcHRpb25zID09PSB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoO1xuXG4gICAgaWYgKGVtcHR5SW5pdCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHRoaXMub0FwaSA9IHRoaXMuaW50ZXJuYWwgPSBfZXh0LmludGVybmFsO1xuXG4gICAgZm9yICh2YXIgZm4gaW4gRGF0YVRhYmxlLmV4dC5pbnRlcm5hbCkge1xuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHRoaXNbZm5dID0gX2ZuRXh0ZXJuQXBpRnVuYyhmbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBvID0ge307XG4gICAgICB2YXIgb0luaXQgPSBsZW4gPiAxID8gX2ZuRXh0ZW5kKG8sIG9wdGlvbnMsIHRydWUpIDogb3B0aW9ucztcbiAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICBpTGVuLFxuICAgICAgICAgIGosXG4gICAgICAgICAgakxlbixcbiAgICAgICAgICBrLFxuICAgICAgICAgIGtMZW47XG4gICAgICB2YXIgc0lkID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICB2YXIgYkluaXRIYW5kZWRPZmYgPSBmYWxzZTtcbiAgICAgIHZhciBkZWZhdWx0cyA9IERhdGFUYWJsZS5kZWZhdWx0cztcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG5cbiAgICAgIGlmICh0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT0gJ3RhYmxlJykge1xuICAgICAgICBfZm5Mb2cobnVsbCwgMCwgJ05vbi10YWJsZSBub2RlIGluaXRpYWxpc2F0aW9uICgnICsgdGhpcy5ub2RlTmFtZSArICcpJywgMik7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfZm5Db21wYXRPcHRzKGRlZmF1bHRzKTtcblxuICAgICAgX2ZuQ29tcGF0Q29scyhkZWZhdWx0cy5jb2x1bW4pO1xuXG4gICAgICBfZm5DYW1lbFRvSHVuZ2FyaWFuKGRlZmF1bHRzLCBkZWZhdWx0cywgdHJ1ZSk7XG5cbiAgICAgIF9mbkNhbWVsVG9IdW5nYXJpYW4oZGVmYXVsdHMuY29sdW1uLCBkZWZhdWx0cy5jb2x1bW4sIHRydWUpO1xuXG4gICAgICBfZm5DYW1lbFRvSHVuZ2FyaWFuKGRlZmF1bHRzLCAkLmV4dGVuZChvSW5pdCwgJHRoaXMuZGF0YSgpKSk7XG5cbiAgICAgIHZhciBhbGxTZXR0aW5ncyA9IERhdGFUYWJsZS5zZXR0aW5ncztcblxuICAgICAgZm9yIChpID0gMCwgaUxlbiA9IGFsbFNldHRpbmdzLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgICB2YXIgcyA9IGFsbFNldHRpbmdzW2ldO1xuXG4gICAgICAgIGlmIChzLm5UYWJsZSA9PSB0aGlzIHx8IHMublRIZWFkICYmIHMublRIZWFkLnBhcmVudE5vZGUgPT0gdGhpcyB8fCBzLm5URm9vdCAmJiBzLm5URm9vdC5wYXJlbnROb2RlID09IHRoaXMpIHtcbiAgICAgICAgICB2YXIgYlJldHJpZXZlID0gb0luaXQuYlJldHJpZXZlICE9PSB1bmRlZmluZWQgPyBvSW5pdC5iUmV0cmlldmUgOiBkZWZhdWx0cy5iUmV0cmlldmU7XG4gICAgICAgICAgdmFyIGJEZXN0cm95ID0gb0luaXQuYkRlc3Ryb3kgIT09IHVuZGVmaW5lZCA/IG9Jbml0LmJEZXN0cm95IDogZGVmYXVsdHMuYkRlc3Ryb3k7XG5cbiAgICAgICAgICBpZiAoZW1wdHlJbml0IHx8IGJSZXRyaWV2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHMub0luc3RhbmNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYkRlc3Ryb3kpIHtcbiAgICAgICAgICAgIHMub0luc3RhbmNlLmZuRGVzdHJveSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9mbkxvZyhzLCAwLCAnQ2Fubm90IHJlaW5pdGlhbGlzZSBEYXRhVGFibGUnLCAzKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzLnNUYWJsZUlkID09IHRoaXMuaWQpIHtcbiAgICAgICAgICBhbGxTZXR0aW5ncy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHNJZCA9PT0gbnVsbCB8fCBzSWQgPT09IFwiXCIpIHtcbiAgICAgICAgc0lkID0gXCJEYXRhVGFibGVzX1RhYmxlX1wiICsgRGF0YVRhYmxlLmV4dC5fdW5pcXVlKys7XG4gICAgICAgIHRoaXMuaWQgPSBzSWQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBvU2V0dGluZ3MgPSAkLmV4dGVuZCh0cnVlLCB7fSwgRGF0YVRhYmxlLm1vZGVscy5vU2V0dGluZ3MsIHtcbiAgICAgICAgXCJzRGVzdHJveVdpZHRoXCI6ICR0aGlzWzBdLnN0eWxlLndpZHRoLFxuICAgICAgICBcInNJbnN0YW5jZVwiOiBzSWQsXG4gICAgICAgIFwic1RhYmxlSWRcIjogc0lkXG4gICAgICB9KTtcbiAgICAgIG9TZXR0aW5ncy5uVGFibGUgPSB0aGlzO1xuICAgICAgb1NldHRpbmdzLm9BcGkgPSBfdGhhdC5pbnRlcm5hbDtcbiAgICAgIG9TZXR0aW5ncy5vSW5pdCA9IG9Jbml0O1xuICAgICAgYWxsU2V0dGluZ3MucHVzaChvU2V0dGluZ3MpO1xuICAgICAgb1NldHRpbmdzLm9JbnN0YW5jZSA9IF90aGF0Lmxlbmd0aCA9PT0gMSA/IF90aGF0IDogJHRoaXMuZGF0YVRhYmxlKCk7XG5cbiAgICAgIF9mbkNvbXBhdE9wdHMob0luaXQpO1xuXG4gICAgICBfZm5MYW5ndWFnZUNvbXBhdChvSW5pdC5vTGFuZ3VhZ2UpO1xuXG4gICAgICBpZiAob0luaXQuYUxlbmd0aE1lbnUgJiYgIW9Jbml0LmlEaXNwbGF5TGVuZ3RoKSB7XG4gICAgICAgIG9Jbml0LmlEaXNwbGF5TGVuZ3RoID0gJC5pc0FycmF5KG9Jbml0LmFMZW5ndGhNZW51WzBdKSA/IG9Jbml0LmFMZW5ndGhNZW51WzBdWzBdIDogb0luaXQuYUxlbmd0aE1lbnVbMF07XG4gICAgICB9XG5cbiAgICAgIG9Jbml0ID0gX2ZuRXh0ZW5kKCQuZXh0ZW5kKHRydWUsIHt9LCBkZWZhdWx0cyksIG9Jbml0KTtcblxuICAgICAgX2ZuTWFwKG9TZXR0aW5ncy5vRmVhdHVyZXMsIG9Jbml0LCBbXCJiUGFnaW5hdGVcIiwgXCJiTGVuZ3RoQ2hhbmdlXCIsIFwiYkZpbHRlclwiLCBcImJTb3J0XCIsIFwiYlNvcnRNdWx0aVwiLCBcImJJbmZvXCIsIFwiYlByb2Nlc3NpbmdcIiwgXCJiQXV0b1dpZHRoXCIsIFwiYlNvcnRDbGFzc2VzXCIsIFwiYlNlcnZlclNpZGVcIiwgXCJiRGVmZXJSZW5kZXJcIl0pO1xuXG4gICAgICBfZm5NYXAob1NldHRpbmdzLCBvSW5pdCwgW1wiYXNTdHJpcGVDbGFzc2VzXCIsIFwiYWpheFwiLCBcImZuU2VydmVyRGF0YVwiLCBcImZuRm9ybWF0TnVtYmVyXCIsIFwic1NlcnZlck1ldGhvZFwiLCBcImFhU29ydGluZ1wiLCBcImFhU29ydGluZ0ZpeGVkXCIsIFwiYUxlbmd0aE1lbnVcIiwgXCJzUGFnaW5hdGlvblR5cGVcIiwgXCJzQWpheFNvdXJjZVwiLCBcInNBamF4RGF0YVByb3BcIiwgXCJpU3RhdGVEdXJhdGlvblwiLCBcInNEb21cIiwgXCJiU29ydENlbGxzVG9wXCIsIFwiaVRhYkluZGV4XCIsIFwiZm5TdGF0ZUxvYWRDYWxsYmFja1wiLCBcImZuU3RhdGVTYXZlQ2FsbGJhY2tcIiwgXCJyZW5kZXJlclwiLCBcInNlYXJjaERlbGF5XCIsIFwicm93SWRcIiwgW1wiaUNvb2tpZUR1cmF0aW9uXCIsIFwiaVN0YXRlRHVyYXRpb25cIl0sIFtcIm9TZWFyY2hcIiwgXCJvUHJldmlvdXNTZWFyY2hcIl0sIFtcImFvU2VhcmNoQ29sc1wiLCBcImFvUHJlU2VhcmNoQ29sc1wiXSwgW1wiaURpc3BsYXlMZW5ndGhcIiwgXCJfaURpc3BsYXlMZW5ndGhcIl1dKTtcblxuICAgICAgX2ZuTWFwKG9TZXR0aW5ncy5vU2Nyb2xsLCBvSW5pdCwgW1tcInNTY3JvbGxYXCIsIFwic1hcIl0sIFtcInNTY3JvbGxYSW5uZXJcIiwgXCJzWElubmVyXCJdLCBbXCJzU2Nyb2xsWVwiLCBcInNZXCJdLCBbXCJiU2Nyb2xsQ29sbGFwc2VcIiwgXCJiQ29sbGFwc2VcIl1dKTtcblxuICAgICAgX2ZuTWFwKG9TZXR0aW5ncy5vTGFuZ3VhZ2UsIG9Jbml0LCBcImZuSW5mb0NhbGxiYWNrXCIpO1xuXG4gICAgICBfZm5DYWxsYmFja1JlZyhvU2V0dGluZ3MsICdhb0RyYXdDYWxsYmFjaycsIG9Jbml0LmZuRHJhd0NhbGxiYWNrLCAndXNlcicpO1xuXG4gICAgICBfZm5DYWxsYmFja1JlZyhvU2V0dGluZ3MsICdhb1NlcnZlclBhcmFtcycsIG9Jbml0LmZuU2VydmVyUGFyYW1zLCAndXNlcicpO1xuXG4gICAgICBfZm5DYWxsYmFja1JlZyhvU2V0dGluZ3MsICdhb1N0YXRlU2F2ZVBhcmFtcycsIG9Jbml0LmZuU3RhdGVTYXZlUGFyYW1zLCAndXNlcicpO1xuXG4gICAgICBfZm5DYWxsYmFja1JlZyhvU2V0dGluZ3MsICdhb1N0YXRlTG9hZFBhcmFtcycsIG9Jbml0LmZuU3RhdGVMb2FkUGFyYW1zLCAndXNlcicpO1xuXG4gICAgICBfZm5DYWxsYmFja1JlZyhvU2V0dGluZ3MsICdhb1N0YXRlTG9hZGVkJywgb0luaXQuZm5TdGF0ZUxvYWRlZCwgJ3VzZXInKTtcblxuICAgICAgX2ZuQ2FsbGJhY2tSZWcob1NldHRpbmdzLCAnYW9Sb3dDYWxsYmFjaycsIG9Jbml0LmZuUm93Q2FsbGJhY2ssICd1c2VyJyk7XG5cbiAgICAgIF9mbkNhbGxiYWNrUmVnKG9TZXR0aW5ncywgJ2FvUm93Q3JlYXRlZENhbGxiYWNrJywgb0luaXQuZm5DcmVhdGVkUm93LCAndXNlcicpO1xuXG4gICAgICBfZm5DYWxsYmFja1JlZyhvU2V0dGluZ3MsICdhb0hlYWRlckNhbGxiYWNrJywgb0luaXQuZm5IZWFkZXJDYWxsYmFjaywgJ3VzZXInKTtcblxuICAgICAgX2ZuQ2FsbGJhY2tSZWcob1NldHRpbmdzLCAnYW9Gb290ZXJDYWxsYmFjaycsIG9Jbml0LmZuRm9vdGVyQ2FsbGJhY2ssICd1c2VyJyk7XG5cbiAgICAgIF9mbkNhbGxiYWNrUmVnKG9TZXR0aW5ncywgJ2FvSW5pdENvbXBsZXRlJywgb0luaXQuZm5Jbml0Q29tcGxldGUsICd1c2VyJyk7XG5cbiAgICAgIF9mbkNhbGxiYWNrUmVnKG9TZXR0aW5ncywgJ2FvUHJlRHJhd0NhbGxiYWNrJywgb0luaXQuZm5QcmVEcmF3Q2FsbGJhY2ssICd1c2VyJyk7XG5cbiAgICAgIG9TZXR0aW5ncy5yb3dJZEZuID0gX2ZuR2V0T2JqZWN0RGF0YUZuKG9Jbml0LnJvd0lkKTtcblxuICAgICAgX2ZuQnJvd3NlckRldGVjdChvU2V0dGluZ3MpO1xuXG4gICAgICB2YXIgb0NsYXNzZXMgPSBvU2V0dGluZ3Mub0NsYXNzZXM7XG4gICAgICAkLmV4dGVuZChvQ2xhc3NlcywgRGF0YVRhYmxlLmV4dC5jbGFzc2VzLCBvSW5pdC5vQ2xhc3Nlcyk7XG4gICAgICAkdGhpcy5hZGRDbGFzcyhvQ2xhc3Nlcy5zVGFibGUpO1xuXG4gICAgICBpZiAob1NldHRpbmdzLmlJbml0RGlzcGxheVN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb1NldHRpbmdzLmlJbml0RGlzcGxheVN0YXJ0ID0gb0luaXQuaURpc3BsYXlTdGFydDtcbiAgICAgICAgb1NldHRpbmdzLl9pRGlzcGxheVN0YXJ0ID0gb0luaXQuaURpc3BsYXlTdGFydDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9Jbml0LmlEZWZlckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgb1NldHRpbmdzLmJEZWZlckxvYWRpbmcgPSB0cnVlO1xuICAgICAgICB2YXIgdG1wID0gJC5pc0FycmF5KG9Jbml0LmlEZWZlckxvYWRpbmcpO1xuICAgICAgICBvU2V0dGluZ3MuX2lSZWNvcmRzRGlzcGxheSA9IHRtcCA/IG9Jbml0LmlEZWZlckxvYWRpbmdbMF0gOiBvSW5pdC5pRGVmZXJMb2FkaW5nO1xuICAgICAgICBvU2V0dGluZ3MuX2lSZWNvcmRzVG90YWwgPSB0bXAgPyBvSW5pdC5pRGVmZXJMb2FkaW5nWzFdIDogb0luaXQuaURlZmVyTG9hZGluZztcbiAgICAgIH1cblxuICAgICAgdmFyIG9MYW5ndWFnZSA9IG9TZXR0aW5ncy5vTGFuZ3VhZ2U7XG4gICAgICAkLmV4dGVuZCh0cnVlLCBvTGFuZ3VhZ2UsIG9Jbml0Lm9MYW5ndWFnZSk7XG5cbiAgICAgIGlmIChvTGFuZ3VhZ2Uuc1VybCkge1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgdXJsOiBvTGFuZ3VhZ2Uuc1VybCxcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKGpzb24pIHtcbiAgICAgICAgICAgIF9mbkxhbmd1YWdlQ29tcGF0KGpzb24pO1xuXG4gICAgICAgICAgICBfZm5DYW1lbFRvSHVuZ2FyaWFuKGRlZmF1bHRzLm9MYW5ndWFnZSwganNvbik7XG5cbiAgICAgICAgICAgICQuZXh0ZW5kKHRydWUsIG9MYW5ndWFnZSwganNvbik7XG5cbiAgICAgICAgICAgIF9mbkluaXRpYWxpc2Uob1NldHRpbmdzKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICAgICAgICAgIF9mbkluaXRpYWxpc2Uob1NldHRpbmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBiSW5pdEhhbmRlZE9mZiA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChvSW5pdC5hc1N0cmlwZUNsYXNzZXMgPT09IG51bGwpIHtcbiAgICAgICAgb1NldHRpbmdzLmFzU3RyaXBlQ2xhc3NlcyA9IFtvQ2xhc3Nlcy5zU3RyaXBlT2RkLCBvQ2xhc3Nlcy5zU3RyaXBlRXZlbl07XG4gICAgICB9XG5cbiAgICAgIHZhciBzdHJpcGVDbGFzc2VzID0gb1NldHRpbmdzLmFzU3RyaXBlQ2xhc3NlcztcbiAgICAgIHZhciByb3dPbmUgPSAkdGhpcy5jaGlsZHJlbigndGJvZHknKS5maW5kKCd0cicpLmVxKDApO1xuXG4gICAgICBpZiAoJC5pbkFycmF5KHRydWUsICQubWFwKHN0cmlwZUNsYXNzZXMsIGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICByZXR1cm4gcm93T25lLmhhc0NsYXNzKGVsKTtcbiAgICAgIH0pKSAhPT0gLTEpIHtcbiAgICAgICAgJCgndGJvZHkgdHInLCB0aGlzKS5yZW1vdmVDbGFzcyhzdHJpcGVDbGFzc2VzLmpvaW4oJyAnKSk7XG4gICAgICAgIG9TZXR0aW5ncy5hc0Rlc3Ryb3lTdHJpcGVzID0gc3RyaXBlQ2xhc3Nlcy5zbGljZSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYW5UaHMgPSBbXTtcbiAgICAgIHZhciBhb0NvbHVtbnNJbml0O1xuICAgICAgdmFyIG5UaGVhZCA9IHRoaXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RoZWFkJyk7XG5cbiAgICAgIGlmIChuVGhlYWQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIF9mbkRldGVjdEhlYWRlcihvU2V0dGluZ3MuYW9IZWFkZXIsIG5UaGVhZFswXSk7XG5cbiAgICAgICAgYW5UaHMgPSBfZm5HZXRVbmlxdWVUaHMob1NldHRpbmdzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9Jbml0LmFvQ29sdW1ucyA9PT0gbnVsbCkge1xuICAgICAgICBhb0NvbHVtbnNJbml0ID0gW107XG5cbiAgICAgICAgZm9yIChpID0gMCwgaUxlbiA9IGFuVGhzLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgICAgIGFvQ29sdW1uc0luaXQucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYW9Db2x1bW5zSW5pdCA9IG9Jbml0LmFvQ29sdW1ucztcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMCwgaUxlbiA9IGFvQ29sdW1uc0luaXQubGVuZ3RoOyBpIDwgaUxlbjsgaSsrKSB7XG4gICAgICAgIF9mbkFkZENvbHVtbihvU2V0dGluZ3MsIGFuVGhzID8gYW5UaHNbaV0gOiBudWxsKTtcbiAgICAgIH1cblxuICAgICAgX2ZuQXBwbHlDb2x1bW5EZWZzKG9TZXR0aW5ncywgb0luaXQuYW9Db2x1bW5EZWZzLCBhb0NvbHVtbnNJbml0LCBmdW5jdGlvbiAoaUNvbCwgb0RlZikge1xuICAgICAgICBfZm5Db2x1bW5PcHRpb25zKG9TZXR0aW5ncywgaUNvbCwgb0RlZik7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHJvd09uZS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGEgPSBmdW5jdGlvbiBhKGNlbGwsIG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gY2VsbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIG5hbWUpICE9PSBudWxsID8gbmFtZSA6IG51bGw7XG4gICAgICAgIH07XG5cbiAgICAgICAgJChyb3dPbmVbMF0pLmNoaWxkcmVuKCd0aCwgdGQnKS5lYWNoKGZ1bmN0aW9uIChpLCBjZWxsKSB7XG4gICAgICAgICAgdmFyIGNvbCA9IG9TZXR0aW5ncy5hb0NvbHVtbnNbaV07XG5cbiAgICAgICAgICBpZiAoY29sLm1EYXRhID09PSBpKSB7XG4gICAgICAgICAgICB2YXIgc29ydCA9IGEoY2VsbCwgJ3NvcnQnKSB8fCBhKGNlbGwsICdvcmRlcicpO1xuICAgICAgICAgICAgdmFyIGZpbHRlciA9IGEoY2VsbCwgJ2ZpbHRlcicpIHx8IGEoY2VsbCwgJ3NlYXJjaCcpO1xuXG4gICAgICAgICAgICBpZiAoc29ydCAhPT0gbnVsbCB8fCBmaWx0ZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgY29sLm1EYXRhID0ge1xuICAgICAgICAgICAgICAgIF86IGkgKyAnLmRpc3BsYXknLFxuICAgICAgICAgICAgICAgIHNvcnQ6IHNvcnQgIT09IG51bGwgPyBpICsgJy5AZGF0YS0nICsgc29ydCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB0eXBlOiBzb3J0ICE9PSBudWxsID8gaSArICcuQGRhdGEtJyArIHNvcnQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmaWx0ZXIgIT09IG51bGwgPyBpICsgJy5AZGF0YS0nICsgZmlsdGVyIDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgX2ZuQ29sdW1uT3B0aW9ucyhvU2V0dGluZ3MsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBmZWF0dXJlcyA9IG9TZXR0aW5ncy5vRmVhdHVyZXM7XG5cbiAgICAgIHZhciBsb2FkZWRJbml0ID0gZnVuY3Rpb24gbG9hZGVkSW5pdCgpIHtcbiAgICAgICAgaWYgKG9Jbml0LmFhU29ydGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHNvcnRpbmcgPSBvU2V0dGluZ3MuYWFTb3J0aW5nO1xuXG4gICAgICAgICAgZm9yIChpID0gMCwgaUxlbiA9IHNvcnRpbmcubGVuZ3RoOyBpIDwgaUxlbjsgaSsrKSB7XG4gICAgICAgICAgICBzb3J0aW5nW2ldWzFdID0gb1NldHRpbmdzLmFvQ29sdW1uc1tpXS5hc1NvcnRpbmdbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX2ZuU29ydGluZ0NsYXNzZXMob1NldHRpbmdzKTtcblxuICAgICAgICBpZiAoZmVhdHVyZXMuYlNvcnQpIHtcbiAgICAgICAgICBfZm5DYWxsYmFja1JlZyhvU2V0dGluZ3MsICdhb0RyYXdDYWxsYmFjaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvU2V0dGluZ3MuYlNvcnRlZCkge1xuICAgICAgICAgICAgICB2YXIgYVNvcnQgPSBfZm5Tb3J0RmxhdHRlbihvU2V0dGluZ3MpO1xuXG4gICAgICAgICAgICAgIHZhciBzb3J0ZWRDb2x1bW5zID0ge307XG4gICAgICAgICAgICAgICQuZWFjaChhU29ydCwgZnVuY3Rpb24gKGksIHZhbCkge1xuICAgICAgICAgICAgICAgIHNvcnRlZENvbHVtbnNbdmFsLnNyY10gPSB2YWwuZGlyO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBfZm5DYWxsYmFja0ZpcmUob1NldHRpbmdzLCBudWxsLCAnb3JkZXInLCBbb1NldHRpbmdzLCBhU29ydCwgc29ydGVkQ29sdW1uc10pO1xuXG4gICAgICAgICAgICAgIF9mblNvcnRBcmlhKG9TZXR0aW5ncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBfZm5DYWxsYmFja1JlZyhvU2V0dGluZ3MsICdhb0RyYXdDYWxsYmFjaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAob1NldHRpbmdzLmJTb3J0ZWQgfHwgX2ZuRGF0YVNvdXJjZShvU2V0dGluZ3MpID09PSAnc3NwJyB8fCBmZWF0dXJlcy5iRGVmZXJSZW5kZXIpIHtcbiAgICAgICAgICAgIF9mblNvcnRpbmdDbGFzc2VzKG9TZXR0aW5ncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAnc2MnKTtcblxuICAgICAgICB2YXIgY2FwdGlvbnMgPSAkdGhpcy5jaGlsZHJlbignY2FwdGlvbicpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuX2NhcHRpb25TaWRlID0gJCh0aGlzKS5jc3MoJ2NhcHRpb24tc2lkZScpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHRoZWFkID0gJHRoaXMuY2hpbGRyZW4oJ3RoZWFkJyk7XG5cbiAgICAgICAgaWYgKHRoZWFkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoZWFkID0gJCgnPHRoZWFkLz4nKS5hcHBlbmRUbygkdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBvU2V0dGluZ3MublRIZWFkID0gdGhlYWRbMF07XG4gICAgICAgIHZhciB0Ym9keSA9ICR0aGlzLmNoaWxkcmVuKCd0Ym9keScpO1xuXG4gICAgICAgIGlmICh0Ym9keS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0Ym9keSA9ICQoJzx0Ym9keS8+JykuYXBwZW5kVG8oJHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgb1NldHRpbmdzLm5UQm9keSA9IHRib2R5WzBdO1xuICAgICAgICB2YXIgdGZvb3QgPSAkdGhpcy5jaGlsZHJlbigndGZvb3QnKTtcblxuICAgICAgICBpZiAodGZvb3QubGVuZ3RoID09PSAwICYmIGNhcHRpb25zLmxlbmd0aCA+IDAgJiYgKG9TZXR0aW5ncy5vU2Nyb2xsLnNYICE9PSBcIlwiIHx8IG9TZXR0aW5ncy5vU2Nyb2xsLnNZICE9PSBcIlwiKSkge1xuICAgICAgICAgIHRmb290ID0gJCgnPHRmb290Lz4nKS5hcHBlbmRUbygkdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGZvb3QubGVuZ3RoID09PSAwIHx8IHRmb290LmNoaWxkcmVuKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJHRoaXMuYWRkQ2xhc3Mob0NsYXNzZXMuc05vRm9vdGVyKTtcbiAgICAgICAgfSBlbHNlIGlmICh0Zm9vdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgb1NldHRpbmdzLm5URm9vdCA9IHRmb290WzBdO1xuXG4gICAgICAgICAgX2ZuRGV0ZWN0SGVhZGVyKG9TZXR0aW5ncy5hb0Zvb3Rlciwgb1NldHRpbmdzLm5URm9vdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob0luaXQuYWFEYXRhKSB7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IG9Jbml0LmFhRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgX2ZuQWRkRGF0YShvU2V0dGluZ3MsIG9Jbml0LmFhRGF0YVtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG9TZXR0aW5ncy5iRGVmZXJMb2FkaW5nIHx8IF9mbkRhdGFTb3VyY2Uob1NldHRpbmdzKSA9PSAnZG9tJykge1xuICAgICAgICAgIF9mbkFkZFRyKG9TZXR0aW5ncywgJChvU2V0dGluZ3MublRCb2R5KS5jaGlsZHJlbigndHInKSk7XG4gICAgICAgIH1cblxuICAgICAgICBvU2V0dGluZ3MuYWlEaXNwbGF5ID0gb1NldHRpbmdzLmFpRGlzcGxheU1hc3Rlci5zbGljZSgpO1xuICAgICAgICBvU2V0dGluZ3MuYkluaXRpYWxpc2VkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoYkluaXRIYW5kZWRPZmYgPT09IGZhbHNlKSB7XG4gICAgICAgICAgX2ZuSW5pdGlhbGlzZShvU2V0dGluZ3MpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAob0luaXQuYlN0YXRlU2F2ZSkge1xuICAgICAgICBmZWF0dXJlcy5iU3RhdGVTYXZlID0gdHJ1ZTtcblxuICAgICAgICBfZm5DYWxsYmFja1JlZyhvU2V0dGluZ3MsICdhb0RyYXdDYWxsYmFjaycsIF9mblNhdmVTdGF0ZSwgJ3N0YXRlX3NhdmUnKTtcblxuICAgICAgICBfZm5Mb2FkU3RhdGUob1NldHRpbmdzLCBvSW5pdCwgbG9hZGVkSW5pdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkZWRJbml0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX3RoYXQgPSBudWxsO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBfZXh0O1xuXG4gIHZhciBfQXBpMjtcblxuICB2YXIgX2FwaV9yZWdpc3RlcjtcblxuICB2YXIgX2FwaV9yZWdpc3RlclBsdXJhbDtcblxuICB2YXIgX3JlX2RpYyA9IHt9O1xuICB2YXIgX3JlX25ld19saW5lcyA9IC9bXFxyXFxuXS9nO1xuICB2YXIgX3JlX2h0bWwgPSAvPC4qPz4vZztcbiAgdmFyIF9yZV9kYXRlID0gL15cXGR7Miw0fVtcXC5cXC9cXC1dXFxkezEsMn1bXFwuXFwvXFwtXVxcZHsxLDJ9KFtUIF17MX1cXGR7MSwyfVs6XFwuXVxcZHsyfShbXFwuOl1cXGR7Mn0pPyk/JC87XG5cbiAgdmFyIF9yZV9lc2NhcGVfcmVnZXggPSBuZXcgUmVnRXhwKCcoXFxcXCcgKyBbJy8nLCAnLicsICcqJywgJysnLCAnPycsICd8JywgJygnLCAnKScsICdbJywgJ10nLCAneycsICd9JywgJ1xcXFwnLCAnJCcsICdeJywgJy0nXS5qb2luKCd8XFxcXCcpICsgJyknLCAnZycpO1xuXG4gIHZhciBfcmVfZm9ybWF0dGVkX251bWVyaWMgPSAvWycsJMKj4oKswqUlXFx1MjAwOVxcdTIwMkZcXHUyMEJEXFx1MjBhOVxcdTIwQkFyZmvJg86eXS9naTtcblxuICB2YXIgX2VtcHR5ID0gZnVuY3Rpb24gX2VtcHR5KGQpIHtcbiAgICByZXR1cm4gIWQgfHwgZCA9PT0gdHJ1ZSB8fCBkID09PSAnLScgPyB0cnVlIDogZmFsc2U7XG4gIH07XG5cbiAgdmFyIF9pbnRWYWwgPSBmdW5jdGlvbiBfaW50VmFsKHMpIHtcbiAgICB2YXIgaW50ZWdlciA9IHBhcnNlSW50KHMsIDEwKTtcbiAgICByZXR1cm4gIWlzTmFOKGludGVnZXIpICYmIGlzRmluaXRlKHMpID8gaW50ZWdlciA6IG51bGw7XG4gIH07XG5cbiAgdmFyIF9udW1Ub0RlY2ltYWwgPSBmdW5jdGlvbiBfbnVtVG9EZWNpbWFsKG51bSwgZGVjaW1hbFBvaW50KSB7XG4gICAgaWYgKCFfcmVfZGljW2RlY2ltYWxQb2ludF0pIHtcbiAgICAgIF9yZV9kaWNbZGVjaW1hbFBvaW50XSA9IG5ldyBSZWdFeHAoX2ZuRXNjYXBlUmVnZXgoZGVjaW1hbFBvaW50KSwgJ2cnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZW9mIG51bSA9PT0gJ3N0cmluZycgJiYgZGVjaW1hbFBvaW50ICE9PSAnLicgPyBudW0ucmVwbGFjZSgvXFwuL2csICcnKS5yZXBsYWNlKF9yZV9kaWNbZGVjaW1hbFBvaW50XSwgJy4nKSA6IG51bTtcbiAgfTtcblxuICB2YXIgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKGQsIGRlY2ltYWxQb2ludCwgZm9ybWF0dGVkKSB7XG4gICAgdmFyIHN0clR5cGUgPSB0eXBlb2YgZCA9PT0gJ3N0cmluZyc7XG5cbiAgICBpZiAoX2VtcHR5KGQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoZGVjaW1hbFBvaW50ICYmIHN0clR5cGUpIHtcbiAgICAgIGQgPSBfbnVtVG9EZWNpbWFsKGQsIGRlY2ltYWxQb2ludCk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdHRlZCAmJiBzdHJUeXBlKSB7XG4gICAgICBkID0gZC5yZXBsYWNlKF9yZV9mb3JtYXR0ZWRfbnVtZXJpYywgJycpO1xuICAgIH1cblxuICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChkKSkgJiYgaXNGaW5pdGUoZCk7XG4gIH07XG5cbiAgdmFyIF9pc0h0bWwgPSBmdW5jdGlvbiBfaXNIdG1sKGQpIHtcbiAgICByZXR1cm4gX2VtcHR5KGQpIHx8IHR5cGVvZiBkID09PSAnc3RyaW5nJztcbiAgfTtcblxuICB2YXIgX2h0bWxOdW1lcmljID0gZnVuY3Rpb24gX2h0bWxOdW1lcmljKGQsIGRlY2ltYWxQb2ludCwgZm9ybWF0dGVkKSB7XG4gICAgaWYgKF9lbXB0eShkKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGh0bWwgPSBfaXNIdG1sKGQpO1xuXG4gICAgcmV0dXJuICFodG1sID8gbnVsbCA6IF9pc051bWJlcihfc3RyaXBIdG1sKGQpLCBkZWNpbWFsUG9pbnQsIGZvcm1hdHRlZCkgPyB0cnVlIDogbnVsbDtcbiAgfTtcblxuICB2YXIgX3BsdWNrID0gZnVuY3Rpb24gX3BsdWNrKGEsIHByb3AsIHByb3AyKSB7XG4gICAgdmFyIG91dCA9IFtdO1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgaWVuID0gYS5sZW5ndGg7XG5cbiAgICBpZiAocHJvcDIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZm9yICg7IGkgPCBpZW47IGkrKykge1xuICAgICAgICBpZiAoYVtpXSAmJiBhW2ldW3Byb3BdKSB7XG4gICAgICAgICAgb3V0LnB1c2goYVtpXVtwcm9wXVtwcm9wMl0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgICAgaWYgKGFbaV0pIHtcbiAgICAgICAgICBvdXQucHVzaChhW2ldW3Byb3BdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgdmFyIF9wbHVja19vcmRlciA9IGZ1bmN0aW9uIF9wbHVja19vcmRlcihhLCBvcmRlciwgcHJvcCwgcHJvcDIpIHtcbiAgICB2YXIgb3V0ID0gW107XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBpZW4gPSBvcmRlci5sZW5ndGg7XG5cbiAgICBpZiAocHJvcDIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZm9yICg7IGkgPCBpZW47IGkrKykge1xuICAgICAgICBpZiAoYVtvcmRlcltpXV1bcHJvcF0pIHtcbiAgICAgICAgICBvdXQucHVzaChhW29yZGVyW2ldXVtwcm9wXVtwcm9wMl0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgICAgb3V0LnB1c2goYVtvcmRlcltpXV1bcHJvcF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgdmFyIF9yYW5nZSA9IGZ1bmN0aW9uIF9yYW5nZShsZW4sIHN0YXJ0KSB7XG4gICAgdmFyIG91dCA9IFtdO1xuICAgIHZhciBlbmQ7XG5cbiAgICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc3RhcnQgPSAwO1xuICAgICAgZW5kID0gbGVuO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmQgPSBzdGFydDtcbiAgICAgIHN0YXJ0ID0gbGVuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICBvdXQucHVzaChpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIHZhciBfcmVtb3ZlRW1wdHkgPSBmdW5jdGlvbiBfcmVtb3ZlRW1wdHkoYSkge1xuICAgIHZhciBvdXQgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpZW4gPSBhLmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICBpZiAoYVtpXSkge1xuICAgICAgICBvdXQucHVzaChhW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIHZhciBfc3RyaXBIdG1sID0gZnVuY3Rpb24gX3N0cmlwSHRtbChkKSB7XG4gICAgcmV0dXJuIGQucmVwbGFjZShfcmVfaHRtbCwgJycpO1xuICB9O1xuXG4gIHZhciBfYXJlQWxsVW5pcXVlID0gZnVuY3Rpb24gX2FyZUFsbFVuaXF1ZShzcmMpIHtcbiAgICBpZiAoc3JjLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBzb3J0ZWQgPSBzcmMuc2xpY2UoKS5zb3J0KCk7XG4gICAgdmFyIGxhc3QgPSBzb3J0ZWRbMF07XG5cbiAgICBmb3IgKHZhciBpID0gMSwgaWVuID0gc29ydGVkLmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICBpZiAoc29ydGVkW2ldID09PSBsYXN0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgbGFzdCA9IHNvcnRlZFtpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICB2YXIgX3VuaXF1ZSA9IGZ1bmN0aW9uIF91bmlxdWUoc3JjKSB7XG4gICAgaWYgKF9hcmVBbGxVbmlxdWUoc3JjKSkge1xuICAgICAgcmV0dXJuIHNyYy5zbGljZSgpO1xuICAgIH1cblxuICAgIHZhciBvdXQgPSBbXSxcbiAgICAgICAgdmFsLFxuICAgICAgICBpLFxuICAgICAgICBpZW4gPSBzcmMubGVuZ3RoLFxuICAgICAgICBqLFxuICAgICAgICBrID0gMDtcblxuICAgIGFnYWluOiBmb3IgKGkgPSAwOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgIHZhbCA9IHNyY1tpXTtcblxuICAgICAgZm9yIChqID0gMDsgaiA8IGs7IGorKykge1xuICAgICAgICBpZiAob3V0W2pdID09PSB2YWwpIHtcbiAgICAgICAgICBjb250aW51ZSBhZ2FpbjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvdXQucHVzaCh2YWwpO1xuICAgICAgaysrO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgRGF0YVRhYmxlLnV0aWwgPSB7XG4gICAgdGhyb3R0bGU6IGZ1bmN0aW9uIHRocm90dGxlKGZuLCBmcmVxKSB7XG4gICAgICB2YXIgZnJlcXVlbmN5ID0gZnJlcSAhPT0gdW5kZWZpbmVkID8gZnJlcSA6IDIwMCxcbiAgICAgICAgICBsYXN0LFxuICAgICAgICAgIHRpbWVyO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgbm93ID0gK25ldyBEYXRlKCksXG4gICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgICAgIGlmIChsYXN0ICYmIG5vdyA8IGxhc3QgKyBmcmVxdWVuY3kpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgYXJncyk7XG4gICAgICAgICAgfSwgZnJlcXVlbmN5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0ID0gbm93O1xuICAgICAgICAgIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG4gICAgZXNjYXBlUmVnZXg6IGZ1bmN0aW9uIGVzY2FwZVJlZ2V4KHZhbCkge1xuICAgICAgcmV0dXJuIHZhbC5yZXBsYWNlKF9yZV9lc2NhcGVfcmVnZXgsICdcXFxcJDEnKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gX2ZuSHVuZ2FyaWFuTWFwKG8pIHtcbiAgICB2YXIgaHVuZ2FyaWFuID0gJ2EgYWEgYWkgYW8gYXMgYiBmbiBpIG0gbyBzICcsXG4gICAgICAgIG1hdGNoLFxuICAgICAgICBuZXdLZXksXG4gICAgICAgIG1hcCA9IHt9O1xuICAgICQuZWFjaChvLCBmdW5jdGlvbiAoa2V5LCB2YWwpIHtcbiAgICAgIG1hdGNoID0ga2V5Lm1hdGNoKC9eKFteQS1aXSs/KShbQS1aXSkvKTtcblxuICAgICAgaWYgKG1hdGNoICYmIGh1bmdhcmlhbi5pbmRleE9mKG1hdGNoWzFdICsgJyAnKSAhPT0gLTEpIHtcbiAgICAgICAgbmV3S2V5ID0ga2V5LnJlcGxhY2UobWF0Y2hbMF0sIG1hdGNoWzJdLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICBtYXBbbmV3S2V5XSA9IGtleTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0gPT09ICdvJykge1xuICAgICAgICAgIF9mbkh1bmdhcmlhbk1hcChvW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgby5faHVuZ2FyaWFuTWFwID0gbWFwO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuQ2FtZWxUb0h1bmdhcmlhbihzcmMsIHVzZXIsIGZvcmNlKSB7XG4gICAgaWYgKCFzcmMuX2h1bmdhcmlhbk1hcCkge1xuICAgICAgX2ZuSHVuZ2FyaWFuTWFwKHNyYyk7XG4gICAgfVxuXG4gICAgdmFyIGh1bmdhcmlhbktleTtcbiAgICAkLmVhY2godXNlciwgZnVuY3Rpb24gKGtleSwgdmFsKSB7XG4gICAgICBodW5nYXJpYW5LZXkgPSBzcmMuX2h1bmdhcmlhbk1hcFtrZXldO1xuXG4gICAgICBpZiAoaHVuZ2FyaWFuS2V5ICE9PSB1bmRlZmluZWQgJiYgKGZvcmNlIHx8IHVzZXJbaHVuZ2FyaWFuS2V5XSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBpZiAoaHVuZ2FyaWFuS2V5LmNoYXJBdCgwKSA9PT0gJ28nKSB7XG4gICAgICAgICAgaWYgKCF1c2VyW2h1bmdhcmlhbktleV0pIHtcbiAgICAgICAgICAgIHVzZXJbaHVuZ2FyaWFuS2V5XSA9IHt9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgICQuZXh0ZW5kKHRydWUsIHVzZXJbaHVuZ2FyaWFuS2V5XSwgdXNlcltrZXldKTtcblxuICAgICAgICAgIF9mbkNhbWVsVG9IdW5nYXJpYW4oc3JjW2h1bmdhcmlhbktleV0sIHVzZXJbaHVuZ2FyaWFuS2V5XSwgZm9yY2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVzZXJbaHVuZ2FyaWFuS2V5XSA9IHVzZXJba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuTGFuZ3VhZ2VDb21wYXQobGFuZykge1xuICAgIHZhciBkZWZhdWx0cyA9IERhdGFUYWJsZS5kZWZhdWx0cy5vTGFuZ3VhZ2U7XG4gICAgdmFyIGRlZmF1bHREZWNpbWFsID0gZGVmYXVsdHMuc0RlY2ltYWw7XG5cbiAgICBpZiAoZGVmYXVsdERlY2ltYWwpIHtcbiAgICAgIF9hZGROdW1lcmljU29ydChkZWZhdWx0RGVjaW1hbCk7XG4gICAgfVxuXG4gICAgaWYgKGxhbmcpIHtcbiAgICAgIHZhciB6ZXJvUmVjb3JkcyA9IGxhbmcuc1plcm9SZWNvcmRzO1xuXG4gICAgICBpZiAoIWxhbmcuc0VtcHR5VGFibGUgJiYgemVyb1JlY29yZHMgJiYgZGVmYXVsdHMuc0VtcHR5VGFibGUgPT09IFwiTm8gZGF0YSBhdmFpbGFibGUgaW4gdGFibGVcIikge1xuICAgICAgICBfZm5NYXAobGFuZywgbGFuZywgJ3NaZXJvUmVjb3JkcycsICdzRW1wdHlUYWJsZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWxhbmcuc0xvYWRpbmdSZWNvcmRzICYmIHplcm9SZWNvcmRzICYmIGRlZmF1bHRzLnNMb2FkaW5nUmVjb3JkcyA9PT0gXCJMb2FkaW5nLi4uXCIpIHtcbiAgICAgICAgX2ZuTWFwKGxhbmcsIGxhbmcsICdzWmVyb1JlY29yZHMnLCAnc0xvYWRpbmdSZWNvcmRzJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsYW5nLnNJbmZvVGhvdXNhbmRzKSB7XG4gICAgICAgIGxhbmcuc1Rob3VzYW5kcyA9IGxhbmcuc0luZm9UaG91c2FuZHM7XG4gICAgICB9XG5cbiAgICAgIHZhciBkZWNpbWFsID0gbGFuZy5zRGVjaW1hbDtcblxuICAgICAgaWYgKGRlY2ltYWwgJiYgZGVmYXVsdERlY2ltYWwgIT09IGRlY2ltYWwpIHtcbiAgICAgICAgX2FkZE51bWVyaWNTb3J0KGRlY2ltYWwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBfZm5Db21wYXRNYXAgPSBmdW5jdGlvbiBfZm5Db21wYXRNYXAobywga25ldywgb2xkKSB7XG4gICAgaWYgKG9ba25ld10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgb1tvbGRdID0gb1trbmV3XTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gX2ZuQ29tcGF0T3B0cyhpbml0KSB7XG4gICAgX2ZuQ29tcGF0TWFwKGluaXQsICdvcmRlcmluZycsICdiU29ydCcpO1xuXG4gICAgX2ZuQ29tcGF0TWFwKGluaXQsICdvcmRlck11bHRpJywgJ2JTb3J0TXVsdGknKTtcblxuICAgIF9mbkNvbXBhdE1hcChpbml0LCAnb3JkZXJDbGFzc2VzJywgJ2JTb3J0Q2xhc3NlcycpO1xuXG4gICAgX2ZuQ29tcGF0TWFwKGluaXQsICdvcmRlckNlbGxzVG9wJywgJ2JTb3J0Q2VsbHNUb3AnKTtcblxuICAgIF9mbkNvbXBhdE1hcChpbml0LCAnb3JkZXInLCAnYWFTb3J0aW5nJyk7XG5cbiAgICBfZm5Db21wYXRNYXAoaW5pdCwgJ29yZGVyRml4ZWQnLCAnYWFTb3J0aW5nRml4ZWQnKTtcblxuICAgIF9mbkNvbXBhdE1hcChpbml0LCAncGFnaW5nJywgJ2JQYWdpbmF0ZScpO1xuXG4gICAgX2ZuQ29tcGF0TWFwKGluaXQsICdwYWdpbmdUeXBlJywgJ3NQYWdpbmF0aW9uVHlwZScpO1xuXG4gICAgX2ZuQ29tcGF0TWFwKGluaXQsICdwYWdlTGVuZ3RoJywgJ2lEaXNwbGF5TGVuZ3RoJyk7XG5cbiAgICBfZm5Db21wYXRNYXAoaW5pdCwgJ3NlYXJjaGluZycsICdiRmlsdGVyJyk7XG5cbiAgICBpZiAodHlwZW9mIGluaXQuc1Njcm9sbFggPT09ICdib29sZWFuJykge1xuICAgICAgaW5pdC5zU2Nyb2xsWCA9IGluaXQuc1Njcm9sbFggPyAnMTAwJScgOiAnJztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGluaXQuc2Nyb2xsWCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICBpbml0LnNjcm9sbFggPSBpbml0LnNjcm9sbFggPyAnMTAwJScgOiAnJztcbiAgICB9XG5cbiAgICB2YXIgc2VhcmNoQ29scyA9IGluaXQuYW9TZWFyY2hDb2xzO1xuXG4gICAgaWYgKHNlYXJjaENvbHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpZW4gPSBzZWFyY2hDb2xzLmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICAgIGlmIChzZWFyY2hDb2xzW2ldKSB7XG4gICAgICAgICAgX2ZuQ2FtZWxUb0h1bmdhcmlhbihEYXRhVGFibGUubW9kZWxzLm9TZWFyY2gsIHNlYXJjaENvbHNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2ZuQ29tcGF0Q29scyhpbml0KSB7XG4gICAgX2ZuQ29tcGF0TWFwKGluaXQsICdvcmRlcmFibGUnLCAnYlNvcnRhYmxlJyk7XG5cbiAgICBfZm5Db21wYXRNYXAoaW5pdCwgJ29yZGVyRGF0YScsICdhRGF0YVNvcnQnKTtcblxuICAgIF9mbkNvbXBhdE1hcChpbml0LCAnb3JkZXJTZXF1ZW5jZScsICdhc1NvcnRpbmcnKTtcblxuICAgIF9mbkNvbXBhdE1hcChpbml0LCAnb3JkZXJEYXRhVHlwZScsICdzb3J0RGF0YVR5cGUnKTtcblxuICAgIHZhciBkYXRhU29ydCA9IGluaXQuYURhdGFTb3J0O1xuXG4gICAgaWYgKHR5cGVvZiBkYXRhU29ydCA9PT0gJ251bWJlcicgJiYgISQuaXNBcnJheShkYXRhU29ydCkpIHtcbiAgICAgIGluaXQuYURhdGFTb3J0ID0gW2RhdGFTb3J0XTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZm5Ccm93c2VyRGV0ZWN0KHNldHRpbmdzKSB7XG4gICAgaWYgKCFEYXRhVGFibGUuX19icm93c2VyKSB7XG4gICAgICB2YXIgYnJvd3NlciA9IHt9O1xuICAgICAgRGF0YVRhYmxlLl9fYnJvd3NlciA9IGJyb3dzZXI7XG4gICAgICB2YXIgbiA9ICQoJzxkaXYvPicpLmNzcyh7XG4gICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6ICQod2luZG93KS5zY3JvbGxMZWZ0KCkgKiAtMSxcbiAgICAgICAgaGVpZ2h0OiAxLFxuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICB9KS5hcHBlbmQoJCgnPGRpdi8+JykuY3NzKHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogMSxcbiAgICAgICAgbGVmdDogMSxcbiAgICAgICAgd2lkdGg6IDEwMCxcbiAgICAgICAgb3ZlcmZsb3c6ICdzY3JvbGwnXG4gICAgICB9KS5hcHBlbmQoJCgnPGRpdi8+JykuY3NzKHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAxMFxuICAgICAgfSkpKS5hcHBlbmRUbygnYm9keScpO1xuICAgICAgdmFyIG91dGVyID0gbi5jaGlsZHJlbigpO1xuICAgICAgdmFyIGlubmVyID0gb3V0ZXIuY2hpbGRyZW4oKTtcbiAgICAgIGJyb3dzZXIuYmFyV2lkdGggPSBvdXRlclswXS5vZmZzZXRXaWR0aCAtIG91dGVyWzBdLmNsaWVudFdpZHRoO1xuICAgICAgYnJvd3Nlci5iU2Nyb2xsT3ZlcnNpemUgPSBpbm5lclswXS5vZmZzZXRXaWR0aCA9PT0gMTAwICYmIG91dGVyWzBdLmNsaWVudFdpZHRoICE9PSAxMDA7XG4gICAgICBicm93c2VyLmJTY3JvbGxiYXJMZWZ0ID0gTWF0aC5yb3VuZChpbm5lci5vZmZzZXQoKS5sZWZ0KSAhPT0gMTtcbiAgICAgIGJyb3dzZXIuYkJvdW5kaW5nID0gblswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCA/IHRydWUgOiBmYWxzZTtcbiAgICAgIG4ucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgJC5leHRlbmQoc2V0dGluZ3Mub0Jyb3dzZXIsIERhdGFUYWJsZS5fX2Jyb3dzZXIpO1xuICAgIHNldHRpbmdzLm9TY3JvbGwuaUJhcldpZHRoID0gRGF0YVRhYmxlLl9fYnJvd3Nlci5iYXJXaWR0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mblJlZHVjZSh0aGF0LCBmbiwgaW5pdCwgc3RhcnQsIGVuZCwgaW5jKSB7XG4gICAgdmFyIGkgPSBzdGFydCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGlzU2V0ID0gZmFsc2U7XG5cbiAgICBpZiAoaW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWx1ZSA9IGluaXQ7XG4gICAgICBpc1NldCA9IHRydWU7XG4gICAgfVxuXG4gICAgd2hpbGUgKGkgIT09IGVuZCkge1xuICAgICAgaWYgKCF0aGF0Lmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IGlzU2V0ID8gZm4odmFsdWUsIHRoYXRbaV0sIGksIHRoYXQpIDogdGhhdFtpXTtcbiAgICAgIGlzU2V0ID0gdHJ1ZTtcbiAgICAgIGkgKz0gaW5jO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mbkFkZENvbHVtbihvU2V0dGluZ3MsIG5UaCkge1xuICAgIHZhciBvRGVmYXVsdHMgPSBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uO1xuICAgIHZhciBpQ29sID0gb1NldHRpbmdzLmFvQ29sdW1ucy5sZW5ndGg7XG4gICAgdmFyIG9Db2wgPSAkLmV4dGVuZCh7fSwgRGF0YVRhYmxlLm1vZGVscy5vQ29sdW1uLCBvRGVmYXVsdHMsIHtcbiAgICAgIFwiblRoXCI6IG5UaCA/IG5UaCA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyksXG4gICAgICBcInNUaXRsZVwiOiBvRGVmYXVsdHMuc1RpdGxlID8gb0RlZmF1bHRzLnNUaXRsZSA6IG5UaCA/IG5UaC5pbm5lckhUTUwgOiAnJyxcbiAgICAgIFwiYURhdGFTb3J0XCI6IG9EZWZhdWx0cy5hRGF0YVNvcnQgPyBvRGVmYXVsdHMuYURhdGFTb3J0IDogW2lDb2xdLFxuICAgICAgXCJtRGF0YVwiOiBvRGVmYXVsdHMubURhdGEgPyBvRGVmYXVsdHMubURhdGEgOiBpQ29sLFxuICAgICAgaWR4OiBpQ29sXG4gICAgfSk7XG4gICAgb1NldHRpbmdzLmFvQ29sdW1ucy5wdXNoKG9Db2wpO1xuICAgIHZhciBzZWFyY2hDb2xzID0gb1NldHRpbmdzLmFvUHJlU2VhcmNoQ29scztcbiAgICBzZWFyY2hDb2xzW2lDb2xdID0gJC5leHRlbmQoe30sIERhdGFUYWJsZS5tb2RlbHMub1NlYXJjaCwgc2VhcmNoQ29sc1tpQ29sXSk7XG5cbiAgICBfZm5Db2x1bW5PcHRpb25zKG9TZXR0aW5ncywgaUNvbCwgJChuVGgpLmRhdGEoKSk7XG4gIH1cblxuICBmdW5jdGlvbiBfZm5Db2x1bW5PcHRpb25zKG9TZXR0aW5ncywgaUNvbCwgb09wdGlvbnMpIHtcbiAgICB2YXIgb0NvbCA9IG9TZXR0aW5ncy5hb0NvbHVtbnNbaUNvbF07XG4gICAgdmFyIG9DbGFzc2VzID0gb1NldHRpbmdzLm9DbGFzc2VzO1xuICAgIHZhciB0aCA9ICQob0NvbC5uVGgpO1xuXG4gICAgaWYgKCFvQ29sLnNXaWR0aE9yaWcpIHtcbiAgICAgIG9Db2wuc1dpZHRoT3JpZyA9IHRoLmF0dHIoJ3dpZHRoJykgfHwgbnVsbDtcbiAgICAgIHZhciB0ID0gKHRoLmF0dHIoJ3N0eWxlJykgfHwgJycpLm1hdGNoKC93aWR0aDpcXHMqKFxcZCtbcHhlbSVdKykvKTtcblxuICAgICAgaWYgKHQpIHtcbiAgICAgICAgb0NvbC5zV2lkdGhPcmlnID0gdFsxXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob09wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBvT3B0aW9ucyAhPT0gbnVsbCkge1xuICAgICAgX2ZuQ29tcGF0Q29scyhvT3B0aW9ucyk7XG5cbiAgICAgIF9mbkNhbWVsVG9IdW5nYXJpYW4oRGF0YVRhYmxlLmRlZmF1bHRzLmNvbHVtbiwgb09wdGlvbnMpO1xuXG4gICAgICBpZiAob09wdGlvbnMubURhdGFQcm9wICE9PSB1bmRlZmluZWQgJiYgIW9PcHRpb25zLm1EYXRhKSB7XG4gICAgICAgIG9PcHRpb25zLm1EYXRhID0gb09wdGlvbnMubURhdGFQcm9wO1xuICAgICAgfVxuXG4gICAgICBpZiAob09wdGlvbnMuc1R5cGUpIHtcbiAgICAgICAgb0NvbC5fc01hbnVhbFR5cGUgPSBvT3B0aW9ucy5zVHlwZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9PcHRpb25zLmNsYXNzTmFtZSAmJiAhb09wdGlvbnMuc0NsYXNzKSB7XG4gICAgICAgIG9PcHRpb25zLnNDbGFzcyA9IG9PcHRpb25zLmNsYXNzTmFtZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9PcHRpb25zLnNDbGFzcykge1xuICAgICAgICB0aC5hZGRDbGFzcyhvT3B0aW9ucy5zQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICAkLmV4dGVuZChvQ29sLCBvT3B0aW9ucyk7XG5cbiAgICAgIF9mbk1hcChvQ29sLCBvT3B0aW9ucywgXCJzV2lkdGhcIiwgXCJzV2lkdGhPcmlnXCIpO1xuXG4gICAgICBpZiAob09wdGlvbnMuaURhdGFTb3J0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb0NvbC5hRGF0YVNvcnQgPSBbb09wdGlvbnMuaURhdGFTb3J0XTtcbiAgICAgIH1cblxuICAgICAgX2ZuTWFwKG9Db2wsIG9PcHRpb25zLCBcImFEYXRhU29ydFwiKTtcbiAgICB9XG5cbiAgICB2YXIgbURhdGFTcmMgPSBvQ29sLm1EYXRhO1xuXG4gICAgdmFyIG1EYXRhID0gX2ZuR2V0T2JqZWN0RGF0YUZuKG1EYXRhU3JjKTtcblxuICAgIHZhciBtUmVuZGVyID0gb0NvbC5tUmVuZGVyID8gX2ZuR2V0T2JqZWN0RGF0YUZuKG9Db2wubVJlbmRlcikgOiBudWxsO1xuXG4gICAgdmFyIGF0dHJUZXN0ID0gZnVuY3Rpb24gYXR0clRlc3Qoc3JjKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHNyYyA9PT0gJ3N0cmluZycgJiYgc3JjLmluZGV4T2YoJ0AnKSAhPT0gLTE7XG4gICAgfTtcblxuICAgIG9Db2wuX2JBdHRyU3JjID0gJC5pc1BsYWluT2JqZWN0KG1EYXRhU3JjKSAmJiAoYXR0clRlc3QobURhdGFTcmMuc29ydCkgfHwgYXR0clRlc3QobURhdGFTcmMudHlwZSkgfHwgYXR0clRlc3QobURhdGFTcmMuZmlsdGVyKSk7XG4gICAgb0NvbC5fc2V0dGVyID0gbnVsbDtcblxuICAgIG9Db2wuZm5HZXREYXRhID0gZnVuY3Rpb24gKHJvd0RhdGEsIHR5cGUsIG1ldGEpIHtcbiAgICAgIHZhciBpbm5lckRhdGEgPSBtRGF0YShyb3dEYXRhLCB0eXBlLCB1bmRlZmluZWQsIG1ldGEpO1xuICAgICAgcmV0dXJuIG1SZW5kZXIgJiYgdHlwZSA/IG1SZW5kZXIoaW5uZXJEYXRhLCB0eXBlLCByb3dEYXRhLCBtZXRhKSA6IGlubmVyRGF0YTtcbiAgICB9O1xuXG4gICAgb0NvbC5mblNldERhdGEgPSBmdW5jdGlvbiAocm93RGF0YSwgdmFsLCBtZXRhKSB7XG4gICAgICByZXR1cm4gX2ZuU2V0T2JqZWN0RGF0YUZuKG1EYXRhU3JjKShyb3dEYXRhLCB2YWwsIG1ldGEpO1xuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIG1EYXRhU3JjICE9PSAnbnVtYmVyJykge1xuICAgICAgb1NldHRpbmdzLl9yb3dSZWFkT2JqZWN0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIW9TZXR0aW5ncy5vRmVhdHVyZXMuYlNvcnQpIHtcbiAgICAgIG9Db2wuYlNvcnRhYmxlID0gZmFsc2U7XG4gICAgICB0aC5hZGRDbGFzcyhvQ2xhc3Nlcy5zU29ydGFibGVOb25lKTtcbiAgICB9XG5cbiAgICB2YXIgYkFzYyA9ICQuaW5BcnJheSgnYXNjJywgb0NvbC5hc1NvcnRpbmcpICE9PSAtMTtcbiAgICB2YXIgYkRlc2MgPSAkLmluQXJyYXkoJ2Rlc2MnLCBvQ29sLmFzU29ydGluZykgIT09IC0xO1xuXG4gICAgaWYgKCFvQ29sLmJTb3J0YWJsZSB8fCAhYkFzYyAmJiAhYkRlc2MpIHtcbiAgICAgIG9Db2wuc1NvcnRpbmdDbGFzcyA9IG9DbGFzc2VzLnNTb3J0YWJsZU5vbmU7XG4gICAgICBvQ29sLnNTb3J0aW5nQ2xhc3NKVUkgPSBcIlwiO1xuICAgIH0gZWxzZSBpZiAoYkFzYyAmJiAhYkRlc2MpIHtcbiAgICAgIG9Db2wuc1NvcnRpbmdDbGFzcyA9IG9DbGFzc2VzLnNTb3J0YWJsZUFzYztcbiAgICAgIG9Db2wuc1NvcnRpbmdDbGFzc0pVSSA9IG9DbGFzc2VzLnNTb3J0SlVJQXNjQWxsb3dlZDtcbiAgICB9IGVsc2UgaWYgKCFiQXNjICYmIGJEZXNjKSB7XG4gICAgICBvQ29sLnNTb3J0aW5nQ2xhc3MgPSBvQ2xhc3Nlcy5zU29ydGFibGVEZXNjO1xuICAgICAgb0NvbC5zU29ydGluZ0NsYXNzSlVJID0gb0NsYXNzZXMuc1NvcnRKVUlEZXNjQWxsb3dlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgb0NvbC5zU29ydGluZ0NsYXNzID0gb0NsYXNzZXMuc1NvcnRhYmxlO1xuICAgICAgb0NvbC5zU29ydGluZ0NsYXNzSlVJID0gb0NsYXNzZXMuc1NvcnRKVUk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2ZuQWRqdXN0Q29sdW1uU2l6aW5nKHNldHRpbmdzKSB7XG4gICAgaWYgKHNldHRpbmdzLm9GZWF0dXJlcy5iQXV0b1dpZHRoICE9PSBmYWxzZSkge1xuICAgICAgdmFyIGNvbHVtbnMgPSBzZXR0aW5ncy5hb0NvbHVtbnM7XG5cbiAgICAgIF9mbkNhbGN1bGF0ZUNvbHVtbldpZHRocyhzZXR0aW5ncyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBpTGVuID0gY29sdW1ucy5sZW5ndGg7IGkgPCBpTGVuOyBpKyspIHtcbiAgICAgICAgY29sdW1uc1tpXS5uVGguc3R5bGUud2lkdGggPSBjb2x1bW5zW2ldLnNXaWR0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2Nyb2xsID0gc2V0dGluZ3Mub1Njcm9sbDtcblxuICAgIGlmIChzY3JvbGwuc1kgIT09ICcnIHx8IHNjcm9sbC5zWCAhPT0gJycpIHtcbiAgICAgIF9mblNjcm9sbERyYXcoc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIF9mbkNhbGxiYWNrRmlyZShzZXR0aW5ncywgbnVsbCwgJ2NvbHVtbi1zaXppbmcnLCBbc2V0dGluZ3NdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mblZpc2libGVUb0NvbHVtbkluZGV4KG9TZXR0aW5ncywgaU1hdGNoKSB7XG4gICAgdmFyIGFpVmlzID0gX2ZuR2V0Q29sdW1ucyhvU2V0dGluZ3MsICdiVmlzaWJsZScpO1xuXG4gICAgcmV0dXJuIHR5cGVvZiBhaVZpc1tpTWF0Y2hdID09PSAnbnVtYmVyJyA/IGFpVmlzW2lNYXRjaF0gOiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuQ29sdW1uSW5kZXhUb1Zpc2libGUob1NldHRpbmdzLCBpTWF0Y2gpIHtcbiAgICB2YXIgYWlWaXMgPSBfZm5HZXRDb2x1bW5zKG9TZXR0aW5ncywgJ2JWaXNpYmxlJyk7XG5cbiAgICB2YXIgaVBvcyA9ICQuaW5BcnJheShpTWF0Y2gsIGFpVmlzKTtcbiAgICByZXR1cm4gaVBvcyAhPT0gLTEgPyBpUG9zIDogbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mblZpc2JsZUNvbHVtbnMob1NldHRpbmdzKSB7XG4gICAgdmFyIHZpcyA9IDA7XG4gICAgJC5lYWNoKG9TZXR0aW5ncy5hb0NvbHVtbnMsIGZ1bmN0aW9uIChpLCBjb2wpIHtcbiAgICAgIGlmIChjb2wuYlZpc2libGUgJiYgJChjb2wublRoKS5jc3MoJ2Rpc3BsYXknKSAhPT0gJ25vbmUnKSB7XG4gICAgICAgIHZpcysrO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2aXM7XG4gIH1cblxuICBmdW5jdGlvbiBfZm5HZXRDb2x1bW5zKG9TZXR0aW5ncywgc1BhcmFtKSB7XG4gICAgdmFyIGEgPSBbXTtcbiAgICAkLm1hcChvU2V0dGluZ3MuYW9Db2x1bW5zLCBmdW5jdGlvbiAodmFsLCBpKSB7XG4gICAgICBpZiAodmFsW3NQYXJhbV0pIHtcbiAgICAgICAgYS5wdXNoKGkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBhO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuQ29sdW1uVHlwZXMoc2V0dGluZ3MpIHtcbiAgICB2YXIgY29sdW1ucyA9IHNldHRpbmdzLmFvQ29sdW1ucztcbiAgICB2YXIgZGF0YSA9IHNldHRpbmdzLmFvRGF0YTtcbiAgICB2YXIgdHlwZXMgPSBEYXRhVGFibGUuZXh0LnR5cGUuZGV0ZWN0O1xuICAgIHZhciBpLCBpZW4sIGosIGplbiwgaywga2VuO1xuICAgIHZhciBjb2wsIGNlbGwsIGRldGVjdGVkVHlwZSwgY2FjaGU7XG5cbiAgICBmb3IgKGkgPSAwLCBpZW4gPSBjb2x1bW5zLmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICBjb2wgPSBjb2x1bW5zW2ldO1xuICAgICAgY2FjaGUgPSBbXTtcblxuICAgICAgaWYgKCFjb2wuc1R5cGUgJiYgY29sLl9zTWFudWFsVHlwZSkge1xuICAgICAgICBjb2wuc1R5cGUgPSBjb2wuX3NNYW51YWxUeXBlO1xuICAgICAgfSBlbHNlIGlmICghY29sLnNUeXBlKSB7XG4gICAgICAgIGZvciAoaiA9IDAsIGplbiA9IHR5cGVzLmxlbmd0aDsgaiA8IGplbjsgaisrKSB7XG4gICAgICAgICAgZm9yIChrID0gMCwga2VuID0gZGF0YS5sZW5ndGg7IGsgPCBrZW47IGsrKykge1xuICAgICAgICAgICAgaWYgKGNhY2hlW2tdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgY2FjaGVba10gPSBfZm5HZXRDZWxsRGF0YShzZXR0aW5ncywgaywgaSwgJ3R5cGUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGV0ZWN0ZWRUeXBlID0gdHlwZXNbal0oY2FjaGVba10sIHNldHRpbmdzKTtcblxuICAgICAgICAgICAgaWYgKCFkZXRlY3RlZFR5cGUgJiYgaiAhPT0gdHlwZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRldGVjdGVkVHlwZSA9PT0gJ2h0bWwnKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkZXRlY3RlZFR5cGUpIHtcbiAgICAgICAgICAgIGNvbC5zVHlwZSA9IGRldGVjdGVkVHlwZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29sLnNUeXBlKSB7XG4gICAgICAgICAgY29sLnNUeXBlID0gJ3N0cmluZyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZm5BcHBseUNvbHVtbkRlZnMob1NldHRpbmdzLCBhb0NvbERlZnMsIGFvQ29scywgZm4pIHtcbiAgICB2YXIgaSwgaUxlbiwgaiwgakxlbiwgaywga0xlbiwgZGVmO1xuICAgIHZhciBjb2x1bW5zID0gb1NldHRpbmdzLmFvQ29sdW1ucztcblxuICAgIGlmIChhb0NvbERlZnMpIHtcbiAgICAgIGZvciAoaSA9IGFvQ29sRGVmcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBkZWYgPSBhb0NvbERlZnNbaV07XG4gICAgICAgIHZhciBhVGFyZ2V0cyA9IGRlZi50YXJnZXRzICE9PSB1bmRlZmluZWQgPyBkZWYudGFyZ2V0cyA6IGRlZi5hVGFyZ2V0cztcblxuICAgICAgICBpZiAoISQuaXNBcnJheShhVGFyZ2V0cykpIHtcbiAgICAgICAgICBhVGFyZ2V0cyA9IFthVGFyZ2V0c107XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGogPSAwLCBqTGVuID0gYVRhcmdldHMubGVuZ3RoOyBqIDwgakxlbjsgaisrKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhVGFyZ2V0c1tqXSA9PT0gJ251bWJlcicgJiYgYVRhcmdldHNbal0gPj0gMCkge1xuICAgICAgICAgICAgd2hpbGUgKGNvbHVtbnMubGVuZ3RoIDw9IGFUYXJnZXRzW2pdKSB7XG4gICAgICAgICAgICAgIF9mbkFkZENvbHVtbihvU2V0dGluZ3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmbihhVGFyZ2V0c1tqXSwgZGVmKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhVGFyZ2V0c1tqXSA9PT0gJ251bWJlcicgJiYgYVRhcmdldHNbal0gPCAwKSB7XG4gICAgICAgICAgICBmbihjb2x1bW5zLmxlbmd0aCArIGFUYXJnZXRzW2pdLCBkZWYpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFUYXJnZXRzW2pdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZm9yIChrID0gMCwga0xlbiA9IGNvbHVtbnMubGVuZ3RoOyBrIDwga0xlbjsgaysrKSB7XG4gICAgICAgICAgICAgIGlmIChhVGFyZ2V0c1tqXSA9PSBcIl9hbGxcIiB8fCAkKGNvbHVtbnNba10ublRoKS5oYXNDbGFzcyhhVGFyZ2V0c1tqXSkpIHtcbiAgICAgICAgICAgICAgICBmbihrLCBkZWYpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFvQ29scykge1xuICAgICAgZm9yIChpID0gMCwgaUxlbiA9IGFvQ29scy5sZW5ndGg7IGkgPCBpTGVuOyBpKyspIHtcbiAgICAgICAgZm4oaSwgYW9Db2xzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZm5BZGREYXRhKG9TZXR0aW5ncywgYURhdGFJbiwgblRyLCBhblRkcykge1xuICAgIHZhciBpUm93ID0gb1NldHRpbmdzLmFvRGF0YS5sZW5ndGg7XG4gICAgdmFyIG9EYXRhID0gJC5leHRlbmQodHJ1ZSwge30sIERhdGFUYWJsZS5tb2RlbHMub1Jvdywge1xuICAgICAgc3JjOiBuVHIgPyAnZG9tJyA6ICdkYXRhJyxcbiAgICAgIGlkeDogaVJvd1xuICAgIH0pO1xuICAgIG9EYXRhLl9hRGF0YSA9IGFEYXRhSW47XG4gICAgb1NldHRpbmdzLmFvRGF0YS5wdXNoKG9EYXRhKTtcbiAgICB2YXIgblRkLCBzVGhpc1R5cGU7XG4gICAgdmFyIGNvbHVtbnMgPSBvU2V0dGluZ3MuYW9Db2x1bW5zO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlMZW4gPSBjb2x1bW5zLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgY29sdW1uc1tpXS5zVHlwZSA9IG51bGw7XG4gICAgfVxuXG4gICAgb1NldHRpbmdzLmFpRGlzcGxheU1hc3Rlci5wdXNoKGlSb3cpO1xuICAgIHZhciBpZCA9IG9TZXR0aW5ncy5yb3dJZEZuKGFEYXRhSW4pO1xuXG4gICAgaWYgKGlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9TZXR0aW5ncy5hSWRzW2lkXSA9IG9EYXRhO1xuICAgIH1cblxuICAgIGlmIChuVHIgfHwgIW9TZXR0aW5ncy5vRmVhdHVyZXMuYkRlZmVyUmVuZGVyKSB7XG4gICAgICBfZm5DcmVhdGVUcihvU2V0dGluZ3MsIGlSb3csIG5UciwgYW5UZHMpO1xuICAgIH1cblxuICAgIHJldHVybiBpUm93O1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuQWRkVHIoc2V0dGluZ3MsIHRycykge1xuICAgIHZhciByb3c7XG5cbiAgICBpZiAoISh0cnMgaW5zdGFuY2VvZiAkKSkge1xuICAgICAgdHJzID0gJCh0cnMpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnMubWFwKGZ1bmN0aW9uIChpLCBlbCkge1xuICAgICAgcm93ID0gX2ZuR2V0Um93RWxlbWVudHMoc2V0dGluZ3MsIGVsKTtcbiAgICAgIHJldHVybiBfZm5BZGREYXRhKHNldHRpbmdzLCByb3cuZGF0YSwgZWwsIHJvdy5jZWxscyk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBfZm5Ob2RlVG9EYXRhSW5kZXgob1NldHRpbmdzLCBuKSB7XG4gICAgcmV0dXJuIG4uX0RUX1Jvd0luZGV4ICE9PSB1bmRlZmluZWQgPyBuLl9EVF9Sb3dJbmRleCA6IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBfZm5Ob2RlVG9Db2x1bW5JbmRleChvU2V0dGluZ3MsIGlSb3csIG4pIHtcbiAgICByZXR1cm4gJC5pbkFycmF5KG4sIG9TZXR0aW5ncy5hb0RhdGFbaVJvd10uYW5DZWxscyk7XG4gIH1cblxuICBmdW5jdGlvbiBfZm5HZXRDZWxsRGF0YShzZXR0aW5ncywgcm93SWR4LCBjb2xJZHgsIHR5cGUpIHtcbiAgICB2YXIgZHJhdyA9IHNldHRpbmdzLmlEcmF3O1xuICAgIHZhciBjb2wgPSBzZXR0aW5ncy5hb0NvbHVtbnNbY29sSWR4XTtcbiAgICB2YXIgcm93RGF0YSA9IHNldHRpbmdzLmFvRGF0YVtyb3dJZHhdLl9hRGF0YTtcbiAgICB2YXIgZGVmYXVsdENvbnRlbnQgPSBjb2wuc0RlZmF1bHRDb250ZW50O1xuICAgIHZhciBjZWxsRGF0YSA9IGNvbC5mbkdldERhdGEocm93RGF0YSwgdHlwZSwge1xuICAgICAgc2V0dGluZ3M6IHNldHRpbmdzLFxuICAgICAgcm93OiByb3dJZHgsXG4gICAgICBjb2w6IGNvbElkeFxuICAgIH0pO1xuXG4gICAgaWYgKGNlbGxEYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChzZXR0aW5ncy5pRHJhd0Vycm9yICE9IGRyYXcgJiYgZGVmYXVsdENvbnRlbnQgPT09IG51bGwpIHtcbiAgICAgICAgX2ZuTG9nKHNldHRpbmdzLCAwLCBcIlJlcXVlc3RlZCB1bmtub3duIHBhcmFtZXRlciBcIiArICh0eXBlb2YgY29sLm1EYXRhID09ICdmdW5jdGlvbicgPyAne2Z1bmN0aW9ufScgOiBcIidcIiArIGNvbC5tRGF0YSArIFwiJ1wiKSArIFwiIGZvciByb3cgXCIgKyByb3dJZHggKyBcIiwgY29sdW1uIFwiICsgY29sSWR4LCA0KTtcblxuICAgICAgICBzZXR0aW5ncy5pRHJhd0Vycm9yID0gZHJhdztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlZmF1bHRDb250ZW50O1xuICAgIH1cblxuICAgIGlmICgoY2VsbERhdGEgPT09IHJvd0RhdGEgfHwgY2VsbERhdGEgPT09IG51bGwpICYmIGRlZmF1bHRDb250ZW50ICE9PSBudWxsICYmIHR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2VsbERhdGEgPSBkZWZhdWx0Q29udGVudDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjZWxsRGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGNlbGxEYXRhLmNhbGwocm93RGF0YSk7XG4gICAgfVxuXG4gICAgaWYgKGNlbGxEYXRhID09PSBudWxsICYmIHR5cGUgPT0gJ2Rpc3BsYXknKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNlbGxEYXRhO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuU2V0Q2VsbERhdGEoc2V0dGluZ3MsIHJvd0lkeCwgY29sSWR4LCB2YWwpIHtcbiAgICB2YXIgY29sID0gc2V0dGluZ3MuYW9Db2x1bW5zW2NvbElkeF07XG4gICAgdmFyIHJvd0RhdGEgPSBzZXR0aW5ncy5hb0RhdGFbcm93SWR4XS5fYURhdGE7XG4gICAgY29sLmZuU2V0RGF0YShyb3dEYXRhLCB2YWwsIHtcbiAgICAgIHNldHRpbmdzOiBzZXR0aW5ncyxcbiAgICAgIHJvdzogcm93SWR4LFxuICAgICAgY29sOiBjb2xJZHhcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBfX3JlQXJyYXkgPSAvXFxbLio/XFxdJC87XG4gIHZhciBfX3JlRm4gPSAvXFwoXFwpJC87XG5cbiAgZnVuY3Rpb24gX2ZuU3BsaXRPYmpOb3RhdGlvbihzdHIpIHtcbiAgICByZXR1cm4gJC5tYXAoc3RyLm1hdGNoKC8oXFxcXC58W15cXC5dKSsvZykgfHwgWycnXSwgZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBzLnJlcGxhY2UoL1xcXFxcXC4vZywgJy4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mbkdldE9iamVjdERhdGFGbihtU291cmNlKSB7XG4gICAgaWYgKCQuaXNQbGFpbk9iamVjdChtU291cmNlKSkge1xuICAgICAgdmFyIG8gPSB7fTtcbiAgICAgICQuZWFjaChtU291cmNlLCBmdW5jdGlvbiAoa2V5LCB2YWwpIHtcbiAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgIG9ba2V5XSA9IF9mbkdldE9iamVjdERhdGFGbih2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93LCBtZXRhKSB7XG4gICAgICAgIHZhciB0ID0gb1t0eXBlXSB8fCBvLl87XG4gICAgICAgIHJldHVybiB0ICE9PSB1bmRlZmluZWQgPyB0KGRhdGEsIHR5cGUsIHJvdywgbWV0YSkgOiBkYXRhO1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG1Tb3VyY2UgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbVNvdXJjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3csIG1ldGEpIHtcbiAgICAgICAgcmV0dXJuIG1Tb3VyY2UoZGF0YSwgdHlwZSwgcm93LCBtZXRhKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbVNvdXJjZSA9PT0gJ3N0cmluZycgJiYgKG1Tb3VyY2UuaW5kZXhPZignLicpICE9PSAtMSB8fCBtU291cmNlLmluZGV4T2YoJ1snKSAhPT0gLTEgfHwgbVNvdXJjZS5pbmRleE9mKCcoJykgIT09IC0xKSkge1xuICAgICAgdmFyIGZldGNoRGF0YSA9IGZ1bmN0aW9uIGZldGNoRGF0YShkYXRhLCB0eXBlLCBzcmMpIHtcbiAgICAgICAgdmFyIGFycmF5Tm90YXRpb24sIGZ1bmNOb3RhdGlvbiwgb3V0LCBpbm5lclNyYztcblxuICAgICAgICBpZiAoc3JjICE9PSBcIlwiKSB7XG4gICAgICAgICAgdmFyIGEgPSBfZm5TcGxpdE9iak5vdGF0aW9uKHNyYyk7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaUxlbiA9IGEubGVuZ3RoOyBpIDwgaUxlbjsgaSsrKSB7XG4gICAgICAgICAgICBhcnJheU5vdGF0aW9uID0gYVtpXS5tYXRjaChfX3JlQXJyYXkpO1xuICAgICAgICAgICAgZnVuY05vdGF0aW9uID0gYVtpXS5tYXRjaChfX3JlRm4pO1xuXG4gICAgICAgICAgICBpZiAoYXJyYXlOb3RhdGlvbikge1xuICAgICAgICAgICAgICBhW2ldID0gYVtpXS5yZXBsYWNlKF9fcmVBcnJheSwgJycpO1xuXG4gICAgICAgICAgICAgIGlmIChhW2ldICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRhdGFbYVtpXV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBvdXQgPSBbXTtcbiAgICAgICAgICAgICAgYS5zcGxpY2UoMCwgaSArIDEpO1xuICAgICAgICAgICAgICBpbm5lclNyYyA9IGEuam9pbignLicpO1xuXG4gICAgICAgICAgICAgIGlmICgkLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgakxlbiA9IGRhdGEubGVuZ3RoOyBqIDwgakxlbjsgaisrKSB7XG4gICAgICAgICAgICAgICAgICBvdXQucHVzaChmZXRjaERhdGEoZGF0YVtqXSwgdHlwZSwgaW5uZXJTcmMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgam9pbiA9IGFycmF5Tm90YXRpb25bMF0uc3Vic3RyaW5nKDEsIGFycmF5Tm90YXRpb25bMF0ubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgIGRhdGEgPSBqb2luID09PSBcIlwiID8gb3V0IDogb3V0LmpvaW4oam9pbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmdW5jTm90YXRpb24pIHtcbiAgICAgICAgICAgICAgYVtpXSA9IGFbaV0ucmVwbGFjZShfX3JlRm4sICcnKTtcbiAgICAgICAgICAgICAgZGF0YSA9IGRhdGFbYVtpXV0oKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRhID09PSBudWxsIHx8IGRhdGFbYVtpXV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhID0gZGF0YVthW2ldXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSwgdHlwZSkge1xuICAgICAgICByZXR1cm4gZmV0Y2hEYXRhKGRhdGEsIHR5cGUsIG1Tb3VyY2UpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhLCB0eXBlKSB7XG4gICAgICAgIHJldHVybiBkYXRhW21Tb3VyY2VdO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZm5TZXRPYmplY3REYXRhRm4obVNvdXJjZSkge1xuICAgIGlmICgkLmlzUGxhaW5PYmplY3QobVNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBfZm5TZXRPYmplY3REYXRhRm4obVNvdXJjZS5fKTtcbiAgICB9IGVsc2UgaWYgKG1Tb3VyY2UgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7fTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtU291cmNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGEsIHZhbCwgbWV0YSkge1xuICAgICAgICBtU291cmNlKGRhdGEsICdzZXQnLCB2YWwsIG1ldGEpO1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtU291cmNlID09PSAnc3RyaW5nJyAmJiAobVNvdXJjZS5pbmRleE9mKCcuJykgIT09IC0xIHx8IG1Tb3VyY2UuaW5kZXhPZignWycpICE9PSAtMSB8fCBtU291cmNlLmluZGV4T2YoJygnKSAhPT0gLTEpKSB7XG4gICAgICB2YXIgc2V0RGF0YSA9IGZ1bmN0aW9uIHNldERhdGEoZGF0YSwgdmFsLCBzcmMpIHtcbiAgICAgICAgdmFyIGEgPSBfZm5TcGxpdE9iak5vdGF0aW9uKHNyYyksXG4gICAgICAgICAgICBiO1xuXG4gICAgICAgIHZhciBhTGFzdCA9IGFbYS5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIGFycmF5Tm90YXRpb24sIGZ1bmNOb3RhdGlvbiwgbywgaW5uZXJTcmM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlMZW4gPSBhLmxlbmd0aCAtIDE7IGkgPCBpTGVuOyBpKyspIHtcbiAgICAgICAgICBhcnJheU5vdGF0aW9uID0gYVtpXS5tYXRjaChfX3JlQXJyYXkpO1xuICAgICAgICAgIGZ1bmNOb3RhdGlvbiA9IGFbaV0ubWF0Y2goX19yZUZuKTtcblxuICAgICAgICAgIGlmIChhcnJheU5vdGF0aW9uKSB7XG4gICAgICAgICAgICBhW2ldID0gYVtpXS5yZXBsYWNlKF9fcmVBcnJheSwgJycpO1xuICAgICAgICAgICAgZGF0YVthW2ldXSA9IFtdO1xuICAgICAgICAgICAgYiA9IGEuc2xpY2UoKTtcbiAgICAgICAgICAgIGIuc3BsaWNlKDAsIGkgKyAxKTtcbiAgICAgICAgICAgIGlubmVyU3JjID0gYi5qb2luKCcuJyk7XG5cbiAgICAgICAgICAgIGlmICgkLmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgakxlbiA9IHZhbC5sZW5ndGg7IGogPCBqTGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICAgICAgc2V0RGF0YShvLCB2YWxbal0sIGlubmVyU3JjKTtcbiAgICAgICAgICAgICAgICBkYXRhW2FbaV1dLnB1c2gobyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRhdGFbYVtpXV0gPSB2YWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZ1bmNOb3RhdGlvbikge1xuICAgICAgICAgICAgYVtpXSA9IGFbaV0ucmVwbGFjZShfX3JlRm4sICcnKTtcbiAgICAgICAgICAgIGRhdGEgPSBkYXRhW2FbaV1dKHZhbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRhdGFbYVtpXV0gPT09IG51bGwgfHwgZGF0YVthW2ldXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkYXRhW2FbaV1dID0ge307XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YSA9IGRhdGFbYVtpXV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYUxhc3QubWF0Y2goX19yZUZuKSkge1xuICAgICAgICAgIGRhdGEgPSBkYXRhW2FMYXN0LnJlcGxhY2UoX19yZUZuLCAnJyldKHZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YVthTGFzdC5yZXBsYWNlKF9fcmVBcnJheSwgJycpXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhLCB2YWwpIHtcbiAgICAgICAgcmV0dXJuIHNldERhdGEoZGF0YSwgdmFsLCBtU291cmNlKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSwgdmFsKSB7XG4gICAgICAgIGRhdGFbbVNvdXJjZV0gPSB2YWw7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9mbkdldERhdGFNYXN0ZXIoc2V0dGluZ3MpIHtcbiAgICByZXR1cm4gX3BsdWNrKHNldHRpbmdzLmFvRGF0YSwgJ19hRGF0YScpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuQ2xlYXJUYWJsZShzZXR0aW5ncykge1xuICAgIHNldHRpbmdzLmFvRGF0YS5sZW5ndGggPSAwO1xuICAgIHNldHRpbmdzLmFpRGlzcGxheU1hc3Rlci5sZW5ndGggPSAwO1xuICAgIHNldHRpbmdzLmFpRGlzcGxheS5sZW5ndGggPSAwO1xuICAgIHNldHRpbmdzLmFJZHMgPSB7fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mbkRlbGV0ZUluZGV4KGEsIGlUYXJnZXQsIHNwbGljZSkge1xuICAgIHZhciBpVGFyZ2V0SW5kZXggPSAtMTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpTGVuID0gYS5sZW5ndGg7IGkgPCBpTGVuOyBpKyspIHtcbiAgICAgIGlmIChhW2ldID09IGlUYXJnZXQpIHtcbiAgICAgICAgaVRhcmdldEluZGV4ID0gaTtcbiAgICAgIH0gZWxzZSBpZiAoYVtpXSA+IGlUYXJnZXQpIHtcbiAgICAgICAgYVtpXS0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpVGFyZ2V0SW5kZXggIT0gLTEgJiYgc3BsaWNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGEuc3BsaWNlKGlUYXJnZXRJbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2ZuSW52YWxpZGF0ZShzZXR0aW5ncywgcm93SWR4LCBzcmMsIGNvbElkeCkge1xuICAgIHZhciByb3cgPSBzZXR0aW5ncy5hb0RhdGFbcm93SWR4XTtcbiAgICB2YXIgaSwgaWVuO1xuXG4gICAgdmFyIGNlbGxXcml0ZSA9IGZ1bmN0aW9uIGNlbGxXcml0ZShjZWxsLCBjb2wpIHtcbiAgICAgIHdoaWxlIChjZWxsLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIGNlbGwucmVtb3ZlQ2hpbGQoY2VsbC5maXJzdENoaWxkKTtcbiAgICAgIH1cblxuICAgICAgY2VsbC5pbm5lckhUTUwgPSBfZm5HZXRDZWxsRGF0YShzZXR0aW5ncywgcm93SWR4LCBjb2wsICdkaXNwbGF5Jyk7XG4gICAgfTtcblxuICAgIGlmIChzcmMgPT09ICdkb20nIHx8ICghc3JjIHx8IHNyYyA9PT0gJ2F1dG8nKSAmJiByb3cuc3JjID09PSAnZG9tJykge1xuICAgICAgcm93Ll9hRGF0YSA9IF9mbkdldFJvd0VsZW1lbnRzKHNldHRpbmdzLCByb3csIGNvbElkeCwgY29sSWR4ID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByb3cuX2FEYXRhKS5kYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2VsbHMgPSByb3cuYW5DZWxscztcblxuICAgICAgaWYgKGNlbGxzKSB7XG4gICAgICAgIGlmIChjb2xJZHggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNlbGxXcml0ZShjZWxsc1tjb2xJZHhdLCBjb2xJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAoaSA9IDAsIGllbiA9IGNlbGxzLmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICAgICAgICBjZWxsV3JpdGUoY2VsbHNbaV0sIGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJvdy5fYVNvcnREYXRhID0gbnVsbDtcbiAgICByb3cuX2FGaWx0ZXJEYXRhID0gbnVsbDtcbiAgICB2YXIgY29scyA9IHNldHRpbmdzLmFvQ29sdW1ucztcblxuICAgIGlmIChjb2xJZHggIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29sc1tjb2xJZHhdLnNUeXBlID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMCwgaWVuID0gY29scy5sZW5ndGg7IGkgPCBpZW47IGkrKykge1xuICAgICAgICBjb2xzW2ldLnNUeXBlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgX2ZuUm93QXR0cmlidXRlcyhzZXR0aW5ncywgcm93KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZm5HZXRSb3dFbGVtZW50cyhzZXR0aW5ncywgcm93LCBjb2xJZHgsIGQpIHtcbiAgICB2YXIgdGRzID0gW10sXG4gICAgICAgIHRkID0gcm93LmZpcnN0Q2hpbGQsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGNvbCxcbiAgICAgICAgbyxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGNvbnRlbnRzLFxuICAgICAgICBjb2x1bW5zID0gc2V0dGluZ3MuYW9Db2x1bW5zLFxuICAgICAgICBvYmplY3RSZWFkID0gc2V0dGluZ3MuX3Jvd1JlYWRPYmplY3Q7XG4gICAgZCA9IGQgIT09IHVuZGVmaW5lZCA/IGQgOiBvYmplY3RSZWFkID8ge30gOiBbXTtcblxuICAgIHZhciBhdHRyID0gZnVuY3Rpb24gYXR0cihzdHIsIHRkKSB7XG4gICAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGlkeCA9IHN0ci5pbmRleE9mKCdAJyk7XG5cbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgICB2YXIgYXR0ciA9IHN0ci5zdWJzdHJpbmcoaWR4ICsgMSk7XG5cbiAgICAgICAgICB2YXIgc2V0dGVyID0gX2ZuU2V0T2JqZWN0RGF0YUZuKHN0cik7XG5cbiAgICAgICAgICBzZXR0ZXIoZCwgdGQuZ2V0QXR0cmlidXRlKGF0dHIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgY2VsbFByb2Nlc3MgPSBmdW5jdGlvbiBjZWxsUHJvY2VzcyhjZWxsKSB7XG4gICAgICBpZiAoY29sSWR4ID09PSB1bmRlZmluZWQgfHwgY29sSWR4ID09PSBpKSB7XG4gICAgICAgIGNvbCA9IGNvbHVtbnNbaV07XG4gICAgICAgIGNvbnRlbnRzID0gJC50cmltKGNlbGwuaW5uZXJIVE1MKTtcblxuICAgICAgICBpZiAoY29sICYmIGNvbC5fYkF0dHJTcmMpIHtcbiAgICAgICAgICB2YXIgc2V0dGVyID0gX2ZuU2V0T2JqZWN0RGF0YUZuKGNvbC5tRGF0YS5fKTtcblxuICAgICAgICAgIHNldHRlcihkLCBjb250ZW50cyk7XG4gICAgICAgICAgYXR0cihjb2wubURhdGEuc29ydCwgY2VsbCk7XG4gICAgICAgICAgYXR0cihjb2wubURhdGEudHlwZSwgY2VsbCk7XG4gICAgICAgICAgYXR0cihjb2wubURhdGEuZmlsdGVyLCBjZWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAob2JqZWN0UmVhZCkge1xuICAgICAgICAgICAgaWYgKCFjb2wuX3NldHRlcikge1xuICAgICAgICAgICAgICBjb2wuX3NldHRlciA9IF9mblNldE9iamVjdERhdGFGbihjb2wubURhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb2wuX3NldHRlcihkLCBjb250ZW50cyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRbaV0gPSBjb250ZW50cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaSsrO1xuICAgIH07XG5cbiAgICBpZiAodGQpIHtcbiAgICAgIHdoaWxlICh0ZCkge1xuICAgICAgICBuYW1lID0gdGQubm9kZU5hbWUudG9VcHBlckNhc2UoKTtcblxuICAgICAgICBpZiAobmFtZSA9PSBcIlREXCIgfHwgbmFtZSA9PSBcIlRIXCIpIHtcbiAgICAgICAgICBjZWxsUHJvY2Vzcyh0ZCk7XG4gICAgICAgICAgdGRzLnB1c2godGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGQgPSB0ZC5uZXh0U2libGluZztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGRzID0gcm93LmFuQ2VsbHM7XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqZW4gPSB0ZHMubGVuZ3RoOyBqIDwgamVuOyBqKyspIHtcbiAgICAgICAgY2VsbFByb2Nlc3ModGRzW2pdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcm93Tm9kZSA9IHJvdy5maXJzdENoaWxkID8gcm93IDogcm93Lm5UcjtcblxuICAgIGlmIChyb3dOb2RlKSB7XG4gICAgICB2YXIgaWQgPSByb3dOb2RlLmdldEF0dHJpYnV0ZSgnaWQnKTtcblxuICAgICAgaWYgKGlkKSB7XG4gICAgICAgIF9mblNldE9iamVjdERhdGFGbihzZXR0aW5ncy5yb3dJZCkoZCwgaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBkLFxuICAgICAgY2VsbHM6IHRkc1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfZm5DcmVhdGVUcihvU2V0dGluZ3MsIGlSb3csIG5UckluLCBhblRkcykge1xuICAgIHZhciByb3cgPSBvU2V0dGluZ3MuYW9EYXRhW2lSb3ddLFxuICAgICAgICByb3dEYXRhID0gcm93Ll9hRGF0YSxcbiAgICAgICAgY2VsbHMgPSBbXSxcbiAgICAgICAgblRyLFxuICAgICAgICBuVGQsXG4gICAgICAgIG9Db2wsXG4gICAgICAgIGksXG4gICAgICAgIGlMZW47XG5cbiAgICBpZiAocm93Lm5UciA9PT0gbnVsbCkge1xuICAgICAgblRyID0gblRySW4gfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICAgIHJvdy5uVHIgPSBuVHI7XG4gICAgICByb3cuYW5DZWxscyA9IGNlbGxzO1xuICAgICAgblRyLl9EVF9Sb3dJbmRleCA9IGlSb3c7XG5cbiAgICAgIF9mblJvd0F0dHJpYnV0ZXMob1NldHRpbmdzLCByb3cpO1xuXG4gICAgICBmb3IgKGkgPSAwLCBpTGVuID0gb1NldHRpbmdzLmFvQ29sdW1ucy5sZW5ndGg7IGkgPCBpTGVuOyBpKyspIHtcbiAgICAgICAgb0NvbCA9IG9TZXR0aW5ncy5hb0NvbHVtbnNbaV07XG4gICAgICAgIG5UZCA9IG5UckluID8gYW5UZHNbaV0gOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG9Db2wuc0NlbGxUeXBlKTtcbiAgICAgICAgblRkLl9EVF9DZWxsSW5kZXggPSB7XG4gICAgICAgICAgcm93OiBpUm93LFxuICAgICAgICAgIGNvbHVtbjogaVxuICAgICAgICB9O1xuICAgICAgICBjZWxscy5wdXNoKG5UZCk7XG5cbiAgICAgICAgaWYgKCghblRySW4gfHwgb0NvbC5tUmVuZGVyIHx8IG9Db2wubURhdGEgIT09IGkpICYmICghJC5pc1BsYWluT2JqZWN0KG9Db2wubURhdGEpIHx8IG9Db2wubURhdGEuXyAhPT0gaSArICcuZGlzcGxheScpKSB7XG4gICAgICAgICAgblRkLmlubmVySFRNTCA9IF9mbkdldENlbGxEYXRhKG9TZXR0aW5ncywgaVJvdywgaSwgJ2Rpc3BsYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvQ29sLnNDbGFzcykge1xuICAgICAgICAgIG5UZC5jbGFzc05hbWUgKz0gJyAnICsgb0NvbC5zQ2xhc3M7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob0NvbC5iVmlzaWJsZSAmJiAhblRySW4pIHtcbiAgICAgICAgICBuVHIuYXBwZW5kQ2hpbGQoblRkKTtcbiAgICAgICAgfSBlbHNlIGlmICghb0NvbC5iVmlzaWJsZSAmJiBuVHJJbikge1xuICAgICAgICAgIG5UZC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5UZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob0NvbC5mbkNyZWF0ZWRDZWxsKSB7XG4gICAgICAgICAgb0NvbC5mbkNyZWF0ZWRDZWxsLmNhbGwob1NldHRpbmdzLm9JbnN0YW5jZSwgblRkLCBfZm5HZXRDZWxsRGF0YShvU2V0dGluZ3MsIGlSb3csIGkpLCByb3dEYXRhLCBpUm93LCBpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfZm5DYWxsYmFja0ZpcmUob1NldHRpbmdzLCAnYW9Sb3dDcmVhdGVkQ2FsbGJhY2snLCBudWxsLCBbblRyLCByb3dEYXRhLCBpUm93LCBjZWxsc10pO1xuICAgIH1cblxuICAgIHJvdy5uVHIuc2V0QXR0cmlidXRlKCdyb2xlJywgJ3JvdycpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuUm93QXR0cmlidXRlcyhzZXR0aW5ncywgcm93KSB7XG4gICAgdmFyIHRyID0gcm93Lm5UcjtcbiAgICB2YXIgZGF0YSA9IHJvdy5fYURhdGE7XG5cbiAgICBpZiAodHIpIHtcbiAgICAgIHZhciBpZCA9IHNldHRpbmdzLnJvd0lkRm4oZGF0YSk7XG5cbiAgICAgIGlmIChpZCkge1xuICAgICAgICB0ci5pZCA9IGlkO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5EVF9Sb3dDbGFzcykge1xuICAgICAgICB2YXIgYSA9IGRhdGEuRFRfUm93Q2xhc3Muc3BsaXQoJyAnKTtcbiAgICAgICAgcm93Ll9fcm93YyA9IHJvdy5fX3Jvd2MgPyBfdW5pcXVlKHJvdy5fX3Jvd2MuY29uY2F0KGEpKSA6IGE7XG4gICAgICAgICQodHIpLnJlbW92ZUNsYXNzKHJvdy5fX3Jvd2Muam9pbignICcpKS5hZGRDbGFzcyhkYXRhLkRUX1Jvd0NsYXNzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEuRFRfUm93QXR0cikge1xuICAgICAgICAkKHRyKS5hdHRyKGRhdGEuRFRfUm93QXR0cik7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLkRUX1Jvd0RhdGEpIHtcbiAgICAgICAgJCh0cikuZGF0YShkYXRhLkRUX1Jvd0RhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9mbkJ1aWxkSGVhZChvU2V0dGluZ3MpIHtcbiAgICB2YXIgaSwgaWVuLCBjZWxsLCByb3csIGNvbHVtbjtcbiAgICB2YXIgdGhlYWQgPSBvU2V0dGluZ3MublRIZWFkO1xuICAgIHZhciB0Zm9vdCA9IG9TZXR0aW5ncy5uVEZvb3Q7XG4gICAgdmFyIGNyZWF0ZUhlYWRlciA9ICQoJ3RoLCB0ZCcsIHRoZWFkKS5sZW5ndGggPT09IDA7XG4gICAgdmFyIGNsYXNzZXMgPSBvU2V0dGluZ3Mub0NsYXNzZXM7XG4gICAgdmFyIGNvbHVtbnMgPSBvU2V0dGluZ3MuYW9Db2x1bW5zO1xuXG4gICAgaWYgKGNyZWF0ZUhlYWRlcikge1xuICAgICAgcm93ID0gJCgnPHRyLz4nKS5hcHBlbmRUbyh0aGVhZCk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMCwgaWVuID0gY29sdW1ucy5sZW5ndGg7IGkgPCBpZW47IGkrKykge1xuICAgICAgY29sdW1uID0gY29sdW1uc1tpXTtcbiAgICAgIGNlbGwgPSAkKGNvbHVtbi5uVGgpLmFkZENsYXNzKGNvbHVtbi5zQ2xhc3MpO1xuXG4gICAgICBpZiAoY3JlYXRlSGVhZGVyKSB7XG4gICAgICAgIGNlbGwuYXBwZW5kVG8ocm93KTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9TZXR0aW5ncy5vRmVhdHVyZXMuYlNvcnQpIHtcbiAgICAgICAgY2VsbC5hZGRDbGFzcyhjb2x1bW4uc1NvcnRpbmdDbGFzcyk7XG5cbiAgICAgICAgaWYgKGNvbHVtbi5iU29ydGFibGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgY2VsbC5hdHRyKCd0YWJpbmRleCcsIG9TZXR0aW5ncy5pVGFiSW5kZXgpLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBvU2V0dGluZ3Muc1RhYmxlSWQpO1xuXG4gICAgICAgICAgX2ZuU29ydEF0dGFjaExpc3RlbmVyKG9TZXR0aW5ncywgY29sdW1uLm5UaCwgaSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNvbHVtbi5zVGl0bGUgIT0gY2VsbFswXS5pbm5lckhUTUwpIHtcbiAgICAgICAgY2VsbC5odG1sKGNvbHVtbi5zVGl0bGUpO1xuICAgICAgfVxuXG4gICAgICBfZm5SZW5kZXJlcihvU2V0dGluZ3MsICdoZWFkZXInKShvU2V0dGluZ3MsIGNlbGwsIGNvbHVtbiwgY2xhc3Nlcyk7XG4gICAgfVxuXG4gICAgaWYgKGNyZWF0ZUhlYWRlcikge1xuICAgICAgX2ZuRGV0ZWN0SGVhZGVyKG9TZXR0aW5ncy5hb0hlYWRlciwgdGhlYWQpO1xuICAgIH1cblxuICAgICQodGhlYWQpLmZpbmQoJz50cicpLmF0dHIoJ3JvbGUnLCAncm93Jyk7XG4gICAgJCh0aGVhZCkuZmluZCgnPnRyPnRoLCA+dHI+dGQnKS5hZGRDbGFzcyhjbGFzc2VzLnNIZWFkZXJUSCk7XG4gICAgJCh0Zm9vdCkuZmluZCgnPnRyPnRoLCA+dHI+dGQnKS5hZGRDbGFzcyhjbGFzc2VzLnNGb290ZXJUSCk7XG5cbiAgICBpZiAodGZvb3QgIT09IG51bGwpIHtcbiAgICAgIHZhciBjZWxscyA9IG9TZXR0aW5ncy5hb0Zvb3RlclswXTtcblxuICAgICAgZm9yIChpID0gMCwgaWVuID0gY2VsbHMubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgICAgY29sdW1uID0gY29sdW1uc1tpXTtcbiAgICAgICAgY29sdW1uLm5UZiA9IGNlbGxzW2ldLmNlbGw7XG5cbiAgICAgICAgaWYgKGNvbHVtbi5zQ2xhc3MpIHtcbiAgICAgICAgICAkKGNvbHVtbi5uVGYpLmFkZENsYXNzKGNvbHVtbi5zQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2ZuRHJhd0hlYWQob1NldHRpbmdzLCBhb1NvdXJjZSwgYkluY2x1ZGVIaWRkZW4pIHtcbiAgICB2YXIgaSwgaUxlbiwgaiwgakxlbiwgaywga0xlbiwgbiwgbkxvY2FsVHI7XG4gICAgdmFyIGFvTG9jYWwgPSBbXTtcbiAgICB2YXIgYUFwcGxpZWQgPSBbXTtcbiAgICB2YXIgaUNvbHVtbnMgPSBvU2V0dGluZ3MuYW9Db2x1bW5zLmxlbmd0aDtcbiAgICB2YXIgaVJvd3NwYW4sIGlDb2xzcGFuO1xuXG4gICAgaWYgKCFhb1NvdXJjZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChiSW5jbHVkZUhpZGRlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBiSW5jbHVkZUhpZGRlbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIGlMZW4gPSBhb1NvdXJjZS5sZW5ndGg7IGkgPCBpTGVuOyBpKyspIHtcbiAgICAgIGFvTG9jYWxbaV0gPSBhb1NvdXJjZVtpXS5zbGljZSgpO1xuICAgICAgYW9Mb2NhbFtpXS5uVHIgPSBhb1NvdXJjZVtpXS5uVHI7XG5cbiAgICAgIGZvciAoaiA9IGlDb2x1bW5zIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgaWYgKCFvU2V0dGluZ3MuYW9Db2x1bW5zW2pdLmJWaXNpYmxlICYmICFiSW5jbHVkZUhpZGRlbikge1xuICAgICAgICAgIGFvTG9jYWxbaV0uc3BsaWNlKGosIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGFBcHBsaWVkLnB1c2goW10pO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIGlMZW4gPSBhb0xvY2FsLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgbkxvY2FsVHIgPSBhb0xvY2FsW2ldLm5UcjtcblxuICAgICAgaWYgKG5Mb2NhbFRyKSB7XG4gICAgICAgIHdoaWxlIChuID0gbkxvY2FsVHIuZmlyc3RDaGlsZCkge1xuICAgICAgICAgIG5Mb2NhbFRyLnJlbW92ZUNoaWxkKG4pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoaiA9IDAsIGpMZW4gPSBhb0xvY2FsW2ldLmxlbmd0aDsgaiA8IGpMZW47IGorKykge1xuICAgICAgICBpUm93c3BhbiA9IDE7XG4gICAgICAgIGlDb2xzcGFuID0gMTtcblxuICAgICAgICBpZiAoYUFwcGxpZWRbaV1bal0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5Mb2NhbFRyLmFwcGVuZENoaWxkKGFvTG9jYWxbaV1bal0uY2VsbCk7XG4gICAgICAgICAgYUFwcGxpZWRbaV1bal0gPSAxO1xuXG4gICAgICAgICAgd2hpbGUgKGFvTG9jYWxbaSArIGlSb3dzcGFuXSAhPT0gdW5kZWZpbmVkICYmIGFvTG9jYWxbaV1bal0uY2VsbCA9PSBhb0xvY2FsW2kgKyBpUm93c3Bhbl1bal0uY2VsbCkge1xuICAgICAgICAgICAgYUFwcGxpZWRbaSArIGlSb3dzcGFuXVtqXSA9IDE7XG4gICAgICAgICAgICBpUm93c3BhbisrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdoaWxlIChhb0xvY2FsW2ldW2ogKyBpQ29sc3Bhbl0gIT09IHVuZGVmaW5lZCAmJiBhb0xvY2FsW2ldW2pdLmNlbGwgPT0gYW9Mb2NhbFtpXVtqICsgaUNvbHNwYW5dLmNlbGwpIHtcbiAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBpUm93c3BhbjsgaysrKSB7XG4gICAgICAgICAgICAgIGFBcHBsaWVkW2kgKyBrXVtqICsgaUNvbHNwYW5dID0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaUNvbHNwYW4rKztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkKGFvTG9jYWxbaV1bal0uY2VsbCkuYXR0cigncm93c3BhbicsIGlSb3dzcGFuKS5hdHRyKCdjb2xzcGFuJywgaUNvbHNwYW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2ZuRHJhdyhvU2V0dGluZ3MpIHtcbiAgICB2YXIgYVByZURyYXcgPSBfZm5DYWxsYmFja0ZpcmUob1NldHRpbmdzLCAnYW9QcmVEcmF3Q2FsbGJhY2snLCAncHJlRHJhdycsIFtvU2V0dGluZ3NdKTtcblxuICAgIGlmICgkLmluQXJyYXkoZmFsc2UsIGFQcmVEcmF3KSAhPT0gLTEpIHtcbiAgICAgIF9mblByb2Nlc3NpbmdEaXNwbGF5KG9TZXR0aW5ncywgZmFsc2UpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGksIGlMZW4sIG47XG4gICAgdmFyIGFuUm93cyA9IFtdO1xuICAgIHZhciBpUm93Q291bnQgPSAwO1xuICAgIHZhciBhc1N0cmlwZUNsYXNzZXMgPSBvU2V0dGluZ3MuYXNTdHJpcGVDbGFzc2VzO1xuICAgIHZhciBpU3RyaXBlcyA9IGFzU3RyaXBlQ2xhc3Nlcy5sZW5ndGg7XG4gICAgdmFyIGlPcGVuUm93cyA9IG9TZXR0aW5ncy5hb09wZW5Sb3dzLmxlbmd0aDtcbiAgICB2YXIgb0xhbmcgPSBvU2V0dGluZ3Mub0xhbmd1YWdlO1xuICAgIHZhciBpSW5pdERpc3BsYXlTdGFydCA9IG9TZXR0aW5ncy5pSW5pdERpc3BsYXlTdGFydDtcbiAgICB2YXIgYlNlcnZlclNpZGUgPSBfZm5EYXRhU291cmNlKG9TZXR0aW5ncykgPT0gJ3NzcCc7XG4gICAgdmFyIGFpRGlzcGxheSA9IG9TZXR0aW5ncy5haURpc3BsYXk7XG4gICAgb1NldHRpbmdzLmJEcmF3aW5nID0gdHJ1ZTtcblxuICAgIGlmIChpSW5pdERpc3BsYXlTdGFydCAhPT0gdW5kZWZpbmVkICYmIGlJbml0RGlzcGxheVN0YXJ0ICE9PSAtMSkge1xuICAgICAgb1NldHRpbmdzLl9pRGlzcGxheVN0YXJ0ID0gYlNlcnZlclNpZGUgPyBpSW5pdERpc3BsYXlTdGFydCA6IGlJbml0RGlzcGxheVN0YXJ0ID49IG9TZXR0aW5ncy5mblJlY29yZHNEaXNwbGF5KCkgPyAwIDogaUluaXREaXNwbGF5U3RhcnQ7XG4gICAgICBvU2V0dGluZ3MuaUluaXREaXNwbGF5U3RhcnQgPSAtMTtcbiAgICB9XG5cbiAgICB2YXIgaURpc3BsYXlTdGFydCA9IG9TZXR0aW5ncy5faURpc3BsYXlTdGFydDtcbiAgICB2YXIgaURpc3BsYXlFbmQgPSBvU2V0dGluZ3MuZm5EaXNwbGF5RW5kKCk7XG5cbiAgICBpZiAob1NldHRpbmdzLmJEZWZlckxvYWRpbmcpIHtcbiAgICAgIG9TZXR0aW5ncy5iRGVmZXJMb2FkaW5nID0gZmFsc2U7XG4gICAgICBvU2V0dGluZ3MuaURyYXcrKztcblxuICAgICAgX2ZuUHJvY2Vzc2luZ0Rpc3BsYXkob1NldHRpbmdzLCBmYWxzZSk7XG4gICAgfSBlbHNlIGlmICghYlNlcnZlclNpZGUpIHtcbiAgICAgIG9TZXR0aW5ncy5pRHJhdysrO1xuICAgIH0gZWxzZSBpZiAoIW9TZXR0aW5ncy5iRGVzdHJveWluZyAmJiAhX2ZuQWpheFVwZGF0ZShvU2V0dGluZ3MpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGFpRGlzcGxheS5sZW5ndGggIT09IDApIHtcbiAgICAgIHZhciBpU3RhcnQgPSBiU2VydmVyU2lkZSA/IDAgOiBpRGlzcGxheVN0YXJ0O1xuICAgICAgdmFyIGlFbmQgPSBiU2VydmVyU2lkZSA/IG9TZXR0aW5ncy5hb0RhdGEubGVuZ3RoIDogaURpc3BsYXlFbmQ7XG5cbiAgICAgIGZvciAodmFyIGogPSBpU3RhcnQ7IGogPCBpRW5kOyBqKyspIHtcbiAgICAgICAgdmFyIGlEYXRhSW5kZXggPSBhaURpc3BsYXlbal07XG4gICAgICAgIHZhciBhb0RhdGEgPSBvU2V0dGluZ3MuYW9EYXRhW2lEYXRhSW5kZXhdO1xuXG4gICAgICAgIGlmIChhb0RhdGEublRyID09PSBudWxsKSB7XG4gICAgICAgICAgX2ZuQ3JlYXRlVHIob1NldHRpbmdzLCBpRGF0YUluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuUm93ID0gYW9EYXRhLm5UcjtcblxuICAgICAgICBpZiAoaVN0cmlwZXMgIT09IDApIHtcbiAgICAgICAgICB2YXIgc1N0cmlwZSA9IGFzU3RyaXBlQ2xhc3Nlc1tpUm93Q291bnQgJSBpU3RyaXBlc107XG5cbiAgICAgICAgICBpZiAoYW9EYXRhLl9zUm93U3RyaXBlICE9IHNTdHJpcGUpIHtcbiAgICAgICAgICAgICQoblJvdykucmVtb3ZlQ2xhc3MoYW9EYXRhLl9zUm93U3RyaXBlKS5hZGRDbGFzcyhzU3RyaXBlKTtcbiAgICAgICAgICAgIGFvRGF0YS5fc1Jvd1N0cmlwZSA9IHNTdHJpcGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX2ZuQ2FsbGJhY2tGaXJlKG9TZXR0aW5ncywgJ2FvUm93Q2FsbGJhY2snLCBudWxsLCBbblJvdywgYW9EYXRhLl9hRGF0YSwgaVJvd0NvdW50LCBqLCBpRGF0YUluZGV4XSk7XG5cbiAgICAgICAgYW5Sb3dzLnB1c2goblJvdyk7XG4gICAgICAgIGlSb3dDb3VudCsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc1plcm8gPSBvTGFuZy5zWmVyb1JlY29yZHM7XG5cbiAgICAgIGlmIChvU2V0dGluZ3MuaURyYXcgPT0gMSAmJiBfZm5EYXRhU291cmNlKG9TZXR0aW5ncykgPT0gJ2FqYXgnKSB7XG4gICAgICAgIHNaZXJvID0gb0xhbmcuc0xvYWRpbmdSZWNvcmRzO1xuICAgICAgfSBlbHNlIGlmIChvTGFuZy5zRW1wdHlUYWJsZSAmJiBvU2V0dGluZ3MuZm5SZWNvcmRzVG90YWwoKSA9PT0gMCkge1xuICAgICAgICBzWmVybyA9IG9MYW5nLnNFbXB0eVRhYmxlO1xuICAgICAgfVxuXG4gICAgICBhblJvd3NbMF0gPSAkKCc8dHIvPicsIHtcbiAgICAgICAgJ2NsYXNzJzogaVN0cmlwZXMgPyBhc1N0cmlwZUNsYXNzZXNbMF0gOiAnJ1xuICAgICAgfSkuYXBwZW5kKCQoJzx0ZCAvPicsIHtcbiAgICAgICAgJ3ZhbGlnbic6ICd0b3AnLFxuICAgICAgICAnY29sU3Bhbic6IF9mblZpc2JsZUNvbHVtbnMob1NldHRpbmdzKSxcbiAgICAgICAgJ2NsYXNzJzogb1NldHRpbmdzLm9DbGFzc2VzLnNSb3dFbXB0eVxuICAgICAgfSkuaHRtbChzWmVybykpWzBdO1xuICAgIH1cblxuICAgIF9mbkNhbGxiYWNrRmlyZShvU2V0dGluZ3MsICdhb0hlYWRlckNhbGxiYWNrJywgJ2hlYWRlcicsIFskKG9TZXR0aW5ncy5uVEhlYWQpLmNoaWxkcmVuKCd0cicpWzBdLCBfZm5HZXREYXRhTWFzdGVyKG9TZXR0aW5ncyksIGlEaXNwbGF5U3RhcnQsIGlEaXNwbGF5RW5kLCBhaURpc3BsYXldKTtcblxuICAgIF9mbkNhbGxiYWNrRmlyZShvU2V0dGluZ3MsICdhb0Zvb3RlckNhbGxiYWNrJywgJ2Zvb3RlcicsIFskKG9TZXR0aW5ncy5uVEZvb3QpLmNoaWxkcmVuKCd0cicpWzBdLCBfZm5HZXREYXRhTWFzdGVyKG9TZXR0aW5ncyksIGlEaXNwbGF5U3RhcnQsIGlEaXNwbGF5RW5kLCBhaURpc3BsYXldKTtcblxuICAgIHZhciBib2R5ID0gJChvU2V0dGluZ3MublRCb2R5KTtcbiAgICBib2R5LmNoaWxkcmVuKCkuZGV0YWNoKCk7XG4gICAgYm9keS5hcHBlbmQoJChhblJvd3MpKTtcblxuICAgIF9mbkNhbGxiYWNrRmlyZShvU2V0dGluZ3MsICdhb0RyYXdDYWxsYmFjaycsICdkcmF3JywgW29TZXR0aW5nc10pO1xuXG4gICAgb1NldHRpbmdzLmJTb3J0ZWQgPSBmYWxzZTtcbiAgICBvU2V0dGluZ3MuYkZpbHRlcmVkID0gZmFsc2U7XG4gICAgb1NldHRpbmdzLmJEcmF3aW5nID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBfZm5SZURyYXcoc2V0dGluZ3MsIGhvbGRQb3NpdGlvbikge1xuICAgIHZhciBmZWF0dXJlcyA9IHNldHRpbmdzLm9GZWF0dXJlcyxcbiAgICAgICAgc29ydCA9IGZlYXR1cmVzLmJTb3J0LFxuICAgICAgICBmaWx0ZXIgPSBmZWF0dXJlcy5iRmlsdGVyO1xuXG4gICAgaWYgKHNvcnQpIHtcbiAgICAgIF9mblNvcnQoc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIGlmIChmaWx0ZXIpIHtcbiAgICAgIF9mbkZpbHRlckNvbXBsZXRlKHNldHRpbmdzLCBzZXR0aW5ncy5vUHJldmlvdXNTZWFyY2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXR0aW5ncy5haURpc3BsYXkgPSBzZXR0aW5ncy5haURpc3BsYXlNYXN0ZXIuc2xpY2UoKTtcbiAgICB9XG5cbiAgICBpZiAoaG9sZFBvc2l0aW9uICE9PSB0cnVlKSB7XG4gICAgICBzZXR0aW5ncy5faURpc3BsYXlTdGFydCA9IDA7XG4gICAgfVxuXG4gICAgc2V0dGluZ3MuX2RyYXdIb2xkID0gaG9sZFBvc2l0aW9uO1xuXG4gICAgX2ZuRHJhdyhzZXR0aW5ncyk7XG5cbiAgICBzZXR0aW5ncy5fZHJhd0hvbGQgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mbkFkZE9wdGlvbnNIdG1sKG9TZXR0aW5ncykge1xuICAgIHZhciBjbGFzc2VzID0gb1NldHRpbmdzLm9DbGFzc2VzO1xuICAgIHZhciB0YWJsZSA9ICQob1NldHRpbmdzLm5UYWJsZSk7XG4gICAgdmFyIGhvbGRpbmcgPSAkKCc8ZGl2Lz4nKS5pbnNlcnRCZWZvcmUodGFibGUpO1xuICAgIHZhciBmZWF0dXJlcyA9IG9TZXR0aW5ncy5vRmVhdHVyZXM7XG4gICAgdmFyIGluc2VydCA9ICQoJzxkaXYvPicsIHtcbiAgICAgIGlkOiBvU2V0dGluZ3Muc1RhYmxlSWQgKyAnX3dyYXBwZXInLFxuICAgICAgJ2NsYXNzJzogY2xhc3Nlcy5zV3JhcHBlciArIChvU2V0dGluZ3MublRGb290ID8gJycgOiAnICcgKyBjbGFzc2VzLnNOb0Zvb3RlcilcbiAgICB9KTtcbiAgICBvU2V0dGluZ3MubkhvbGRpbmcgPSBob2xkaW5nWzBdO1xuICAgIG9TZXR0aW5ncy5uVGFibGVXcmFwcGVyID0gaW5zZXJ0WzBdO1xuICAgIG9TZXR0aW5ncy5uVGFibGVSZWluc2VydEJlZm9yZSA9IG9TZXR0aW5ncy5uVGFibGUubmV4dFNpYmxpbmc7XG4gICAgdmFyIGFEb20gPSBvU2V0dGluZ3Muc0RvbS5zcGxpdCgnJyk7XG4gICAgdmFyIGZlYXR1cmVOb2RlLCBjT3B0aW9uLCBuTmV3Tm9kZSwgY05leHQsIHNBdHRyLCBqO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmZWF0dXJlTm9kZSA9IG51bGw7XG4gICAgICBjT3B0aW9uID0gYURvbVtpXTtcblxuICAgICAgaWYgKGNPcHRpb24gPT0gJzwnKSB7XG4gICAgICAgIG5OZXdOb2RlID0gJCgnPGRpdi8+JylbMF07XG4gICAgICAgIGNOZXh0ID0gYURvbVtpICsgMV07XG5cbiAgICAgICAgaWYgKGNOZXh0ID09IFwiJ1wiIHx8IGNOZXh0ID09ICdcIicpIHtcbiAgICAgICAgICBzQXR0ciA9IFwiXCI7XG4gICAgICAgICAgaiA9IDI7XG5cbiAgICAgICAgICB3aGlsZSAoYURvbVtpICsgal0gIT0gY05leHQpIHtcbiAgICAgICAgICAgIHNBdHRyICs9IGFEb21baSArIGpdO1xuICAgICAgICAgICAgaisrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzQXR0ciA9PSBcIkhcIikge1xuICAgICAgICAgICAgc0F0dHIgPSBjbGFzc2VzLnNKVUlIZWFkZXI7XG4gICAgICAgICAgfSBlbHNlIGlmIChzQXR0ciA9PSBcIkZcIikge1xuICAgICAgICAgICAgc0F0dHIgPSBjbGFzc2VzLnNKVUlGb290ZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNBdHRyLmluZGV4T2YoJy4nKSAhPSAtMSkge1xuICAgICAgICAgICAgdmFyIGFTcGxpdCA9IHNBdHRyLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICBuTmV3Tm9kZS5pZCA9IGFTcGxpdFswXS5zdWJzdHIoMSwgYVNwbGl0WzBdLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgbk5ld05vZGUuY2xhc3NOYW1lID0gYVNwbGl0WzFdO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc0F0dHIuY2hhckF0KDApID09IFwiI1wiKSB7XG4gICAgICAgICAgICBuTmV3Tm9kZS5pZCA9IHNBdHRyLnN1YnN0cigxLCBzQXR0ci5sZW5ndGggLSAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbk5ld05vZGUuY2xhc3NOYW1lID0gc0F0dHI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSBqO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5zZXJ0LmFwcGVuZChuTmV3Tm9kZSk7XG4gICAgICAgIGluc2VydCA9ICQobk5ld05vZGUpO1xuICAgICAgfSBlbHNlIGlmIChjT3B0aW9uID09ICc+Jykge1xuICAgICAgICBpbnNlcnQgPSBpbnNlcnQucGFyZW50KCk7XG4gICAgICB9IGVsc2UgaWYgKGNPcHRpb24gPT0gJ2wnICYmIGZlYXR1cmVzLmJQYWdpbmF0ZSAmJiBmZWF0dXJlcy5iTGVuZ3RoQ2hhbmdlKSB7XG4gICAgICAgICAgZmVhdHVyZU5vZGUgPSBfZm5GZWF0dXJlSHRtbExlbmd0aChvU2V0dGluZ3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGNPcHRpb24gPT0gJ2YnICYmIGZlYXR1cmVzLmJGaWx0ZXIpIHtcbiAgICAgICAgICBmZWF0dXJlTm9kZSA9IF9mbkZlYXR1cmVIdG1sRmlsdGVyKG9TZXR0aW5ncyk7XG4gICAgICAgIH0gZWxzZSBpZiAoY09wdGlvbiA9PSAncicgJiYgZmVhdHVyZXMuYlByb2Nlc3NpbmcpIHtcbiAgICAgICAgICBmZWF0dXJlTm9kZSA9IF9mbkZlYXR1cmVIdG1sUHJvY2Vzc2luZyhvU2V0dGluZ3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGNPcHRpb24gPT0gJ3QnKSB7XG4gICAgICAgICAgZmVhdHVyZU5vZGUgPSBfZm5GZWF0dXJlSHRtbFRhYmxlKG9TZXR0aW5ncyk7XG4gICAgICAgIH0gZWxzZSBpZiAoY09wdGlvbiA9PSAnaScgJiYgZmVhdHVyZXMuYkluZm8pIHtcbiAgICAgICAgICBmZWF0dXJlTm9kZSA9IF9mbkZlYXR1cmVIdG1sSW5mbyhvU2V0dGluZ3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGNPcHRpb24gPT0gJ3AnICYmIGZlYXR1cmVzLmJQYWdpbmF0ZSkge1xuICAgICAgICAgIGZlYXR1cmVOb2RlID0gX2ZuRmVhdHVyZUh0bWxQYWdpbmF0ZShvU2V0dGluZ3MpO1xuICAgICAgICB9IGVsc2UgaWYgKERhdGFUYWJsZS5leHQuZmVhdHVyZS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICB2YXIgYW9GZWF0dXJlcyA9IERhdGFUYWJsZS5leHQuZmVhdHVyZTtcblxuICAgICAgICAgIGZvciAodmFyIGsgPSAwLCBrTGVuID0gYW9GZWF0dXJlcy5sZW5ndGg7IGsgPCBrTGVuOyBrKyspIHtcbiAgICAgICAgICAgIGlmIChjT3B0aW9uID09IGFvRmVhdHVyZXNba10uY0ZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgZmVhdHVyZU5vZGUgPSBhb0ZlYXR1cmVzW2tdLmZuSW5pdChvU2V0dGluZ3MpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgaWYgKGZlYXR1cmVOb2RlKSB7XG4gICAgICAgIHZhciBhYW5GZWF0dXJlcyA9IG9TZXR0aW5ncy5hYW5GZWF0dXJlcztcblxuICAgICAgICBpZiAoIWFhbkZlYXR1cmVzW2NPcHRpb25dKSB7XG4gICAgICAgICAgYWFuRmVhdHVyZXNbY09wdGlvbl0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFhbkZlYXR1cmVzW2NPcHRpb25dLnB1c2goZmVhdHVyZU5vZGUpO1xuICAgICAgICBpbnNlcnQuYXBwZW5kKGZlYXR1cmVOb2RlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBob2xkaW5nLnJlcGxhY2VXaXRoKGluc2VydCk7XG4gICAgb1NldHRpbmdzLm5Ib2xkaW5nID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mbkRldGVjdEhlYWRlcihhTGF5b3V0LCBuVGhlYWQpIHtcbiAgICB2YXIgblRycyA9ICQoblRoZWFkKS5jaGlsZHJlbigndHInKTtcbiAgICB2YXIgblRyLCBuQ2VsbDtcbiAgICB2YXIgaSwgaywgbCwgaUxlbiwgakxlbiwgaUNvbFNoaWZ0ZWQsIGlDb2x1bW4sIGlDb2xzcGFuLCBpUm93c3BhbjtcbiAgICB2YXIgYlVuaXF1ZTtcblxuICAgIHZhciBmblNoaWZ0Q29sID0gZnVuY3Rpb24gZm5TaGlmdENvbChhLCBpLCBqKSB7XG4gICAgICB2YXIgayA9IGFbaV07XG5cbiAgICAgIHdoaWxlIChrW2pdKSB7XG4gICAgICAgIGorKztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGo7XG4gICAgfTtcblxuICAgIGFMYXlvdXQuc3BsaWNlKDAsIGFMYXlvdXQubGVuZ3RoKTtcblxuICAgIGZvciAoaSA9IDAsIGlMZW4gPSBuVHJzLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgYUxheW91dC5wdXNoKFtdKTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwLCBpTGVuID0gblRycy5sZW5ndGg7IGkgPCBpTGVuOyBpKyspIHtcbiAgICAgIG5UciA9IG5UcnNbaV07XG4gICAgICBpQ29sdW1uID0gMDtcbiAgICAgIG5DZWxsID0gblRyLmZpcnN0Q2hpbGQ7XG5cbiAgICAgIHdoaWxlIChuQ2VsbCkge1xuICAgICAgICBpZiAobkNlbGwubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PSBcIlREXCIgfHwgbkNlbGwubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PSBcIlRIXCIpIHtcbiAgICAgICAgICBpQ29sc3BhbiA9IG5DZWxsLmdldEF0dHJpYnV0ZSgnY29sc3BhbicpICogMTtcbiAgICAgICAgICBpUm93c3BhbiA9IG5DZWxsLmdldEF0dHJpYnV0ZSgncm93c3BhbicpICogMTtcbiAgICAgICAgICBpQ29sc3BhbiA9ICFpQ29sc3BhbiB8fCBpQ29sc3BhbiA9PT0gMCB8fCBpQ29sc3BhbiA9PT0gMSA/IDEgOiBpQ29sc3BhbjtcbiAgICAgICAgICBpUm93c3BhbiA9ICFpUm93c3BhbiB8fCBpUm93c3BhbiA9PT0gMCB8fCBpUm93c3BhbiA9PT0gMSA/IDEgOiBpUm93c3BhbjtcbiAgICAgICAgICBpQ29sU2hpZnRlZCA9IGZuU2hpZnRDb2woYUxheW91dCwgaSwgaUNvbHVtbik7XG4gICAgICAgICAgYlVuaXF1ZSA9IGlDb2xzcGFuID09PSAxID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICAgICAgZm9yIChsID0gMDsgbCA8IGlDb2xzcGFuOyBsKyspIHtcbiAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBpUm93c3BhbjsgaysrKSB7XG4gICAgICAgICAgICAgIGFMYXlvdXRbaSArIGtdW2lDb2xTaGlmdGVkICsgbF0gPSB7XG4gICAgICAgICAgICAgICAgXCJjZWxsXCI6IG5DZWxsLFxuICAgICAgICAgICAgICAgIFwidW5pcXVlXCI6IGJVbmlxdWVcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgYUxheW91dFtpICsga10ublRyID0gblRyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG5DZWxsID0gbkNlbGwubmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2ZuR2V0VW5pcXVlVGhzKG9TZXR0aW5ncywgbkhlYWRlciwgYUxheW91dCkge1xuICAgIHZhciBhUmV0dXJuID0gW107XG5cbiAgICBpZiAoIWFMYXlvdXQpIHtcbiAgICAgIGFMYXlvdXQgPSBvU2V0dGluZ3MuYW9IZWFkZXI7XG5cbiAgICAgIGlmIChuSGVhZGVyKSB7XG4gICAgICAgIGFMYXlvdXQgPSBbXTtcblxuICAgICAgICBfZm5EZXRlY3RIZWFkZXIoYUxheW91dCwgbkhlYWRlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlMZW4gPSBhTGF5b3V0Lmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGpMZW4gPSBhTGF5b3V0W2ldLmxlbmd0aDsgaiA8IGpMZW47IGorKykge1xuICAgICAgICBpZiAoYUxheW91dFtpXVtqXS51bmlxdWUgJiYgKCFhUmV0dXJuW2pdIHx8ICFvU2V0dGluZ3MuYlNvcnRDZWxsc1RvcCkpIHtcbiAgICAgICAgICBhUmV0dXJuW2pdID0gYUxheW91dFtpXVtqXS5jZWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFSZXR1cm47XG4gIH1cblxuICBmdW5jdGlvbiBfZm5CdWlsZEFqYXgob1NldHRpbmdzLCBkYXRhLCBmbikge1xuICAgIF9mbkNhbGxiYWNrRmlyZShvU2V0dGluZ3MsICdhb1NlcnZlclBhcmFtcycsICdzZXJ2ZXJQYXJhbXMnLCBbZGF0YV0pO1xuXG4gICAgaWYgKGRhdGEgJiYgJC5pc0FycmF5KGRhdGEpKSB7XG4gICAgICB2YXIgdG1wID0ge307XG4gICAgICB2YXIgcmJyYWNrZXQgPSAvKC4qPylcXFtcXF0kLztcbiAgICAgICQuZWFjaChkYXRhLCBmdW5jdGlvbiAoa2V5LCB2YWwpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gdmFsLm5hbWUubWF0Y2gocmJyYWNrZXQpO1xuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIHZhciBuYW1lID0gbWF0Y2hbMF07XG5cbiAgICAgICAgICBpZiAoIXRtcFtuYW1lXSkge1xuICAgICAgICAgICAgdG1wW25hbWVdID0gW107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdG1wW25hbWVdLnB1c2godmFsLnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0bXBbdmFsLm5hbWVdID0gdmFsLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGRhdGEgPSB0bXA7XG4gICAgfVxuXG4gICAgdmFyIGFqYXhEYXRhO1xuICAgIHZhciBhamF4ID0gb1NldHRpbmdzLmFqYXg7XG4gICAgdmFyIGluc3RhbmNlID0gb1NldHRpbmdzLm9JbnN0YW5jZTtcblxuICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKGpzb24pIHtcbiAgICAgIF9mbkNhbGxiYWNrRmlyZShvU2V0dGluZ3MsIG51bGwsICd4aHInLCBbb1NldHRpbmdzLCBqc29uLCBvU2V0dGluZ3MuanFYSFJdKTtcblxuICAgICAgZm4oanNvbik7XG4gICAgfTtcblxuICAgIGlmICgkLmlzUGxhaW5PYmplY3QoYWpheCkgJiYgYWpheC5kYXRhKSB7XG4gICAgICBhamF4RGF0YSA9IGFqYXguZGF0YTtcbiAgICAgIHZhciBuZXdEYXRhID0gdHlwZW9mIGFqYXhEYXRhID09PSAnZnVuY3Rpb24nID8gYWpheERhdGEoZGF0YSwgb1NldHRpbmdzKSA6IGFqYXhEYXRhO1xuICAgICAgZGF0YSA9IHR5cGVvZiBhamF4RGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiBuZXdEYXRhID8gbmV3RGF0YSA6ICQuZXh0ZW5kKHRydWUsIGRhdGEsIG5ld0RhdGEpO1xuICAgICAgZGVsZXRlIGFqYXguZGF0YTtcbiAgICB9XG5cbiAgICB2YXIgYmFzZUFqYXggPSB7XG4gICAgICBcImRhdGFcIjogZGF0YSxcbiAgICAgIFwic3VjY2Vzc1wiOiBmdW5jdGlvbiBzdWNjZXNzKGpzb24pIHtcbiAgICAgICAgdmFyIGVycm9yID0ganNvbi5lcnJvciB8fCBqc29uLnNFcnJvcjtcblxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBfZm5Mb2cob1NldHRpbmdzLCAwLCBlcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICBvU2V0dGluZ3MuanNvbiA9IGpzb247XG4gICAgICAgIGNhbGxiYWNrKGpzb24pO1xuICAgICAgfSxcbiAgICAgIFwiZGF0YVR5cGVcIjogXCJqc29uXCIsXG4gICAgICBcImNhY2hlXCI6IGZhbHNlLFxuICAgICAgXCJ0eXBlXCI6IG9TZXR0aW5ncy5zU2VydmVyTWV0aG9kLFxuICAgICAgXCJlcnJvclwiOiBmdW5jdGlvbiBlcnJvcih4aHIsIF9lcnJvciwgdGhyb3duKSB7XG4gICAgICAgIHZhciByZXQgPSBfZm5DYWxsYmFja0ZpcmUob1NldHRpbmdzLCBudWxsLCAneGhyJywgW29TZXR0aW5ncywgbnVsbCwgb1NldHRpbmdzLmpxWEhSXSk7XG5cbiAgICAgICAgaWYgKCQuaW5BcnJheSh0cnVlLCByZXQpID09PSAtMSkge1xuICAgICAgICAgIGlmIChfZXJyb3IgPT0gXCJwYXJzZXJlcnJvclwiKSB7XG4gICAgICAgICAgICBfZm5Mb2cob1NldHRpbmdzLCAwLCAnSW52YWxpZCBKU09OIHJlc3BvbnNlJywgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgX2ZuTG9nKG9TZXR0aW5ncywgMCwgJ0FqYXggZXJyb3InLCA3KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfZm5Qcm9jZXNzaW5nRGlzcGxheShvU2V0dGluZ3MsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIG9TZXR0aW5ncy5vQWpheERhdGEgPSBkYXRhO1xuXG4gICAgX2ZuQ2FsbGJhY2tGaXJlKG9TZXR0aW5ncywgbnVsbCwgJ3ByZVhocicsIFtvU2V0dGluZ3MsIGRhdGFdKTtcblxuICAgIGlmIChvU2V0dGluZ3MuZm5TZXJ2ZXJEYXRhKSB7XG4gICAgICBvU2V0dGluZ3MuZm5TZXJ2ZXJEYXRhLmNhbGwoaW5zdGFuY2UsIG9TZXR0aW5ncy5zQWpheFNvdXJjZSwgJC5tYXAoZGF0YSwgZnVuY3Rpb24gKHZhbCwga2V5KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgIHZhbHVlOiB2YWxcbiAgICAgICAgfTtcbiAgICAgIH0pLCBjYWxsYmFjaywgb1NldHRpbmdzKTtcbiAgICB9IGVsc2UgaWYgKG9TZXR0aW5ncy5zQWpheFNvdXJjZSB8fCB0eXBlb2YgYWpheCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9TZXR0aW5ncy5qcVhIUiA9ICQuYWpheCgkLmV4dGVuZChiYXNlQWpheCwge1xuICAgICAgICB1cmw6IGFqYXggfHwgb1NldHRpbmdzLnNBamF4U291cmNlXG4gICAgICB9KSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYWpheCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb1NldHRpbmdzLmpxWEhSID0gYWpheC5jYWxsKGluc3RhbmNlLCBkYXRhLCBjYWxsYmFjaywgb1NldHRpbmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb1NldHRpbmdzLmpxWEhSID0gJC5hamF4KCQuZXh0ZW5kKGJhc2VBamF4LCBhamF4KSk7XG4gICAgICBhamF4LmRhdGEgPSBhamF4RGF0YTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZm5BamF4VXBkYXRlKHNldHRpbmdzKSB7XG4gICAgaWYgKHNldHRpbmdzLmJBamF4RGF0YUdldCkge1xuICAgICAgc2V0dGluZ3MuaURyYXcrKztcblxuICAgICAgX2ZuUHJvY2Vzc2luZ0Rpc3BsYXkoc2V0dGluZ3MsIHRydWUpO1xuXG4gICAgICBfZm5CdWlsZEFqYXgoc2V0dGluZ3MsIF9mbkFqYXhQYXJhbWV0ZXJzKHNldHRpbmdzKSwgZnVuY3Rpb24gKGpzb24pIHtcbiAgICAgICAgX2ZuQWpheFVwZGF0ZURyYXcoc2V0dGluZ3MsIGpzb24pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mbkFqYXhQYXJhbWV0ZXJzKHNldHRpbmdzKSB7XG4gICAgdmFyIGNvbHVtbnMgPSBzZXR0aW5ncy5hb0NvbHVtbnMsXG4gICAgICAgIGNvbHVtbkNvdW50ID0gY29sdW1ucy5sZW5ndGgsXG4gICAgICAgIGZlYXR1cmVzID0gc2V0dGluZ3Mub0ZlYXR1cmVzLFxuICAgICAgICBwcmVTZWFyY2ggPSBzZXR0aW5ncy5vUHJldmlvdXNTZWFyY2gsXG4gICAgICAgIHByZUNvbFNlYXJjaCA9IHNldHRpbmdzLmFvUHJlU2VhcmNoQ29scyxcbiAgICAgICAgaSxcbiAgICAgICAgZGF0YSA9IFtdLFxuICAgICAgICBkYXRhUHJvcCxcbiAgICAgICAgY29sdW1uLFxuICAgICAgICBjb2x1bW5TZWFyY2gsXG4gICAgICAgIHNvcnQgPSBfZm5Tb3J0RmxhdHRlbihzZXR0aW5ncyksXG4gICAgICAgIGRpc3BsYXlTdGFydCA9IHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0LFxuICAgICAgICBkaXNwbGF5TGVuZ3RoID0gZmVhdHVyZXMuYlBhZ2luYXRlICE9PSBmYWxzZSA/IHNldHRpbmdzLl9pRGlzcGxheUxlbmd0aCA6IC0xO1xuXG4gICAgdmFyIHBhcmFtID0gZnVuY3Rpb24gcGFyYW0obmFtZSwgdmFsdWUpIHtcbiAgICAgIGRhdGEucHVzaCh7XG4gICAgICAgICduYW1lJzogbmFtZSxcbiAgICAgICAgJ3ZhbHVlJzogdmFsdWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwYXJhbSgnc0VjaG8nLCBzZXR0aW5ncy5pRHJhdyk7XG4gICAgcGFyYW0oJ2lDb2x1bW5zJywgY29sdW1uQ291bnQpO1xuICAgIHBhcmFtKCdzQ29sdW1ucycsIF9wbHVjayhjb2x1bW5zLCAnc05hbWUnKS5qb2luKCcsJykpO1xuICAgIHBhcmFtKCdpRGlzcGxheVN0YXJ0JywgZGlzcGxheVN0YXJ0KTtcbiAgICBwYXJhbSgnaURpc3BsYXlMZW5ndGgnLCBkaXNwbGF5TGVuZ3RoKTtcbiAgICB2YXIgZCA9IHtcbiAgICAgIGRyYXc6IHNldHRpbmdzLmlEcmF3LFxuICAgICAgY29sdW1uczogW10sXG4gICAgICBvcmRlcjogW10sXG4gICAgICBzdGFydDogZGlzcGxheVN0YXJ0LFxuICAgICAgbGVuZ3RoOiBkaXNwbGF5TGVuZ3RoLFxuICAgICAgc2VhcmNoOiB7XG4gICAgICAgIHZhbHVlOiBwcmVTZWFyY2guc1NlYXJjaCxcbiAgICAgICAgcmVnZXg6IHByZVNlYXJjaC5iUmVnZXhcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGNvbHVtbkNvdW50OyBpKyspIHtcbiAgICAgIGNvbHVtbiA9IGNvbHVtbnNbaV07XG4gICAgICBjb2x1bW5TZWFyY2ggPSBwcmVDb2xTZWFyY2hbaV07XG4gICAgICBkYXRhUHJvcCA9IHR5cGVvZiBjb2x1bW4ubURhdGEgPT0gXCJmdW5jdGlvblwiID8gJ2Z1bmN0aW9uJyA6IGNvbHVtbi5tRGF0YTtcbiAgICAgIGQuY29sdW1ucy5wdXNoKHtcbiAgICAgICAgZGF0YTogZGF0YVByb3AsXG4gICAgICAgIG5hbWU6IGNvbHVtbi5zTmFtZSxcbiAgICAgICAgc2VhcmNoYWJsZTogY29sdW1uLmJTZWFyY2hhYmxlLFxuICAgICAgICBvcmRlcmFibGU6IGNvbHVtbi5iU29ydGFibGUsXG4gICAgICAgIHNlYXJjaDoge1xuICAgICAgICAgIHZhbHVlOiBjb2x1bW5TZWFyY2guc1NlYXJjaCxcbiAgICAgICAgICByZWdleDogY29sdW1uU2VhcmNoLmJSZWdleFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHBhcmFtKFwibURhdGFQcm9wX1wiICsgaSwgZGF0YVByb3ApO1xuXG4gICAgICBpZiAoZmVhdHVyZXMuYkZpbHRlcikge1xuICAgICAgICBwYXJhbSgnc1NlYXJjaF8nICsgaSwgY29sdW1uU2VhcmNoLnNTZWFyY2gpO1xuICAgICAgICBwYXJhbSgnYlJlZ2V4XycgKyBpLCBjb2x1bW5TZWFyY2guYlJlZ2V4KTtcbiAgICAgICAgcGFyYW0oJ2JTZWFyY2hhYmxlXycgKyBpLCBjb2x1bW4uYlNlYXJjaGFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmVhdHVyZXMuYlNvcnQpIHtcbiAgICAgICAgcGFyYW0oJ2JTb3J0YWJsZV8nICsgaSwgY29sdW1uLmJTb3J0YWJsZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGZlYXR1cmVzLmJGaWx0ZXIpIHtcbiAgICAgIHBhcmFtKCdzU2VhcmNoJywgcHJlU2VhcmNoLnNTZWFyY2gpO1xuICAgICAgcGFyYW0oJ2JSZWdleCcsIHByZVNlYXJjaC5iUmVnZXgpO1xuICAgIH1cblxuICAgIGlmIChmZWF0dXJlcy5iU29ydCkge1xuICAgICAgJC5lYWNoKHNvcnQsIGZ1bmN0aW9uIChpLCB2YWwpIHtcbiAgICAgICAgZC5vcmRlci5wdXNoKHtcbiAgICAgICAgICBjb2x1bW46IHZhbC5jb2wsXG4gICAgICAgICAgZGlyOiB2YWwuZGlyXG4gICAgICAgIH0pO1xuICAgICAgICBwYXJhbSgnaVNvcnRDb2xfJyArIGksIHZhbC5jb2wpO1xuICAgICAgICBwYXJhbSgnc1NvcnREaXJfJyArIGksIHZhbC5kaXIpO1xuICAgICAgfSk7XG4gICAgICBwYXJhbSgnaVNvcnRpbmdDb2xzJywgc29ydC5sZW5ndGgpO1xuICAgIH1cblxuICAgIHZhciBsZWdhY3kgPSBEYXRhVGFibGUuZXh0LmxlZ2FjeS5hamF4O1xuXG4gICAgaWYgKGxlZ2FjeSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHNldHRpbmdzLnNBamF4U291cmNlID8gZGF0YSA6IGQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxlZ2FjeSA/IGRhdGEgOiBkO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuQWpheFVwZGF0ZURyYXcoc2V0dGluZ3MsIGpzb24pIHtcbiAgICB2YXIgY29tcGF0ID0gZnVuY3Rpb24gY29tcGF0KG9sZCwgbW9kZXJuKSB7XG4gICAgICByZXR1cm4ganNvbltvbGRdICE9PSB1bmRlZmluZWQgPyBqc29uW29sZF0gOiBqc29uW21vZGVybl07XG4gICAgfTtcblxuICAgIHZhciBkYXRhID0gX2ZuQWpheERhdGFTcmMoc2V0dGluZ3MsIGpzb24pO1xuXG4gICAgdmFyIGRyYXcgPSBjb21wYXQoJ3NFY2hvJywgJ2RyYXcnKTtcbiAgICB2YXIgcmVjb3Jkc1RvdGFsID0gY29tcGF0KCdpVG90YWxSZWNvcmRzJywgJ3JlY29yZHNUb3RhbCcpO1xuICAgIHZhciByZWNvcmRzRmlsdGVyZWQgPSBjb21wYXQoJ2lUb3RhbERpc3BsYXlSZWNvcmRzJywgJ3JlY29yZHNGaWx0ZXJlZCcpO1xuXG4gICAgaWYgKGRyYXcpIHtcbiAgICAgIGlmIChkcmF3ICogMSA8IHNldHRpbmdzLmlEcmF3KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0dGluZ3MuaURyYXcgPSBkcmF3ICogMTtcbiAgICB9XG5cbiAgICBfZm5DbGVhclRhYmxlKHNldHRpbmdzKTtcblxuICAgIHNldHRpbmdzLl9pUmVjb3Jkc1RvdGFsID0gcGFyc2VJbnQocmVjb3Jkc1RvdGFsLCAxMCk7XG4gICAgc2V0dGluZ3MuX2lSZWNvcmRzRGlzcGxheSA9IHBhcnNlSW50KHJlY29yZHNGaWx0ZXJlZCwgMTApO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGllbiA9IGRhdGEubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgIF9mbkFkZERhdGEoc2V0dGluZ3MsIGRhdGFbaV0pO1xuICAgIH1cblxuICAgIHNldHRpbmdzLmFpRGlzcGxheSA9IHNldHRpbmdzLmFpRGlzcGxheU1hc3Rlci5zbGljZSgpO1xuICAgIHNldHRpbmdzLmJBamF4RGF0YUdldCA9IGZhbHNlO1xuXG4gICAgX2ZuRHJhdyhzZXR0aW5ncyk7XG5cbiAgICBpZiAoIXNldHRpbmdzLl9iSW5pdENvbXBsZXRlKSB7XG4gICAgICBfZm5Jbml0Q29tcGxldGUoc2V0dGluZ3MsIGpzb24pO1xuICAgIH1cblxuICAgIHNldHRpbmdzLmJBamF4RGF0YUdldCA9IHRydWU7XG5cbiAgICBfZm5Qcm9jZXNzaW5nRGlzcGxheShzZXR0aW5ncywgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuQWpheERhdGFTcmMob1NldHRpbmdzLCBqc29uKSB7XG4gICAgdmFyIGRhdGFTcmMgPSAkLmlzUGxhaW5PYmplY3Qob1NldHRpbmdzLmFqYXgpICYmIG9TZXR0aW5ncy5hamF4LmRhdGFTcmMgIT09IHVuZGVmaW5lZCA/IG9TZXR0aW5ncy5hamF4LmRhdGFTcmMgOiBvU2V0dGluZ3Muc0FqYXhEYXRhUHJvcDtcblxuICAgIGlmIChkYXRhU3JjID09PSAnZGF0YScpIHtcbiAgICAgIHJldHVybiBqc29uLmFhRGF0YSB8fCBqc29uW2RhdGFTcmNdO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhU3JjICE9PSBcIlwiID8gX2ZuR2V0T2JqZWN0RGF0YUZuKGRhdGFTcmMpKGpzb24pIDoganNvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mbkZlYXR1cmVIdG1sRmlsdGVyKHNldHRpbmdzKSB7XG4gICAgdmFyIGNsYXNzZXMgPSBzZXR0aW5ncy5vQ2xhc3NlcztcbiAgICB2YXIgdGFibGVJZCA9IHNldHRpbmdzLnNUYWJsZUlkO1xuICAgIHZhciBsYW5ndWFnZSA9IHNldHRpbmdzLm9MYW5ndWFnZTtcbiAgICB2YXIgcHJldmlvdXNTZWFyY2ggPSBzZXR0aW5ncy5vUHJldmlvdXNTZWFyY2g7XG4gICAgdmFyIGZlYXR1cmVzID0gc2V0dGluZ3MuYWFuRmVhdHVyZXM7XG4gICAgdmFyIGlucHV0ID0gJzxpbnB1dCB0eXBlPVwic2VhcmNoXCIgY2xhc3M9XCInICsgY2xhc3Nlcy5zRmlsdGVySW5wdXQgKyAnXCIvPic7XG4gICAgdmFyIHN0ciA9IGxhbmd1YWdlLnNTZWFyY2g7XG4gICAgc3RyID0gc3RyLm1hdGNoKC9fSU5QVVRfLykgPyBzdHIucmVwbGFjZSgnX0lOUFVUXycsIGlucHV0KSA6IHN0ciArIGlucHV0O1xuICAgIHZhciBmaWx0ZXIgPSAkKCc8ZGl2Lz4nLCB7XG4gICAgICAnaWQnOiAhZmVhdHVyZXMuZiA/IHRhYmxlSWQgKyAnX2ZpbHRlcicgOiBudWxsLFxuICAgICAgJ2NsYXNzJzogY2xhc3Nlcy5zRmlsdGVyXG4gICAgfSkuYXBwZW5kKCQoJzxsYWJlbC8+JykuYXBwZW5kKHN0cikpO1xuXG4gICAgdmFyIHNlYXJjaEZuID0gZnVuY3Rpb24gc2VhcmNoRm4oKSB7XG4gICAgICB2YXIgbiA9IGZlYXR1cmVzLmY7XG4gICAgICB2YXIgdmFsID0gIXRoaXMudmFsdWUgPyBcIlwiIDogdGhpcy52YWx1ZTtcblxuICAgICAgaWYgKHZhbCAhPSBwcmV2aW91c1NlYXJjaC5zU2VhcmNoKSB7XG4gICAgICAgIF9mbkZpbHRlckNvbXBsZXRlKHNldHRpbmdzLCB7XG4gICAgICAgICAgXCJzU2VhcmNoXCI6IHZhbCxcbiAgICAgICAgICBcImJSZWdleFwiOiBwcmV2aW91c1NlYXJjaC5iUmVnZXgsXG4gICAgICAgICAgXCJiU21hcnRcIjogcHJldmlvdXNTZWFyY2guYlNtYXJ0LFxuICAgICAgICAgIFwiYkNhc2VJbnNlbnNpdGl2ZVwiOiBwcmV2aW91c1NlYXJjaC5iQ2FzZUluc2Vuc2l0aXZlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0ID0gMDtcblxuICAgICAgICBfZm5EcmF3KHNldHRpbmdzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHNlYXJjaERlbGF5ID0gc2V0dGluZ3Muc2VhcmNoRGVsYXkgIT09IG51bGwgPyBzZXR0aW5ncy5zZWFyY2hEZWxheSA6IF9mbkRhdGFTb3VyY2Uoc2V0dGluZ3MpID09PSAnc3NwJyA/IDQwMCA6IDA7XG4gICAgdmFyIGpxRmlsdGVyID0gJCgnaW5wdXQnLCBmaWx0ZXIpLnZhbChwcmV2aW91c1NlYXJjaC5zU2VhcmNoKS5hdHRyKCdwbGFjZWhvbGRlcicsIGxhbmd1YWdlLnNTZWFyY2hQbGFjZWhvbGRlcikub24oJ2tleXVwLkRUIHNlYXJjaC5EVCBpbnB1dC5EVCBwYXN0ZS5EVCBjdXQuRFQnLCBzZWFyY2hEZWxheSA/IF9mblRocm90dGxlKHNlYXJjaEZuLCBzZWFyY2hEZWxheSkgOiBzZWFyY2hGbikub24oJ2tleXByZXNzLkRUJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLmtleUNvZGUgPT0gMTMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pLmF0dHIoJ2FyaWEtY29udHJvbHMnLCB0YWJsZUlkKTtcbiAgICAkKHNldHRpbmdzLm5UYWJsZSkub24oJ3NlYXJjaC5kdC5EVCcsIGZ1bmN0aW9uIChldiwgcykge1xuICAgICAgaWYgKHNldHRpbmdzID09PSBzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGpxRmlsdGVyWzBdICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICBqcUZpbHRlci52YWwocHJldmlvdXNTZWFyY2guc1NlYXJjaCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmaWx0ZXJbMF07XG4gIH1cblxuICBmdW5jdGlvbiBfZm5GaWx0ZXJDb21wbGV0ZShvU2V0dGluZ3MsIG9JbnB1dCwgaUZvcmNlKSB7XG4gICAgdmFyIG9QcmV2U2VhcmNoID0gb1NldHRpbmdzLm9QcmV2aW91c1NlYXJjaDtcbiAgICB2YXIgYW9QcmV2U2VhcmNoID0gb1NldHRpbmdzLmFvUHJlU2VhcmNoQ29scztcblxuICAgIHZhciBmblNhdmVGaWx0ZXIgPSBmdW5jdGlvbiBmblNhdmVGaWx0ZXIob0ZpbHRlcikge1xuICAgICAgb1ByZXZTZWFyY2guc1NlYXJjaCA9IG9GaWx0ZXIuc1NlYXJjaDtcbiAgICAgIG9QcmV2U2VhcmNoLmJSZWdleCA9IG9GaWx0ZXIuYlJlZ2V4O1xuICAgICAgb1ByZXZTZWFyY2guYlNtYXJ0ID0gb0ZpbHRlci5iU21hcnQ7XG4gICAgICBvUHJldlNlYXJjaC5iQ2FzZUluc2Vuc2l0aXZlID0gb0ZpbHRlci5iQ2FzZUluc2Vuc2l0aXZlO1xuICAgIH07XG5cbiAgICB2YXIgZm5SZWdleCA9IGZ1bmN0aW9uIGZuUmVnZXgobykge1xuICAgICAgcmV0dXJuIG8uYkVzY2FwZVJlZ2V4ICE9PSB1bmRlZmluZWQgPyAhby5iRXNjYXBlUmVnZXggOiBvLmJSZWdleDtcbiAgICB9O1xuXG4gICAgX2ZuQ29sdW1uVHlwZXMob1NldHRpbmdzKTtcblxuICAgIGlmIChfZm5EYXRhU291cmNlKG9TZXR0aW5ncykgIT0gJ3NzcCcpIHtcbiAgICAgIF9mbkZpbHRlcihvU2V0dGluZ3MsIG9JbnB1dC5zU2VhcmNoLCBpRm9yY2UsIGZuUmVnZXgob0lucHV0KSwgb0lucHV0LmJTbWFydCwgb0lucHV0LmJDYXNlSW5zZW5zaXRpdmUpO1xuXG4gICAgICBmblNhdmVGaWx0ZXIob0lucHV0KTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhb1ByZXZTZWFyY2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgX2ZuRmlsdGVyQ29sdW1uKG9TZXR0aW5ncywgYW9QcmV2U2VhcmNoW2ldLnNTZWFyY2gsIGksIGZuUmVnZXgoYW9QcmV2U2VhcmNoW2ldKSwgYW9QcmV2U2VhcmNoW2ldLmJTbWFydCwgYW9QcmV2U2VhcmNoW2ldLmJDYXNlSW5zZW5zaXRpdmUpO1xuICAgICAgfVxuXG4gICAgICBfZm5GaWx0ZXJDdXN0b20ob1NldHRpbmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm5TYXZlRmlsdGVyKG9JbnB1dCk7XG4gICAgfVxuXG4gICAgb1NldHRpbmdzLmJGaWx0ZXJlZCA9IHRydWU7XG5cbiAgICBfZm5DYWxsYmFja0ZpcmUob1NldHRpbmdzLCBudWxsLCAnc2VhcmNoJywgW29TZXR0aW5nc10pO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuRmlsdGVyQ3VzdG9tKHNldHRpbmdzKSB7XG4gICAgdmFyIGZpbHRlcnMgPSBEYXRhVGFibGUuZXh0LnNlYXJjaDtcbiAgICB2YXIgZGlzcGxheVJvd3MgPSBzZXR0aW5ncy5haURpc3BsYXk7XG4gICAgdmFyIHJvdywgcm93SWR4O1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGllbiA9IGZpbHRlcnMubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgIHZhciByb3dzID0gW107XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqZW4gPSBkaXNwbGF5Um93cy5sZW5ndGg7IGogPCBqZW47IGorKykge1xuICAgICAgICByb3dJZHggPSBkaXNwbGF5Um93c1tqXTtcbiAgICAgICAgcm93ID0gc2V0dGluZ3MuYW9EYXRhW3Jvd0lkeF07XG5cbiAgICAgICAgaWYgKGZpbHRlcnNbaV0oc2V0dGluZ3MsIHJvdy5fYUZpbHRlckRhdGEsIHJvd0lkeCwgcm93Ll9hRGF0YSwgaikpIHtcbiAgICAgICAgICByb3dzLnB1c2gocm93SWR4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkaXNwbGF5Um93cy5sZW5ndGggPSAwO1xuICAgICAgJC5tZXJnZShkaXNwbGF5Um93cywgcm93cyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2ZuRmlsdGVyQ29sdW1uKHNldHRpbmdzLCBzZWFyY2hTdHIsIGNvbElkeCwgcmVnZXgsIHNtYXJ0LCBjYXNlSW5zZW5zaXRpdmUpIHtcbiAgICBpZiAoc2VhcmNoU3RyID09PSAnJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkYXRhO1xuICAgIHZhciBvdXQgPSBbXTtcbiAgICB2YXIgZGlzcGxheSA9IHNldHRpbmdzLmFpRGlzcGxheTtcblxuICAgIHZhciBycFNlYXJjaCA9IF9mbkZpbHRlckNyZWF0ZVNlYXJjaChzZWFyY2hTdHIsIHJlZ2V4LCBzbWFydCwgY2FzZUluc2Vuc2l0aXZlKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzcGxheS5sZW5ndGg7IGkrKykge1xuICAgICAgZGF0YSA9IHNldHRpbmdzLmFvRGF0YVtkaXNwbGF5W2ldXS5fYUZpbHRlckRhdGFbY29sSWR4XTtcblxuICAgICAgaWYgKHJwU2VhcmNoLnRlc3QoZGF0YSkpIHtcbiAgICAgICAgb3V0LnB1c2goZGlzcGxheVtpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2V0dGluZ3MuYWlEaXNwbGF5ID0gb3V0O1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuRmlsdGVyKHNldHRpbmdzLCBpbnB1dCwgZm9yY2UsIHJlZ2V4LCBzbWFydCwgY2FzZUluc2Vuc2l0aXZlKSB7XG4gICAgdmFyIHJwU2VhcmNoID0gX2ZuRmlsdGVyQ3JlYXRlU2VhcmNoKGlucHV0LCByZWdleCwgc21hcnQsIGNhc2VJbnNlbnNpdGl2ZSk7XG5cbiAgICB2YXIgcHJldlNlYXJjaCA9IHNldHRpbmdzLm9QcmV2aW91c1NlYXJjaC5zU2VhcmNoO1xuICAgIHZhciBkaXNwbGF5TWFzdGVyID0gc2V0dGluZ3MuYWlEaXNwbGF5TWFzdGVyO1xuICAgIHZhciBkaXNwbGF5LCBpbnZhbGlkYXRlZCwgaTtcbiAgICB2YXIgZmlsdGVyZWQgPSBbXTtcblxuICAgIGlmIChEYXRhVGFibGUuZXh0LnNlYXJjaC5sZW5ndGggIT09IDApIHtcbiAgICAgIGZvcmNlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpbnZhbGlkYXRlZCA9IF9mbkZpbHRlckRhdGEoc2V0dGluZ3MpO1xuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSAwKSB7XG4gICAgICBzZXR0aW5ncy5haURpc3BsYXkgPSBkaXNwbGF5TWFzdGVyLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpbnZhbGlkYXRlZCB8fCBmb3JjZSB8fCBwcmV2U2VhcmNoLmxlbmd0aCA+IGlucHV0Lmxlbmd0aCB8fCBpbnB1dC5pbmRleE9mKHByZXZTZWFyY2gpICE9PSAwIHx8IHNldHRpbmdzLmJTb3J0ZWQpIHtcbiAgICAgICAgICBzZXR0aW5ncy5haURpc3BsYXkgPSBkaXNwbGF5TWFzdGVyLnNsaWNlKCk7XG4gICAgICAgIH1cblxuICAgICAgZGlzcGxheSA9IHNldHRpbmdzLmFpRGlzcGxheTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGRpc3BsYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHJwU2VhcmNoLnRlc3Qoc2V0dGluZ3MuYW9EYXRhW2Rpc3BsYXlbaV1dLl9zRmlsdGVyUm93KSkge1xuICAgICAgICAgIGZpbHRlcmVkLnB1c2goZGlzcGxheVtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2V0dGluZ3MuYWlEaXNwbGF5ID0gZmlsdGVyZWQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2ZuRmlsdGVyQ3JlYXRlU2VhcmNoKHNlYXJjaCwgcmVnZXgsIHNtYXJ0LCBjYXNlSW5zZW5zaXRpdmUpIHtcbiAgICBzZWFyY2ggPSByZWdleCA/IHNlYXJjaCA6IF9mbkVzY2FwZVJlZ2V4KHNlYXJjaCk7XG5cbiAgICBpZiAoc21hcnQpIHtcbiAgICAgIHZhciBhID0gJC5tYXAoc2VhcmNoLm1hdGNoKC9cIlteXCJdK1wifFteIF0rL2cpIHx8IFsnJ10sIGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgICAgIGlmICh3b3JkLmNoYXJBdCgwKSA9PT0gJ1wiJykge1xuICAgICAgICAgIHZhciBtID0gd29yZC5tYXRjaCgvXlwiKC4qKVwiJC8pO1xuICAgICAgICAgIHdvcmQgPSBtID8gbVsxXSA6IHdvcmQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gd29yZC5yZXBsYWNlKCdcIicsICcnKTtcbiAgICAgIH0pO1xuICAgICAgc2VhcmNoID0gJ14oPz0uKj8nICsgYS5qb2luKCcpKD89Lio/JykgKyAnKS4qJCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoc2VhcmNoLCBjYXNlSW5zZW5zaXRpdmUgPyAnaScgOiAnJyk7XG4gIH1cblxuICB2YXIgX2ZuRXNjYXBlUmVnZXggPSBEYXRhVGFibGUudXRpbC5lc2NhcGVSZWdleDtcbiAgdmFyIF9fZmlsdGVyX2RpdiA9ICQoJzxkaXY+JylbMF07XG5cbiAgdmFyIF9fZmlsdGVyX2Rpdl90ZXh0Q29udGVudCA9IF9fZmlsdGVyX2Rpdi50ZXh0Q29udGVudCAhPT0gdW5kZWZpbmVkO1xuXG4gIGZ1bmN0aW9uIF9mbkZpbHRlckRhdGEoc2V0dGluZ3MpIHtcbiAgICB2YXIgY29sdW1ucyA9IHNldHRpbmdzLmFvQ29sdW1ucztcbiAgICB2YXIgY29sdW1uO1xuICAgIHZhciBpLCBqLCBpZW4sIGplbiwgZmlsdGVyRGF0YSwgY2VsbERhdGEsIHJvdztcbiAgICB2YXIgZm9tYXR0ZXJzID0gRGF0YVRhYmxlLmV4dC50eXBlLnNlYXJjaDtcbiAgICB2YXIgd2FzSW52YWxpZGF0ZWQgPSBmYWxzZTtcblxuICAgIGZvciAoaSA9IDAsIGllbiA9IHNldHRpbmdzLmFvRGF0YS5sZW5ndGg7IGkgPCBpZW47IGkrKykge1xuICAgICAgcm93ID0gc2V0dGluZ3MuYW9EYXRhW2ldO1xuXG4gICAgICBpZiAoIXJvdy5fYUZpbHRlckRhdGEpIHtcbiAgICAgICAgZmlsdGVyRGF0YSA9IFtdO1xuXG4gICAgICAgIGZvciAoaiA9IDAsIGplbiA9IGNvbHVtbnMubGVuZ3RoOyBqIDwgamVuOyBqKyspIHtcbiAgICAgICAgICBjb2x1bW4gPSBjb2x1bW5zW2pdO1xuXG4gICAgICAgICAgaWYgKGNvbHVtbi5iU2VhcmNoYWJsZSkge1xuICAgICAgICAgICAgY2VsbERhdGEgPSBfZm5HZXRDZWxsRGF0YShzZXR0aW5ncywgaSwgaiwgJ2ZpbHRlcicpO1xuXG4gICAgICAgICAgICBpZiAoZm9tYXR0ZXJzW2NvbHVtbi5zVHlwZV0pIHtcbiAgICAgICAgICAgICAgY2VsbERhdGEgPSBmb21hdHRlcnNbY29sdW1uLnNUeXBlXShjZWxsRGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjZWxsRGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICBjZWxsRGF0YSA9ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNlbGxEYXRhICE9PSAnc3RyaW5nJyAmJiBjZWxsRGF0YS50b1N0cmluZykge1xuICAgICAgICAgICAgICBjZWxsRGF0YSA9IGNlbGxEYXRhLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNlbGxEYXRhID0gJyc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNlbGxEYXRhLmluZGV4T2YgJiYgY2VsbERhdGEuaW5kZXhPZignJicpICE9PSAtMSkge1xuICAgICAgICAgICAgX19maWx0ZXJfZGl2LmlubmVySFRNTCA9IGNlbGxEYXRhO1xuICAgICAgICAgICAgY2VsbERhdGEgPSBfX2ZpbHRlcl9kaXZfdGV4dENvbnRlbnQgPyBfX2ZpbHRlcl9kaXYudGV4dENvbnRlbnQgOiBfX2ZpbHRlcl9kaXYuaW5uZXJUZXh0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjZWxsRGF0YS5yZXBsYWNlKSB7XG4gICAgICAgICAgICBjZWxsRGF0YSA9IGNlbGxEYXRhLnJlcGxhY2UoL1tcXHJcXG5dL2csICcnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmaWx0ZXJEYXRhLnB1c2goY2VsbERhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcm93Ll9hRmlsdGVyRGF0YSA9IGZpbHRlckRhdGE7XG4gICAgICAgIHJvdy5fc0ZpbHRlclJvdyA9IGZpbHRlckRhdGEuam9pbignICAnKTtcbiAgICAgICAgd2FzSW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3YXNJbnZhbGlkYXRlZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mblNlYXJjaFRvQ2FtZWwob2JqKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlYXJjaDogb2JqLnNTZWFyY2gsXG4gICAgICBzbWFydDogb2JqLmJTbWFydCxcbiAgICAgIHJlZ2V4OiBvYmouYlJlZ2V4LFxuICAgICAgY2FzZUluc2Vuc2l0aXZlOiBvYmouYkNhc2VJbnNlbnNpdGl2ZVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfZm5TZWFyY2hUb0h1bmcob2JqKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNTZWFyY2g6IG9iai5zZWFyY2gsXG4gICAgICBiU21hcnQ6IG9iai5zbWFydCxcbiAgICAgIGJSZWdleDogb2JqLnJlZ2V4LFxuICAgICAgYkNhc2VJbnNlbnNpdGl2ZTogb2JqLmNhc2VJbnNlbnNpdGl2ZVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfZm5GZWF0dXJlSHRtbEluZm8oc2V0dGluZ3MpIHtcbiAgICB2YXIgdGlkID0gc2V0dGluZ3Muc1RhYmxlSWQsXG4gICAgICAgIG5vZGVzID0gc2V0dGluZ3MuYWFuRmVhdHVyZXMuaSxcbiAgICAgICAgbiA9ICQoJzxkaXYvPicsIHtcbiAgICAgICdjbGFzcyc6IHNldHRpbmdzLm9DbGFzc2VzLnNJbmZvLFxuICAgICAgJ2lkJzogIW5vZGVzID8gdGlkICsgJ19pbmZvJyA6IG51bGxcbiAgICB9KTtcblxuICAgIGlmICghbm9kZXMpIHtcbiAgICAgIHNldHRpbmdzLmFvRHJhd0NhbGxiYWNrLnB1c2goe1xuICAgICAgICBcImZuXCI6IF9mblVwZGF0ZUluZm8sXG4gICAgICAgIFwic05hbWVcIjogXCJpbmZvcm1hdGlvblwiXG4gICAgICB9KTtcbiAgICAgIG4uYXR0cigncm9sZScsICdzdGF0dXMnKS5hdHRyKCdhcmlhLWxpdmUnLCAncG9saXRlJyk7XG4gICAgICAkKHNldHRpbmdzLm5UYWJsZSkuYXR0cignYXJpYS1kZXNjcmliZWRieScsIHRpZCArICdfaW5mbycpO1xuICAgIH1cblxuICAgIHJldHVybiBuWzBdO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuVXBkYXRlSW5mbyhzZXR0aW5ncykge1xuICAgIHZhciBub2RlcyA9IHNldHRpbmdzLmFhbkZlYXR1cmVzLmk7XG5cbiAgICBpZiAobm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxhbmcgPSBzZXR0aW5ncy5vTGFuZ3VhZ2UsXG4gICAgICAgIHN0YXJ0ID0gc2V0dGluZ3MuX2lEaXNwbGF5U3RhcnQgKyAxLFxuICAgICAgICBlbmQgPSBzZXR0aW5ncy5mbkRpc3BsYXlFbmQoKSxcbiAgICAgICAgbWF4ID0gc2V0dGluZ3MuZm5SZWNvcmRzVG90YWwoKSxcbiAgICAgICAgdG90YWwgPSBzZXR0aW5ncy5mblJlY29yZHNEaXNwbGF5KCksXG4gICAgICAgIG91dCA9IHRvdGFsID8gbGFuZy5zSW5mbyA6IGxhbmcuc0luZm9FbXB0eTtcblxuICAgIGlmICh0b3RhbCAhPT0gbWF4KSB7XG4gICAgICBvdXQgKz0gJyAnICsgbGFuZy5zSW5mb0ZpbHRlcmVkO1xuICAgIH1cblxuICAgIG91dCArPSBsYW5nLnNJbmZvUG9zdEZpeDtcbiAgICBvdXQgPSBfZm5JbmZvTWFjcm9zKHNldHRpbmdzLCBvdXQpO1xuICAgIHZhciBjYWxsYmFjayA9IGxhbmcuZm5JbmZvQ2FsbGJhY2s7XG5cbiAgICBpZiAoY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIG91dCA9IGNhbGxiYWNrLmNhbGwoc2V0dGluZ3Mub0luc3RhbmNlLCBzZXR0aW5ncywgc3RhcnQsIGVuZCwgbWF4LCB0b3RhbCwgb3V0KTtcbiAgICB9XG5cbiAgICAkKG5vZGVzKS5odG1sKG91dCk7XG4gIH1cblxuICBmdW5jdGlvbiBfZm5JbmZvTWFjcm9zKHNldHRpbmdzLCBzdHIpIHtcbiAgICB2YXIgZm9ybWF0dGVyID0gc2V0dGluZ3MuZm5Gb3JtYXROdW1iZXIsXG4gICAgICAgIHN0YXJ0ID0gc2V0dGluZ3MuX2lEaXNwbGF5U3RhcnQgKyAxLFxuICAgICAgICBsZW4gPSBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGgsXG4gICAgICAgIHZpcyA9IHNldHRpbmdzLmZuUmVjb3Jkc0Rpc3BsYXkoKSxcbiAgICAgICAgYWxsID0gbGVuID09PSAtMTtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL19TVEFSVF8vZywgZm9ybWF0dGVyLmNhbGwoc2V0dGluZ3MsIHN0YXJ0KSkucmVwbGFjZSgvX0VORF8vZywgZm9ybWF0dGVyLmNhbGwoc2V0dGluZ3MsIHNldHRpbmdzLmZuRGlzcGxheUVuZCgpKSkucmVwbGFjZSgvX01BWF8vZywgZm9ybWF0dGVyLmNhbGwoc2V0dGluZ3MsIHNldHRpbmdzLmZuUmVjb3Jkc1RvdGFsKCkpKS5yZXBsYWNlKC9fVE9UQUxfL2csIGZvcm1hdHRlci5jYWxsKHNldHRpbmdzLCB2aXMpKS5yZXBsYWNlKC9fUEFHRV8vZywgZm9ybWF0dGVyLmNhbGwoc2V0dGluZ3MsIGFsbCA/IDEgOiBNYXRoLmNlaWwoc3RhcnQgLyBsZW4pKSkucmVwbGFjZSgvX1BBR0VTXy9nLCBmb3JtYXR0ZXIuY2FsbChzZXR0aW5ncywgYWxsID8gMSA6IE1hdGguY2VpbCh2aXMgLyBsZW4pKSk7XG4gIH1cblxuICBmdW5jdGlvbiBfZm5Jbml0aWFsaXNlKHNldHRpbmdzKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGlMZW4sXG4gICAgICAgIGlBamF4U3RhcnQgPSBzZXR0aW5ncy5pSW5pdERpc3BsYXlTdGFydDtcbiAgICB2YXIgY29sdW1ucyA9IHNldHRpbmdzLmFvQ29sdW1ucyxcbiAgICAgICAgY29sdW1uO1xuICAgIHZhciBmZWF0dXJlcyA9IHNldHRpbmdzLm9GZWF0dXJlcztcbiAgICB2YXIgZGVmZXJMb2FkaW5nID0gc2V0dGluZ3MuYkRlZmVyTG9hZGluZztcblxuICAgIGlmICghc2V0dGluZ3MuYkluaXRpYWxpc2VkKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX2ZuSW5pdGlhbGlzZShzZXR0aW5ncyk7XG4gICAgICB9LCAyMDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9mbkFkZE9wdGlvbnNIdG1sKHNldHRpbmdzKTtcblxuICAgIF9mbkJ1aWxkSGVhZChzZXR0aW5ncyk7XG5cbiAgICBfZm5EcmF3SGVhZChzZXR0aW5ncywgc2V0dGluZ3MuYW9IZWFkZXIpO1xuXG4gICAgX2ZuRHJhd0hlYWQoc2V0dGluZ3MsIHNldHRpbmdzLmFvRm9vdGVyKTtcblxuICAgIF9mblByb2Nlc3NpbmdEaXNwbGF5KHNldHRpbmdzLCB0cnVlKTtcblxuICAgIGlmIChmZWF0dXJlcy5iQXV0b1dpZHRoKSB7XG4gICAgICBfZm5DYWxjdWxhdGVDb2x1bW5XaWR0aHMoc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIGlMZW4gPSBjb2x1bW5zLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgY29sdW1uID0gY29sdW1uc1tpXTtcblxuICAgICAgaWYgKGNvbHVtbi5zV2lkdGgpIHtcbiAgICAgICAgY29sdW1uLm5UaC5zdHlsZS53aWR0aCA9IF9mblN0cmluZ1RvQ3NzKGNvbHVtbi5zV2lkdGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9mbkNhbGxiYWNrRmlyZShzZXR0aW5ncywgbnVsbCwgJ3ByZUluaXQnLCBbc2V0dGluZ3NdKTtcblxuICAgIF9mblJlRHJhdyhzZXR0aW5ncyk7XG5cbiAgICB2YXIgZGF0YVNyYyA9IF9mbkRhdGFTb3VyY2Uoc2V0dGluZ3MpO1xuXG4gICAgaWYgKGRhdGFTcmMgIT0gJ3NzcCcgfHwgZGVmZXJMb2FkaW5nKSB7XG4gICAgICBpZiAoZGF0YVNyYyA9PSAnYWpheCcpIHtcbiAgICAgICAgX2ZuQnVpbGRBamF4KHNldHRpbmdzLCBbXSwgZnVuY3Rpb24gKGpzb24pIHtcbiAgICAgICAgICB2YXIgYURhdGEgPSBfZm5BamF4RGF0YVNyYyhzZXR0aW5ncywganNvbik7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYURhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIF9mbkFkZERhdGEoc2V0dGluZ3MsIGFEYXRhW2ldKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZXR0aW5ncy5pSW5pdERpc3BsYXlTdGFydCA9IGlBamF4U3RhcnQ7XG5cbiAgICAgICAgICBfZm5SZURyYXcoc2V0dGluZ3MpO1xuXG4gICAgICAgICAgX2ZuUHJvY2Vzc2luZ0Rpc3BsYXkoc2V0dGluZ3MsIGZhbHNlKTtcblxuICAgICAgICAgIF9mbkluaXRDb21wbGV0ZShzZXR0aW5ncywganNvbik7XG4gICAgICAgIH0sIHNldHRpbmdzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9mblByb2Nlc3NpbmdEaXNwbGF5KHNldHRpbmdzLCBmYWxzZSk7XG5cbiAgICAgICAgX2ZuSW5pdENvbXBsZXRlKHNldHRpbmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZm5Jbml0Q29tcGxldGUoc2V0dGluZ3MsIGpzb24pIHtcbiAgICBzZXR0aW5ncy5fYkluaXRDb21wbGV0ZSA9IHRydWU7XG5cbiAgICBpZiAoanNvbiB8fCBzZXR0aW5ncy5vSW5pdC5hYURhdGEpIHtcbiAgICAgIF9mbkFkanVzdENvbHVtblNpemluZyhzZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgX2ZuQ2FsbGJhY2tGaXJlKHNldHRpbmdzLCBudWxsLCAncGx1Z2luLWluaXQnLCBbc2V0dGluZ3MsIGpzb25dKTtcblxuICAgIF9mbkNhbGxiYWNrRmlyZShzZXR0aW5ncywgJ2FvSW5pdENvbXBsZXRlJywgJ2luaXQnLCBbc2V0dGluZ3MsIGpzb25dKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mbkxlbmd0aENoYW5nZShzZXR0aW5ncywgdmFsKSB7XG4gICAgdmFyIGxlbiA9IHBhcnNlSW50KHZhbCwgMTApO1xuICAgIHNldHRpbmdzLl9pRGlzcGxheUxlbmd0aCA9IGxlbjtcblxuICAgIF9mbkxlbmd0aE92ZXJmbG93KHNldHRpbmdzKTtcblxuICAgIF9mbkNhbGxiYWNrRmlyZShzZXR0aW5ncywgbnVsbCwgJ2xlbmd0aCcsIFtzZXR0aW5ncywgbGVuXSk7XG4gIH1cblxuICBmdW5jdGlvbiBfZm5GZWF0dXJlSHRtbExlbmd0aChzZXR0aW5ncykge1xuICAgIHZhciBjbGFzc2VzID0gc2V0dGluZ3Mub0NsYXNzZXMsXG4gICAgICAgIHRhYmxlSWQgPSBzZXR0aW5ncy5zVGFibGVJZCxcbiAgICAgICAgbWVudSA9IHNldHRpbmdzLmFMZW5ndGhNZW51LFxuICAgICAgICBkMiA9ICQuaXNBcnJheShtZW51WzBdKSxcbiAgICAgICAgbGVuZ3RocyA9IGQyID8gbWVudVswXSA6IG1lbnUsXG4gICAgICAgIGxhbmd1YWdlID0gZDIgPyBtZW51WzFdIDogbWVudTtcbiAgICB2YXIgc2VsZWN0ID0gJCgnPHNlbGVjdC8+Jywge1xuICAgICAgJ25hbWUnOiB0YWJsZUlkICsgJ19sZW5ndGgnLFxuICAgICAgJ2FyaWEtY29udHJvbHMnOiB0YWJsZUlkLFxuICAgICAgJ2NsYXNzJzogY2xhc3Nlcy5zTGVuZ3RoU2VsZWN0XG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWVuID0gbGVuZ3Rocy5sZW5ndGg7IGkgPCBpZW47IGkrKykge1xuICAgICAgc2VsZWN0WzBdW2ldID0gbmV3IE9wdGlvbih0eXBlb2YgbGFuZ3VhZ2VbaV0gPT09ICdudW1iZXInID8gc2V0dGluZ3MuZm5Gb3JtYXROdW1iZXIobGFuZ3VhZ2VbaV0pIDogbGFuZ3VhZ2VbaV0sIGxlbmd0aHNbaV0pO1xuICAgIH1cblxuICAgIHZhciBkaXYgPSAkKCc8ZGl2PjxsYWJlbC8+PC9kaXY+JykuYWRkQ2xhc3MoY2xhc3Nlcy5zTGVuZ3RoKTtcblxuICAgIGlmICghc2V0dGluZ3MuYWFuRmVhdHVyZXMubCkge1xuICAgICAgZGl2WzBdLmlkID0gdGFibGVJZCArICdfbGVuZ3RoJztcbiAgICB9XG5cbiAgICBkaXYuY2hpbGRyZW4oKS5hcHBlbmQoc2V0dGluZ3Mub0xhbmd1YWdlLnNMZW5ndGhNZW51LnJlcGxhY2UoJ19NRU5VXycsIHNlbGVjdFswXS5vdXRlckhUTUwpKTtcbiAgICAkKCdzZWxlY3QnLCBkaXYpLnZhbChzZXR0aW5ncy5faURpc3BsYXlMZW5ndGgpLm9uKCdjaGFuZ2UuRFQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgX2ZuTGVuZ3RoQ2hhbmdlKHNldHRpbmdzLCAkKHRoaXMpLnZhbCgpKTtcblxuICAgICAgX2ZuRHJhdyhzZXR0aW5ncyk7XG4gICAgfSk7XG4gICAgJChzZXR0aW5ncy5uVGFibGUpLm9uKCdsZW5ndGguZHQuRFQnLCBmdW5jdGlvbiAoZSwgcywgbGVuKSB7XG4gICAgICBpZiAoc2V0dGluZ3MgPT09IHMpIHtcbiAgICAgICAgJCgnc2VsZWN0JywgZGl2KS52YWwobGVuKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGl2WzBdO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuRmVhdHVyZUh0bWxQYWdpbmF0ZShzZXR0aW5ncykge1xuICAgIHZhciB0eXBlID0gc2V0dGluZ3Muc1BhZ2luYXRpb25UeXBlLFxuICAgICAgICBwbHVnaW4gPSBEYXRhVGFibGUuZXh0LnBhZ2VyW3R5cGVdLFxuICAgICAgICBtb2Rlcm4gPSB0eXBlb2YgcGx1Z2luID09PSAnZnVuY3Rpb24nLFxuICAgICAgICByZWRyYXcgPSBmdW5jdGlvbiByZWRyYXcoc2V0dGluZ3MpIHtcbiAgICAgIF9mbkRyYXcoc2V0dGluZ3MpO1xuICAgIH0sXG4gICAgICAgIG5vZGUgPSAkKCc8ZGl2Lz4nKS5hZGRDbGFzcyhzZXR0aW5ncy5vQ2xhc3Nlcy5zUGFnaW5nICsgdHlwZSlbMF0sXG4gICAgICAgIGZlYXR1cmVzID0gc2V0dGluZ3MuYWFuRmVhdHVyZXM7XG5cbiAgICBpZiAoIW1vZGVybikge1xuICAgICAgcGx1Z2luLmZuSW5pdChzZXR0aW5ncywgbm9kZSwgcmVkcmF3KTtcbiAgICB9XG5cbiAgICBpZiAoIWZlYXR1cmVzLnApIHtcbiAgICAgIG5vZGUuaWQgPSBzZXR0aW5ncy5zVGFibGVJZCArICdfcGFnaW5hdGUnO1xuICAgICAgc2V0dGluZ3MuYW9EcmF3Q2FsbGJhY2sucHVzaCh7XG4gICAgICAgIFwiZm5cIjogZnVuY3Rpb24gZm4oc2V0dGluZ3MpIHtcbiAgICAgICAgICBpZiAobW9kZXJuKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBzZXR0aW5ncy5faURpc3BsYXlTdGFydCxcbiAgICAgICAgICAgICAgICBsZW4gPSBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGgsXG4gICAgICAgICAgICAgICAgdmlzUmVjb3JkcyA9IHNldHRpbmdzLmZuUmVjb3Jkc0Rpc3BsYXkoKSxcbiAgICAgICAgICAgICAgICBhbGwgPSBsZW4gPT09IC0xLFxuICAgICAgICAgICAgICAgIHBhZ2UgPSBhbGwgPyAwIDogTWF0aC5jZWlsKHN0YXJ0IC8gbGVuKSxcbiAgICAgICAgICAgICAgICBwYWdlcyA9IGFsbCA/IDEgOiBNYXRoLmNlaWwodmlzUmVjb3JkcyAvIGxlbiksXG4gICAgICAgICAgICAgICAgYnV0dG9ucyA9IHBsdWdpbihwYWdlLCBwYWdlcyksXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBpZW47XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGllbiA9IGZlYXR1cmVzLnAubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgICAgICAgICAgX2ZuUmVuZGVyZXIoc2V0dGluZ3MsICdwYWdlQnV0dG9uJykoc2V0dGluZ3MsIGZlYXR1cmVzLnBbaV0sIGksIGJ1dHRvbnMsIHBhZ2UsIHBhZ2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGx1Z2luLmZuVXBkYXRlKHNldHRpbmdzLCByZWRyYXcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzTmFtZVwiOiBcInBhZ2luYXRpb25cIlxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBmdW5jdGlvbiBfZm5QYWdlQ2hhbmdlKHNldHRpbmdzLCBhY3Rpb24sIHJlZHJhdykge1xuICAgIHZhciBzdGFydCA9IHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0LFxuICAgICAgICBsZW4gPSBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGgsXG4gICAgICAgIHJlY29yZHMgPSBzZXR0aW5ncy5mblJlY29yZHNEaXNwbGF5KCk7XG5cbiAgICBpZiAocmVjb3JkcyA9PT0gMCB8fCBsZW4gPT09IC0xKSB7XG4gICAgICBzdGFydCA9IDA7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uID09PSBcIm51bWJlclwiKSB7XG4gICAgICBzdGFydCA9IGFjdGlvbiAqIGxlbjtcblxuICAgICAgaWYgKHN0YXJ0ID4gcmVjb3Jkcykge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhY3Rpb24gPT0gXCJmaXJzdFwiKSB7XG4gICAgICBzdGFydCA9IDA7XG4gICAgfSBlbHNlIGlmIChhY3Rpb24gPT0gXCJwcmV2aW91c1wiKSB7XG4gICAgICBzdGFydCA9IGxlbiA+PSAwID8gc3RhcnQgLSBsZW4gOiAwO1xuXG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PSBcIm5leHRcIikge1xuICAgICAgaWYgKHN0YXJ0ICsgbGVuIDwgcmVjb3Jkcykge1xuICAgICAgICBzdGFydCArPSBsZW47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhY3Rpb24gPT0gXCJsYXN0XCIpIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5mbG9vcigocmVjb3JkcyAtIDEpIC8gbGVuKSAqIGxlbjtcbiAgICB9IGVsc2Uge1xuICAgICAgX2ZuTG9nKHNldHRpbmdzLCAwLCBcIlVua25vd24gcGFnaW5nIGFjdGlvbjogXCIgKyBhY3Rpb24sIDUpO1xuICAgIH1cblxuICAgIHZhciBjaGFuZ2VkID0gc2V0dGluZ3MuX2lEaXNwbGF5U3RhcnQgIT09IHN0YXJ0O1xuICAgIHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0ID0gc3RhcnQ7XG5cbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgX2ZuQ2FsbGJhY2tGaXJlKHNldHRpbmdzLCBudWxsLCAncGFnZScsIFtzZXR0aW5nc10pO1xuXG4gICAgICBpZiAocmVkcmF3KSB7XG4gICAgICAgIF9mbkRyYXcoc2V0dGluZ3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjaGFuZ2VkO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuRmVhdHVyZUh0bWxQcm9jZXNzaW5nKHNldHRpbmdzKSB7XG4gICAgcmV0dXJuICQoJzxkaXYvPicsIHtcbiAgICAgICdpZCc6ICFzZXR0aW5ncy5hYW5GZWF0dXJlcy5yID8gc2V0dGluZ3Muc1RhYmxlSWQgKyAnX3Byb2Nlc3NpbmcnIDogbnVsbCxcbiAgICAgICdjbGFzcyc6IHNldHRpbmdzLm9DbGFzc2VzLnNQcm9jZXNzaW5nXG4gICAgfSkuaHRtbChzZXR0aW5ncy5vTGFuZ3VhZ2Uuc1Byb2Nlc3NpbmcpLmluc2VydEJlZm9yZShzZXR0aW5ncy5uVGFibGUpWzBdO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuUHJvY2Vzc2luZ0Rpc3BsYXkoc2V0dGluZ3MsIHNob3cpIHtcbiAgICBpZiAoc2V0dGluZ3Mub0ZlYXR1cmVzLmJQcm9jZXNzaW5nKSB7XG4gICAgICAkKHNldHRpbmdzLmFhbkZlYXR1cmVzLnIpLmNzcygnZGlzcGxheScsIHNob3cgPyAnYmxvY2snIDogJ25vbmUnKTtcbiAgICB9XG5cbiAgICBfZm5DYWxsYmFja0ZpcmUoc2V0dGluZ3MsIG51bGwsICdwcm9jZXNzaW5nJywgW3NldHRpbmdzLCBzaG93XSk7XG4gIH1cblxuICBmdW5jdGlvbiBfZm5GZWF0dXJlSHRtbFRhYmxlKHNldHRpbmdzKSB7XG4gICAgdmFyIHRhYmxlID0gJChzZXR0aW5ncy5uVGFibGUpO1xuICAgIHRhYmxlLmF0dHIoJ3JvbGUnLCAnZ3JpZCcpO1xuICAgIHZhciBzY3JvbGwgPSBzZXR0aW5ncy5vU2Nyb2xsO1xuXG4gICAgaWYgKHNjcm9sbC5zWCA9PT0gJycgJiYgc2Nyb2xsLnNZID09PSAnJykge1xuICAgICAgcmV0dXJuIHNldHRpbmdzLm5UYWJsZTtcbiAgICB9XG5cbiAgICB2YXIgc2Nyb2xsWCA9IHNjcm9sbC5zWDtcbiAgICB2YXIgc2Nyb2xsWSA9IHNjcm9sbC5zWTtcbiAgICB2YXIgY2xhc3NlcyA9IHNldHRpbmdzLm9DbGFzc2VzO1xuICAgIHZhciBjYXB0aW9uID0gdGFibGUuY2hpbGRyZW4oJ2NhcHRpb24nKTtcbiAgICB2YXIgY2FwdGlvblNpZGUgPSBjYXB0aW9uLmxlbmd0aCA/IGNhcHRpb25bMF0uX2NhcHRpb25TaWRlIDogbnVsbDtcbiAgICB2YXIgaGVhZGVyQ2xvbmUgPSAkKHRhYmxlWzBdLmNsb25lTm9kZShmYWxzZSkpO1xuICAgIHZhciBmb290ZXJDbG9uZSA9ICQodGFibGVbMF0uY2xvbmVOb2RlKGZhbHNlKSk7XG4gICAgdmFyIGZvb3RlciA9IHRhYmxlLmNoaWxkcmVuKCd0Zm9vdCcpO1xuICAgIHZhciBfZGl2ID0gJzxkaXYvPic7XG5cbiAgICB2YXIgc2l6ZSA9IGZ1bmN0aW9uIHNpemUocykge1xuICAgICAgcmV0dXJuICFzID8gbnVsbCA6IF9mblN0cmluZ1RvQ3NzKHMpO1xuICAgIH07XG5cbiAgICBpZiAoIWZvb3Rlci5sZW5ndGgpIHtcbiAgICAgIGZvb3RlciA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbGVyID0gJChfZGl2LCB7XG4gICAgICAnY2xhc3MnOiBjbGFzc2VzLnNTY3JvbGxXcmFwcGVyXG4gICAgfSkuYXBwZW5kKCQoX2Rpdiwge1xuICAgICAgJ2NsYXNzJzogY2xhc3Nlcy5zU2Nyb2xsSGVhZFxuICAgIH0pLmNzcyh7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIHdpZHRoOiBzY3JvbGxYID8gc2l6ZShzY3JvbGxYKSA6ICcxMDAlJ1xuICAgIH0pLmFwcGVuZCgkKF9kaXYsIHtcbiAgICAgICdjbGFzcyc6IGNsYXNzZXMuc1Njcm9sbEhlYWRJbm5lclxuICAgIH0pLmNzcyh7XG4gICAgICAnYm94LXNpemluZyc6ICdjb250ZW50LWJveCcsXG4gICAgICB3aWR0aDogc2Nyb2xsLnNYSW5uZXIgfHwgJzEwMCUnXG4gICAgfSkuYXBwZW5kKGhlYWRlckNsb25lLnJlbW92ZUF0dHIoJ2lkJykuY3NzKCdtYXJnaW4tbGVmdCcsIDApLmFwcGVuZChjYXB0aW9uU2lkZSA9PT0gJ3RvcCcgPyBjYXB0aW9uIDogbnVsbCkuYXBwZW5kKHRhYmxlLmNoaWxkcmVuKCd0aGVhZCcpKSkpKS5hcHBlbmQoJChfZGl2LCB7XG4gICAgICAnY2xhc3MnOiBjbGFzc2VzLnNTY3JvbGxCb2R5XG4gICAgfSkuY3NzKHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgICAgIHdpZHRoOiBzaXplKHNjcm9sbFgpXG4gICAgfSkuYXBwZW5kKHRhYmxlKSk7XG5cbiAgICBpZiAoZm9vdGVyKSB7XG4gICAgICBzY3JvbGxlci5hcHBlbmQoJChfZGl2LCB7XG4gICAgICAgICdjbGFzcyc6IGNsYXNzZXMuc1Njcm9sbEZvb3RcbiAgICAgIH0pLmNzcyh7XG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgYm9yZGVyOiAwLFxuICAgICAgICB3aWR0aDogc2Nyb2xsWCA/IHNpemUoc2Nyb2xsWCkgOiAnMTAwJSdcbiAgICAgIH0pLmFwcGVuZCgkKF9kaXYsIHtcbiAgICAgICAgJ2NsYXNzJzogY2xhc3Nlcy5zU2Nyb2xsRm9vdElubmVyXG4gICAgICB9KS5hcHBlbmQoZm9vdGVyQ2xvbmUucmVtb3ZlQXR0cignaWQnKS5jc3MoJ21hcmdpbi1sZWZ0JywgMCkuYXBwZW5kKGNhcHRpb25TaWRlID09PSAnYm90dG9tJyA/IGNhcHRpb24gOiBudWxsKS5hcHBlbmQodGFibGUuY2hpbGRyZW4oJ3Rmb290JykpKSkpO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHNjcm9sbGVyLmNoaWxkcmVuKCk7XG4gICAgdmFyIHNjcm9sbEhlYWQgPSBjaGlsZHJlblswXTtcbiAgICB2YXIgc2Nyb2xsQm9keSA9IGNoaWxkcmVuWzFdO1xuICAgIHZhciBzY3JvbGxGb290ID0gZm9vdGVyID8gY2hpbGRyZW5bMl0gOiBudWxsO1xuXG4gICAgaWYgKHNjcm9sbFgpIHtcbiAgICAgICQoc2Nyb2xsQm9keSkub24oJ3Njcm9sbC5EVCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBzY3JvbGxMZWZ0ID0gdGhpcy5zY3JvbGxMZWZ0O1xuICAgICAgICBzY3JvbGxIZWFkLnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xuXG4gICAgICAgIGlmIChmb290ZXIpIHtcbiAgICAgICAgICBzY3JvbGxGb290LnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkKHNjcm9sbEJvZHkpLmNzcyhzY3JvbGxZICYmIHNjcm9sbC5iQ29sbGFwc2UgPyAnbWF4LWhlaWdodCcgOiAnaGVpZ2h0Jywgc2Nyb2xsWSk7XG4gICAgc2V0dGluZ3MublNjcm9sbEhlYWQgPSBzY3JvbGxIZWFkO1xuICAgIHNldHRpbmdzLm5TY3JvbGxCb2R5ID0gc2Nyb2xsQm9keTtcbiAgICBzZXR0aW5ncy5uU2Nyb2xsRm9vdCA9IHNjcm9sbEZvb3Q7XG4gICAgc2V0dGluZ3MuYW9EcmF3Q2FsbGJhY2sucHVzaCh7XG4gICAgICBcImZuXCI6IF9mblNjcm9sbERyYXcsXG4gICAgICBcInNOYW1lXCI6IFwic2Nyb2xsaW5nXCJcbiAgICB9KTtcbiAgICByZXR1cm4gc2Nyb2xsZXJbMF07XG4gIH1cblxuICBmdW5jdGlvbiBfZm5TY3JvbGxEcmF3KHNldHRpbmdzKSB7XG4gICAgdmFyIHNjcm9sbCA9IHNldHRpbmdzLm9TY3JvbGwsXG4gICAgICAgIHNjcm9sbFggPSBzY3JvbGwuc1gsXG4gICAgICAgIHNjcm9sbFhJbm5lciA9IHNjcm9sbC5zWElubmVyLFxuICAgICAgICBzY3JvbGxZID0gc2Nyb2xsLnNZLFxuICAgICAgICBiYXJXaWR0aCA9IHNjcm9sbC5pQmFyV2lkdGgsXG4gICAgICAgIGRpdkhlYWRlciA9ICQoc2V0dGluZ3MublNjcm9sbEhlYWQpLFxuICAgICAgICBkaXZIZWFkZXJTdHlsZSA9IGRpdkhlYWRlclswXS5zdHlsZSxcbiAgICAgICAgZGl2SGVhZGVySW5uZXIgPSBkaXZIZWFkZXIuY2hpbGRyZW4oJ2RpdicpLFxuICAgICAgICBkaXZIZWFkZXJJbm5lclN0eWxlID0gZGl2SGVhZGVySW5uZXJbMF0uc3R5bGUsXG4gICAgICAgIGRpdkhlYWRlclRhYmxlID0gZGl2SGVhZGVySW5uZXIuY2hpbGRyZW4oJ3RhYmxlJyksXG4gICAgICAgIGRpdkJvZHlFbCA9IHNldHRpbmdzLm5TY3JvbGxCb2R5LFxuICAgICAgICBkaXZCb2R5ID0gJChkaXZCb2R5RWwpLFxuICAgICAgICBkaXZCb2R5U3R5bGUgPSBkaXZCb2R5RWwuc3R5bGUsXG4gICAgICAgIGRpdkZvb3RlciA9ICQoc2V0dGluZ3MublNjcm9sbEZvb3QpLFxuICAgICAgICBkaXZGb290ZXJJbm5lciA9IGRpdkZvb3Rlci5jaGlsZHJlbignZGl2JyksXG4gICAgICAgIGRpdkZvb3RlclRhYmxlID0gZGl2Rm9vdGVySW5uZXIuY2hpbGRyZW4oJ3RhYmxlJyksXG4gICAgICAgIGhlYWRlciA9ICQoc2V0dGluZ3MublRIZWFkKSxcbiAgICAgICAgdGFibGUgPSAkKHNldHRpbmdzLm5UYWJsZSksXG4gICAgICAgIHRhYmxlRWwgPSB0YWJsZVswXSxcbiAgICAgICAgdGFibGVTdHlsZSA9IHRhYmxlRWwuc3R5bGUsXG4gICAgICAgIGZvb3RlciA9IHNldHRpbmdzLm5URm9vdCA/ICQoc2V0dGluZ3MublRGb290KSA6IG51bGwsXG4gICAgICAgIGJyb3dzZXIgPSBzZXR0aW5ncy5vQnJvd3NlcixcbiAgICAgICAgaWU2NyA9IGJyb3dzZXIuYlNjcm9sbE92ZXJzaXplLFxuICAgICAgICBkdEhlYWRlckNlbGxzID0gX3BsdWNrKHNldHRpbmdzLmFvQ29sdW1ucywgJ25UaCcpLFxuICAgICAgICBoZWFkZXJUcmdFbHMsXG4gICAgICAgIGZvb3RlclRyZ0VscyxcbiAgICAgICAgaGVhZGVyU3JjRWxzLFxuICAgICAgICBmb290ZXJTcmNFbHMsXG4gICAgICAgIGhlYWRlckNvcHksXG4gICAgICAgIGZvb3RlckNvcHksXG4gICAgICAgIGhlYWRlcldpZHRocyA9IFtdLFxuICAgICAgICBmb290ZXJXaWR0aHMgPSBbXSxcbiAgICAgICAgaGVhZGVyQ29udGVudCA9IFtdLFxuICAgICAgICBmb290ZXJDb250ZW50ID0gW10sXG4gICAgICAgIGlkeCxcbiAgICAgICAgY29ycmVjdGlvbixcbiAgICAgICAgc2FuaXR5V2lkdGgsXG4gICAgICAgIHplcm9PdXQgPSBmdW5jdGlvbiB6ZXJvT3V0KG5TaXplcikge1xuICAgICAgdmFyIHN0eWxlID0gblNpemVyLnN0eWxlO1xuICAgICAgc3R5bGUucGFkZGluZ1RvcCA9IFwiMFwiO1xuICAgICAgc3R5bGUucGFkZGluZ0JvdHRvbSA9IFwiMFwiO1xuICAgICAgc3R5bGUuYm9yZGVyVG9wV2lkdGggPSBcIjBcIjtcbiAgICAgIHN0eWxlLmJvcmRlckJvdHRvbVdpZHRoID0gXCIwXCI7XG4gICAgICBzdHlsZS5oZWlnaHQgPSAwO1xuICAgIH07XG5cbiAgICB2YXIgc2Nyb2xsQmFyVmlzID0gZGl2Qm9keUVsLnNjcm9sbEhlaWdodCA+IGRpdkJvZHlFbC5jbGllbnRIZWlnaHQ7XG5cbiAgICBpZiAoc2V0dGluZ3Muc2Nyb2xsQmFyVmlzICE9PSBzY3JvbGxCYXJWaXMgJiYgc2V0dGluZ3Muc2Nyb2xsQmFyVmlzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHNldHRpbmdzLnNjcm9sbEJhclZpcyA9IHNjcm9sbEJhclZpcztcblxuICAgICAgX2ZuQWRqdXN0Q29sdW1uU2l6aW5nKHNldHRpbmdzKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXR0aW5ncy5zY3JvbGxCYXJWaXMgPSBzY3JvbGxCYXJWaXM7XG4gICAgfVxuXG4gICAgdGFibGUuY2hpbGRyZW4oJ3RoZWFkLCB0Zm9vdCcpLnJlbW92ZSgpO1xuXG4gICAgaWYgKGZvb3Rlcikge1xuICAgICAgZm9vdGVyQ29weSA9IGZvb3Rlci5jbG9uZSgpLnByZXBlbmRUbyh0YWJsZSk7XG4gICAgICBmb290ZXJUcmdFbHMgPSBmb290ZXIuZmluZCgndHInKTtcbiAgICAgIGZvb3RlclNyY0VscyA9IGZvb3RlckNvcHkuZmluZCgndHInKTtcbiAgICB9XG5cbiAgICBoZWFkZXJDb3B5ID0gaGVhZGVyLmNsb25lKCkucHJlcGVuZFRvKHRhYmxlKTtcbiAgICBoZWFkZXJUcmdFbHMgPSBoZWFkZXIuZmluZCgndHInKTtcbiAgICBoZWFkZXJTcmNFbHMgPSBoZWFkZXJDb3B5LmZpbmQoJ3RyJyk7XG4gICAgaGVhZGVyQ29weS5maW5kKCd0aCwgdGQnKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpO1xuXG4gICAgaWYgKCFzY3JvbGxYKSB7XG4gICAgICBkaXZCb2R5U3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICBkaXZIZWFkZXJbMF0uc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgfVxuXG4gICAgJC5lYWNoKF9mbkdldFVuaXF1ZVRocyhzZXR0aW5ncywgaGVhZGVyQ29weSksIGZ1bmN0aW9uIChpLCBlbCkge1xuICAgICAgaWR4ID0gX2ZuVmlzaWJsZVRvQ29sdW1uSW5kZXgoc2V0dGluZ3MsIGkpO1xuICAgICAgZWwuc3R5bGUud2lkdGggPSBzZXR0aW5ncy5hb0NvbHVtbnNbaWR4XS5zV2lkdGg7XG4gICAgfSk7XG5cbiAgICBpZiAoZm9vdGVyKSB7XG4gICAgICBfZm5BcHBseVRvQ2hpbGRyZW4oZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgbi5zdHlsZS53aWR0aCA9IFwiXCI7XG4gICAgICB9LCBmb290ZXJTcmNFbHMpO1xuICAgIH1cblxuICAgIHNhbml0eVdpZHRoID0gdGFibGUub3V0ZXJXaWR0aCgpO1xuXG4gICAgaWYgKHNjcm9sbFggPT09IFwiXCIpIHtcbiAgICAgIHRhYmxlU3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblxuICAgICAgaWYgKGllNjcgJiYgKHRhYmxlLmZpbmQoJ3Rib2R5JykuaGVpZ2h0KCkgPiBkaXZCb2R5RWwub2Zmc2V0SGVpZ2h0IHx8IGRpdkJvZHkuY3NzKCdvdmVyZmxvdy15JykgPT0gXCJzY3JvbGxcIikpIHtcbiAgICAgICAgdGFibGVTdHlsZS53aWR0aCA9IF9mblN0cmluZ1RvQ3NzKHRhYmxlLm91dGVyV2lkdGgoKSAtIGJhcldpZHRoKTtcbiAgICAgIH1cblxuICAgICAgc2FuaXR5V2lkdGggPSB0YWJsZS5vdXRlcldpZHRoKCk7XG4gICAgfSBlbHNlIGlmIChzY3JvbGxYSW5uZXIgIT09IFwiXCIpIHtcbiAgICAgIHRhYmxlU3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0NzcyhzY3JvbGxYSW5uZXIpO1xuICAgICAgc2FuaXR5V2lkdGggPSB0YWJsZS5vdXRlcldpZHRoKCk7XG4gICAgfVxuXG4gICAgX2ZuQXBwbHlUb0NoaWxkcmVuKHplcm9PdXQsIGhlYWRlclNyY0Vscyk7XG5cbiAgICBfZm5BcHBseVRvQ2hpbGRyZW4oZnVuY3Rpb24gKG5TaXplcikge1xuICAgICAgaGVhZGVyQ29udGVudC5wdXNoKG5TaXplci5pbm5lckhUTUwpO1xuICAgICAgaGVhZGVyV2lkdGhzLnB1c2goX2ZuU3RyaW5nVG9Dc3MoJChuU2l6ZXIpLmNzcygnd2lkdGgnKSkpO1xuICAgIH0sIGhlYWRlclNyY0Vscyk7XG5cbiAgICBfZm5BcHBseVRvQ2hpbGRyZW4oZnVuY3Rpb24gKG5Ub1NpemUsIGkpIHtcbiAgICAgIGlmICgkLmluQXJyYXkoblRvU2l6ZSwgZHRIZWFkZXJDZWxscykgIT09IC0xKSB7XG4gICAgICAgIG5Ub1NpemUuc3R5bGUud2lkdGggPSBoZWFkZXJXaWR0aHNbaV07XG4gICAgICB9XG4gICAgfSwgaGVhZGVyVHJnRWxzKTtcblxuICAgICQoaGVhZGVyU3JjRWxzKS5oZWlnaHQoMCk7XG5cbiAgICBpZiAoZm9vdGVyKSB7XG4gICAgICBfZm5BcHBseVRvQ2hpbGRyZW4oemVyb091dCwgZm9vdGVyU3JjRWxzKTtcblxuICAgICAgX2ZuQXBwbHlUb0NoaWxkcmVuKGZ1bmN0aW9uIChuU2l6ZXIpIHtcbiAgICAgICAgZm9vdGVyQ29udGVudC5wdXNoKG5TaXplci5pbm5lckhUTUwpO1xuICAgICAgICBmb290ZXJXaWR0aHMucHVzaChfZm5TdHJpbmdUb0NzcygkKG5TaXplcikuY3NzKCd3aWR0aCcpKSk7XG4gICAgICB9LCBmb290ZXJTcmNFbHMpO1xuXG4gICAgICBfZm5BcHBseVRvQ2hpbGRyZW4oZnVuY3Rpb24gKG5Ub1NpemUsIGkpIHtcbiAgICAgICAgblRvU2l6ZS5zdHlsZS53aWR0aCA9IGZvb3RlcldpZHRoc1tpXTtcbiAgICAgIH0sIGZvb3RlclRyZ0Vscyk7XG5cbiAgICAgICQoZm9vdGVyU3JjRWxzKS5oZWlnaHQoMCk7XG4gICAgfVxuXG4gICAgX2ZuQXBwbHlUb0NoaWxkcmVuKGZ1bmN0aW9uIChuU2l6ZXIsIGkpIHtcbiAgICAgIG5TaXplci5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz1cImRhdGFUYWJsZXNfc2l6aW5nXCI+JyArIGhlYWRlckNvbnRlbnRbaV0gKyAnPC9kaXY+JztcbiAgICAgIG5TaXplci5jaGlsZE5vZGVzWzBdLnN0eWxlLmhlaWdodCA9IFwiMFwiO1xuICAgICAgblNpemVyLmNoaWxkTm9kZXNbMF0uc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgICAgblNpemVyLnN0eWxlLndpZHRoID0gaGVhZGVyV2lkdGhzW2ldO1xuICAgIH0sIGhlYWRlclNyY0Vscyk7XG5cbiAgICBpZiAoZm9vdGVyKSB7XG4gICAgICBfZm5BcHBseVRvQ2hpbGRyZW4oZnVuY3Rpb24gKG5TaXplciwgaSkge1xuICAgICAgICBuU2l6ZXIuaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9XCJkYXRhVGFibGVzX3NpemluZ1wiPicgKyBmb290ZXJDb250ZW50W2ldICsgJzwvZGl2Pic7XG4gICAgICAgIG5TaXplci5jaGlsZE5vZGVzWzBdLnN0eWxlLmhlaWdodCA9IFwiMFwiO1xuICAgICAgICBuU2l6ZXIuY2hpbGROb2Rlc1swXS5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgICAgIG5TaXplci5zdHlsZS53aWR0aCA9IGZvb3RlcldpZHRoc1tpXTtcbiAgICAgIH0sIGZvb3RlclNyY0Vscyk7XG4gICAgfVxuXG4gICAgaWYgKHRhYmxlLm91dGVyV2lkdGgoKSA8IHNhbml0eVdpZHRoKSB7XG4gICAgICBjb3JyZWN0aW9uID0gZGl2Qm9keUVsLnNjcm9sbEhlaWdodCA+IGRpdkJvZHlFbC5vZmZzZXRIZWlnaHQgfHwgZGl2Qm9keS5jc3MoJ292ZXJmbG93LXknKSA9PSBcInNjcm9sbFwiID8gc2FuaXR5V2lkdGggKyBiYXJXaWR0aCA6IHNhbml0eVdpZHRoO1xuXG4gICAgICBpZiAoaWU2NyAmJiAoZGl2Qm9keUVsLnNjcm9sbEhlaWdodCA+IGRpdkJvZHlFbC5vZmZzZXRIZWlnaHQgfHwgZGl2Qm9keS5jc3MoJ292ZXJmbG93LXknKSA9PSBcInNjcm9sbFwiKSkge1xuICAgICAgICB0YWJsZVN0eWxlLndpZHRoID0gX2ZuU3RyaW5nVG9Dc3MoY29ycmVjdGlvbiAtIGJhcldpZHRoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjcm9sbFggPT09IFwiXCIgfHwgc2Nyb2xsWElubmVyICE9PSBcIlwiKSB7XG4gICAgICAgIF9mbkxvZyhzZXR0aW5ncywgMSwgJ1Bvc3NpYmxlIGNvbHVtbiBtaXNhbGlnbm1lbnQnLCA2KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29ycmVjdGlvbiA9ICcxMDAlJztcbiAgICB9XG5cbiAgICBkaXZCb2R5U3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0Nzcyhjb3JyZWN0aW9uKTtcbiAgICBkaXZIZWFkZXJTdHlsZS53aWR0aCA9IF9mblN0cmluZ1RvQ3NzKGNvcnJlY3Rpb24pO1xuXG4gICAgaWYgKGZvb3Rlcikge1xuICAgICAgc2V0dGluZ3MublNjcm9sbEZvb3Quc3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0Nzcyhjb3JyZWN0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAoIXNjcm9sbFkpIHtcbiAgICAgIGlmIChpZTY3KSB7XG4gICAgICAgIGRpdkJvZHlTdHlsZS5oZWlnaHQgPSBfZm5TdHJpbmdUb0Nzcyh0YWJsZUVsLm9mZnNldEhlaWdodCArIGJhcldpZHRoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaU91dGVyV2lkdGggPSB0YWJsZS5vdXRlcldpZHRoKCk7XG4gICAgZGl2SGVhZGVyVGFibGVbMF0uc3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0NzcyhpT3V0ZXJXaWR0aCk7XG4gICAgZGl2SGVhZGVySW5uZXJTdHlsZS53aWR0aCA9IF9mblN0cmluZ1RvQ3NzKGlPdXRlcldpZHRoKTtcbiAgICB2YXIgYlNjcm9sbGluZyA9IHRhYmxlLmhlaWdodCgpID4gZGl2Qm9keUVsLmNsaWVudEhlaWdodCB8fCBkaXZCb2R5LmNzcygnb3ZlcmZsb3cteScpID09IFwic2Nyb2xsXCI7XG4gICAgdmFyIHBhZGRpbmcgPSAncGFkZGluZycgKyAoYnJvd3Nlci5iU2Nyb2xsYmFyTGVmdCA/ICdMZWZ0JyA6ICdSaWdodCcpO1xuICAgIGRpdkhlYWRlcklubmVyU3R5bGVbcGFkZGluZ10gPSBiU2Nyb2xsaW5nID8gYmFyV2lkdGggKyBcInB4XCIgOiBcIjBweFwiO1xuXG4gICAgaWYgKGZvb3Rlcikge1xuICAgICAgZGl2Rm9vdGVyVGFibGVbMF0uc3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0NzcyhpT3V0ZXJXaWR0aCk7XG4gICAgICBkaXZGb290ZXJJbm5lclswXS5zdHlsZS53aWR0aCA9IF9mblN0cmluZ1RvQ3NzKGlPdXRlcldpZHRoKTtcbiAgICAgIGRpdkZvb3RlcklubmVyWzBdLnN0eWxlW3BhZGRpbmddID0gYlNjcm9sbGluZyA/IGJhcldpZHRoICsgXCJweFwiIDogXCIwcHhcIjtcbiAgICB9XG5cbiAgICB0YWJsZS5jaGlsZHJlbignY29sZ3JvdXAnKS5pbnNlcnRCZWZvcmUodGFibGUuY2hpbGRyZW4oJ3RoZWFkJykpO1xuICAgIGRpdkJvZHkuc2Nyb2xsKCk7XG5cbiAgICBpZiAoKHNldHRpbmdzLmJTb3J0ZWQgfHwgc2V0dGluZ3MuYkZpbHRlcmVkKSAmJiAhc2V0dGluZ3MuX2RyYXdIb2xkKSB7XG4gICAgICBkaXZCb2R5RWwuc2Nyb2xsVG9wID0gMDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZm5BcHBseVRvQ2hpbGRyZW4oZm4sIGFuMSwgYW4yKSB7XG4gICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGlMZW4gPSBhbjEubGVuZ3RoO1xuICAgIHZhciBuTm9kZTEsIG5Ob2RlMjtcblxuICAgIHdoaWxlIChpIDwgaUxlbikge1xuICAgICAgbk5vZGUxID0gYW4xW2ldLmZpcnN0Q2hpbGQ7XG4gICAgICBuTm9kZTIgPSBhbjIgPyBhbjJbaV0uZmlyc3RDaGlsZCA6IG51bGw7XG5cbiAgICAgIHdoaWxlIChuTm9kZTEpIHtcbiAgICAgICAgaWYgKG5Ob2RlMS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgIGlmIChhbjIpIHtcbiAgICAgICAgICAgIGZuKG5Ob2RlMSwgbk5vZGUyLCBpbmRleCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZuKG5Ob2RlMSwgaW5kZXgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICBuTm9kZTEgPSBuTm9kZTEubmV4dFNpYmxpbmc7XG4gICAgICAgIG5Ob2RlMiA9IGFuMiA/IG5Ob2RlMi5uZXh0U2libGluZyA6IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGkrKztcbiAgICB9XG4gIH1cblxuICB2YXIgX19yZV9odG1sX3JlbW92ZSA9IC88Lio/Pi9nO1xuXG4gIGZ1bmN0aW9uIF9mbkNhbGN1bGF0ZUNvbHVtbldpZHRocyhvU2V0dGluZ3MpIHtcbiAgICB2YXIgdGFibGUgPSBvU2V0dGluZ3MublRhYmxlLFxuICAgICAgICBjb2x1bW5zID0gb1NldHRpbmdzLmFvQ29sdW1ucyxcbiAgICAgICAgc2Nyb2xsID0gb1NldHRpbmdzLm9TY3JvbGwsXG4gICAgICAgIHNjcm9sbFkgPSBzY3JvbGwuc1ksXG4gICAgICAgIHNjcm9sbFggPSBzY3JvbGwuc1gsXG4gICAgICAgIHNjcm9sbFhJbm5lciA9IHNjcm9sbC5zWElubmVyLFxuICAgICAgICBjb2x1bW5Db3VudCA9IGNvbHVtbnMubGVuZ3RoLFxuICAgICAgICB2aXNpYmxlQ29sdW1ucyA9IF9mbkdldENvbHVtbnMob1NldHRpbmdzLCAnYlZpc2libGUnKSxcbiAgICAgICAgaGVhZGVyQ2VsbHMgPSAkKCd0aCcsIG9TZXR0aW5ncy5uVEhlYWQpLFxuICAgICAgICB0YWJsZVdpZHRoQXR0ciA9IHRhYmxlLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSxcbiAgICAgICAgdGFibGVDb250YWluZXIgPSB0YWJsZS5wYXJlbnROb2RlLFxuICAgICAgICB1c2VySW5wdXRzID0gZmFsc2UsXG4gICAgICAgIGksXG4gICAgICAgIGNvbHVtbixcbiAgICAgICAgY29sdW1uSWR4LFxuICAgICAgICB3aWR0aCxcbiAgICAgICAgb3V0ZXJXaWR0aCxcbiAgICAgICAgYnJvd3NlciA9IG9TZXR0aW5ncy5vQnJvd3NlcixcbiAgICAgICAgaWU2NyA9IGJyb3dzZXIuYlNjcm9sbE92ZXJzaXplO1xuXG4gICAgdmFyIHN0eWxlV2lkdGggPSB0YWJsZS5zdHlsZS53aWR0aDtcblxuICAgIGlmIChzdHlsZVdpZHRoICYmIHN0eWxlV2lkdGguaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgICAgdGFibGVXaWR0aEF0dHIgPSBzdHlsZVdpZHRoO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCB2aXNpYmxlQ29sdW1ucy5sZW5ndGg7IGkrKykge1xuICAgICAgY29sdW1uID0gY29sdW1uc1t2aXNpYmxlQ29sdW1uc1tpXV07XG5cbiAgICAgIGlmIChjb2x1bW4uc1dpZHRoICE9PSBudWxsKSB7XG4gICAgICAgIGNvbHVtbi5zV2lkdGggPSBfZm5Db252ZXJ0VG9XaWR0aChjb2x1bW4uc1dpZHRoT3JpZywgdGFibGVDb250YWluZXIpO1xuICAgICAgICB1c2VySW5wdXRzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaWU2NyB8fCAhdXNlcklucHV0cyAmJiAhc2Nyb2xsWCAmJiAhc2Nyb2xsWSAmJiBjb2x1bW5Db3VudCA9PSBfZm5WaXNibGVDb2x1bW5zKG9TZXR0aW5ncykgJiYgY29sdW1uQ291bnQgPT0gaGVhZGVyQ2VsbHMubGVuZ3RoKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY29sdW1uQ291bnQ7IGkrKykge1xuICAgICAgICB2YXIgY29sSWR4ID0gX2ZuVmlzaWJsZVRvQ29sdW1uSW5kZXgob1NldHRpbmdzLCBpKTtcblxuICAgICAgICBpZiAoY29sSWR4ICE9PSBudWxsKSB7XG4gICAgICAgICAgY29sdW1uc1tjb2xJZHhdLnNXaWR0aCA9IF9mblN0cmluZ1RvQ3NzKGhlYWRlckNlbGxzLmVxKGkpLndpZHRoKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0bXBUYWJsZSA9ICQodGFibGUpLmNsb25lKCkuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpLnJlbW92ZUF0dHIoJ2lkJyk7XG4gICAgICB0bXBUYWJsZS5maW5kKCd0Ym9keSB0cicpLnJlbW92ZSgpO1xuICAgICAgdmFyIHRyID0gJCgnPHRyLz4nKS5hcHBlbmRUbyh0bXBUYWJsZS5maW5kKCd0Ym9keScpKTtcbiAgICAgIHRtcFRhYmxlLmZpbmQoJ3RoZWFkLCB0Zm9vdCcpLnJlbW92ZSgpO1xuICAgICAgdG1wVGFibGUuYXBwZW5kKCQob1NldHRpbmdzLm5USGVhZCkuY2xvbmUoKSkuYXBwZW5kKCQob1NldHRpbmdzLm5URm9vdCkuY2xvbmUoKSk7XG4gICAgICB0bXBUYWJsZS5maW5kKCd0Zm9vdCB0aCwgdGZvb3QgdGQnKS5jc3MoJ3dpZHRoJywgJycpO1xuICAgICAgaGVhZGVyQ2VsbHMgPSBfZm5HZXRVbmlxdWVUaHMob1NldHRpbmdzLCB0bXBUYWJsZS5maW5kKCd0aGVhZCcpWzBdKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHZpc2libGVDb2x1bW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbHVtbiA9IGNvbHVtbnNbdmlzaWJsZUNvbHVtbnNbaV1dO1xuICAgICAgICBoZWFkZXJDZWxsc1tpXS5zdHlsZS53aWR0aCA9IGNvbHVtbi5zV2lkdGhPcmlnICE9PSBudWxsICYmIGNvbHVtbi5zV2lkdGhPcmlnICE9PSAnJyA/IF9mblN0cmluZ1RvQ3NzKGNvbHVtbi5zV2lkdGhPcmlnKSA6ICcnO1xuXG4gICAgICAgIGlmIChjb2x1bW4uc1dpZHRoT3JpZyAmJiBzY3JvbGxYKSB7XG4gICAgICAgICAgJChoZWFkZXJDZWxsc1tpXSkuYXBwZW5kKCQoJzxkaXYvPicpLmNzcyh7XG4gICAgICAgICAgICB3aWR0aDogY29sdW1uLnNXaWR0aE9yaWcsXG4gICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgYm9yZGVyOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAxXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChvU2V0dGluZ3MuYW9EYXRhLmxlbmd0aCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdmlzaWJsZUNvbHVtbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb2x1bW5JZHggPSB2aXNpYmxlQ29sdW1uc1tpXTtcbiAgICAgICAgICBjb2x1bW4gPSBjb2x1bW5zW2NvbHVtbklkeF07XG4gICAgICAgICAgJChfZm5HZXRXaWRlc3ROb2RlKG9TZXR0aW5ncywgY29sdW1uSWR4KSkuY2xvbmUoZmFsc2UpLmFwcGVuZChjb2x1bW4uc0NvbnRlbnRQYWRkaW5nKS5hcHBlbmRUbyh0cik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJCgnW25hbWVdJywgdG1wVGFibGUpLnJlbW92ZUF0dHIoJ25hbWUnKTtcbiAgICAgIHZhciBob2xkZXIgPSAkKCc8ZGl2Lz4nKS5jc3Moc2Nyb2xsWCB8fCBzY3JvbGxZID8ge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBoZWlnaHQ6IDEsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgIH0gOiB7fSkuYXBwZW5kKHRtcFRhYmxlKS5hcHBlbmRUbyh0YWJsZUNvbnRhaW5lcik7XG5cbiAgICAgIGlmIChzY3JvbGxYICYmIHNjcm9sbFhJbm5lcikge1xuICAgICAgICB0bXBUYWJsZS53aWR0aChzY3JvbGxYSW5uZXIpO1xuICAgICAgfSBlbHNlIGlmIChzY3JvbGxYKSB7XG4gICAgICAgIHRtcFRhYmxlLmNzcygnd2lkdGgnLCAnYXV0bycpO1xuICAgICAgICB0bXBUYWJsZS5yZW1vdmVBdHRyKCd3aWR0aCcpO1xuXG4gICAgICAgIGlmICh0bXBUYWJsZS53aWR0aCgpIDwgdGFibGVDb250YWluZXIuY2xpZW50V2lkdGggJiYgdGFibGVXaWR0aEF0dHIpIHtcbiAgICAgICAgICB0bXBUYWJsZS53aWR0aCh0YWJsZUNvbnRhaW5lci5jbGllbnRXaWR0aCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsWSkge1xuICAgICAgICB0bXBUYWJsZS53aWR0aCh0YWJsZUNvbnRhaW5lci5jbGllbnRXaWR0aCk7XG4gICAgICB9IGVsc2UgaWYgKHRhYmxlV2lkdGhBdHRyKSB7XG4gICAgICAgIHRtcFRhYmxlLndpZHRoKHRhYmxlV2lkdGhBdHRyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRvdGFsID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHZpc2libGVDb2x1bW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjZWxsID0gJChoZWFkZXJDZWxsc1tpXSk7XG4gICAgICAgIHZhciBib3JkZXIgPSBjZWxsLm91dGVyV2lkdGgoKSAtIGNlbGwud2lkdGgoKTtcbiAgICAgICAgdmFyIGJvdW5kaW5nID0gYnJvd3Nlci5iQm91bmRpbmcgPyBNYXRoLmNlaWwoaGVhZGVyQ2VsbHNbaV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpIDogY2VsbC5vdXRlcldpZHRoKCk7XG4gICAgICAgIHRvdGFsICs9IGJvdW5kaW5nO1xuICAgICAgICBjb2x1bW5zW3Zpc2libGVDb2x1bW5zW2ldXS5zV2lkdGggPSBfZm5TdHJpbmdUb0Nzcyhib3VuZGluZyAtIGJvcmRlcik7XG4gICAgICB9XG5cbiAgICAgIHRhYmxlLnN0eWxlLndpZHRoID0gX2ZuU3RyaW5nVG9Dc3ModG90YWwpO1xuICAgICAgaG9sZGVyLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIGlmICh0YWJsZVdpZHRoQXR0cikge1xuICAgICAgdGFibGUuc3R5bGUud2lkdGggPSBfZm5TdHJpbmdUb0Nzcyh0YWJsZVdpZHRoQXR0cik7XG4gICAgfVxuXG4gICAgaWYgKCh0YWJsZVdpZHRoQXR0ciB8fCBzY3JvbGxYKSAmJiAhb1NldHRpbmdzLl9yZXN6RXZ0KSB7XG4gICAgICB2YXIgYmluZFJlc2l6ZSA9IGZ1bmN0aW9uIGJpbmRSZXNpemUoKSB7XG4gICAgICAgICQod2luZG93KS5vbigncmVzaXplLkRULScgKyBvU2V0dGluZ3Muc0luc3RhbmNlLCBfZm5UaHJvdHRsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX2ZuQWRqdXN0Q29sdW1uU2l6aW5nKG9TZXR0aW5ncyk7XG4gICAgICAgIH0pKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChpZTY3KSB7XG4gICAgICAgIHNldFRpbWVvdXQoYmluZFJlc2l6ZSwgMTAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiaW5kUmVzaXplKCk7XG4gICAgICB9XG5cbiAgICAgIG9TZXR0aW5ncy5fcmVzekV2dCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9mblRocm90dGxlID0gRGF0YVRhYmxlLnV0aWwudGhyb3R0bGU7XG5cbiAgZnVuY3Rpb24gX2ZuQ29udmVydFRvV2lkdGgod2lkdGgsIHBhcmVudCkge1xuICAgIGlmICghd2lkdGgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHZhciBuID0gJCgnPGRpdi8+JykuY3NzKCd3aWR0aCcsIF9mblN0cmluZ1RvQ3NzKHdpZHRoKSkuYXBwZW5kVG8ocGFyZW50IHx8IGRvY3VtZW50LmJvZHkpO1xuICAgIHZhciB2YWwgPSBuWzBdLm9mZnNldFdpZHRoO1xuICAgIG4ucmVtb3ZlKCk7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mbkdldFdpZGVzdE5vZGUoc2V0dGluZ3MsIGNvbElkeCkge1xuICAgIHZhciBpZHggPSBfZm5HZXRNYXhMZW5TdHJpbmcoc2V0dGluZ3MsIGNvbElkeCk7XG5cbiAgICBpZiAoaWR4IDwgMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSBzZXR0aW5ncy5hb0RhdGFbaWR4XTtcbiAgICByZXR1cm4gIWRhdGEublRyID8gJCgnPHRkLz4nKS5odG1sKF9mbkdldENlbGxEYXRhKHNldHRpbmdzLCBpZHgsIGNvbElkeCwgJ2Rpc3BsYXknKSlbMF0gOiBkYXRhLmFuQ2VsbHNbY29sSWR4XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mbkdldE1heExlblN0cmluZyhzZXR0aW5ncywgY29sSWR4KSB7XG4gICAgdmFyIHMsXG4gICAgICAgIG1heCA9IC0xLFxuICAgICAgICBtYXhJZHggPSAtMTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpZW4gPSBzZXR0aW5ncy5hb0RhdGEubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgIHMgPSBfZm5HZXRDZWxsRGF0YShzZXR0aW5ncywgaSwgY29sSWR4LCAnZGlzcGxheScpICsgJyc7XG4gICAgICBzID0gcy5yZXBsYWNlKF9fcmVfaHRtbF9yZW1vdmUsICcnKTtcbiAgICAgIHMgPSBzLnJlcGxhY2UoLyZuYnNwOy9nLCAnICcpO1xuXG4gICAgICBpZiAocy5sZW5ndGggPiBtYXgpIHtcbiAgICAgICAgbWF4ID0gcy5sZW5ndGg7XG4gICAgICAgIG1heElkeCA9IGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1heElkeDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mblN0cmluZ1RvQ3NzKHMpIHtcbiAgICBpZiAocyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcwcHgnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcyA9PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHMgPCAwID8gJzBweCcgOiBzICsgJ3B4JztcbiAgICB9XG5cbiAgICByZXR1cm4gcy5tYXRjaCgvXFxkJC8pID8gcyArICdweCcgOiBzO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuU29ydEZsYXR0ZW4oc2V0dGluZ3MpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgaUxlbixcbiAgICAgICAgayxcbiAgICAgICAga0xlbixcbiAgICAgICAgYVNvcnQgPSBbXSxcbiAgICAgICAgYWlPcmlnID0gW10sXG4gICAgICAgIGFvQ29sdW1ucyA9IHNldHRpbmdzLmFvQ29sdW1ucyxcbiAgICAgICAgYURhdGFTb3J0LFxuICAgICAgICBpQ29sLFxuICAgICAgICBzVHlwZSxcbiAgICAgICAgc3JjQ29sLFxuICAgICAgICBmaXhlZCA9IHNldHRpbmdzLmFhU29ydGluZ0ZpeGVkLFxuICAgICAgICBmaXhlZE9iaiA9ICQuaXNQbGFpbk9iamVjdChmaXhlZCksXG4gICAgICAgIG5lc3RlZFNvcnQgPSBbXSxcbiAgICAgICAgYWRkID0gZnVuY3Rpb24gYWRkKGEpIHtcbiAgICAgIGlmIChhLmxlbmd0aCAmJiAhJC5pc0FycmF5KGFbMF0pKSB7XG4gICAgICAgIG5lc3RlZFNvcnQucHVzaChhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQubWVyZ2UobmVzdGVkU29ydCwgYSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICgkLmlzQXJyYXkoZml4ZWQpKSB7XG4gICAgICBhZGQoZml4ZWQpO1xuICAgIH1cblxuICAgIGlmIChmaXhlZE9iaiAmJiBmaXhlZC5wcmUpIHtcbiAgICAgIGFkZChmaXhlZC5wcmUpO1xuICAgIH1cblxuICAgIGFkZChzZXR0aW5ncy5hYVNvcnRpbmcpO1xuXG4gICAgaWYgKGZpeGVkT2JqICYmIGZpeGVkLnBvc3QpIHtcbiAgICAgIGFkZChmaXhlZC5wb3N0KTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbmVzdGVkU29ydC5sZW5ndGg7IGkrKykge1xuICAgICAgc3JjQ29sID0gbmVzdGVkU29ydFtpXVswXTtcbiAgICAgIGFEYXRhU29ydCA9IGFvQ29sdW1uc1tzcmNDb2xdLmFEYXRhU29ydDtcblxuICAgICAgZm9yIChrID0gMCwga0xlbiA9IGFEYXRhU29ydC5sZW5ndGg7IGsgPCBrTGVuOyBrKyspIHtcbiAgICAgICAgaUNvbCA9IGFEYXRhU29ydFtrXTtcbiAgICAgICAgc1R5cGUgPSBhb0NvbHVtbnNbaUNvbF0uc1R5cGUgfHwgJ3N0cmluZyc7XG5cbiAgICAgICAgaWYgKG5lc3RlZFNvcnRbaV0uX2lkeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbmVzdGVkU29ydFtpXS5faWR4ID0gJC5pbkFycmF5KG5lc3RlZFNvcnRbaV1bMV0sIGFvQ29sdW1uc1tpQ29sXS5hc1NvcnRpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgYVNvcnQucHVzaCh7XG4gICAgICAgICAgc3JjOiBzcmNDb2wsXG4gICAgICAgICAgY29sOiBpQ29sLFxuICAgICAgICAgIGRpcjogbmVzdGVkU29ydFtpXVsxXSxcbiAgICAgICAgICBpbmRleDogbmVzdGVkU29ydFtpXS5faWR4LFxuICAgICAgICAgIHR5cGU6IHNUeXBlLFxuICAgICAgICAgIGZvcm1hdHRlcjogRGF0YVRhYmxlLmV4dC50eXBlLm9yZGVyW3NUeXBlICsgXCItcHJlXCJdXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhU29ydDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mblNvcnQob1NldHRpbmdzKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGllbixcbiAgICAgICAgaUxlbixcbiAgICAgICAgaixcbiAgICAgICAgakxlbixcbiAgICAgICAgayxcbiAgICAgICAga0xlbixcbiAgICAgICAgc0RhdGFUeXBlLFxuICAgICAgICBuVGgsXG4gICAgICAgIGFpT3JpZyA9IFtdLFxuICAgICAgICBvRXh0U29ydCA9IERhdGFUYWJsZS5leHQudHlwZS5vcmRlcixcbiAgICAgICAgYW9EYXRhID0gb1NldHRpbmdzLmFvRGF0YSxcbiAgICAgICAgYW9Db2x1bW5zID0gb1NldHRpbmdzLmFvQ29sdW1ucyxcbiAgICAgICAgYURhdGFTb3J0LFxuICAgICAgICBkYXRhLFxuICAgICAgICBpQ29sLFxuICAgICAgICBzVHlwZSxcbiAgICAgICAgb1NvcnQsXG4gICAgICAgIGZvcm1hdHRlcnMgPSAwLFxuICAgICAgICBzb3J0Q29sLFxuICAgICAgICBkaXNwbGF5TWFzdGVyID0gb1NldHRpbmdzLmFpRGlzcGxheU1hc3RlcixcbiAgICAgICAgYVNvcnQ7XG5cbiAgICBfZm5Db2x1bW5UeXBlcyhvU2V0dGluZ3MpO1xuXG4gICAgYVNvcnQgPSBfZm5Tb3J0RmxhdHRlbihvU2V0dGluZ3MpO1xuXG4gICAgZm9yIChpID0gMCwgaWVuID0gYVNvcnQubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgIHNvcnRDb2wgPSBhU29ydFtpXTtcblxuICAgICAgaWYgKHNvcnRDb2wuZm9ybWF0dGVyKSB7XG4gICAgICAgIGZvcm1hdHRlcnMrKztcbiAgICAgIH1cblxuICAgICAgX2ZuU29ydERhdGEob1NldHRpbmdzLCBzb3J0Q29sLmNvbCk7XG4gICAgfVxuXG4gICAgaWYgKF9mbkRhdGFTb3VyY2Uob1NldHRpbmdzKSAhPSAnc3NwJyAmJiBhU29ydC5sZW5ndGggIT09IDApIHtcbiAgICAgIGZvciAoaSA9IDAsIGlMZW4gPSBkaXNwbGF5TWFzdGVyLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgICBhaU9yaWdbZGlzcGxheU1hc3RlcltpXV0gPSBpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9ybWF0dGVycyA9PT0gYVNvcnQubGVuZ3RoKSB7XG4gICAgICAgIGRpc3BsYXlNYXN0ZXIuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHZhciB4LFxuICAgICAgICAgICAgICB5LFxuICAgICAgICAgICAgICBrLFxuICAgICAgICAgICAgICB0ZXN0LFxuICAgICAgICAgICAgICBzb3J0LFxuICAgICAgICAgICAgICBsZW4gPSBhU29ydC5sZW5ndGgsXG4gICAgICAgICAgICAgIGRhdGFBID0gYW9EYXRhW2FdLl9hU29ydERhdGEsXG4gICAgICAgICAgICAgIGRhdGFCID0gYW9EYXRhW2JdLl9hU29ydERhdGE7XG5cbiAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgICAgIHNvcnQgPSBhU29ydFtrXTtcbiAgICAgICAgICAgIHggPSBkYXRhQVtzb3J0LmNvbF07XG4gICAgICAgICAgICB5ID0gZGF0YUJbc29ydC5jb2xdO1xuICAgICAgICAgICAgdGVzdCA9IHggPCB5ID8gLTEgOiB4ID4geSA/IDEgOiAwO1xuXG4gICAgICAgICAgICBpZiAodGVzdCAhPT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gc29ydC5kaXIgPT09ICdhc2MnID8gdGVzdCA6IC10ZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHggPSBhaU9yaWdbYV07XG4gICAgICAgICAgeSA9IGFpT3JpZ1tiXTtcbiAgICAgICAgICByZXR1cm4geCA8IHkgPyAtMSA6IHggPiB5ID8gMSA6IDA7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzcGxheU1hc3Rlci5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgdmFyIHgsXG4gICAgICAgICAgICAgIHksXG4gICAgICAgICAgICAgIGssXG4gICAgICAgICAgICAgIGwsXG4gICAgICAgICAgICAgIHRlc3QsXG4gICAgICAgICAgICAgIHNvcnQsXG4gICAgICAgICAgICAgIGZuLFxuICAgICAgICAgICAgICBsZW4gPSBhU29ydC5sZW5ndGgsXG4gICAgICAgICAgICAgIGRhdGFBID0gYW9EYXRhW2FdLl9hU29ydERhdGEsXG4gICAgICAgICAgICAgIGRhdGFCID0gYW9EYXRhW2JdLl9hU29ydERhdGE7XG5cbiAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgICAgIHNvcnQgPSBhU29ydFtrXTtcbiAgICAgICAgICAgIHggPSBkYXRhQVtzb3J0LmNvbF07XG4gICAgICAgICAgICB5ID0gZGF0YUJbc29ydC5jb2xdO1xuICAgICAgICAgICAgZm4gPSBvRXh0U29ydFtzb3J0LnR5cGUgKyBcIi1cIiArIHNvcnQuZGlyXSB8fCBvRXh0U29ydFtcInN0cmluZy1cIiArIHNvcnQuZGlyXTtcbiAgICAgICAgICAgIHRlc3QgPSBmbih4LCB5KTtcblxuICAgICAgICAgICAgaWYgKHRlc3QgIT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeCA9IGFpT3JpZ1thXTtcbiAgICAgICAgICB5ID0gYWlPcmlnW2JdO1xuICAgICAgICAgIHJldHVybiB4IDwgeSA/IC0xIDogeCA+IHkgPyAxIDogMDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgb1NldHRpbmdzLmJTb3J0ZWQgPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuU29ydEFyaWEoc2V0dGluZ3MpIHtcbiAgICB2YXIgbGFiZWw7XG4gICAgdmFyIG5leHRTb3J0O1xuICAgIHZhciBjb2x1bW5zID0gc2V0dGluZ3MuYW9Db2x1bW5zO1xuXG4gICAgdmFyIGFTb3J0ID0gX2ZuU29ydEZsYXR0ZW4oc2V0dGluZ3MpO1xuXG4gICAgdmFyIG9BcmlhID0gc2V0dGluZ3Mub0xhbmd1YWdlLm9BcmlhO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlMZW4gPSBjb2x1bW5zLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgdmFyIGNvbCA9IGNvbHVtbnNbaV07XG4gICAgICB2YXIgYXNTb3J0aW5nID0gY29sLmFzU29ydGluZztcbiAgICAgIHZhciBzVGl0bGUgPSBjb2wuc1RpdGxlLnJlcGxhY2UoLzwuKj8+L2csIFwiXCIpO1xuICAgICAgdmFyIHRoID0gY29sLm5UaDtcbiAgICAgIHRoLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1zb3J0Jyk7XG5cbiAgICAgIGlmIChjb2wuYlNvcnRhYmxlKSB7XG4gICAgICAgIGlmIChhU29ydC5sZW5ndGggPiAwICYmIGFTb3J0WzBdLmNvbCA9PSBpKSB7XG4gICAgICAgICAgdGguc2V0QXR0cmlidXRlKCdhcmlhLXNvcnQnLCBhU29ydFswXS5kaXIgPT0gXCJhc2NcIiA/IFwiYXNjZW5kaW5nXCIgOiBcImRlc2NlbmRpbmdcIik7XG4gICAgICAgICAgbmV4dFNvcnQgPSBhc1NvcnRpbmdbYVNvcnRbMF0uaW5kZXggKyAxXSB8fCBhc1NvcnRpbmdbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dFNvcnQgPSBhc1NvcnRpbmdbMF07XG4gICAgICAgIH1cblxuICAgICAgICBsYWJlbCA9IHNUaXRsZSArIChuZXh0U29ydCA9PT0gXCJhc2NcIiA/IG9BcmlhLnNTb3J0QXNjZW5kaW5nIDogb0FyaWEuc1NvcnREZXNjZW5kaW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxhYmVsID0gc1RpdGxlO1xuICAgICAgfVxuXG4gICAgICB0aC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBsYWJlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2ZuU29ydExpc3RlbmVyKHNldHRpbmdzLCBjb2xJZHgsIGFwcGVuZCwgY2FsbGJhY2spIHtcbiAgICB2YXIgY29sID0gc2V0dGluZ3MuYW9Db2x1bW5zW2NvbElkeF07XG4gICAgdmFyIHNvcnRpbmcgPSBzZXR0aW5ncy5hYVNvcnRpbmc7XG4gICAgdmFyIGFzU29ydGluZyA9IGNvbC5hc1NvcnRpbmc7XG4gICAgdmFyIG5leHRTb3J0SWR4O1xuXG4gICAgdmFyIG5leHQgPSBmdW5jdGlvbiBuZXh0KGEsIG92ZXJmbG93KSB7XG4gICAgICB2YXIgaWR4ID0gYS5faWR4O1xuXG4gICAgICBpZiAoaWR4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWR4ID0gJC5pbkFycmF5KGFbMV0sIGFzU29ydGluZyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpZHggKyAxIDwgYXNTb3J0aW5nLmxlbmd0aCA/IGlkeCArIDEgOiBvdmVyZmxvdyA/IG51bGwgOiAwO1xuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIHNvcnRpbmdbMF0gPT09ICdudW1iZXInKSB7XG4gICAgICBzb3J0aW5nID0gc2V0dGluZ3MuYWFTb3J0aW5nID0gW3NvcnRpbmddO1xuICAgIH1cblxuICAgIGlmIChhcHBlbmQgJiYgc2V0dGluZ3Mub0ZlYXR1cmVzLmJTb3J0TXVsdGkpIHtcbiAgICAgIHZhciBzb3J0SWR4ID0gJC5pbkFycmF5KGNvbElkeCwgX3BsdWNrKHNvcnRpbmcsICcwJykpO1xuXG4gICAgICBpZiAoc29ydElkeCAhPT0gLTEpIHtcbiAgICAgICAgbmV4dFNvcnRJZHggPSBuZXh0KHNvcnRpbmdbc29ydElkeF0sIHRydWUpO1xuXG4gICAgICAgIGlmIChuZXh0U29ydElkeCA9PT0gbnVsbCAmJiBzb3J0aW5nLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIG5leHRTb3J0SWR4ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0U29ydElkeCA9PT0gbnVsbCkge1xuICAgICAgICAgIHNvcnRpbmcuc3BsaWNlKHNvcnRJZHgsIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNvcnRpbmdbc29ydElkeF1bMV0gPSBhc1NvcnRpbmdbbmV4dFNvcnRJZHhdO1xuICAgICAgICAgIHNvcnRpbmdbc29ydElkeF0uX2lkeCA9IG5leHRTb3J0SWR4O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzb3J0aW5nLnB1c2goW2NvbElkeCwgYXNTb3J0aW5nWzBdLCAwXSk7XG4gICAgICAgIHNvcnRpbmdbc29ydGluZy5sZW5ndGggLSAxXS5faWR4ID0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNvcnRpbmcubGVuZ3RoICYmIHNvcnRpbmdbMF1bMF0gPT0gY29sSWR4KSB7XG4gICAgICBuZXh0U29ydElkeCA9IG5leHQoc29ydGluZ1swXSk7XG4gICAgICBzb3J0aW5nLmxlbmd0aCA9IDE7XG4gICAgICBzb3J0aW5nWzBdWzFdID0gYXNTb3J0aW5nW25leHRTb3J0SWR4XTtcbiAgICAgIHNvcnRpbmdbMF0uX2lkeCA9IG5leHRTb3J0SWR4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzb3J0aW5nLmxlbmd0aCA9IDA7XG4gICAgICBzb3J0aW5nLnB1c2goW2NvbElkeCwgYXNTb3J0aW5nWzBdXSk7XG4gICAgICBzb3J0aW5nWzBdLl9pZHggPSAwO1xuICAgIH1cblxuICAgIF9mblJlRHJhdyhzZXR0aW5ncyk7XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhbGxiYWNrKHNldHRpbmdzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZm5Tb3J0QXR0YWNoTGlzdGVuZXIoc2V0dGluZ3MsIGF0dGFjaFRvLCBjb2xJZHgsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGNvbCA9IHNldHRpbmdzLmFvQ29sdW1uc1tjb2xJZHhdO1xuXG4gICAgX2ZuQmluZEFjdGlvbihhdHRhY2hUbywge30sIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoY29sLmJTb3J0YWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2V0dGluZ3Mub0ZlYXR1cmVzLmJQcm9jZXNzaW5nKSB7XG4gICAgICAgIF9mblByb2Nlc3NpbmdEaXNwbGF5KHNldHRpbmdzLCB0cnVlKTtcblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfZm5Tb3J0TGlzdGVuZXIoc2V0dGluZ3MsIGNvbElkeCwgZS5zaGlmdEtleSwgY2FsbGJhY2spO1xuXG4gICAgICAgICAgaWYgKF9mbkRhdGFTb3VyY2Uoc2V0dGluZ3MpICE9PSAnc3NwJykge1xuICAgICAgICAgICAgX2ZuUHJvY2Vzc2luZ0Rpc3BsYXkoc2V0dGluZ3MsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2ZuU29ydExpc3RlbmVyKHNldHRpbmdzLCBjb2xJZHgsIGUuc2hpZnRLZXksIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mblNvcnRpbmdDbGFzc2VzKHNldHRpbmdzKSB7XG4gICAgdmFyIG9sZFNvcnQgPSBzZXR0aW5ncy5hTGFzdFNvcnQ7XG4gICAgdmFyIHNvcnRDbGFzcyA9IHNldHRpbmdzLm9DbGFzc2VzLnNTb3J0Q29sdW1uO1xuXG4gICAgdmFyIHNvcnQgPSBfZm5Tb3J0RmxhdHRlbihzZXR0aW5ncyk7XG5cbiAgICB2YXIgZmVhdHVyZXMgPSBzZXR0aW5ncy5vRmVhdHVyZXM7XG4gICAgdmFyIGksIGllbiwgY29sSWR4O1xuXG4gICAgaWYgKGZlYXR1cmVzLmJTb3J0ICYmIGZlYXR1cmVzLmJTb3J0Q2xhc3Nlcykge1xuICAgICAgZm9yIChpID0gMCwgaWVuID0gb2xkU29ydC5sZW5ndGg7IGkgPCBpZW47IGkrKykge1xuICAgICAgICBjb2xJZHggPSBvbGRTb3J0W2ldLnNyYztcbiAgICAgICAgJChfcGx1Y2soc2V0dGluZ3MuYW9EYXRhLCAnYW5DZWxscycsIGNvbElkeCkpLnJlbW92ZUNsYXNzKHNvcnRDbGFzcyArIChpIDwgMiA/IGkgKyAxIDogMykpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwLCBpZW4gPSBzb3J0Lmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICAgIGNvbElkeCA9IHNvcnRbaV0uc3JjO1xuICAgICAgICAkKF9wbHVjayhzZXR0aW5ncy5hb0RhdGEsICdhbkNlbGxzJywgY29sSWR4KSkuYWRkQ2xhc3Moc29ydENsYXNzICsgKGkgPCAyID8gaSArIDEgOiAzKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2V0dGluZ3MuYUxhc3RTb3J0ID0gc29ydDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mblNvcnREYXRhKHNldHRpbmdzLCBpZHgpIHtcbiAgICB2YXIgY29sdW1uID0gc2V0dGluZ3MuYW9Db2x1bW5zW2lkeF07XG4gICAgdmFyIGN1c3RvbVNvcnQgPSBEYXRhVGFibGUuZXh0Lm9yZGVyW2NvbHVtbi5zU29ydERhdGFUeXBlXTtcbiAgICB2YXIgY3VzdG9tRGF0YTtcblxuICAgIGlmIChjdXN0b21Tb3J0KSB7XG4gICAgICBjdXN0b21EYXRhID0gY3VzdG9tU29ydC5jYWxsKHNldHRpbmdzLm9JbnN0YW5jZSwgc2V0dGluZ3MsIGlkeCwgX2ZuQ29sdW1uSW5kZXhUb1Zpc2libGUoc2V0dGluZ3MsIGlkeCkpO1xuICAgIH1cblxuICAgIHZhciByb3csIGNlbGxEYXRhO1xuICAgIHZhciBmb3JtYXR0ZXIgPSBEYXRhVGFibGUuZXh0LnR5cGUub3JkZXJbY29sdW1uLnNUeXBlICsgXCItcHJlXCJdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGllbiA9IHNldHRpbmdzLmFvRGF0YS5sZW5ndGg7IGkgPCBpZW47IGkrKykge1xuICAgICAgcm93ID0gc2V0dGluZ3MuYW9EYXRhW2ldO1xuXG4gICAgICBpZiAoIXJvdy5fYVNvcnREYXRhKSB7XG4gICAgICAgIHJvdy5fYVNvcnREYXRhID0gW107XG4gICAgICB9XG5cbiAgICAgIGlmICghcm93Ll9hU29ydERhdGFbaWR4XSB8fCBjdXN0b21Tb3J0KSB7XG4gICAgICAgIGNlbGxEYXRhID0gY3VzdG9tU29ydCA/IGN1c3RvbURhdGFbaV0gOiBfZm5HZXRDZWxsRGF0YShzZXR0aW5ncywgaSwgaWR4LCAnc29ydCcpO1xuICAgICAgICByb3cuX2FTb3J0RGF0YVtpZHhdID0gZm9ybWF0dGVyID8gZm9ybWF0dGVyKGNlbGxEYXRhKSA6IGNlbGxEYXRhO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9mblNhdmVTdGF0ZShzZXR0aW5ncykge1xuICAgIGlmICghc2V0dGluZ3Mub0ZlYXR1cmVzLmJTdGF0ZVNhdmUgfHwgc2V0dGluZ3MuYkRlc3Ryb3lpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICB0aW1lOiArbmV3IERhdGUoKSxcbiAgICAgIHN0YXJ0OiBzZXR0aW5ncy5faURpc3BsYXlTdGFydCxcbiAgICAgIGxlbmd0aDogc2V0dGluZ3MuX2lEaXNwbGF5TGVuZ3RoLFxuICAgICAgb3JkZXI6ICQuZXh0ZW5kKHRydWUsIFtdLCBzZXR0aW5ncy5hYVNvcnRpbmcpLFxuICAgICAgc2VhcmNoOiBfZm5TZWFyY2hUb0NhbWVsKHNldHRpbmdzLm9QcmV2aW91c1NlYXJjaCksXG4gICAgICBjb2x1bW5zOiAkLm1hcChzZXR0aW5ncy5hb0NvbHVtbnMsIGZ1bmN0aW9uIChjb2wsIGkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2aXNpYmxlOiBjb2wuYlZpc2libGUsXG4gICAgICAgICAgc2VhcmNoOiBfZm5TZWFyY2hUb0NhbWVsKHNldHRpbmdzLmFvUHJlU2VhcmNoQ29sc1tpXSlcbiAgICAgICAgfTtcbiAgICAgIH0pXG4gICAgfTtcblxuICAgIF9mbkNhbGxiYWNrRmlyZShzZXR0aW5ncywgXCJhb1N0YXRlU2F2ZVBhcmFtc1wiLCAnc3RhdGVTYXZlUGFyYW1zJywgW3NldHRpbmdzLCBzdGF0ZV0pO1xuXG4gICAgc2V0dGluZ3Mub1NhdmVkU3RhdGUgPSBzdGF0ZTtcbiAgICBzZXR0aW5ncy5mblN0YXRlU2F2ZUNhbGxiYWNrLmNhbGwoc2V0dGluZ3Mub0luc3RhbmNlLCBzZXR0aW5ncywgc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuTG9hZFN0YXRlKHNldHRpbmdzLCBvSW5pdCwgY2FsbGJhY2spIHtcbiAgICB2YXIgaSwgaWVuO1xuICAgIHZhciBjb2x1bW5zID0gc2V0dGluZ3MuYW9Db2x1bW5zO1xuXG4gICAgdmFyIGxvYWRlZCA9IGZ1bmN0aW9uIGxvYWRlZChzKSB7XG4gICAgICBpZiAoIXMgfHwgIXMudGltZSkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBhYlN0YXRlTG9hZCA9IF9mbkNhbGxiYWNrRmlyZShzZXR0aW5ncywgJ2FvU3RhdGVMb2FkUGFyYW1zJywgJ3N0YXRlTG9hZFBhcmFtcycsIFtzZXR0aW5ncywgc10pO1xuXG4gICAgICBpZiAoJC5pbkFycmF5KGZhbHNlLCBhYlN0YXRlTG9hZCkgIT09IC0xKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGR1cmF0aW9uID0gc2V0dGluZ3MuaVN0YXRlRHVyYXRpb247XG5cbiAgICAgIGlmIChkdXJhdGlvbiA+IDAgJiYgcy50aW1lIDwgK25ldyBEYXRlKCkgLSBkdXJhdGlvbiAqIDEwMDApIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocy5jb2x1bW5zICYmIGNvbHVtbnMubGVuZ3RoICE9PSBzLmNvbHVtbnMubGVuZ3RoKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0dGluZ3Mub0xvYWRlZFN0YXRlID0gJC5leHRlbmQodHJ1ZSwge30sIHMpO1xuXG4gICAgICBpZiAocy5zdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNldHRpbmdzLl9pRGlzcGxheVN0YXJ0ID0gcy5zdGFydDtcbiAgICAgICAgc2V0dGluZ3MuaUluaXREaXNwbGF5U3RhcnQgPSBzLnN0YXJ0O1xuICAgICAgfVxuXG4gICAgICBpZiAocy5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGggPSBzLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKHMub3JkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXR0aW5ncy5hYVNvcnRpbmcgPSBbXTtcbiAgICAgICAgJC5lYWNoKHMub3JkZXIsIGZ1bmN0aW9uIChpLCBjb2wpIHtcbiAgICAgICAgICBzZXR0aW5ncy5hYVNvcnRpbmcucHVzaChjb2xbMF0gPj0gY29sdW1ucy5sZW5ndGggPyBbMCwgY29sWzFdXSA6IGNvbCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocy5zZWFyY2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAkLmV4dGVuZChzZXR0aW5ncy5vUHJldmlvdXNTZWFyY2gsIF9mblNlYXJjaFRvSHVuZyhzLnNlYXJjaCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAocy5jb2x1bW5zKSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGllbiA9IHMuY29sdW1ucy5sZW5ndGg7IGkgPCBpZW47IGkrKykge1xuICAgICAgICAgIHZhciBjb2wgPSBzLmNvbHVtbnNbaV07XG5cbiAgICAgICAgICBpZiAoY29sLnZpc2libGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29sdW1uc1tpXS5iVmlzaWJsZSA9IGNvbC52aXNpYmxlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb2wuc2VhcmNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICQuZXh0ZW5kKHNldHRpbmdzLmFvUHJlU2VhcmNoQ29sc1tpXSwgX2ZuU2VhcmNoVG9IdW5nKGNvbC5zZWFyY2gpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX2ZuQ2FsbGJhY2tGaXJlKHNldHRpbmdzLCAnYW9TdGF0ZUxvYWRlZCcsICdzdGF0ZUxvYWRlZCcsIFtzZXR0aW5ncywgc10pO1xuXG4gICAgICBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBpZiAoIXNldHRpbmdzLm9GZWF0dXJlcy5iU3RhdGVTYXZlKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdGF0ZSA9IHNldHRpbmdzLmZuU3RhdGVMb2FkQ2FsbGJhY2suY2FsbChzZXR0aW5ncy5vSW5zdGFuY2UsIHNldHRpbmdzLCBsb2FkZWQpO1xuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGxvYWRlZChzdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2ZuU2V0dGluZ3NGcm9tTm9kZSh0YWJsZSkge1xuICAgIHZhciBzZXR0aW5ncyA9IERhdGFUYWJsZS5zZXR0aW5ncztcbiAgICB2YXIgaWR4ID0gJC5pbkFycmF5KHRhYmxlLCBfcGx1Y2soc2V0dGluZ3MsICduVGFibGUnKSk7XG4gICAgcmV0dXJuIGlkeCAhPT0gLTEgPyBzZXR0aW5nc1tpZHhdIDogbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mbkxvZyhzZXR0aW5ncywgbGV2ZWwsIG1zZywgdG4pIHtcbiAgICBtc2cgPSAnRGF0YVRhYmxlcyB3YXJuaW5nOiAnICsgKHNldHRpbmdzID8gJ3RhYmxlIGlkPScgKyBzZXR0aW5ncy5zVGFibGVJZCArICcgLSAnIDogJycpICsgbXNnO1xuXG4gICAgaWYgKHRuKSB7XG4gICAgICBtc2cgKz0gJy4gRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhpcyBlcnJvciwgcGxlYXNlIHNlZSAnICsgJ2h0dHA6Ly9kYXRhdGFibGVzLm5ldC90bi8nICsgdG47XG4gICAgfVxuXG4gICAgaWYgKCFsZXZlbCkge1xuICAgICAgdmFyIGV4dCA9IERhdGFUYWJsZS5leHQ7XG4gICAgICB2YXIgdHlwZSA9IGV4dC5zRXJyTW9kZSB8fCBleHQuZXJyTW9kZTtcblxuICAgICAgaWYgKHNldHRpbmdzKSB7XG4gICAgICAgIF9mbkNhbGxiYWNrRmlyZShzZXR0aW5ncywgbnVsbCwgJ2Vycm9yJywgW3NldHRpbmdzLCB0biwgbXNnXSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09ICdhbGVydCcpIHtcbiAgICAgICAgYWxlcnQobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAndGhyb3cnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdHlwZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHR5cGUoc2V0dGluZ3MsIHRuLCBtc2cpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAod2luZG93LmNvbnNvbGUgJiYgY29uc29sZS5sb2cpIHtcbiAgICAgIGNvbnNvbGUubG9nKG1zZyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2ZuTWFwKHJldCwgc3JjLCBuYW1lLCBtYXBwZWROYW1lKSB7XG4gICAgaWYgKCQuaXNBcnJheShuYW1lKSkge1xuICAgICAgJC5lYWNoKG5hbWUsIGZ1bmN0aW9uIChpLCB2YWwpIHtcbiAgICAgICAgaWYgKCQuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgICAgX2ZuTWFwKHJldCwgc3JjLCB2YWxbMF0sIHZhbFsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX2ZuTWFwKHJldCwgc3JjLCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobWFwcGVkTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBtYXBwZWROYW1lID0gbmFtZTtcbiAgICB9XG5cbiAgICBpZiAoc3JjW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldFttYXBwZWROYW1lXSA9IHNyY1tuYW1lXTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZm5FeHRlbmQob3V0LCBleHRlbmRlciwgYnJlYWtSZWZzKSB7XG4gICAgdmFyIHZhbDtcblxuICAgIGZvciAodmFyIHByb3AgaW4gZXh0ZW5kZXIpIHtcbiAgICAgIGlmIChleHRlbmRlci5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICB2YWwgPSBleHRlbmRlcltwcm9wXTtcblxuICAgICAgICBpZiAoJC5pc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgICBpZiAoISQuaXNQbGFpbk9iamVjdChvdXRbcHJvcF0pKSB7XG4gICAgICAgICAgICBvdXRbcHJvcF0gPSB7fTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkLmV4dGVuZCh0cnVlLCBvdXRbcHJvcF0sIHZhbCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnJlYWtSZWZzICYmIHByb3AgIT09ICdkYXRhJyAmJiBwcm9wICE9PSAnYWFEYXRhJyAmJiAkLmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgIG91dFtwcm9wXSA9IHZhbC5zbGljZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dFtwcm9wXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICBmdW5jdGlvbiBfZm5CaW5kQWN0aW9uKG4sIG9EYXRhLCBmbikge1xuICAgICQobikub24oJ2NsaWNrLkRUJywgb0RhdGEsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAkKG4pLmJsdXIoKTtcbiAgICAgIGZuKGUpO1xuICAgIH0pLm9uKCdrZXlwcmVzcy5EVCcsIG9EYXRhLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUud2hpY2ggPT09IDEzKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZm4oZSk7XG4gICAgICB9XG4gICAgfSkub24oJ3NlbGVjdHN0YXJ0LkRUJywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuQ2FsbGJhY2tSZWcob1NldHRpbmdzLCBzU3RvcmUsIGZuLCBzTmFtZSkge1xuICAgIGlmIChmbikge1xuICAgICAgb1NldHRpbmdzW3NTdG9yZV0ucHVzaCh7XG4gICAgICAgIFwiZm5cIjogZm4sXG4gICAgICAgIFwic05hbWVcIjogc05hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9mbkNhbGxiYWNrRmlyZShzZXR0aW5ncywgY2FsbGJhY2tBcnIsIGV2ZW50TmFtZSwgYXJncykge1xuICAgIHZhciByZXQgPSBbXTtcblxuICAgIGlmIChjYWxsYmFja0Fycikge1xuICAgICAgcmV0ID0gJC5tYXAoc2V0dGluZ3NbY2FsbGJhY2tBcnJdLnNsaWNlKCkucmV2ZXJzZSgpLCBmdW5jdGlvbiAodmFsLCBpKSB7XG4gICAgICAgIHJldHVybiB2YWwuZm4uYXBwbHkoc2V0dGluZ3Mub0luc3RhbmNlLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChldmVudE5hbWUgIT09IG51bGwpIHtcbiAgICAgIHZhciBlID0gJC5FdmVudChldmVudE5hbWUgKyAnLmR0Jyk7XG4gICAgICAkKHNldHRpbmdzLm5UYWJsZSkudHJpZ2dlcihlLCBhcmdzKTtcbiAgICAgIHJldC5wdXNoKGUucmVzdWx0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZuTGVuZ3RoT3ZlcmZsb3coc2V0dGluZ3MpIHtcbiAgICB2YXIgc3RhcnQgPSBzZXR0aW5ncy5faURpc3BsYXlTdGFydCxcbiAgICAgICAgZW5kID0gc2V0dGluZ3MuZm5EaXNwbGF5RW5kKCksXG4gICAgICAgIGxlbiA9IHNldHRpbmdzLl9pRGlzcGxheUxlbmd0aDtcblxuICAgIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gZW5kIC0gbGVuO1xuICAgIH1cblxuICAgIHN0YXJ0IC09IHN0YXJ0ICUgbGVuO1xuXG4gICAgaWYgKGxlbiA9PT0gLTEgfHwgc3RhcnQgPCAwKSB7XG4gICAgICBzdGFydCA9IDA7XG4gICAgfVxuXG4gICAgc2V0dGluZ3MuX2lEaXNwbGF5U3RhcnQgPSBzdGFydDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9mblJlbmRlcmVyKHNldHRpbmdzLCB0eXBlKSB7XG4gICAgdmFyIHJlbmRlcmVyID0gc2V0dGluZ3MucmVuZGVyZXI7XG4gICAgdmFyIGhvc3QgPSBEYXRhVGFibGUuZXh0LnJlbmRlcmVyW3R5cGVdO1xuXG4gICAgaWYgKCQuaXNQbGFpbk9iamVjdChyZW5kZXJlcikgJiYgcmVuZGVyZXJbdHlwZV0pIHtcbiAgICAgIHJldHVybiBob3N0W3JlbmRlcmVyW3R5cGVdXSB8fCBob3N0Ll87XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcmVuZGVyZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gaG9zdFtyZW5kZXJlcl0gfHwgaG9zdC5fO1xuICAgIH1cblxuICAgIHJldHVybiBob3N0Ll87XG4gIH1cblxuICBmdW5jdGlvbiBfZm5EYXRhU291cmNlKHNldHRpbmdzKSB7XG4gICAgaWYgKHNldHRpbmdzLm9GZWF0dXJlcy5iU2VydmVyU2lkZSkge1xuICAgICAgcmV0dXJuICdzc3AnO1xuICAgIH0gZWxzZSBpZiAoc2V0dGluZ3MuYWpheCB8fCBzZXR0aW5ncy5zQWpheFNvdXJjZSkge1xuICAgICAgcmV0dXJuICdhamF4JztcbiAgICB9XG5cbiAgICByZXR1cm4gJ2RvbSc7XG4gIH1cblxuICB2YXIgX19hcGlTdHJ1Y3QgPSBbXTtcbiAgdmFyIF9fYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuICB2YXIgX3RvU2V0dGluZ3MgPSBmdW5jdGlvbiBfdG9TZXR0aW5ncyhtaXhlZCkge1xuICAgIHZhciBpZHgsIGpxO1xuICAgIHZhciBzZXR0aW5ncyA9IERhdGFUYWJsZS5zZXR0aW5ncztcbiAgICB2YXIgdGFibGVzID0gJC5tYXAoc2V0dGluZ3MsIGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgcmV0dXJuIGVsLm5UYWJsZTtcbiAgICB9KTtcblxuICAgIGlmICghbWl4ZWQpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9IGVsc2UgaWYgKG1peGVkLm5UYWJsZSAmJiBtaXhlZC5vQXBpKSB7XG4gICAgICByZXR1cm4gW21peGVkXTtcbiAgICB9IGVsc2UgaWYgKG1peGVkLm5vZGVOYW1lICYmIG1peGVkLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0YWJsZScpIHtcbiAgICAgIGlkeCA9ICQuaW5BcnJheShtaXhlZCwgdGFibGVzKTtcbiAgICAgIHJldHVybiBpZHggIT09IC0xID8gW3NldHRpbmdzW2lkeF1dIDogbnVsbDtcbiAgICB9IGVsc2UgaWYgKG1peGVkICYmIHR5cGVvZiBtaXhlZC5zZXR0aW5ncyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG1peGVkLnNldHRpbmdzKCkudG9BcnJheSgpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1peGVkID09PSAnc3RyaW5nJykge1xuICAgICAganEgPSAkKG1peGVkKTtcbiAgICB9IGVsc2UgaWYgKG1peGVkIGluc3RhbmNlb2YgJCkge1xuICAgICAganEgPSBtaXhlZDtcbiAgICB9XG5cbiAgICBpZiAoanEpIHtcbiAgICAgIHJldHVybiBqcS5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgaWR4ID0gJC5pbkFycmF5KHRoaXMsIHRhYmxlcyk7XG4gICAgICAgIHJldHVybiBpZHggIT09IC0xID8gc2V0dGluZ3NbaWR4XSA6IG51bGw7XG4gICAgICB9KS50b0FycmF5KCk7XG4gICAgfVxuICB9O1xuXG4gIF9BcGkyID0gZnVuY3Rpb24gX0FwaShjb250ZXh0LCBkYXRhKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF9BcGkyKSkge1xuICAgICAgcmV0dXJuIG5ldyBfQXBpMihjb250ZXh0LCBkYXRhKTtcbiAgICB9XG5cbiAgICB2YXIgc2V0dGluZ3MgPSBbXTtcblxuICAgIHZhciBjdHhTZXR0aW5ncyA9IGZ1bmN0aW9uIGN0eFNldHRpbmdzKG8pIHtcbiAgICAgIHZhciBhID0gX3RvU2V0dGluZ3Mobyk7XG5cbiAgICAgIGlmIChhKSB7XG4gICAgICAgIHNldHRpbmdzID0gc2V0dGluZ3MuY29uY2F0KGEpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoJC5pc0FycmF5KGNvbnRleHQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWVuID0gY29udGV4dC5sZW5ndGg7IGkgPCBpZW47IGkrKykge1xuICAgICAgICBjdHhTZXR0aW5ncyhjb250ZXh0W2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3R4U2V0dGluZ3MoY29udGV4dCk7XG4gICAgfVxuXG4gICAgdGhpcy5jb250ZXh0ID0gX3VuaXF1ZShzZXR0aW5ncyk7XG5cbiAgICBpZiAoZGF0YSkge1xuICAgICAgJC5tZXJnZSh0aGlzLCBkYXRhKTtcbiAgICB9XG5cbiAgICB0aGlzLnNlbGVjdG9yID0ge1xuICAgICAgcm93czogbnVsbCxcbiAgICAgIGNvbHM6IG51bGwsXG4gICAgICBvcHRzOiBudWxsXG4gICAgfTtcblxuICAgIF9BcGkyLmV4dGVuZCh0aGlzLCB0aGlzLCBfX2FwaVN0cnVjdCk7XG4gIH07XG5cbiAgRGF0YVRhYmxlLkFwaSA9IF9BcGkyO1xuICAkLmV4dGVuZChfQXBpMi5wcm90b3R5cGUsIHtcbiAgICBhbnk6IGZ1bmN0aW9uIGFueSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvdW50KCkgIT09IDA7XG4gICAgfSxcbiAgICBjb25jYXQ6IF9fYXJyYXlQcm90by5jb25jYXQsXG4gICAgY29udGV4dDogW10sXG4gICAgY291bnQ6IGZ1bmN0aW9uIGNvdW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmxhdHRlbigpLmxlbmd0aDtcbiAgICB9LFxuICAgIGVhY2g6IGZ1bmN0aW9uIGVhY2goZm4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpZW4gPSB0aGlzLmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICAgIGZuLmNhbGwodGhpcywgdGhpc1tpXSwgaSwgdGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZXE6IGZ1bmN0aW9uIGVxKGlkeCkge1xuICAgICAgdmFyIGN0eCA9IHRoaXMuY29udGV4dDtcbiAgICAgIHJldHVybiBjdHgubGVuZ3RoID4gaWR4ID8gbmV3IF9BcGkyKGN0eFtpZHhdLCB0aGlzW2lkeF0pIDogbnVsbDtcbiAgICB9LFxuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGZuKSB7XG4gICAgICB2YXIgYSA9IFtdO1xuXG4gICAgICBpZiAoX19hcnJheVByb3RvLmZpbHRlcikge1xuICAgICAgICBhID0gX19hcnJheVByb3RvLmZpbHRlci5jYWxsKHRoaXMsIGZuLCB0aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpZW4gPSB0aGlzLmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGZuLmNhbGwodGhpcywgdGhpc1tpXSwgaSwgdGhpcykpIHtcbiAgICAgICAgICAgIGEucHVzaCh0aGlzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBfQXBpMih0aGlzLmNvbnRleHQsIGEpO1xuICAgIH0sXG4gICAgZmxhdHRlbjogZnVuY3Rpb24gZmxhdHRlbigpIHtcbiAgICAgIHZhciBhID0gW107XG4gICAgICByZXR1cm4gbmV3IF9BcGkyKHRoaXMuY29udGV4dCwgYS5jb25jYXQuYXBwbHkoYSwgdGhpcy50b0FycmF5KCkpKTtcbiAgICB9LFxuICAgIGpvaW46IF9fYXJyYXlQcm90by5qb2luLFxuICAgIGluZGV4T2Y6IF9fYXJyYXlQcm90by5pbmRleE9mIHx8IGZ1bmN0aW9uIChvYmosIHN0YXJ0KSB7XG4gICAgICBmb3IgKHZhciBpID0gc3RhcnQgfHwgMCwgaWVuID0gdGhpcy5sZW5ndGg7IGkgPCBpZW47IGkrKykge1xuICAgICAgICBpZiAodGhpc1tpXSA9PT0gb2JqKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC0xO1xuICAgIH0sXG4gICAgaXRlcmF0b3I6IGZ1bmN0aW9uIGl0ZXJhdG9yKGZsYXR0ZW4sIHR5cGUsIGZuLCBhbHdheXNOZXcpIHtcbiAgICAgIHZhciBhID0gW10sXG4gICAgICAgICAgcmV0LFxuICAgICAgICAgIGksXG4gICAgICAgICAgaWVuLFxuICAgICAgICAgIGosXG4gICAgICAgICAgamVuLFxuICAgICAgICAgIGNvbnRleHQgPSB0aGlzLmNvbnRleHQsXG4gICAgICAgICAgcm93cyxcbiAgICAgICAgICBpdGVtcyxcbiAgICAgICAgICBpdGVtLFxuICAgICAgICAgIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcjtcblxuICAgICAgaWYgKHR5cGVvZiBmbGF0dGVuID09PSAnc3RyaW5nJykge1xuICAgICAgICBhbHdheXNOZXcgPSBmbjtcbiAgICAgICAgZm4gPSB0eXBlO1xuICAgICAgICB0eXBlID0gZmxhdHRlbjtcbiAgICAgICAgZmxhdHRlbiA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwLCBpZW4gPSBjb250ZXh0Lmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICAgIHZhciBhcGlJbnN0ID0gbmV3IF9BcGkyKGNvbnRleHRbaV0pO1xuXG4gICAgICAgIGlmICh0eXBlID09PSAndGFibGUnKSB7XG4gICAgICAgICAgcmV0ID0gZm4uY2FsbChhcGlJbnN0LCBjb250ZXh0W2ldLCBpKTtcblxuICAgICAgICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYS5wdXNoKHJldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdjb2x1bW5zJyB8fCB0eXBlID09PSAncm93cycpIHtcbiAgICAgICAgICByZXQgPSBmbi5jYWxsKGFwaUluc3QsIGNvbnRleHRbaV0sIHRoaXNbaV0sIGkpO1xuXG4gICAgICAgICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhLnB1c2gocmV0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2NvbHVtbicgfHwgdHlwZSA9PT0gJ2NvbHVtbi1yb3dzJyB8fCB0eXBlID09PSAncm93JyB8fCB0eXBlID09PSAnY2VsbCcpIHtcbiAgICAgICAgICBpdGVtcyA9IHRoaXNbaV07XG5cbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbHVtbi1yb3dzJykge1xuICAgICAgICAgICAgcm93cyA9IF9zZWxlY3Rvcl9yb3dfaW5kZXhlcyhjb250ZXh0W2ldLCBzZWxlY3Rvci5vcHRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKGogPSAwLCBqZW4gPSBpdGVtcy5sZW5ndGg7IGogPCBqZW47IGorKykge1xuICAgICAgICAgICAgaXRlbSA9IGl0ZW1zW2pdO1xuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2NlbGwnKSB7XG4gICAgICAgICAgICAgIHJldCA9IGZuLmNhbGwoYXBpSW5zdCwgY29udGV4dFtpXSwgaXRlbS5yb3csIGl0ZW0uY29sdW1uLCBpLCBqKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldCA9IGZuLmNhbGwoYXBpSW5zdCwgY29udGV4dFtpXSwgaXRlbSwgaSwgaiwgcm93cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBhLnB1c2gocmV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEubGVuZ3RoIHx8IGFsd2F5c05ldykge1xuICAgICAgICB2YXIgYXBpID0gbmV3IF9BcGkyKGNvbnRleHQsIGZsYXR0ZW4gPyBhLmNvbmNhdC5hcHBseShbXSwgYSkgOiBhKTtcbiAgICAgICAgdmFyIGFwaVNlbGVjdG9yID0gYXBpLnNlbGVjdG9yO1xuICAgICAgICBhcGlTZWxlY3Rvci5yb3dzID0gc2VsZWN0b3Iucm93cztcbiAgICAgICAgYXBpU2VsZWN0b3IuY29scyA9IHNlbGVjdG9yLmNvbHM7XG4gICAgICAgIGFwaVNlbGVjdG9yLm9wdHMgPSBzZWxlY3Rvci5vcHRzO1xuICAgICAgICByZXR1cm4gYXBpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBfX2FycmF5UHJvdG8ubGFzdEluZGV4T2YgfHwgZnVuY3Rpb24gKG9iaiwgc3RhcnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4T2YuYXBwbHkodGhpcy50b0FycmF5LnJldmVyc2UoKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxlbmd0aDogMCxcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChmbikge1xuICAgICAgdmFyIGEgPSBbXTtcblxuICAgICAgaWYgKF9fYXJyYXlQcm90by5tYXApIHtcbiAgICAgICAgYSA9IF9fYXJyYXlQcm90by5tYXAuY2FsbCh0aGlzLCBmbiwgdGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWVuID0gdGhpcy5sZW5ndGg7IGkgPCBpZW47IGkrKykge1xuICAgICAgICAgIGEucHVzaChmbi5jYWxsKHRoaXMsIHRoaXNbaV0sIGkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IF9BcGkyKHRoaXMuY29udGV4dCwgYSk7XG4gICAgfSxcbiAgICBwbHVjazogZnVuY3Rpb24gcGx1Y2socHJvcCkge1xuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICByZXR1cm4gZWxbcHJvcF07XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBvcDogX19hcnJheVByb3RvLnBvcCxcbiAgICBwdXNoOiBfX2FycmF5UHJvdG8ucHVzaCxcbiAgICByZWR1Y2U6IF9fYXJyYXlQcm90by5yZWR1Y2UgfHwgZnVuY3Rpb24gKGZuLCBpbml0KSB7XG4gICAgICByZXR1cm4gX2ZuUmVkdWNlKHRoaXMsIGZuLCBpbml0LCAwLCB0aGlzLmxlbmd0aCwgMSk7XG4gICAgfSxcbiAgICByZWR1Y2VSaWdodDogX19hcnJheVByb3RvLnJlZHVjZVJpZ2h0IHx8IGZ1bmN0aW9uIChmbiwgaW5pdCkge1xuICAgICAgcmV0dXJuIF9mblJlZHVjZSh0aGlzLCBmbiwgaW5pdCwgdGhpcy5sZW5ndGggLSAxLCAtMSwgLTEpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogX19hcnJheVByb3RvLnJldmVyc2UsXG4gICAgc2VsZWN0b3I6IG51bGwsXG4gICAgc2hpZnQ6IF9fYXJyYXlQcm90by5zaGlmdCxcbiAgICBzbGljZTogZnVuY3Rpb24gc2xpY2UoKSB7XG4gICAgICByZXR1cm4gbmV3IF9BcGkyKHRoaXMuY29udGV4dCwgdGhpcyk7XG4gICAgfSxcbiAgICBzb3J0OiBfX2FycmF5UHJvdG8uc29ydCxcbiAgICBzcGxpY2U6IF9fYXJyYXlQcm90by5zcGxpY2UsXG4gICAgdG9BcnJheTogZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgICAgIHJldHVybiBfX2FycmF5UHJvdG8uc2xpY2UuY2FsbCh0aGlzKTtcbiAgICB9LFxuICAgIHRvJDogZnVuY3Rpb24gdG8kKCkge1xuICAgICAgcmV0dXJuICQodGhpcyk7XG4gICAgfSxcbiAgICB0b0pRdWVyeTogZnVuY3Rpb24gdG9KUXVlcnkoKSB7XG4gICAgICByZXR1cm4gJCh0aGlzKTtcbiAgICB9LFxuICAgIHVuaXF1ZTogZnVuY3Rpb24gdW5pcXVlKCkge1xuICAgICAgcmV0dXJuIG5ldyBfQXBpMih0aGlzLmNvbnRleHQsIF91bmlxdWUodGhpcykpO1xuICAgIH0sXG4gICAgdW5zaGlmdDogX19hcnJheVByb3RvLnVuc2hpZnRcbiAgfSk7XG5cbiAgX0FwaTIuZXh0ZW5kID0gZnVuY3Rpb24gKHNjb3BlLCBvYmosIGV4dCkge1xuICAgIGlmICghZXh0Lmxlbmd0aCB8fCAhb2JqIHx8ICEob2JqIGluc3RhbmNlb2YgX0FwaTIpICYmICFvYmouX19kdF93cmFwcGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGksXG4gICAgICAgIGllbixcbiAgICAgICAgaixcbiAgICAgICAgamVuLFxuICAgICAgICBzdHJ1Y3QsXG4gICAgICAgIGlubmVyLFxuICAgICAgICBtZXRob2RTY29waW5nID0gZnVuY3Rpb24gbWV0aG9kU2NvcGluZyhzY29wZSwgZm4sIHN0cnVjKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmV0ID0gZm4uYXBwbHkoc2NvcGUsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgX0FwaTIuZXh0ZW5kKHJldCwgcmV0LCBzdHJ1Yy5tZXRob2RFeHQpO1xuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBmb3IgKGkgPSAwLCBpZW4gPSBleHQubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgIHN0cnVjdCA9IGV4dFtpXTtcbiAgICAgIG9ialtzdHJ1Y3QubmFtZV0gPSB0eXBlb2Ygc3RydWN0LnZhbCA9PT0gJ2Z1bmN0aW9uJyA/IG1ldGhvZFNjb3Bpbmcoc2NvcGUsIHN0cnVjdC52YWwsIHN0cnVjdCkgOiAkLmlzUGxhaW5PYmplY3Qoc3RydWN0LnZhbCkgPyB7fSA6IHN0cnVjdC52YWw7XG4gICAgICBvYmpbc3RydWN0Lm5hbWVdLl9fZHRfd3JhcHBlciA9IHRydWU7XG5cbiAgICAgIF9BcGkyLmV4dGVuZChzY29wZSwgb2JqW3N0cnVjdC5uYW1lXSwgc3RydWN0LnByb3BFeHQpO1xuICAgIH1cbiAgfTtcblxuICBfQXBpMi5yZWdpc3RlciA9IF9hcGlfcmVnaXN0ZXIgPSBmdW5jdGlvbiBfYXBpX3JlZ2lzdGVyKG5hbWUsIHZhbCkge1xuICAgIGlmICgkLmlzQXJyYXkobmFtZSkpIHtcbiAgICAgIGZvciAodmFyIGogPSAwLCBqZW4gPSBuYW1lLmxlbmd0aDsgaiA8IGplbjsgaisrKSB7XG4gICAgICAgIF9BcGkyLnJlZ2lzdGVyKG5hbWVbal0sIHZhbCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaSxcbiAgICAgICAgaWVuLFxuICAgICAgICBoZWlyID0gbmFtZS5zcGxpdCgnLicpLFxuICAgICAgICBzdHJ1Y3QgPSBfX2FwaVN0cnVjdCxcbiAgICAgICAga2V5LFxuICAgICAgICBtZXRob2Q7XG5cbiAgICB2YXIgZmluZCA9IGZ1bmN0aW9uIGZpbmQoc3JjLCBuYW1lKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWVuID0gc3JjLmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICAgIGlmIChzcmNbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHJldHVybiBzcmNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIGZvciAoaSA9IDAsIGllbiA9IGhlaXIubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgIG1ldGhvZCA9IGhlaXJbaV0uaW5kZXhPZignKCknKSAhPT0gLTE7XG4gICAgICBrZXkgPSBtZXRob2QgPyBoZWlyW2ldLnJlcGxhY2UoJygpJywgJycpIDogaGVpcltpXTtcbiAgICAgIHZhciBzcmMgPSBmaW5kKHN0cnVjdCwga2V5KTtcblxuICAgICAgaWYgKCFzcmMpIHtcbiAgICAgICAgc3JjID0ge1xuICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICB2YWw6IHt9LFxuICAgICAgICAgIG1ldGhvZEV4dDogW10sXG4gICAgICAgICAgcHJvcEV4dDogW11cbiAgICAgICAgfTtcbiAgICAgICAgc3RydWN0LnB1c2goc3JjKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGkgPT09IGllbiAtIDEpIHtcbiAgICAgICAgc3JjLnZhbCA9IHZhbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cnVjdCA9IG1ldGhvZCA/IHNyYy5tZXRob2RFeHQgOiBzcmMucHJvcEV4dDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX0FwaTIucmVnaXN0ZXJQbHVyYWwgPSBfYXBpX3JlZ2lzdGVyUGx1cmFsID0gZnVuY3Rpb24gX2FwaV9yZWdpc3RlclBsdXJhbChwbHVyYWxOYW1lLCBzaW5ndWxhck5hbWUsIHZhbCkge1xuICAgIF9BcGkyLnJlZ2lzdGVyKHBsdXJhbE5hbWUsIHZhbCk7XG5cbiAgICBfQXBpMi5yZWdpc3RlcihzaW5ndWxhck5hbWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZXQgPSB2YWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgaWYgKHJldCA9PT0gdGhpcykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSBpZiAocmV0IGluc3RhbmNlb2YgX0FwaTIpIHtcbiAgICAgICAgcmV0dXJuIHJldC5sZW5ndGggPyAkLmlzQXJyYXkocmV0WzBdKSA/IG5ldyBfQXBpMihyZXQuY29udGV4dCwgcmV0WzBdKSA6IHJldFswXSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgX190YWJsZV9zZWxlY3RvciA9IGZ1bmN0aW9uIF9fdGFibGVfc2VsZWN0b3Ioc2VsZWN0b3IsIGEpIHtcbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIFthW3NlbGVjdG9yXV07XG4gICAgfVxuXG4gICAgdmFyIG5vZGVzID0gJC5tYXAoYSwgZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICByZXR1cm4gZWwublRhYmxlO1xuICAgIH0pO1xuICAgIHJldHVybiAkKG5vZGVzKS5maWx0ZXIoc2VsZWN0b3IpLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgdmFyIGlkeCA9ICQuaW5BcnJheSh0aGlzLCBub2Rlcyk7XG4gICAgICByZXR1cm4gYVtpZHhdO1xuICAgIH0pLnRvQXJyYXkoKTtcbiAgfTtcblxuICBfYXBpX3JlZ2lzdGVyKCd0YWJsZXMoKScsIGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgIHJldHVybiBzZWxlY3RvciA/IG5ldyBfQXBpMihfX3RhYmxlX3NlbGVjdG9yKHNlbGVjdG9yLCB0aGlzLmNvbnRleHQpKSA6IHRoaXM7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXIoJ3RhYmxlKCknLCBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICB2YXIgdGFibGVzID0gdGhpcy50YWJsZXMoc2VsZWN0b3IpO1xuICAgIHZhciBjdHggPSB0YWJsZXMuY29udGV4dDtcbiAgICByZXR1cm4gY3R4Lmxlbmd0aCA/IG5ldyBfQXBpMihjdHhbMF0pIDogdGFibGVzO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyUGx1cmFsKCd0YWJsZXMoKS5ub2RlcygpJywgJ3RhYmxlKCkubm9kZSgpJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCd0YWJsZScsIGZ1bmN0aW9uIChjdHgpIHtcbiAgICAgIHJldHVybiBjdHgublRhYmxlO1xuICAgIH0sIDEpO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyUGx1cmFsKCd0YWJsZXMoKS5ib2R5KCknLCAndGFibGUoKS5ib2R5KCknLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ3RhYmxlJywgZnVuY3Rpb24gKGN0eCkge1xuICAgICAgcmV0dXJuIGN0eC5uVEJvZHk7XG4gICAgfSwgMSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXJQbHVyYWwoJ3RhYmxlcygpLmhlYWRlcigpJywgJ3RhYmxlKCkuaGVhZGVyKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ3RhYmxlJywgZnVuY3Rpb24gKGN0eCkge1xuICAgICAgcmV0dXJuIGN0eC5uVEhlYWQ7XG4gICAgfSwgMSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXJQbHVyYWwoJ3RhYmxlcygpLmZvb3RlcigpJywgJ3RhYmxlKCkuZm9vdGVyKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ3RhYmxlJywgZnVuY3Rpb24gKGN0eCkge1xuICAgICAgcmV0dXJuIGN0eC5uVEZvb3Q7XG4gICAgfSwgMSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXJQbHVyYWwoJ3RhYmxlcygpLmNvbnRhaW5lcnMoKScsICd0YWJsZSgpLmNvbnRhaW5lcigpJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCd0YWJsZScsIGZ1bmN0aW9uIChjdHgpIHtcbiAgICAgIHJldHVybiBjdHgublRhYmxlV3JhcHBlcjtcbiAgICB9LCAxKTtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlcignZHJhdygpJywgZnVuY3Rpb24gKHBhZ2luZykge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCd0YWJsZScsIGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICAgICAgaWYgKHBhZ2luZyA9PT0gJ3BhZ2UnKSB7XG4gICAgICAgIF9mbkRyYXcoc2V0dGluZ3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWdpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcGFnaW5nID0gcGFnaW5nID09PSAnZnVsbC1ob2xkJyA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9mblJlRHJhdyhzZXR0aW5ncywgcGFnaW5nID09PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXIoJ3BhZ2UoKScsIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICBpZiAoYWN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhZ2UuaW5mbygpLnBhZ2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ3RhYmxlJywgZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICBfZm5QYWdlQ2hhbmdlKHNldHRpbmdzLCBhY3Rpb24pO1xuICAgIH0pO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdwYWdlLmluZm8oKScsIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICBpZiAodGhpcy5jb250ZXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgc2V0dGluZ3MgPSB0aGlzLmNvbnRleHRbMF0sXG4gICAgICAgIHN0YXJ0ID0gc2V0dGluZ3MuX2lEaXNwbGF5U3RhcnQsXG4gICAgICAgIGxlbiA9IHNldHRpbmdzLm9GZWF0dXJlcy5iUGFnaW5hdGUgPyBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGggOiAtMSxcbiAgICAgICAgdmlzUmVjb3JkcyA9IHNldHRpbmdzLmZuUmVjb3Jkc0Rpc3BsYXkoKSxcbiAgICAgICAgYWxsID0gbGVuID09PSAtMTtcbiAgICByZXR1cm4ge1xuICAgICAgXCJwYWdlXCI6IGFsbCA/IDAgOiBNYXRoLmZsb29yKHN0YXJ0IC8gbGVuKSxcbiAgICAgIFwicGFnZXNcIjogYWxsID8gMSA6IE1hdGguY2VpbCh2aXNSZWNvcmRzIC8gbGVuKSxcbiAgICAgIFwic3RhcnRcIjogc3RhcnQsXG4gICAgICBcImVuZFwiOiBzZXR0aW5ncy5mbkRpc3BsYXlFbmQoKSxcbiAgICAgIFwibGVuZ3RoXCI6IGxlbixcbiAgICAgIFwicmVjb3Jkc1RvdGFsXCI6IHNldHRpbmdzLmZuUmVjb3Jkc1RvdGFsKCksXG4gICAgICBcInJlY29yZHNEaXNwbGF5XCI6IHZpc1JlY29yZHMsXG4gICAgICBcInNlcnZlclNpZGVcIjogX2ZuRGF0YVNvdXJjZShzZXR0aW5ncykgPT09ICdzc3AnXG4gICAgfTtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlcigncGFnZS5sZW4oKScsIGZ1bmN0aW9uIChsZW4pIHtcbiAgICBpZiAobGVuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQubGVuZ3RoICE9PSAwID8gdGhpcy5jb250ZXh0WzBdLl9pRGlzcGxheUxlbmd0aCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigndGFibGUnLCBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgIF9mbkxlbmd0aENoYW5nZShzZXR0aW5ncywgbGVuKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdmFyIF9fcmVsb2FkID0gZnVuY3Rpb24gX19yZWxvYWQoc2V0dGluZ3MsIGhvbGRQb3NpdGlvbiwgY2FsbGJhY2spIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHZhciBhcGkgPSBuZXcgX0FwaTIoc2V0dGluZ3MpO1xuICAgICAgYXBpLm9uZSgnZHJhdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2soYXBpLmFqYXguanNvbigpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChfZm5EYXRhU291cmNlKHNldHRpbmdzKSA9PSAnc3NwJykge1xuICAgICAgX2ZuUmVEcmF3KHNldHRpbmdzLCBob2xkUG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfZm5Qcm9jZXNzaW5nRGlzcGxheShzZXR0aW5ncywgdHJ1ZSk7XG5cbiAgICAgIHZhciB4aHIgPSBzZXR0aW5ncy5qcVhIUjtcblxuICAgICAgaWYgKHhociAmJiB4aHIucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgIH1cblxuICAgICAgX2ZuQnVpbGRBamF4KHNldHRpbmdzLCBbXSwgZnVuY3Rpb24gKGpzb24pIHtcbiAgICAgICAgX2ZuQ2xlYXJUYWJsZShzZXR0aW5ncyk7XG5cbiAgICAgICAgdmFyIGRhdGEgPSBfZm5BamF4RGF0YVNyYyhzZXR0aW5ncywganNvbik7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGllbiA9IGRhdGEubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgICAgICBfZm5BZGREYXRhKHNldHRpbmdzLCBkYXRhW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9mblJlRHJhdyhzZXR0aW5ncywgaG9sZFBvc2l0aW9uKTtcblxuICAgICAgICBfZm5Qcm9jZXNzaW5nRGlzcGxheShzZXR0aW5ncywgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9hcGlfcmVnaXN0ZXIoJ2FqYXguanNvbigpJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XG5cbiAgICBpZiAoY3R4Lmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBjdHhbMF0uanNvbjtcbiAgICB9XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXIoJ2FqYXgucGFyYW1zKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN0eCA9IHRoaXMuY29udGV4dDtcblxuICAgIGlmIChjdHgubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIGN0eFswXS5vQWpheERhdGE7XG4gICAgfVxuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdhamF4LnJlbG9hZCgpJywgZnVuY3Rpb24gKGNhbGxiYWNrLCByZXNldFBhZ2luZykge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCd0YWJsZScsIGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICAgICAgX19yZWxvYWQoc2V0dGluZ3MsIHJlc2V0UGFnaW5nID09PSBmYWxzZSwgY2FsbGJhY2spO1xuICAgIH0pO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdhamF4LnVybCgpJywgZnVuY3Rpb24gKHVybCkge1xuICAgIHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XG5cbiAgICBpZiAodXJsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjdHgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGN0eCA9IGN0eFswXTtcbiAgICAgIHJldHVybiBjdHguYWpheCA/ICQuaXNQbGFpbk9iamVjdChjdHguYWpheCkgPyBjdHguYWpheC51cmwgOiBjdHguYWpheCA6IGN0eC5zQWpheFNvdXJjZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigndGFibGUnLCBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgIGlmICgkLmlzUGxhaW5PYmplY3Qoc2V0dGluZ3MuYWpheCkpIHtcbiAgICAgICAgc2V0dGluZ3MuYWpheC51cmwgPSB1cmw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXR0aW5ncy5hamF4ID0gdXJsO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdhamF4LnVybCgpLmxvYWQoKScsIGZ1bmN0aW9uIChjYWxsYmFjaywgcmVzZXRQYWdpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigndGFibGUnLCBmdW5jdGlvbiAoY3R4KSB7XG4gICAgICBfX3JlbG9hZChjdHgsIHJlc2V0UGFnaW5nID09PSBmYWxzZSwgY2FsbGJhY2spO1xuICAgIH0pO1xuICB9KTtcblxuICB2YXIgX3NlbGVjdG9yX3J1biA9IGZ1bmN0aW9uIF9zZWxlY3Rvcl9ydW4odHlwZSwgc2VsZWN0b3IsIHNlbGVjdEZuLCBzZXR0aW5ncywgb3B0cykge1xuICAgIHZhciBvdXQgPSBbXSxcbiAgICAgICAgcmVzLFxuICAgICAgICBhLFxuICAgICAgICBpLFxuICAgICAgICBpZW4sXG4gICAgICAgIGosXG4gICAgICAgIGplbixcbiAgICAgICAgc2VsZWN0b3JUeXBlID0gX3R5cGVvZihzZWxlY3Rvcik7XG5cbiAgICBpZiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yVHlwZSA9PT0gJ3N0cmluZycgfHwgc2VsZWN0b3JUeXBlID09PSAnZnVuY3Rpb24nIHx8IHNlbGVjdG9yLmxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZWxlY3RvciA9IFtzZWxlY3Rvcl07XG4gICAgfVxuXG4gICAgZm9yIChpID0gMCwgaWVuID0gc2VsZWN0b3IubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgIGEgPSBzZWxlY3RvcltpXSAmJiBzZWxlY3RvcltpXS5zcGxpdCAmJiAhc2VsZWN0b3JbaV0ubWF0Y2goL1tcXFtcXCg6XS8pID8gc2VsZWN0b3JbaV0uc3BsaXQoJywnKSA6IFtzZWxlY3RvcltpXV07XG5cbiAgICAgIGZvciAoaiA9IDAsIGplbiA9IGEubGVuZ3RoOyBqIDwgamVuOyBqKyspIHtcbiAgICAgICAgcmVzID0gc2VsZWN0Rm4odHlwZW9mIGFbal0gPT09ICdzdHJpbmcnID8gJC50cmltKGFbal0pIDogYVtqXSk7XG5cbiAgICAgICAgaWYgKHJlcyAmJiByZXMubGVuZ3RoKSB7XG4gICAgICAgICAgb3V0ID0gb3V0LmNvbmNhdChyZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGV4dCA9IF9leHQuc2VsZWN0b3JbdHlwZV07XG5cbiAgICBpZiAoZXh0Lmxlbmd0aCkge1xuICAgICAgZm9yIChpID0gMCwgaWVuID0gZXh0Lmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICAgIG91dCA9IGV4dFtpXShzZXR0aW5ncywgb3B0cywgb3V0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX3VuaXF1ZShvdXQpO1xuICB9O1xuXG4gIHZhciBfc2VsZWN0b3Jfb3B0cyA9IGZ1bmN0aW9uIF9zZWxlY3Rvcl9vcHRzKG9wdHMpIHtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob3B0cy5maWx0ZXIgJiYgb3B0cy5zZWFyY2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3B0cy5zZWFyY2ggPSBvcHRzLmZpbHRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gJC5leHRlbmQoe1xuICAgICAgc2VhcmNoOiAnbm9uZScsXG4gICAgICBvcmRlcjogJ2N1cnJlbnQnLFxuICAgICAgcGFnZTogJ2FsbCdcbiAgICB9LCBvcHRzKTtcbiAgfTtcblxuICB2YXIgX3NlbGVjdG9yX2ZpcnN0ID0gZnVuY3Rpb24gX3NlbGVjdG9yX2ZpcnN0KGluc3QpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWVuID0gaW5zdC5sZW5ndGg7IGkgPCBpZW47IGkrKykge1xuICAgICAgaWYgKGluc3RbaV0ubGVuZ3RoID4gMCkge1xuICAgICAgICBpbnN0WzBdID0gaW5zdFtpXTtcbiAgICAgICAgaW5zdFswXS5sZW5ndGggPSAxO1xuICAgICAgICBpbnN0Lmxlbmd0aCA9IDE7XG4gICAgICAgIGluc3QuY29udGV4dCA9IFtpbnN0LmNvbnRleHRbaV1dO1xuICAgICAgICByZXR1cm4gaW5zdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnN0Lmxlbmd0aCA9IDA7XG4gICAgcmV0dXJuIGluc3Q7XG4gIH07XG5cbiAgdmFyIF9zZWxlY3Rvcl9yb3dfaW5kZXhlcyA9IGZ1bmN0aW9uIF9zZWxlY3Rvcl9yb3dfaW5kZXhlcyhzZXR0aW5ncywgb3B0cykge1xuICAgIHZhciBpLFxuICAgICAgICBpZW4sXG4gICAgICAgIHRtcCxcbiAgICAgICAgYSA9IFtdLFxuICAgICAgICBkaXNwbGF5RmlsdGVyZWQgPSBzZXR0aW5ncy5haURpc3BsYXksXG4gICAgICAgIGRpc3BsYXlNYXN0ZXIgPSBzZXR0aW5ncy5haURpc3BsYXlNYXN0ZXI7XG4gICAgdmFyIHNlYXJjaCA9IG9wdHMuc2VhcmNoLFxuICAgICAgICBvcmRlciA9IG9wdHMub3JkZXIsXG4gICAgICAgIHBhZ2UgPSBvcHRzLnBhZ2U7XG5cbiAgICBpZiAoX2ZuRGF0YVNvdXJjZShzZXR0aW5ncykgPT0gJ3NzcCcpIHtcbiAgICAgIHJldHVybiBzZWFyY2ggPT09ICdyZW1vdmVkJyA/IFtdIDogX3JhbmdlKDAsIGRpc3BsYXlNYXN0ZXIubGVuZ3RoKTtcbiAgICB9IGVsc2UgaWYgKHBhZ2UgPT0gJ2N1cnJlbnQnKSB7XG4gICAgICBmb3IgKGkgPSBzZXR0aW5ncy5faURpc3BsYXlTdGFydCwgaWVuID0gc2V0dGluZ3MuZm5EaXNwbGF5RW5kKCk7IGkgPCBpZW47IGkrKykge1xuICAgICAgICBhLnB1c2goZGlzcGxheUZpbHRlcmVkW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09ICdjdXJyZW50JyB8fCBvcmRlciA9PSAnYXBwbGllZCcpIHtcbiAgICAgIGlmIChzZWFyY2ggPT0gJ25vbmUnKSB7XG4gICAgICAgIGEgPSBkaXNwbGF5TWFzdGVyLnNsaWNlKCk7XG4gICAgICB9IGVsc2UgaWYgKHNlYXJjaCA9PSAnYXBwbGllZCcpIHtcbiAgICAgICAgYSA9IGRpc3BsYXlGaWx0ZXJlZC5zbGljZSgpO1xuICAgICAgfSBlbHNlIGlmIChzZWFyY2ggPT0gJ3JlbW92ZWQnKSB7XG4gICAgICAgIHZhciBkaXNwbGF5RmlsdGVyZWRNYXAgPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWVuID0gZGlzcGxheUZpbHRlcmVkLmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICAgICAgZGlzcGxheUZpbHRlcmVkTWFwW2Rpc3BsYXlGaWx0ZXJlZFtpXV0gPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgYSA9ICQubWFwKGRpc3BsYXlNYXN0ZXIsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIHJldHVybiAhZGlzcGxheUZpbHRlcmVkTWFwLmhhc093blByb3BlcnR5KGVsKSA/IGVsIDogbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PSAnaW5kZXgnIHx8IG9yZGVyID09ICdvcmlnaW5hbCcpIHtcbiAgICAgIGZvciAoaSA9IDAsIGllbiA9IHNldHRpbmdzLmFvRGF0YS5sZW5ndGg7IGkgPCBpZW47IGkrKykge1xuICAgICAgICBpZiAoc2VhcmNoID09ICdub25lJykge1xuICAgICAgICAgIGEucHVzaChpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0bXAgPSAkLmluQXJyYXkoaSwgZGlzcGxheUZpbHRlcmVkKTtcblxuICAgICAgICAgIGlmICh0bXAgPT09IC0xICYmIHNlYXJjaCA9PSAncmVtb3ZlZCcgfHwgdG1wID49IDAgJiYgc2VhcmNoID09ICdhcHBsaWVkJykge1xuICAgICAgICAgICAgYS5wdXNoKGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIHZhciBfX3Jvd19zZWxlY3RvciA9IGZ1bmN0aW9uIF9fcm93X3NlbGVjdG9yKHNldHRpbmdzLCBzZWxlY3Rvciwgb3B0cykge1xuICAgIHZhciByb3dzO1xuXG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIHJ1bihzZWwpIHtcbiAgICAgIHZhciBzZWxJbnQgPSBfaW50VmFsKHNlbCk7XG5cbiAgICAgIHZhciBpLCBpZW47XG4gICAgICB2YXIgYW9EYXRhID0gc2V0dGluZ3MuYW9EYXRhO1xuXG4gICAgICBpZiAoc2VsSW50ICE9PSBudWxsICYmICFvcHRzKSB7XG4gICAgICAgIHJldHVybiBbc2VsSW50XTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyb3dzKSB7XG4gICAgICAgIHJvd3MgPSBfc2VsZWN0b3Jfcm93X2luZGV4ZXMoc2V0dGluZ3MsIG9wdHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsSW50ICE9PSBudWxsICYmICQuaW5BcnJheShzZWxJbnQsIHJvd3MpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gW3NlbEludF07XG4gICAgICB9IGVsc2UgaWYgKHNlbCA9PT0gbnVsbCB8fCBzZWwgPT09IHVuZGVmaW5lZCB8fCBzZWwgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiByb3dzO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHNlbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gJC5tYXAocm93cywgZnVuY3Rpb24gKGlkeCkge1xuICAgICAgICAgIHZhciByb3cgPSBhb0RhdGFbaWR4XTtcbiAgICAgICAgICByZXR1cm4gc2VsKGlkeCwgcm93Ll9hRGF0YSwgcm93Lm5UcikgPyBpZHggOiBudWxsO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbC5ub2RlTmFtZSkge1xuICAgICAgICB2YXIgcm93SWR4ID0gc2VsLl9EVF9Sb3dJbmRleDtcbiAgICAgICAgdmFyIGNlbGxJZHggPSBzZWwuX0RUX0NlbGxJbmRleDtcblxuICAgICAgICBpZiAocm93SWR4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gYW9EYXRhW3Jvd0lkeF0gJiYgYW9EYXRhW3Jvd0lkeF0ublRyID09PSBzZWwgPyBbcm93SWR4XSA6IFtdO1xuICAgICAgICB9IGVsc2UgaWYgKGNlbGxJZHgpIHtcbiAgICAgICAgICByZXR1cm4gYW9EYXRhW2NlbGxJZHgucm93XSAmJiBhb0RhdGFbY2VsbElkeC5yb3ddLm5UciA9PT0gc2VsID8gW2NlbGxJZHgucm93XSA6IFtdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBob3N0ID0gJChzZWwpLmNsb3Nlc3QoJypbZGF0YS1kdC1yb3ddJyk7XG4gICAgICAgICAgcmV0dXJuIGhvc3QubGVuZ3RoID8gW2hvc3QuZGF0YSgnZHQtcm93JyldIDogW107XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzZWwgPT09ICdzdHJpbmcnICYmIHNlbC5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgICB2YXIgcm93T2JqID0gc2V0dGluZ3MuYUlkc1tzZWwucmVwbGFjZSgvXiMvLCAnJyldO1xuXG4gICAgICAgIGlmIChyb3dPYmogIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBbcm93T2JqLmlkeF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIG5vZGVzID0gX3JlbW92ZUVtcHR5KF9wbHVja19vcmRlcihzZXR0aW5ncy5hb0RhdGEsIHJvd3MsICduVHInKSk7XG5cbiAgICAgIHJldHVybiAkKG5vZGVzKS5maWx0ZXIoc2VsKS5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fRFRfUm93SW5kZXg7XG4gICAgICB9KS50b0FycmF5KCk7XG4gICAgfTtcblxuICAgIHJldHVybiBfc2VsZWN0b3JfcnVuKCdyb3cnLCBzZWxlY3RvciwgcnVuLCBzZXR0aW5ncywgb3B0cyk7XG4gIH07XG5cbiAgX2FwaV9yZWdpc3Rlcigncm93cygpJywgZnVuY3Rpb24gKHNlbGVjdG9yLCBvcHRzKSB7XG4gICAgaWYgKHNlbGVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNlbGVjdG9yID0gJyc7XG4gICAgfSBlbHNlIGlmICgkLmlzUGxhaW5PYmplY3Qoc2VsZWN0b3IpKSB7XG4gICAgICBvcHRzID0gc2VsZWN0b3I7XG4gICAgICBzZWxlY3RvciA9ICcnO1xuICAgIH1cblxuICAgIG9wdHMgPSBfc2VsZWN0b3Jfb3B0cyhvcHRzKTtcbiAgICB2YXIgaW5zdCA9IHRoaXMuaXRlcmF0b3IoJ3RhYmxlJywgZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICByZXR1cm4gX19yb3dfc2VsZWN0b3Ioc2V0dGluZ3MsIHNlbGVjdG9yLCBvcHRzKTtcbiAgICB9LCAxKTtcbiAgICBpbnN0LnNlbGVjdG9yLnJvd3MgPSBzZWxlY3RvcjtcbiAgICBpbnN0LnNlbGVjdG9yLm9wdHMgPSBvcHRzO1xuICAgIHJldHVybiBpbnN0O1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdyb3dzKCkubm9kZXMoKScsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigncm93JywgZnVuY3Rpb24gKHNldHRpbmdzLCByb3cpIHtcbiAgICAgIHJldHVybiBzZXR0aW5ncy5hb0RhdGFbcm93XS5uVHIgfHwgdW5kZWZpbmVkO1xuICAgIH0sIDEpO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdyb3dzKCkuZGF0YSgpJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKHRydWUsICdyb3dzJywgZnVuY3Rpb24gKHNldHRpbmdzLCByb3dzKSB7XG4gICAgICByZXR1cm4gX3BsdWNrX29yZGVyKHNldHRpbmdzLmFvRGF0YSwgcm93cywgJ19hRGF0YScpO1xuICAgIH0sIDEpO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyUGx1cmFsKCdyb3dzKCkuY2FjaGUoKScsICdyb3coKS5jYWNoZSgpJywgZnVuY3Rpb24gKHR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigncm93JywgZnVuY3Rpb24gKHNldHRpbmdzLCByb3cpIHtcbiAgICAgIHZhciByID0gc2V0dGluZ3MuYW9EYXRhW3Jvd107XG4gICAgICByZXR1cm4gdHlwZSA9PT0gJ3NlYXJjaCcgPyByLl9hRmlsdGVyRGF0YSA6IHIuX2FTb3J0RGF0YTtcbiAgICB9LCAxKTtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlclBsdXJhbCgncm93cygpLmludmFsaWRhdGUoKScsICdyb3coKS5pbnZhbGlkYXRlKCknLCBmdW5jdGlvbiAoc3JjKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ3JvdycsIGZ1bmN0aW9uIChzZXR0aW5ncywgcm93KSB7XG4gICAgICBfZm5JbnZhbGlkYXRlKHNldHRpbmdzLCByb3csIHNyYyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXJQbHVyYWwoJ3Jvd3MoKS5pbmRleGVzKCknLCAncm93KCkuaW5kZXgoKScsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigncm93JywgZnVuY3Rpb24gKHNldHRpbmdzLCByb3cpIHtcbiAgICAgIHJldHVybiByb3c7XG4gICAgfSwgMSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXJQbHVyYWwoJ3Jvd3MoKS5pZHMoKScsICdyb3coKS5pZCgpJywgZnVuY3Rpb24gKGhhc2gpIHtcbiAgICB2YXIgYSA9IFtdO1xuICAgIHZhciBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGllbiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgIGZvciAodmFyIGogPSAwLCBqZW4gPSB0aGlzW2ldLmxlbmd0aDsgaiA8IGplbjsgaisrKSB7XG4gICAgICAgIHZhciBpZCA9IGNvbnRleHRbaV0ucm93SWRGbihjb250ZXh0W2ldLmFvRGF0YVt0aGlzW2ldW2pdXS5fYURhdGEpO1xuICAgICAgICBhLnB1c2goKGhhc2ggPT09IHRydWUgPyAnIycgOiAnJykgKyBpZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBfQXBpMihjb250ZXh0LCBhKTtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlclBsdXJhbCgncm93cygpLnJlbW92ZSgpJywgJ3JvdygpLnJlbW92ZSgpJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB0aGlzLml0ZXJhdG9yKCdyb3cnLCBmdW5jdGlvbiAoc2V0dGluZ3MsIHJvdywgdGhhdElkeCkge1xuICAgICAgdmFyIGRhdGEgPSBzZXR0aW5ncy5hb0RhdGE7XG4gICAgICB2YXIgcm93RGF0YSA9IGRhdGFbcm93XTtcbiAgICAgIHZhciBpLCBpZW4sIGosIGplbjtcbiAgICAgIHZhciBsb29wUm93LCBsb29wQ2VsbHM7XG4gICAgICBkYXRhLnNwbGljZShyb3csIDEpO1xuXG4gICAgICBmb3IgKGkgPSAwLCBpZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICAgIGxvb3BSb3cgPSBkYXRhW2ldO1xuICAgICAgICBsb29wQ2VsbHMgPSBsb29wUm93LmFuQ2VsbHM7XG5cbiAgICAgICAgaWYgKGxvb3BSb3cublRyICE9PSBudWxsKSB7XG4gICAgICAgICAgbG9vcFJvdy5uVHIuX0RUX1Jvd0luZGV4ID0gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb29wQ2VsbHMgIT09IG51bGwpIHtcbiAgICAgICAgICBmb3IgKGogPSAwLCBqZW4gPSBsb29wQ2VsbHMubGVuZ3RoOyBqIDwgamVuOyBqKyspIHtcbiAgICAgICAgICAgIGxvb3BDZWxsc1tqXS5fRFRfQ2VsbEluZGV4LnJvdyA9IGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF9mbkRlbGV0ZUluZGV4KHNldHRpbmdzLmFpRGlzcGxheU1hc3Rlciwgcm93KTtcblxuICAgICAgX2ZuRGVsZXRlSW5kZXgoc2V0dGluZ3MuYWlEaXNwbGF5LCByb3cpO1xuXG4gICAgICBfZm5EZWxldGVJbmRleCh0aGF0W3RoYXRJZHhdLCByb3csIGZhbHNlKTtcblxuICAgICAgaWYgKHNldHRpbmdzLl9pUmVjb3Jkc0Rpc3BsYXkgPiAwKSB7XG4gICAgICAgIHNldHRpbmdzLl9pUmVjb3Jkc0Rpc3BsYXktLTtcbiAgICAgIH1cblxuICAgICAgX2ZuTGVuZ3RoT3ZlcmZsb3coc2V0dGluZ3MpO1xuXG4gICAgICB2YXIgaWQgPSBzZXR0aW5ncy5yb3dJZEZuKHJvd0RhdGEuX2FEYXRhKTtcblxuICAgICAgaWYgKGlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGVsZXRlIHNldHRpbmdzLmFJZHNbaWRdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuaXRlcmF0b3IoJ3RhYmxlJywgZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWVuID0gc2V0dGluZ3MuYW9EYXRhLmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICAgIHNldHRpbmdzLmFvRGF0YVtpXS5pZHggPSBpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdyb3dzLmFkZCgpJywgZnVuY3Rpb24gKHJvd3MpIHtcbiAgICB2YXIgbmV3Um93cyA9IHRoaXMuaXRlcmF0b3IoJ3RhYmxlJywgZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICB2YXIgcm93LCBpLCBpZW47XG4gICAgICB2YXIgb3V0ID0gW107XG5cbiAgICAgIGZvciAoaSA9IDAsIGllbiA9IHJvd3MubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgICAgcm93ID0gcm93c1tpXTtcblxuICAgICAgICBpZiAocm93Lm5vZGVOYW1lICYmIHJvdy5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnVFInKSB7XG4gICAgICAgICAgb3V0LnB1c2goX2ZuQWRkVHIoc2V0dGluZ3MsIHJvdylbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dC5wdXNoKF9mbkFkZERhdGEoc2V0dGluZ3MsIHJvdykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfSwgMSk7XG4gICAgdmFyIG1vZFJvd3MgPSB0aGlzLnJvd3MoLTEpO1xuICAgIG1vZFJvd3MucG9wKCk7XG4gICAgJC5tZXJnZShtb2RSb3dzLCBuZXdSb3dzKTtcbiAgICByZXR1cm4gbW9kUm93cztcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3Rlcigncm93KCknLCBmdW5jdGlvbiAoc2VsZWN0b3IsIG9wdHMpIHtcbiAgICByZXR1cm4gX3NlbGVjdG9yX2ZpcnN0KHRoaXMucm93cyhzZWxlY3Rvciwgb3B0cykpO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdyb3coKS5kYXRhKCknLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XG5cbiAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gY3R4Lmxlbmd0aCAmJiB0aGlzLmxlbmd0aCA/IGN0eFswXS5hb0RhdGFbdGhpc1swXV0uX2FEYXRhIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciByb3cgPSBjdHhbMF0uYW9EYXRhW3RoaXNbMF1dO1xuICAgIHJvdy5fYURhdGEgPSBkYXRhO1xuXG4gICAgaWYgKCQuaXNBcnJheShkYXRhKSAmJiByb3cublRyLmlkKSB7XG4gICAgICBfZm5TZXRPYmplY3REYXRhRm4oY3R4WzBdLnJvd0lkKShkYXRhLCByb3cublRyLmlkKTtcbiAgICB9XG5cbiAgICBfZm5JbnZhbGlkYXRlKGN0eFswXSwgdGhpc1swXSwgJ2RhdGEnKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdyb3coKS5ub2RlKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN0eCA9IHRoaXMuY29udGV4dDtcbiAgICByZXR1cm4gY3R4Lmxlbmd0aCAmJiB0aGlzLmxlbmd0aCA/IGN0eFswXS5hb0RhdGFbdGhpc1swXV0ublRyIHx8IG51bGwgOiBudWxsO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdyb3cuYWRkKCknLCBmdW5jdGlvbiAocm93KSB7XG4gICAgaWYgKHJvdyBpbnN0YW5jZW9mICQgJiYgcm93Lmxlbmd0aCkge1xuICAgICAgcm93ID0gcm93WzBdO1xuICAgIH1cblxuICAgIHZhciByb3dzID0gdGhpcy5pdGVyYXRvcigndGFibGUnLCBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgIGlmIChyb3cubm9kZU5hbWUgJiYgcm93Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdUUicpIHtcbiAgICAgICAgcmV0dXJuIF9mbkFkZFRyKHNldHRpbmdzLCByb3cpWzBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2ZuQWRkRGF0YShzZXR0aW5ncywgcm93KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5yb3cocm93c1swXSk7XG4gIH0pO1xuXG4gIHZhciBfX2RldGFpbHNfYWRkID0gZnVuY3Rpb24gX19kZXRhaWxzX2FkZChjdHgsIHJvdywgZGF0YSwga2xhc3MpIHtcbiAgICB2YXIgcm93cyA9IFtdO1xuXG4gICAgdmFyIGFkZFJvdyA9IGZ1bmN0aW9uIGFkZFJvdyhyLCBrKSB7XG4gICAgICBpZiAoJC5pc0FycmF5KHIpIHx8IHIgaW5zdGFuY2VvZiAkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpZW4gPSByLmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICAgICAgYWRkUm93KHJbaV0sIGspO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoci5ub2RlTmFtZSAmJiByLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0cicpIHtcbiAgICAgICAgcm93cy5wdXNoKHIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNyZWF0ZWQgPSAkKCc8dHI+PHRkLz48L3RyPicpLmFkZENsYXNzKGspO1xuICAgICAgICAkKCd0ZCcsIGNyZWF0ZWQpLmFkZENsYXNzKGspLmh0bWwocilbMF0uY29sU3BhbiA9IF9mblZpc2JsZUNvbHVtbnMoY3R4KTtcbiAgICAgICAgcm93cy5wdXNoKGNyZWF0ZWRbMF0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBhZGRSb3coZGF0YSwga2xhc3MpO1xuXG4gICAgaWYgKHJvdy5fZGV0YWlscykge1xuICAgICAgcm93Ll9kZXRhaWxzLmRldGFjaCgpO1xuICAgIH1cblxuICAgIHJvdy5fZGV0YWlscyA9ICQocm93cyk7XG5cbiAgICBpZiAocm93Ll9kZXRhaWxzU2hvdykge1xuICAgICAgcm93Ll9kZXRhaWxzLmluc2VydEFmdGVyKHJvdy5uVHIpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgX19kZXRhaWxzX3JlbW92ZSA9IGZ1bmN0aW9uIF9fZGV0YWlsc19yZW1vdmUoYXBpLCBpZHgpIHtcbiAgICB2YXIgY3R4ID0gYXBpLmNvbnRleHQ7XG5cbiAgICBpZiAoY3R4Lmxlbmd0aCkge1xuICAgICAgdmFyIHJvdyA9IGN0eFswXS5hb0RhdGFbaWR4ICE9PSB1bmRlZmluZWQgPyBpZHggOiBhcGlbMF1dO1xuXG4gICAgICBpZiAocm93ICYmIHJvdy5fZGV0YWlscykge1xuICAgICAgICByb3cuX2RldGFpbHMucmVtb3ZlKCk7XG5cbiAgICAgICAgcm93Ll9kZXRhaWxzU2hvdyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcm93Ll9kZXRhaWxzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgX19kZXRhaWxzX2Rpc3BsYXkgPSBmdW5jdGlvbiBfX2RldGFpbHNfZGlzcGxheShhcGksIHNob3cpIHtcbiAgICB2YXIgY3R4ID0gYXBpLmNvbnRleHQ7XG5cbiAgICBpZiAoY3R4Lmxlbmd0aCAmJiBhcGkubGVuZ3RoKSB7XG4gICAgICB2YXIgcm93ID0gY3R4WzBdLmFvRGF0YVthcGlbMF1dO1xuXG4gICAgICBpZiAocm93Ll9kZXRhaWxzKSB7XG4gICAgICAgIHJvdy5fZGV0YWlsc1Nob3cgPSBzaG93O1xuXG4gICAgICAgIGlmIChzaG93KSB7XG4gICAgICAgICAgcm93Ll9kZXRhaWxzLmluc2VydEFmdGVyKHJvdy5uVHIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvdy5fZGV0YWlscy5kZXRhY2goKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9fZGV0YWlsc19ldmVudHMoY3R4WzBdKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIF9fZGV0YWlsc19ldmVudHMgPSBmdW5jdGlvbiBfX2RldGFpbHNfZXZlbnRzKHNldHRpbmdzKSB7XG4gICAgdmFyIGFwaSA9IG5ldyBfQXBpMihzZXR0aW5ncyk7XG4gICAgdmFyIG5hbWVzcGFjZSA9ICcuZHQuRFRfZGV0YWlscyc7XG4gICAgdmFyIGRyYXdFdmVudCA9ICdkcmF3JyArIG5hbWVzcGFjZTtcbiAgICB2YXIgY29sdmlzRXZlbnQgPSAnY29sdW1uLXZpc2liaWxpdHknICsgbmFtZXNwYWNlO1xuICAgIHZhciBkZXN0cm95RXZlbnQgPSAnZGVzdHJveScgKyBuYW1lc3BhY2U7XG4gICAgdmFyIGRhdGEgPSBzZXR0aW5ncy5hb0RhdGE7XG4gICAgYXBpLm9mZihkcmF3RXZlbnQgKyAnICcgKyBjb2x2aXNFdmVudCArICcgJyArIGRlc3Ryb3lFdmVudCk7XG5cbiAgICBpZiAoX3BsdWNrKGRhdGEsICdfZGV0YWlscycpLmxlbmd0aCA+IDApIHtcbiAgICAgIGFwaS5vbihkcmF3RXZlbnQsIGZ1bmN0aW9uIChlLCBjdHgpIHtcbiAgICAgICAgaWYgKHNldHRpbmdzICE9PSBjdHgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhcGkucm93cyh7XG4gICAgICAgICAgcGFnZTogJ2N1cnJlbnQnXG4gICAgICAgIH0pLmVxKDApLmVhY2goZnVuY3Rpb24gKGlkeCkge1xuICAgICAgICAgIHZhciByb3cgPSBkYXRhW2lkeF07XG5cbiAgICAgICAgICBpZiAocm93Ll9kZXRhaWxzU2hvdykge1xuICAgICAgICAgICAgcm93Ll9kZXRhaWxzLmluc2VydEFmdGVyKHJvdy5uVHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGFwaS5vbihjb2x2aXNFdmVudCwgZnVuY3Rpb24gKGUsIGN0eCwgaWR4LCB2aXMpIHtcbiAgICAgICAgaWYgKHNldHRpbmdzICE9PSBjdHgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcm93LFxuICAgICAgICAgICAgdmlzaWJsZSA9IF9mblZpc2JsZUNvbHVtbnMoY3R4KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWVuID0gZGF0YS5sZW5ndGg7IGkgPCBpZW47IGkrKykge1xuICAgICAgICAgIHJvdyA9IGRhdGFbaV07XG5cbiAgICAgICAgICBpZiAocm93Ll9kZXRhaWxzKSB7XG4gICAgICAgICAgICByb3cuX2RldGFpbHMuY2hpbGRyZW4oJ3RkW2NvbHNwYW5dJykuYXR0cignY29sc3BhbicsIHZpc2libGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBhcGkub24oZGVzdHJveUV2ZW50LCBmdW5jdGlvbiAoZSwgY3R4KSB7XG4gICAgICAgIGlmIChzZXR0aW5ncyAhPT0gY3R4KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGllbiA9IGRhdGEubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgICAgICBpZiAoZGF0YVtpXS5fZGV0YWlscykge1xuICAgICAgICAgICAgX19kZXRhaWxzX3JlbW92ZShhcGksIGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBfZW1wID0gJyc7XG5cbiAgdmFyIF9jaGlsZF9vYmogPSBfZW1wICsgJ3JvdygpLmNoaWxkJztcblxuICB2YXIgX2NoaWxkX210aCA9IF9jaGlsZF9vYmogKyAnKCknO1xuXG4gIF9hcGlfcmVnaXN0ZXIoX2NoaWxkX210aCwgZnVuY3Rpb24gKGRhdGEsIGtsYXNzKSB7XG4gICAgdmFyIGN0eCA9IHRoaXMuY29udGV4dDtcblxuICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBjdHgubGVuZ3RoICYmIHRoaXMubGVuZ3RoID8gY3R4WzBdLmFvRGF0YVt0aGlzWzBdXS5fZGV0YWlscyA6IHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuY2hpbGQuc2hvdygpO1xuICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gZmFsc2UpIHtcbiAgICAgIF9fZGV0YWlsc19yZW1vdmUodGhpcyk7XG4gICAgfSBlbHNlIGlmIChjdHgubGVuZ3RoICYmIHRoaXMubGVuZ3RoKSB7XG4gICAgICBfX2RldGFpbHNfYWRkKGN0eFswXSwgY3R4WzBdLmFvRGF0YVt0aGlzWzBdXSwgZGF0YSwga2xhc3MpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKFtfY2hpbGRfb2JqICsgJy5zaG93KCknLCBfY2hpbGRfbXRoICsgJy5zaG93KCknXSwgZnVuY3Rpb24gKHNob3cpIHtcbiAgICBfX2RldGFpbHNfZGlzcGxheSh0aGlzLCB0cnVlKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKFtfY2hpbGRfb2JqICsgJy5oaWRlKCknLCBfY2hpbGRfbXRoICsgJy5oaWRlKCknXSwgZnVuY3Rpb24gKCkge1xuICAgIF9fZGV0YWlsc19kaXNwbGF5KHRoaXMsIGZhbHNlKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKFtfY2hpbGRfb2JqICsgJy5yZW1vdmUoKScsIF9jaGlsZF9tdGggKyAnLnJlbW92ZSgpJ10sIGZ1bmN0aW9uICgpIHtcbiAgICBfX2RldGFpbHNfcmVtb3ZlKHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXIoX2NoaWxkX29iaiArICcuaXNTaG93bigpJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XG5cbiAgICBpZiAoY3R4Lmxlbmd0aCAmJiB0aGlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGN0eFswXS5hb0RhdGFbdGhpc1swXV0uX2RldGFpbHNTaG93IHx8IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG5cbiAgdmFyIF9fcmVfY29sdW1uX3NlbGVjdG9yID0gL14oW146XSspOihuYW1lfHZpc0lkeHx2aXNpYmxlKSQvO1xuXG4gIHZhciBfX2NvbHVtbkRhdGEgPSBmdW5jdGlvbiBfX2NvbHVtbkRhdGEoc2V0dGluZ3MsIGNvbHVtbiwgcjEsIHIyLCByb3dzKSB7XG4gICAgdmFyIGEgPSBbXTtcblxuICAgIGZvciAodmFyIHJvdyA9IDAsIGllbiA9IHJvd3MubGVuZ3RoOyByb3cgPCBpZW47IHJvdysrKSB7XG4gICAgICBhLnB1c2goX2ZuR2V0Q2VsbERhdGEoc2V0dGluZ3MsIHJvd3Nbcm93XSwgY29sdW1uKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgdmFyIF9fY29sdW1uX3NlbGVjdG9yID0gZnVuY3Rpb24gX19jb2x1bW5fc2VsZWN0b3Ioc2V0dGluZ3MsIHNlbGVjdG9yLCBvcHRzKSB7XG4gICAgdmFyIGNvbHVtbnMgPSBzZXR0aW5ncy5hb0NvbHVtbnMsXG4gICAgICAgIG5hbWVzID0gX3BsdWNrKGNvbHVtbnMsICdzTmFtZScpLFxuICAgICAgICBub2RlcyA9IF9wbHVjayhjb2x1bW5zLCAnblRoJyk7XG5cbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gcnVuKHMpIHtcbiAgICAgIHZhciBzZWxJbnQgPSBfaW50VmFsKHMpO1xuXG4gICAgICBpZiAocyA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIF9yYW5nZShjb2x1bW5zLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxJbnQgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtzZWxJbnQgPj0gMCA/IHNlbEludCA6IGNvbHVtbnMubGVuZ3RoICsgc2VsSW50XTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciByb3dzID0gX3NlbGVjdG9yX3Jvd19pbmRleGVzKHNldHRpbmdzLCBvcHRzKTtcblxuICAgICAgICByZXR1cm4gJC5tYXAoY29sdW1ucywgZnVuY3Rpb24gKGNvbCwgaWR4KSB7XG4gICAgICAgICAgcmV0dXJuIHMoaWR4LCBfX2NvbHVtbkRhdGEoc2V0dGluZ3MsIGlkeCwgMCwgMCwgcm93cyksIG5vZGVzW2lkeF0pID8gaWR4IDogbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBtYXRjaCA9IHR5cGVvZiBzID09PSAnc3RyaW5nJyA/IHMubWF0Y2goX19yZV9jb2x1bW5fc2VsZWN0b3IpIDogJyc7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBzd2l0Y2ggKG1hdGNoWzJdKSB7XG4gICAgICAgICAgY2FzZSAndmlzSWR4JzpcbiAgICAgICAgICBjYXNlICd2aXNpYmxlJzpcbiAgICAgICAgICAgIHZhciBpZHggPSBwYXJzZUludChtYXRjaFsxXSwgMTApO1xuXG4gICAgICAgICAgICBpZiAoaWR4IDwgMCkge1xuICAgICAgICAgICAgICB2YXIgdmlzQ29sdW1ucyA9ICQubWFwKGNvbHVtbnMsIGZ1bmN0aW9uIChjb2wsIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sLmJWaXNpYmxlID8gaSA6IG51bGw7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gW3Zpc0NvbHVtbnNbdmlzQ29sdW1ucy5sZW5ndGggKyBpZHhdXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFtfZm5WaXNpYmxlVG9Db2x1bW5JbmRleChzZXR0aW5ncywgaWR4KV07XG5cbiAgICAgICAgICBjYXNlICduYW1lJzpcbiAgICAgICAgICAgIHJldHVybiAkLm1hcChuYW1lcywgZnVuY3Rpb24gKG5hbWUsIGkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT09IG1hdGNoWzFdID8gaSA6IG51bGw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHMubm9kZU5hbWUgJiYgcy5fRFRfQ2VsbEluZGV4KSB7XG4gICAgICAgIHJldHVybiBbcy5fRFRfQ2VsbEluZGV4LmNvbHVtbl07XG4gICAgICB9XG5cbiAgICAgIHZhciBqcVJlc3VsdCA9ICQobm9kZXMpLmZpbHRlcihzKS5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJC5pbkFycmF5KHRoaXMsIG5vZGVzKTtcbiAgICAgIH0pLnRvQXJyYXkoKTtcblxuICAgICAgaWYgKGpxUmVzdWx0Lmxlbmd0aCB8fCAhcy5ub2RlTmFtZSkge1xuICAgICAgICByZXR1cm4ganFSZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBob3N0ID0gJChzKS5jbG9zZXN0KCcqW2RhdGEtZHQtY29sdW1uXScpO1xuICAgICAgcmV0dXJuIGhvc3QubGVuZ3RoID8gW2hvc3QuZGF0YSgnZHQtY29sdW1uJyldIDogW107XG4gICAgfTtcblxuICAgIHJldHVybiBfc2VsZWN0b3JfcnVuKCdjb2x1bW4nLCBzZWxlY3RvciwgcnVuLCBzZXR0aW5ncywgb3B0cyk7XG4gIH07XG5cbiAgdmFyIF9fc2V0Q29sdW1uVmlzID0gZnVuY3Rpb24gX19zZXRDb2x1bW5WaXMoc2V0dGluZ3MsIGNvbHVtbiwgdmlzKSB7XG4gICAgdmFyIGNvbHMgPSBzZXR0aW5ncy5hb0NvbHVtbnMsXG4gICAgICAgIGNvbCA9IGNvbHNbY29sdW1uXSxcbiAgICAgICAgZGF0YSA9IHNldHRpbmdzLmFvRGF0YSxcbiAgICAgICAgcm93LFxuICAgICAgICBjZWxscyxcbiAgICAgICAgaSxcbiAgICAgICAgaWVuLFxuICAgICAgICB0cjtcblxuICAgIGlmICh2aXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGNvbC5iVmlzaWJsZTtcbiAgICB9XG5cbiAgICBpZiAoY29sLmJWaXNpYmxlID09PSB2aXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodmlzKSB7XG4gICAgICB2YXIgaW5zZXJ0QmVmb3JlID0gJC5pbkFycmF5KHRydWUsIF9wbHVjayhjb2xzLCAnYlZpc2libGUnKSwgY29sdW1uICsgMSk7XG5cbiAgICAgIGZvciAoaSA9IDAsIGllbiA9IGRhdGEubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgICAgdHIgPSBkYXRhW2ldLm5UcjtcbiAgICAgICAgY2VsbHMgPSBkYXRhW2ldLmFuQ2VsbHM7XG5cbiAgICAgICAgaWYgKHRyKSB7XG4gICAgICAgICAgdHIuaW5zZXJ0QmVmb3JlKGNlbGxzW2NvbHVtbl0sIGNlbGxzW2luc2VydEJlZm9yZV0gfHwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgJChfcGx1Y2soc2V0dGluZ3MuYW9EYXRhLCAnYW5DZWxscycsIGNvbHVtbikpLmRldGFjaCgpO1xuICAgIH1cblxuICAgIGNvbC5iVmlzaWJsZSA9IHZpcztcblxuICAgIF9mbkRyYXdIZWFkKHNldHRpbmdzLCBzZXR0aW5ncy5hb0hlYWRlcik7XG5cbiAgICBfZm5EcmF3SGVhZChzZXR0aW5ncywgc2V0dGluZ3MuYW9Gb290ZXIpO1xuXG4gICAgaWYgKCFzZXR0aW5ncy5haURpc3BsYXkubGVuZ3RoKSB7XG4gICAgICAkKHNldHRpbmdzLm5UQm9keSkuZmluZCgndGRbY29sc3Bhbl0nKS5hdHRyKCdjb2xzcGFuJywgX2ZuVmlzYmxlQ29sdW1ucyhzZXR0aW5ncykpO1xuICAgIH1cblxuICAgIF9mblNhdmVTdGF0ZShzZXR0aW5ncyk7XG4gIH07XG5cbiAgX2FwaV9yZWdpc3RlcignY29sdW1ucygpJywgZnVuY3Rpb24gKHNlbGVjdG9yLCBvcHRzKSB7XG4gICAgaWYgKHNlbGVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNlbGVjdG9yID0gJyc7XG4gICAgfSBlbHNlIGlmICgkLmlzUGxhaW5PYmplY3Qoc2VsZWN0b3IpKSB7XG4gICAgICBvcHRzID0gc2VsZWN0b3I7XG4gICAgICBzZWxlY3RvciA9ICcnO1xuICAgIH1cblxuICAgIG9wdHMgPSBfc2VsZWN0b3Jfb3B0cyhvcHRzKTtcbiAgICB2YXIgaW5zdCA9IHRoaXMuaXRlcmF0b3IoJ3RhYmxlJywgZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICByZXR1cm4gX19jb2x1bW5fc2VsZWN0b3Ioc2V0dGluZ3MsIHNlbGVjdG9yLCBvcHRzKTtcbiAgICB9LCAxKTtcbiAgICBpbnN0LnNlbGVjdG9yLmNvbHMgPSBzZWxlY3RvcjtcbiAgICBpbnN0LnNlbGVjdG9yLm9wdHMgPSBvcHRzO1xuICAgIHJldHVybiBpbnN0O1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyUGx1cmFsKCdjb2x1bW5zKCkuaGVhZGVyKCknLCAnY29sdW1uKCkuaGVhZGVyKCknLCBmdW5jdGlvbiAoc2VsZWN0b3IsIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcignY29sdW1uJywgZnVuY3Rpb24gKHNldHRpbmdzLCBjb2x1bW4pIHtcbiAgICAgIHJldHVybiBzZXR0aW5ncy5hb0NvbHVtbnNbY29sdW1uXS5uVGg7XG4gICAgfSwgMSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXJQbHVyYWwoJ2NvbHVtbnMoKS5mb290ZXIoKScsICdjb2x1bW4oKS5mb290ZXIoKScsIGZ1bmN0aW9uIChzZWxlY3Rvciwgb3B0cykge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCdjb2x1bW4nLCBmdW5jdGlvbiAoc2V0dGluZ3MsIGNvbHVtbikge1xuICAgICAgcmV0dXJuIHNldHRpbmdzLmFvQ29sdW1uc1tjb2x1bW5dLm5UZjtcbiAgICB9LCAxKTtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlclBsdXJhbCgnY29sdW1ucygpLmRhdGEoKScsICdjb2x1bW4oKS5kYXRhKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ2NvbHVtbi1yb3dzJywgX19jb2x1bW5EYXRhLCAxKTtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlclBsdXJhbCgnY29sdW1ucygpLmRhdGFTcmMoKScsICdjb2x1bW4oKS5kYXRhU3JjKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ2NvbHVtbicsIGZ1bmN0aW9uIChzZXR0aW5ncywgY29sdW1uKSB7XG4gICAgICByZXR1cm4gc2V0dGluZ3MuYW9Db2x1bW5zW2NvbHVtbl0ubURhdGE7XG4gICAgfSwgMSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXJQbHVyYWwoJ2NvbHVtbnMoKS5jYWNoZSgpJywgJ2NvbHVtbigpLmNhY2hlKCknLCBmdW5jdGlvbiAodHlwZSkge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCdjb2x1bW4tcm93cycsIGZ1bmN0aW9uIChzZXR0aW5ncywgY29sdW1uLCBpLCBqLCByb3dzKSB7XG4gICAgICByZXR1cm4gX3BsdWNrX29yZGVyKHNldHRpbmdzLmFvRGF0YSwgcm93cywgdHlwZSA9PT0gJ3NlYXJjaCcgPyAnX2FGaWx0ZXJEYXRhJyA6ICdfYVNvcnREYXRhJywgY29sdW1uKTtcbiAgICB9LCAxKTtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlclBsdXJhbCgnY29sdW1ucygpLm5vZGVzKCknLCAnY29sdW1uKCkubm9kZXMoKScsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcignY29sdW1uLXJvd3MnLCBmdW5jdGlvbiAoc2V0dGluZ3MsIGNvbHVtbiwgaSwgaiwgcm93cykge1xuICAgICAgcmV0dXJuIF9wbHVja19vcmRlcihzZXR0aW5ncy5hb0RhdGEsIHJvd3MsICdhbkNlbGxzJywgY29sdW1uKTtcbiAgICB9LCAxKTtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlclBsdXJhbCgnY29sdW1ucygpLnZpc2libGUoKScsICdjb2x1bW4oKS52aXNpYmxlKCknLCBmdW5jdGlvbiAodmlzLCBjYWxjKSB7XG4gICAgdmFyIHJldCA9IHRoaXMuaXRlcmF0b3IoJ2NvbHVtbicsIGZ1bmN0aW9uIChzZXR0aW5ncywgY29sdW1uKSB7XG4gICAgICBpZiAodmlzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHNldHRpbmdzLmFvQ29sdW1uc1tjb2x1bW5dLmJWaXNpYmxlO1xuICAgICAgfVxuXG4gICAgICBfX3NldENvbHVtblZpcyhzZXR0aW5ncywgY29sdW1uLCB2aXMpO1xuICAgIH0pO1xuXG4gICAgaWYgKHZpcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLml0ZXJhdG9yKCdjb2x1bW4nLCBmdW5jdGlvbiAoc2V0dGluZ3MsIGNvbHVtbikge1xuICAgICAgICBfZm5DYWxsYmFja0ZpcmUoc2V0dGluZ3MsIG51bGwsICdjb2x1bW4tdmlzaWJpbGl0eScsIFtzZXR0aW5ncywgY29sdW1uLCB2aXMsIGNhbGNdKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoY2FsYyA9PT0gdW5kZWZpbmVkIHx8IGNhbGMpIHtcbiAgICAgICAgdGhpcy5jb2x1bW5zLmFkanVzdCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXJQbHVyYWwoJ2NvbHVtbnMoKS5pbmRleGVzKCknLCAnY29sdW1uKCkuaW5kZXgoKScsIGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ2NvbHVtbicsIGZ1bmN0aW9uIChzZXR0aW5ncywgY29sdW1uKSB7XG4gICAgICByZXR1cm4gdHlwZSA9PT0gJ3Zpc2libGUnID8gX2ZuQ29sdW1uSW5kZXhUb1Zpc2libGUoc2V0dGluZ3MsIGNvbHVtbikgOiBjb2x1bW47XG4gICAgfSwgMSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXIoJ2NvbHVtbnMuYWRqdXN0KCknLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ3RhYmxlJywgZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICBfZm5BZGp1c3RDb2x1bW5TaXppbmcoc2V0dGluZ3MpO1xuICAgIH0sIDEpO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdjb2x1bW4uaW5kZXgoKScsIGZ1bmN0aW9uICh0eXBlLCBpZHgpIHtcbiAgICBpZiAodGhpcy5jb250ZXh0Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgdmFyIGN0eCA9IHRoaXMuY29udGV4dFswXTtcblxuICAgICAgaWYgKHR5cGUgPT09ICdmcm9tVmlzaWJsZScgfHwgdHlwZSA9PT0gJ3RvRGF0YScpIHtcbiAgICAgICAgcmV0dXJuIF9mblZpc2libGVUb0NvbHVtbkluZGV4KGN0eCwgaWR4KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2Zyb21EYXRhJyB8fCB0eXBlID09PSAndG9WaXNpYmxlJykge1xuICAgICAgICByZXR1cm4gX2ZuQ29sdW1uSW5kZXhUb1Zpc2libGUoY3R4LCBpZHgpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlcignY29sdW1uKCknLCBmdW5jdGlvbiAoc2VsZWN0b3IsIG9wdHMpIHtcbiAgICByZXR1cm4gX3NlbGVjdG9yX2ZpcnN0KHRoaXMuY29sdW1ucyhzZWxlY3Rvciwgb3B0cykpO1xuICB9KTtcblxuICB2YXIgX19jZWxsX3NlbGVjdG9yID0gZnVuY3Rpb24gX19jZWxsX3NlbGVjdG9yKHNldHRpbmdzLCBzZWxlY3Rvciwgb3B0cykge1xuICAgIHZhciBkYXRhID0gc2V0dGluZ3MuYW9EYXRhO1xuXG4gICAgdmFyIHJvd3MgPSBfc2VsZWN0b3Jfcm93X2luZGV4ZXMoc2V0dGluZ3MsIG9wdHMpO1xuXG4gICAgdmFyIGNlbGxzID0gX3JlbW92ZUVtcHR5KF9wbHVja19vcmRlcihkYXRhLCByb3dzLCAnYW5DZWxscycpKTtcblxuICAgIHZhciBhbGxDZWxscyA9ICQoW10uY29uY2F0LmFwcGx5KFtdLCBjZWxscykpO1xuICAgIHZhciByb3c7XG4gICAgdmFyIGNvbHVtbnMgPSBzZXR0aW5ncy5hb0NvbHVtbnMubGVuZ3RoO1xuICAgIHZhciBhLCBpLCBpZW4sIGosIG8sIGhvc3Q7XG5cbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gcnVuKHMpIHtcbiAgICAgIHZhciBmblNlbGVjdG9yID0gdHlwZW9mIHMgPT09ICdmdW5jdGlvbic7XG5cbiAgICAgIGlmIChzID09PSBudWxsIHx8IHMgPT09IHVuZGVmaW5lZCB8fCBmblNlbGVjdG9yKSB7XG4gICAgICAgIGEgPSBbXTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBpZW4gPSByb3dzLmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICAgICAgcm93ID0gcm93c1tpXTtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBjb2x1bW5zOyBqKyspIHtcbiAgICAgICAgICAgIG8gPSB7XG4gICAgICAgICAgICAgIHJvdzogcm93LFxuICAgICAgICAgICAgICBjb2x1bW46IGpcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChmblNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgIGhvc3QgPSBkYXRhW3Jvd107XG5cbiAgICAgICAgICAgICAgaWYgKHMobywgX2ZuR2V0Q2VsbERhdGEoc2V0dGluZ3MsIHJvdywgaiksIGhvc3QuYW5DZWxscyA/IGhvc3QuYW5DZWxsc1tqXSA6IG51bGwpKSB7XG4gICAgICAgICAgICAgICAgYS5wdXNoKG8pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhLnB1c2gobyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG5cbiAgICAgIGlmICgkLmlzUGxhaW5PYmplY3QocykpIHtcbiAgICAgICAgcmV0dXJuIHMuY29sdW1uICE9PSB1bmRlZmluZWQgJiYgcy5yb3cgIT09IHVuZGVmaW5lZCAmJiAkLmluQXJyYXkocy5yb3csIHJvd3MpICE9PSAtMSA/IFtzXSA6IFtdO1xuICAgICAgfVxuXG4gICAgICB2YXIganFSZXN1bHQgPSBhbGxDZWxscy5maWx0ZXIocykubWFwKGZ1bmN0aW9uIChpLCBlbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJvdzogZWwuX0RUX0NlbGxJbmRleC5yb3csXG4gICAgICAgICAgY29sdW1uOiBlbC5fRFRfQ2VsbEluZGV4LmNvbHVtblxuICAgICAgICB9O1xuICAgICAgfSkudG9BcnJheSgpO1xuXG4gICAgICBpZiAoanFSZXN1bHQubGVuZ3RoIHx8ICFzLm5vZGVOYW1lKSB7XG4gICAgICAgIHJldHVybiBqcVJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgaG9zdCA9ICQocykuY2xvc2VzdCgnKltkYXRhLWR0LXJvd10nKTtcbiAgICAgIHJldHVybiBob3N0Lmxlbmd0aCA/IFt7XG4gICAgICAgIHJvdzogaG9zdC5kYXRhKCdkdC1yb3cnKSxcbiAgICAgICAgY29sdW1uOiBob3N0LmRhdGEoJ2R0LWNvbHVtbicpXG4gICAgICB9XSA6IFtdO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3NlbGVjdG9yX3J1bignY2VsbCcsIHNlbGVjdG9yLCBydW4sIHNldHRpbmdzLCBvcHRzKTtcbiAgfTtcblxuICBfYXBpX3JlZ2lzdGVyKCdjZWxscygpJywgZnVuY3Rpb24gKHJvd1NlbGVjdG9yLCBjb2x1bW5TZWxlY3Rvciwgb3B0cykge1xuICAgIGlmICgkLmlzUGxhaW5PYmplY3Qocm93U2VsZWN0b3IpKSB7XG4gICAgICBpZiAocm93U2VsZWN0b3Iucm93ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3B0cyA9IHJvd1NlbGVjdG9yO1xuICAgICAgICByb3dTZWxlY3RvciA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRzID0gY29sdW1uU2VsZWN0b3I7XG4gICAgICAgIGNvbHVtblNlbGVjdG9yID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoJC5pc1BsYWluT2JqZWN0KGNvbHVtblNlbGVjdG9yKSkge1xuICAgICAgb3B0cyA9IGNvbHVtblNlbGVjdG9yO1xuICAgICAgY29sdW1uU2VsZWN0b3IgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChjb2x1bW5TZWxlY3RvciA9PT0gbnVsbCB8fCBjb2x1bW5TZWxlY3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigndGFibGUnLCBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgICAgcmV0dXJuIF9fY2VsbF9zZWxlY3RvcihzZXR0aW5ncywgcm93U2VsZWN0b3IsIF9zZWxlY3Rvcl9vcHRzKG9wdHMpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBjb2x1bW5zID0gdGhpcy5jb2x1bW5zKGNvbHVtblNlbGVjdG9yKTtcbiAgICB2YXIgcm93cyA9IHRoaXMucm93cyhyb3dTZWxlY3Rvcik7XG4gICAgdmFyIGEsIGksIGllbiwgaiwgamVuO1xuICAgIHRoaXMuaXRlcmF0b3IoJ3RhYmxlJywgZnVuY3Rpb24gKHNldHRpbmdzLCBpZHgpIHtcbiAgICAgIGEgPSBbXTtcblxuICAgICAgZm9yIChpID0gMCwgaWVuID0gcm93c1tpZHhdLmxlbmd0aDsgaSA8IGllbjsgaSsrKSB7XG4gICAgICAgIGZvciAoaiA9IDAsIGplbiA9IGNvbHVtbnNbaWR4XS5sZW5ndGg7IGogPCBqZW47IGorKykge1xuICAgICAgICAgIGEucHVzaCh7XG4gICAgICAgICAgICByb3c6IHJvd3NbaWR4XVtpXSxcbiAgICAgICAgICAgIGNvbHVtbjogY29sdW1uc1tpZHhdW2pdXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCAxKTtcbiAgICB2YXIgY2VsbHMgPSB0aGlzLmNlbGxzKGEsIG9wdHMpO1xuICAgICQuZXh0ZW5kKGNlbGxzLnNlbGVjdG9yLCB7XG4gICAgICBjb2xzOiBjb2x1bW5TZWxlY3RvcixcbiAgICAgIHJvd3M6IHJvd1NlbGVjdG9yLFxuICAgICAgb3B0czogb3B0c1xuICAgIH0pO1xuICAgIHJldHVybiBjZWxscztcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlclBsdXJhbCgnY2VsbHMoKS5ub2RlcygpJywgJ2NlbGwoKS5ub2RlKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ2NlbGwnLCBmdW5jdGlvbiAoc2V0dGluZ3MsIHJvdywgY29sdW1uKSB7XG4gICAgICB2YXIgZGF0YSA9IHNldHRpbmdzLmFvRGF0YVtyb3ddO1xuICAgICAgcmV0dXJuIGRhdGEgJiYgZGF0YS5hbkNlbGxzID8gZGF0YS5hbkNlbGxzW2NvbHVtbl0gOiB1bmRlZmluZWQ7XG4gICAgfSwgMSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXIoJ2NlbGxzKCkuZGF0YSgpJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCdjZWxsJywgZnVuY3Rpb24gKHNldHRpbmdzLCByb3csIGNvbHVtbikge1xuICAgICAgcmV0dXJuIF9mbkdldENlbGxEYXRhKHNldHRpbmdzLCByb3csIGNvbHVtbik7XG4gICAgfSwgMSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXJQbHVyYWwoJ2NlbGxzKCkuY2FjaGUoKScsICdjZWxsKCkuY2FjaGUoKScsIGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdHlwZSA9IHR5cGUgPT09ICdzZWFyY2gnID8gJ19hRmlsdGVyRGF0YScgOiAnX2FTb3J0RGF0YSc7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ2NlbGwnLCBmdW5jdGlvbiAoc2V0dGluZ3MsIHJvdywgY29sdW1uKSB7XG4gICAgICByZXR1cm4gc2V0dGluZ3MuYW9EYXRhW3Jvd11bdHlwZV1bY29sdW1uXTtcbiAgICB9LCAxKTtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlclBsdXJhbCgnY2VsbHMoKS5yZW5kZXIoKScsICdjZWxsKCkucmVuZGVyKCknLCBmdW5jdGlvbiAodHlwZSkge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCdjZWxsJywgZnVuY3Rpb24gKHNldHRpbmdzLCByb3csIGNvbHVtbikge1xuICAgICAgcmV0dXJuIF9mbkdldENlbGxEYXRhKHNldHRpbmdzLCByb3csIGNvbHVtbiwgdHlwZSk7XG4gICAgfSwgMSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXJQbHVyYWwoJ2NlbGxzKCkuaW5kZXhlcygpJywgJ2NlbGwoKS5pbmRleCgpJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCdjZWxsJywgZnVuY3Rpb24gKHNldHRpbmdzLCByb3csIGNvbHVtbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcm93OiByb3csXG4gICAgICAgIGNvbHVtbjogY29sdW1uLFxuICAgICAgICBjb2x1bW5WaXNpYmxlOiBfZm5Db2x1bW5JbmRleFRvVmlzaWJsZShzZXR0aW5ncywgY29sdW1uKVxuICAgICAgfTtcbiAgICB9LCAxKTtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlclBsdXJhbCgnY2VsbHMoKS5pbnZhbGlkYXRlKCknLCAnY2VsbCgpLmludmFsaWRhdGUoKScsIGZ1bmN0aW9uIChzcmMpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcignY2VsbCcsIGZ1bmN0aW9uIChzZXR0aW5ncywgcm93LCBjb2x1bW4pIHtcbiAgICAgIF9mbkludmFsaWRhdGUoc2V0dGluZ3MsIHJvdywgc3JjLCBjb2x1bW4pO1xuICAgIH0pO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdjZWxsKCknLCBmdW5jdGlvbiAocm93U2VsZWN0b3IsIGNvbHVtblNlbGVjdG9yLCBvcHRzKSB7XG4gICAgcmV0dXJuIF9zZWxlY3Rvcl9maXJzdCh0aGlzLmNlbGxzKHJvd1NlbGVjdG9yLCBjb2x1bW5TZWxlY3Rvciwgb3B0cykpO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdjZWxsKCkuZGF0YSgpJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgY3R4ID0gdGhpcy5jb250ZXh0O1xuICAgIHZhciBjZWxsID0gdGhpc1swXTtcblxuICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBjdHgubGVuZ3RoICYmIGNlbGwubGVuZ3RoID8gX2ZuR2V0Q2VsbERhdGEoY3R4WzBdLCBjZWxsWzBdLnJvdywgY2VsbFswXS5jb2x1bW4pIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIF9mblNldENlbGxEYXRhKGN0eFswXSwgY2VsbFswXS5yb3csIGNlbGxbMF0uY29sdW1uLCBkYXRhKTtcblxuICAgIF9mbkludmFsaWRhdGUoY3R4WzBdLCBjZWxsWzBdLnJvdywgJ2RhdGEnLCBjZWxsWzBdLmNvbHVtbik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3Rlcignb3JkZXIoKScsIGZ1bmN0aW9uIChvcmRlciwgZGlyKSB7XG4gICAgdmFyIGN0eCA9IHRoaXMuY29udGV4dDtcblxuICAgIGlmIChvcmRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gY3R4Lmxlbmd0aCAhPT0gMCA/IGN0eFswXS5hYVNvcnRpbmcgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcmRlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIG9yZGVyID0gW1tvcmRlciwgZGlyXV07XG4gICAgfSBlbHNlIGlmIChvcmRlci5sZW5ndGggJiYgISQuaXNBcnJheShvcmRlclswXSkpIHtcbiAgICAgIG9yZGVyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigndGFibGUnLCBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgIHNldHRpbmdzLmFhU29ydGluZyA9IG9yZGVyLnNsaWNlKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXIoJ29yZGVyLmxpc3RlbmVyKCknLCBmdW5jdGlvbiAobm9kZSwgY29sdW1uLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCd0YWJsZScsIGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICAgICAgX2ZuU29ydEF0dGFjaExpc3RlbmVyKHNldHRpbmdzLCBub2RlLCBjb2x1bW4sIGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3Rlcignb3JkZXIuZml4ZWQoKScsIGZ1bmN0aW9uIChzZXQpIHtcbiAgICBpZiAoIXNldCkge1xuICAgICAgdmFyIGN0eCA9IHRoaXMuY29udGV4dDtcbiAgICAgIHZhciBmaXhlZCA9IGN0eC5sZW5ndGggPyBjdHhbMF0uYWFTb3J0aW5nRml4ZWQgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gJC5pc0FycmF5KGZpeGVkKSA/IHtcbiAgICAgICAgcHJlOiBmaXhlZFxuICAgICAgfSA6IGZpeGVkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCd0YWJsZScsIGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICAgICAgc2V0dGluZ3MuYWFTb3J0aW5nRml4ZWQgPSAkLmV4dGVuZCh0cnVlLCB7fSwgc2V0KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlcihbJ2NvbHVtbnMoKS5vcmRlcigpJywgJ2NvbHVtbigpLm9yZGVyKCknXSwgZnVuY3Rpb24gKGRpcikge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigndGFibGUnLCBmdW5jdGlvbiAoc2V0dGluZ3MsIGkpIHtcbiAgICAgIHZhciBzb3J0ID0gW107XG4gICAgICAkLmVhY2godGhhdFtpXSwgZnVuY3Rpb24gKGosIGNvbCkge1xuICAgICAgICBzb3J0LnB1c2goW2NvbCwgZGlyXSk7XG4gICAgICB9KTtcbiAgICAgIHNldHRpbmdzLmFhU29ydGluZyA9IHNvcnQ7XG4gICAgfSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXIoJ3NlYXJjaCgpJywgZnVuY3Rpb24gKGlucHV0LCByZWdleCwgc21hcnQsIGNhc2VJbnNlbikge1xuICAgIHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XG5cbiAgICBpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGN0eC5sZW5ndGggIT09IDAgPyBjdHhbMF0ub1ByZXZpb3VzU2VhcmNoLnNTZWFyY2ggOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ3RhYmxlJywgZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICBpZiAoIXNldHRpbmdzLm9GZWF0dXJlcy5iRmlsdGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX2ZuRmlsdGVyQ29tcGxldGUoc2V0dGluZ3MsICQuZXh0ZW5kKHt9LCBzZXR0aW5ncy5vUHJldmlvdXNTZWFyY2gsIHtcbiAgICAgICAgXCJzU2VhcmNoXCI6IGlucHV0ICsgXCJcIixcbiAgICAgICAgXCJiUmVnZXhcIjogcmVnZXggPT09IG51bGwgPyBmYWxzZSA6IHJlZ2V4LFxuICAgICAgICBcImJTbWFydFwiOiBzbWFydCA9PT0gbnVsbCA/IHRydWUgOiBzbWFydCxcbiAgICAgICAgXCJiQ2FzZUluc2Vuc2l0aXZlXCI6IGNhc2VJbnNlbiA9PT0gbnVsbCA/IHRydWUgOiBjYXNlSW5zZW5cbiAgICAgIH0pLCAxKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlclBsdXJhbCgnY29sdW1ucygpLnNlYXJjaCgpJywgJ2NvbHVtbigpLnNlYXJjaCgpJywgZnVuY3Rpb24gKGlucHV0LCByZWdleCwgc21hcnQsIGNhc2VJbnNlbikge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCdjb2x1bW4nLCBmdW5jdGlvbiAoc2V0dGluZ3MsIGNvbHVtbikge1xuICAgICAgdmFyIHByZVNlYXJjaCA9IHNldHRpbmdzLmFvUHJlU2VhcmNoQ29scztcblxuICAgICAgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHByZVNlYXJjaFtjb2x1bW5dLnNTZWFyY2g7XG4gICAgICB9XG5cbiAgICAgIGlmICghc2V0dGluZ3Mub0ZlYXR1cmVzLmJGaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkLmV4dGVuZChwcmVTZWFyY2hbY29sdW1uXSwge1xuICAgICAgICBcInNTZWFyY2hcIjogaW5wdXQgKyBcIlwiLFxuICAgICAgICBcImJSZWdleFwiOiByZWdleCA9PT0gbnVsbCA/IGZhbHNlIDogcmVnZXgsXG4gICAgICAgIFwiYlNtYXJ0XCI6IHNtYXJ0ID09PSBudWxsID8gdHJ1ZSA6IHNtYXJ0LFxuICAgICAgICBcImJDYXNlSW5zZW5zaXRpdmVcIjogY2FzZUluc2VuID09PSBudWxsID8gdHJ1ZSA6IGNhc2VJbnNlblxuICAgICAgfSk7XG5cbiAgICAgIF9mbkZpbHRlckNvbXBsZXRlKHNldHRpbmdzLCBzZXR0aW5ncy5vUHJldmlvdXNTZWFyY2gsIDEpO1xuICAgIH0pO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdzdGF0ZSgpJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubGVuZ3RoID8gdGhpcy5jb250ZXh0WzBdLm9TYXZlZFN0YXRlIDogbnVsbDtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3Rlcignc3RhdGUuY2xlYXIoKScsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigndGFibGUnLCBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgIHNldHRpbmdzLmZuU3RhdGVTYXZlQ2FsbGJhY2suY2FsbChzZXR0aW5ncy5vSW5zdGFuY2UsIHNldHRpbmdzLCB7fSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXIoJ3N0YXRlLmxvYWRlZCgpJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubGVuZ3RoID8gdGhpcy5jb250ZXh0WzBdLm9Mb2FkZWRTdGF0ZSA6IG51bGw7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXIoJ3N0YXRlLnNhdmUoKScsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigndGFibGUnLCBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgIF9mblNhdmVTdGF0ZShzZXR0aW5ncyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIERhdGFUYWJsZS52ZXJzaW9uQ2hlY2sgPSBEYXRhVGFibGUuZm5WZXJzaW9uQ2hlY2sgPSBmdW5jdGlvbiAodmVyc2lvbikge1xuICAgIHZhciBhVGhpcyA9IERhdGFUYWJsZS52ZXJzaW9uLnNwbGl0KCcuJyk7XG4gICAgdmFyIGFUaGF0ID0gdmVyc2lvbi5zcGxpdCgnLicpO1xuICAgIHZhciBpVGhpcywgaVRoYXQ7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaUxlbiA9IGFUaGF0Lmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgaVRoaXMgPSBwYXJzZUludChhVGhpc1tpXSwgMTApIHx8IDA7XG4gICAgICBpVGhhdCA9IHBhcnNlSW50KGFUaGF0W2ldLCAxMCkgfHwgMDtcblxuICAgICAgaWYgKGlUaGlzID09PSBpVGhhdCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlUaGlzID4gaVRoYXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgRGF0YVRhYmxlLmlzRGF0YVRhYmxlID0gRGF0YVRhYmxlLmZuSXNEYXRhVGFibGUgPSBmdW5jdGlvbiAodGFibGUpIHtcbiAgICB2YXIgdCA9ICQodGFibGUpLmdldCgwKTtcbiAgICB2YXIgaXMgPSBmYWxzZTtcblxuICAgIGlmICh0YWJsZSBpbnN0YW5jZW9mIERhdGFUYWJsZS5BcGkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgICQuZWFjaChEYXRhVGFibGUuc2V0dGluZ3MsIGZ1bmN0aW9uIChpLCBvKSB7XG4gICAgICB2YXIgaGVhZCA9IG8ublNjcm9sbEhlYWQgPyAkKCd0YWJsZScsIG8ublNjcm9sbEhlYWQpWzBdIDogbnVsbDtcbiAgICAgIHZhciBmb290ID0gby5uU2Nyb2xsRm9vdCA/ICQoJ3RhYmxlJywgby5uU2Nyb2xsRm9vdClbMF0gOiBudWxsO1xuXG4gICAgICBpZiAoby5uVGFibGUgPT09IHQgfHwgaGVhZCA9PT0gdCB8fCBmb290ID09PSB0KSB7XG4gICAgICAgIGlzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaXM7XG4gIH07XG5cbiAgRGF0YVRhYmxlLnRhYmxlcyA9IERhdGFUYWJsZS5mblRhYmxlcyA9IGZ1bmN0aW9uICh2aXNpYmxlKSB7XG4gICAgdmFyIGFwaSA9IGZhbHNlO1xuXG4gICAgaWYgKCQuaXNQbGFpbk9iamVjdCh2aXNpYmxlKSkge1xuICAgICAgYXBpID0gdmlzaWJsZS5hcGk7XG4gICAgICB2aXNpYmxlID0gdmlzaWJsZS52aXNpYmxlO1xuICAgIH1cblxuICAgIHZhciBhID0gJC5tYXAoRGF0YVRhYmxlLnNldHRpbmdzLCBmdW5jdGlvbiAobykge1xuICAgICAgaWYgKCF2aXNpYmxlIHx8IHZpc2libGUgJiYgJChvLm5UYWJsZSkuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgcmV0dXJuIG8ublRhYmxlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBhcGkgPyBuZXcgX0FwaTIoYSkgOiBhO1xuICB9O1xuXG4gIERhdGFUYWJsZS5jYW1lbFRvSHVuZ2FyaWFuID0gX2ZuQ2FtZWxUb0h1bmdhcmlhbjtcblxuICBfYXBpX3JlZ2lzdGVyKCckKCknLCBmdW5jdGlvbiAoc2VsZWN0b3IsIG9wdHMpIHtcbiAgICB2YXIgcm93cyA9IHRoaXMucm93cyhvcHRzKS5ub2RlcygpLFxuICAgICAgICBqcVJvd3MgPSAkKHJvd3MpO1xuICAgIHJldHVybiAkKFtdLmNvbmNhdChqcVJvd3MuZmlsdGVyKHNlbGVjdG9yKS50b0FycmF5KCksIGpxUm93cy5maW5kKHNlbGVjdG9yKS50b0FycmF5KCkpKTtcbiAgfSk7XG5cbiAgJC5lYWNoKFsnb24nLCAnb25lJywgJ29mZiddLCBmdW5jdGlvbiAoaSwga2V5KSB7XG4gICAgX2FwaV9yZWdpc3RlcihrZXkgKyAnKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICBhcmdzWzBdID0gJC5tYXAoYXJnc1swXS5zcGxpdCgvXFxzLyksIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiAhZS5tYXRjaCgvXFwuZHRcXGIvKSA/IGUgKyAnLmR0JyA6IGU7XG4gICAgICB9KS5qb2luKCcgJyk7XG4gICAgICB2YXIgaW5zdCA9ICQodGhpcy50YWJsZXMoKS5ub2RlcygpKTtcbiAgICAgIGluc3Rba2V5XS5hcHBseShpbnN0LCBhcmdzKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0pO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdjbGVhcigpJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCd0YWJsZScsIGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICAgICAgX2ZuQ2xlYXJUYWJsZShzZXR0aW5ncyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXIoJ3NldHRpbmdzKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBfQXBpMih0aGlzLmNvbnRleHQsIHRoaXMuY29udGV4dCk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXIoJ2luaXQoKScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3R4ID0gdGhpcy5jb250ZXh0O1xuICAgIHJldHVybiBjdHgubGVuZ3RoID8gY3R4WzBdLm9Jbml0IDogbnVsbDtcbiAgfSk7XG5cbiAgX2FwaV9yZWdpc3RlcignZGF0YSgpJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCd0YWJsZScsIGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICAgICAgcmV0dXJuIF9wbHVjayhzZXR0aW5ncy5hb0RhdGEsICdfYURhdGEnKTtcbiAgICB9KS5mbGF0dGVuKCk7XG4gIH0pO1xuXG4gIF9hcGlfcmVnaXN0ZXIoJ2Rlc3Ryb3koKScsIGZ1bmN0aW9uIChyZW1vdmUpIHtcbiAgICByZW1vdmUgPSByZW1vdmUgfHwgZmFsc2U7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ3RhYmxlJywgZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICB2YXIgb3JpZyA9IHNldHRpbmdzLm5UYWJsZVdyYXBwZXIucGFyZW50Tm9kZTtcbiAgICAgIHZhciBjbGFzc2VzID0gc2V0dGluZ3Mub0NsYXNzZXM7XG4gICAgICB2YXIgdGFibGUgPSBzZXR0aW5ncy5uVGFibGU7XG4gICAgICB2YXIgdGJvZHkgPSBzZXR0aW5ncy5uVEJvZHk7XG4gICAgICB2YXIgdGhlYWQgPSBzZXR0aW5ncy5uVEhlYWQ7XG4gICAgICB2YXIgdGZvb3QgPSBzZXR0aW5ncy5uVEZvb3Q7XG4gICAgICB2YXIganFUYWJsZSA9ICQodGFibGUpO1xuICAgICAgdmFyIGpxVGJvZHkgPSAkKHRib2R5KTtcbiAgICAgIHZhciBqcVdyYXBwZXIgPSAkKHNldHRpbmdzLm5UYWJsZVdyYXBwZXIpO1xuICAgICAgdmFyIHJvd3MgPSAkLm1hcChzZXR0aW5ncy5hb0RhdGEsIGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIHJldHVybiByLm5UcjtcbiAgICAgIH0pO1xuICAgICAgdmFyIGksIGllbjtcbiAgICAgIHNldHRpbmdzLmJEZXN0cm95aW5nID0gdHJ1ZTtcblxuICAgICAgX2ZuQ2FsbGJhY2tGaXJlKHNldHRpbmdzLCBcImFvRGVzdHJveUNhbGxiYWNrXCIsIFwiZGVzdHJveVwiLCBbc2V0dGluZ3NdKTtcblxuICAgICAgaWYgKCFyZW1vdmUpIHtcbiAgICAgICAgbmV3IF9BcGkyKHNldHRpbmdzKS5jb2x1bW5zKCkudmlzaWJsZSh0cnVlKTtcbiAgICAgIH1cblxuICAgICAganFXcmFwcGVyLm9mZignLkRUJykuZmluZCgnOm5vdCh0Ym9keSAqKScpLm9mZignLkRUJyk7XG4gICAgICAkKHdpbmRvdykub2ZmKCcuRFQtJyArIHNldHRpbmdzLnNJbnN0YW5jZSk7XG5cbiAgICAgIGlmICh0YWJsZSAhPSB0aGVhZC5wYXJlbnROb2RlKSB7XG4gICAgICAgIGpxVGFibGUuY2hpbGRyZW4oJ3RoZWFkJykuZGV0YWNoKCk7XG4gICAgICAgIGpxVGFibGUuYXBwZW5kKHRoZWFkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRmb290ICYmIHRhYmxlICE9IHRmb290LnBhcmVudE5vZGUpIHtcbiAgICAgICAganFUYWJsZS5jaGlsZHJlbigndGZvb3QnKS5kZXRhY2goKTtcbiAgICAgICAganFUYWJsZS5hcHBlbmQodGZvb3QpO1xuICAgICAgfVxuXG4gICAgICBzZXR0aW5ncy5hYVNvcnRpbmcgPSBbXTtcbiAgICAgIHNldHRpbmdzLmFhU29ydGluZ0ZpeGVkID0gW107XG5cbiAgICAgIF9mblNvcnRpbmdDbGFzc2VzKHNldHRpbmdzKTtcblxuICAgICAgJChyb3dzKS5yZW1vdmVDbGFzcyhzZXR0aW5ncy5hc1N0cmlwZUNsYXNzZXMuam9pbignICcpKTtcbiAgICAgICQoJ3RoLCB0ZCcsIHRoZWFkKS5yZW1vdmVDbGFzcyhjbGFzc2VzLnNTb3J0YWJsZSArICcgJyArIGNsYXNzZXMuc1NvcnRhYmxlQXNjICsgJyAnICsgY2xhc3Nlcy5zU29ydGFibGVEZXNjICsgJyAnICsgY2xhc3Nlcy5zU29ydGFibGVOb25lKTtcbiAgICAgIGpxVGJvZHkuY2hpbGRyZW4oKS5kZXRhY2goKTtcbiAgICAgIGpxVGJvZHkuYXBwZW5kKHJvd3MpO1xuICAgICAgdmFyIHJlbW92ZWRNZXRob2QgPSByZW1vdmUgPyAncmVtb3ZlJyA6ICdkZXRhY2gnO1xuICAgICAganFUYWJsZVtyZW1vdmVkTWV0aG9kXSgpO1xuICAgICAganFXcmFwcGVyW3JlbW92ZWRNZXRob2RdKCk7XG5cbiAgICAgIGlmICghcmVtb3ZlICYmIG9yaWcpIHtcbiAgICAgICAgb3JpZy5pbnNlcnRCZWZvcmUodGFibGUsIHNldHRpbmdzLm5UYWJsZVJlaW5zZXJ0QmVmb3JlKTtcbiAgICAgICAganFUYWJsZS5jc3MoJ3dpZHRoJywgc2V0dGluZ3Muc0Rlc3Ryb3lXaWR0aCkucmVtb3ZlQ2xhc3MoY2xhc3Nlcy5zVGFibGUpO1xuICAgICAgICBpZW4gPSBzZXR0aW5ncy5hc0Rlc3Ryb3lTdHJpcGVzLmxlbmd0aDtcblxuICAgICAgICBpZiAoaWVuKSB7XG4gICAgICAgICAganFUYm9keS5jaGlsZHJlbigpLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3Moc2V0dGluZ3MuYXNEZXN0cm95U3RyaXBlc1tpICUgaWVuXSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGlkeCA9ICQuaW5BcnJheShzZXR0aW5ncywgRGF0YVRhYmxlLnNldHRpbmdzKTtcblxuICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgRGF0YVRhYmxlLnNldHRpbmdzLnNwbGljZShpZHgsIDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICAkLmVhY2goWydjb2x1bW4nLCAncm93JywgJ2NlbGwnXSwgZnVuY3Rpb24gKGksIHR5cGUpIHtcbiAgICBfYXBpX3JlZ2lzdGVyKHR5cGUgKyAncygpLmV2ZXJ5KCknLCBmdW5jdGlvbiAoZm4pIHtcbiAgICAgIHZhciBvcHRzID0gdGhpcy5zZWxlY3Rvci5vcHRzO1xuICAgICAgdmFyIGFwaSA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy5pdGVyYXRvcih0eXBlLCBmdW5jdGlvbiAoc2V0dGluZ3MsIGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQpIHtcbiAgICAgICAgZm4uY2FsbChhcGlbdHlwZV0oYXJnMSwgdHlwZSA9PT0gJ2NlbGwnID8gYXJnMiA6IG9wdHMsIHR5cGUgPT09ICdjZWxsJyA/IG9wdHMgOiB1bmRlZmluZWQpLCBhcmcxLCBhcmcyLCBhcmczLCBhcmc0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBfYXBpX3JlZ2lzdGVyKCdpMThuKCknLCBmdW5jdGlvbiAodG9rZW4sIGRlZiwgcGx1cmFsKSB7XG4gICAgdmFyIGN0eCA9IHRoaXMuY29udGV4dFswXTtcblxuICAgIHZhciByZXNvbHZlZCA9IF9mbkdldE9iamVjdERhdGFGbih0b2tlbikoY3R4Lm9MYW5ndWFnZSk7XG5cbiAgICBpZiAocmVzb2x2ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzb2x2ZWQgPSBkZWY7XG4gICAgfVxuXG4gICAgaWYgKHBsdXJhbCAhPT0gdW5kZWZpbmVkICYmICQuaXNQbGFpbk9iamVjdChyZXNvbHZlZCkpIHtcbiAgICAgIHJlc29sdmVkID0gcmVzb2x2ZWRbcGx1cmFsXSAhPT0gdW5kZWZpbmVkID8gcmVzb2x2ZWRbcGx1cmFsXSA6IHJlc29sdmVkLl87XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc29sdmVkLnJlcGxhY2UoJyVkJywgcGx1cmFsKTtcbiAgfSk7XG5cbiAgRGF0YVRhYmxlLnZlcnNpb24gPSBcIjEuMTAuMThcIjtcbiAgRGF0YVRhYmxlLnNldHRpbmdzID0gW107XG4gIERhdGFUYWJsZS5tb2RlbHMgPSB7fTtcbiAgRGF0YVRhYmxlLm1vZGVscy5vU2VhcmNoID0ge1xuICAgIFwiYkNhc2VJbnNlbnNpdGl2ZVwiOiB0cnVlLFxuICAgIFwic1NlYXJjaFwiOiBcIlwiLFxuICAgIFwiYlJlZ2V4XCI6IGZhbHNlLFxuICAgIFwiYlNtYXJ0XCI6IHRydWVcbiAgfTtcbiAgRGF0YVRhYmxlLm1vZGVscy5vUm93ID0ge1xuICAgIFwiblRyXCI6IG51bGwsXG4gICAgXCJhbkNlbGxzXCI6IG51bGwsXG4gICAgXCJfYURhdGFcIjogW10sXG4gICAgXCJfYVNvcnREYXRhXCI6IG51bGwsXG4gICAgXCJfYUZpbHRlckRhdGFcIjogbnVsbCxcbiAgICBcIl9zRmlsdGVyUm93XCI6IG51bGwsXG4gICAgXCJfc1Jvd1N0cmlwZVwiOiBcIlwiLFxuICAgIFwic3JjXCI6IG51bGwsXG4gICAgXCJpZHhcIjogLTFcbiAgfTtcbiAgRGF0YVRhYmxlLm1vZGVscy5vQ29sdW1uID0ge1xuICAgIFwiaWR4XCI6IG51bGwsXG4gICAgXCJhRGF0YVNvcnRcIjogbnVsbCxcbiAgICBcImFzU29ydGluZ1wiOiBudWxsLFxuICAgIFwiYlNlYXJjaGFibGVcIjogbnVsbCxcbiAgICBcImJTb3J0YWJsZVwiOiBudWxsLFxuICAgIFwiYlZpc2libGVcIjogbnVsbCxcbiAgICBcIl9zTWFudWFsVHlwZVwiOiBudWxsLFxuICAgIFwiX2JBdHRyU3JjXCI6IGZhbHNlLFxuICAgIFwiZm5DcmVhdGVkQ2VsbFwiOiBudWxsLFxuICAgIFwiZm5HZXREYXRhXCI6IG51bGwsXG4gICAgXCJmblNldERhdGFcIjogbnVsbCxcbiAgICBcIm1EYXRhXCI6IG51bGwsXG4gICAgXCJtUmVuZGVyXCI6IG51bGwsXG4gICAgXCJuVGhcIjogbnVsbCxcbiAgICBcIm5UZlwiOiBudWxsLFxuICAgIFwic0NsYXNzXCI6IG51bGwsXG4gICAgXCJzQ29udGVudFBhZGRpbmdcIjogbnVsbCxcbiAgICBcInNEZWZhdWx0Q29udGVudFwiOiBudWxsLFxuICAgIFwic05hbWVcIjogbnVsbCxcbiAgICBcInNTb3J0RGF0YVR5cGVcIjogJ3N0ZCcsXG4gICAgXCJzU29ydGluZ0NsYXNzXCI6IG51bGwsXG4gICAgXCJzU29ydGluZ0NsYXNzSlVJXCI6IG51bGwsXG4gICAgXCJzVGl0bGVcIjogbnVsbCxcbiAgICBcInNUeXBlXCI6IG51bGwsXG4gICAgXCJzV2lkdGhcIjogbnVsbCxcbiAgICBcInNXaWR0aE9yaWdcIjogbnVsbFxuICB9O1xuICBEYXRhVGFibGUuZGVmYXVsdHMgPSB7XG4gICAgXCJhYURhdGFcIjogbnVsbCxcbiAgICBcImFhU29ydGluZ1wiOiBbWzAsICdhc2MnXV0sXG4gICAgXCJhYVNvcnRpbmdGaXhlZFwiOiBbXSxcbiAgICBcImFqYXhcIjogbnVsbCxcbiAgICBcImFMZW5ndGhNZW51XCI6IFsxMCwgMjUsIDUwLCAxMDBdLFxuICAgIFwiYW9Db2x1bW5zXCI6IG51bGwsXG4gICAgXCJhb0NvbHVtbkRlZnNcIjogbnVsbCxcbiAgICBcImFvU2VhcmNoQ29sc1wiOiBbXSxcbiAgICBcImFzU3RyaXBlQ2xhc3Nlc1wiOiBudWxsLFxuICAgIFwiYkF1dG9XaWR0aFwiOiB0cnVlLFxuICAgIFwiYkRlZmVyUmVuZGVyXCI6IGZhbHNlLFxuICAgIFwiYkRlc3Ryb3lcIjogZmFsc2UsXG4gICAgXCJiRmlsdGVyXCI6IHRydWUsXG4gICAgXCJiSW5mb1wiOiB0cnVlLFxuICAgIFwiYkxlbmd0aENoYW5nZVwiOiB0cnVlLFxuICAgIFwiYlBhZ2luYXRlXCI6IHRydWUsXG4gICAgXCJiUHJvY2Vzc2luZ1wiOiBmYWxzZSxcbiAgICBcImJSZXRyaWV2ZVwiOiBmYWxzZSxcbiAgICBcImJTY3JvbGxDb2xsYXBzZVwiOiBmYWxzZSxcbiAgICBcImJTZXJ2ZXJTaWRlXCI6IGZhbHNlLFxuICAgIFwiYlNvcnRcIjogdHJ1ZSxcbiAgICBcImJTb3J0TXVsdGlcIjogdHJ1ZSxcbiAgICBcImJTb3J0Q2VsbHNUb3BcIjogZmFsc2UsXG4gICAgXCJiU29ydENsYXNzZXNcIjogdHJ1ZSxcbiAgICBcImJTdGF0ZVNhdmVcIjogZmFsc2UsXG4gICAgXCJmbkNyZWF0ZWRSb3dcIjogbnVsbCxcbiAgICBcImZuRHJhd0NhbGxiYWNrXCI6IG51bGwsXG4gICAgXCJmbkZvb3RlckNhbGxiYWNrXCI6IG51bGwsXG4gICAgXCJmbkZvcm1hdE51bWJlclwiOiBmdW5jdGlvbiBmbkZvcm1hdE51bWJlcih0b0Zvcm1hdCkge1xuICAgICAgcmV0dXJuIHRvRm9ybWF0LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgdGhpcy5vTGFuZ3VhZ2Uuc1Rob3VzYW5kcyk7XG4gICAgfSxcbiAgICBcImZuSGVhZGVyQ2FsbGJhY2tcIjogbnVsbCxcbiAgICBcImZuSW5mb0NhbGxiYWNrXCI6IG51bGwsXG4gICAgXCJmbkluaXRDb21wbGV0ZVwiOiBudWxsLFxuICAgIFwiZm5QcmVEcmF3Q2FsbGJhY2tcIjogbnVsbCxcbiAgICBcImZuUm93Q2FsbGJhY2tcIjogbnVsbCxcbiAgICBcImZuU2VydmVyRGF0YVwiOiBudWxsLFxuICAgIFwiZm5TZXJ2ZXJQYXJhbXNcIjogbnVsbCxcbiAgICBcImZuU3RhdGVMb2FkQ2FsbGJhY2tcIjogZnVuY3Rpb24gZm5TdGF0ZUxvYWRDYWxsYmFjayhzZXR0aW5ncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoKHNldHRpbmdzLmlTdGF0ZUR1cmF0aW9uID09PSAtMSA/IHNlc3Npb25TdG9yYWdlIDogbG9jYWxTdG9yYWdlKS5nZXRJdGVtKCdEYXRhVGFibGVzXycgKyBzZXR0aW5ncy5zSW5zdGFuY2UgKyAnXycgKyBsb2NhdGlvbi5wYXRobmFtZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9LFxuICAgIFwiZm5TdGF0ZUxvYWRQYXJhbXNcIjogbnVsbCxcbiAgICBcImZuU3RhdGVMb2FkZWRcIjogbnVsbCxcbiAgICBcImZuU3RhdGVTYXZlQ2FsbGJhY2tcIjogZnVuY3Rpb24gZm5TdGF0ZVNhdmVDYWxsYmFjayhzZXR0aW5ncywgZGF0YSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgKHNldHRpbmdzLmlTdGF0ZUR1cmF0aW9uID09PSAtMSA/IHNlc3Npb25TdG9yYWdlIDogbG9jYWxTdG9yYWdlKS5zZXRJdGVtKCdEYXRhVGFibGVzXycgKyBzZXR0aW5ncy5zSW5zdGFuY2UgKyAnXycgKyBsb2NhdGlvbi5wYXRobmFtZSwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9LFxuICAgIFwiZm5TdGF0ZVNhdmVQYXJhbXNcIjogbnVsbCxcbiAgICBcImlTdGF0ZUR1cmF0aW9uXCI6IDcyMDAsXG4gICAgXCJpRGVmZXJMb2FkaW5nXCI6IG51bGwsXG4gICAgXCJpRGlzcGxheUxlbmd0aFwiOiAxMCxcbiAgICBcImlEaXNwbGF5U3RhcnRcIjogMCxcbiAgICBcImlUYWJJbmRleFwiOiAwLFxuICAgIFwib0NsYXNzZXNcIjoge30sXG4gICAgXCJvTGFuZ3VhZ2VcIjoge1xuICAgICAgXCJvQXJpYVwiOiB7XG4gICAgICAgIFwic1NvcnRBc2NlbmRpbmdcIjogXCI6IGFjdGl2YXRlIHRvIHNvcnQgY29sdW1uIGFzY2VuZGluZ1wiLFxuICAgICAgICBcInNTb3J0RGVzY2VuZGluZ1wiOiBcIjogYWN0aXZhdGUgdG8gc29ydCBjb2x1bW4gZGVzY2VuZGluZ1wiXG4gICAgICB9LFxuICAgICAgXCJvUGFnaW5hdGVcIjoge1xuICAgICAgICBcInNGaXJzdFwiOiBcIkZpcnN0XCIsXG4gICAgICAgIFwic0xhc3RcIjogXCJMYXN0XCIsXG4gICAgICAgIFwic05leHRcIjogXCJOZXh0XCIsXG4gICAgICAgIFwic1ByZXZpb3VzXCI6IFwiUHJldmlvdXNcIlxuICAgICAgfSxcbiAgICAgIFwic0VtcHR5VGFibGVcIjogXCJObyBkYXRhIGF2YWlsYWJsZSBpbiB0YWJsZVwiLFxuICAgICAgXCJzSW5mb1wiOiBcIlNob3dpbmcgX1NUQVJUXyB0byBfRU5EXyBvZiBfVE9UQUxfIGVudHJpZXNcIixcbiAgICAgIFwic0luZm9FbXB0eVwiOiBcIlNob3dpbmcgMCB0byAwIG9mIDAgZW50cmllc1wiLFxuICAgICAgXCJzSW5mb0ZpbHRlcmVkXCI6IFwiKGZpbHRlcmVkIGZyb20gX01BWF8gdG90YWwgZW50cmllcylcIixcbiAgICAgIFwic0luZm9Qb3N0Rml4XCI6IFwiXCIsXG4gICAgICBcInNEZWNpbWFsXCI6IFwiXCIsXG4gICAgICBcInNUaG91c2FuZHNcIjogXCIsXCIsXG4gICAgICBcInNMZW5ndGhNZW51XCI6IFwiU2hvdyBfTUVOVV8gZW50cmllc1wiLFxuICAgICAgXCJzTG9hZGluZ1JlY29yZHNcIjogXCJMb2FkaW5nLi4uXCIsXG4gICAgICBcInNQcm9jZXNzaW5nXCI6IFwiUHJvY2Vzc2luZy4uLlwiLFxuICAgICAgXCJzU2VhcmNoXCI6IFwiU2VhcmNoOlwiLFxuICAgICAgXCJzU2VhcmNoUGxhY2Vob2xkZXJcIjogXCJcIixcbiAgICAgIFwic1VybFwiOiBcIlwiLFxuICAgICAgXCJzWmVyb1JlY29yZHNcIjogXCJObyBtYXRjaGluZyByZWNvcmRzIGZvdW5kXCJcbiAgICB9LFxuICAgIFwib1NlYXJjaFwiOiAkLmV4dGVuZCh7fSwgRGF0YVRhYmxlLm1vZGVscy5vU2VhcmNoKSxcbiAgICBcInNBamF4RGF0YVByb3BcIjogXCJkYXRhXCIsXG4gICAgXCJzQWpheFNvdXJjZVwiOiBudWxsLFxuICAgIFwic0RvbVwiOiBcImxmcnRpcFwiLFxuICAgIFwic2VhcmNoRGVsYXlcIjogbnVsbCxcbiAgICBcInNQYWdpbmF0aW9uVHlwZVwiOiBcInNpbXBsZV9udW1iZXJzXCIsXG4gICAgXCJzU2Nyb2xsWFwiOiBcIlwiLFxuICAgIFwic1Njcm9sbFhJbm5lclwiOiBcIlwiLFxuICAgIFwic1Njcm9sbFlcIjogXCJcIixcbiAgICBcInNTZXJ2ZXJNZXRob2RcIjogXCJHRVRcIixcbiAgICBcInJlbmRlcmVyXCI6IG51bGwsXG4gICAgXCJyb3dJZFwiOiBcIkRUX1Jvd0lkXCJcbiAgfTtcblxuICBfZm5IdW5nYXJpYW5NYXAoRGF0YVRhYmxlLmRlZmF1bHRzKTtcblxuICBEYXRhVGFibGUuZGVmYXVsdHMuY29sdW1uID0ge1xuICAgIFwiYURhdGFTb3J0XCI6IG51bGwsXG4gICAgXCJpRGF0YVNvcnRcIjogLTEsXG4gICAgXCJhc1NvcnRpbmdcIjogWydhc2MnLCAnZGVzYyddLFxuICAgIFwiYlNlYXJjaGFibGVcIjogdHJ1ZSxcbiAgICBcImJTb3J0YWJsZVwiOiB0cnVlLFxuICAgIFwiYlZpc2libGVcIjogdHJ1ZSxcbiAgICBcImZuQ3JlYXRlZENlbGxcIjogbnVsbCxcbiAgICBcIm1EYXRhXCI6IG51bGwsXG4gICAgXCJtUmVuZGVyXCI6IG51bGwsXG4gICAgXCJzQ2VsbFR5cGVcIjogXCJ0ZFwiLFxuICAgIFwic0NsYXNzXCI6IFwiXCIsXG4gICAgXCJzQ29udGVudFBhZGRpbmdcIjogXCJcIixcbiAgICBcInNEZWZhdWx0Q29udGVudFwiOiBudWxsLFxuICAgIFwic05hbWVcIjogXCJcIixcbiAgICBcInNTb3J0RGF0YVR5cGVcIjogXCJzdGRcIixcbiAgICBcInNUaXRsZVwiOiBudWxsLFxuICAgIFwic1R5cGVcIjogbnVsbCxcbiAgICBcInNXaWR0aFwiOiBudWxsXG4gIH07XG5cbiAgX2ZuSHVuZ2FyaWFuTWFwKERhdGFUYWJsZS5kZWZhdWx0cy5jb2x1bW4pO1xuXG4gIERhdGFUYWJsZS5tb2RlbHMub1NldHRpbmdzID0ge1xuICAgIFwib0ZlYXR1cmVzXCI6IHtcbiAgICAgIFwiYkF1dG9XaWR0aFwiOiBudWxsLFxuICAgICAgXCJiRGVmZXJSZW5kZXJcIjogbnVsbCxcbiAgICAgIFwiYkZpbHRlclwiOiBudWxsLFxuICAgICAgXCJiSW5mb1wiOiBudWxsLFxuICAgICAgXCJiTGVuZ3RoQ2hhbmdlXCI6IG51bGwsXG4gICAgICBcImJQYWdpbmF0ZVwiOiBudWxsLFxuICAgICAgXCJiUHJvY2Vzc2luZ1wiOiBudWxsLFxuICAgICAgXCJiU2VydmVyU2lkZVwiOiBudWxsLFxuICAgICAgXCJiU29ydFwiOiBudWxsLFxuICAgICAgXCJiU29ydE11bHRpXCI6IG51bGwsXG4gICAgICBcImJTb3J0Q2xhc3Nlc1wiOiBudWxsLFxuICAgICAgXCJiU3RhdGVTYXZlXCI6IG51bGxcbiAgICB9LFxuICAgIFwib1Njcm9sbFwiOiB7XG4gICAgICBcImJDb2xsYXBzZVwiOiBudWxsLFxuICAgICAgXCJpQmFyV2lkdGhcIjogMCxcbiAgICAgIFwic1hcIjogbnVsbCxcbiAgICAgIFwic1hJbm5lclwiOiBudWxsLFxuICAgICAgXCJzWVwiOiBudWxsXG4gICAgfSxcbiAgICBcIm9MYW5ndWFnZVwiOiB7XG4gICAgICBcImZuSW5mb0NhbGxiYWNrXCI6IG51bGxcbiAgICB9LFxuICAgIFwib0Jyb3dzZXJcIjoge1xuICAgICAgXCJiU2Nyb2xsT3ZlcnNpemVcIjogZmFsc2UsXG4gICAgICBcImJTY3JvbGxiYXJMZWZ0XCI6IGZhbHNlLFxuICAgICAgXCJiQm91bmRpbmdcIjogZmFsc2UsXG4gICAgICBcImJhcldpZHRoXCI6IDBcbiAgICB9LFxuICAgIFwiYWpheFwiOiBudWxsLFxuICAgIFwiYWFuRmVhdHVyZXNcIjogW10sXG4gICAgXCJhb0RhdGFcIjogW10sXG4gICAgXCJhaURpc3BsYXlcIjogW10sXG4gICAgXCJhaURpc3BsYXlNYXN0ZXJcIjogW10sXG4gICAgXCJhSWRzXCI6IHt9LFxuICAgIFwiYW9Db2x1bW5zXCI6IFtdLFxuICAgIFwiYW9IZWFkZXJcIjogW10sXG4gICAgXCJhb0Zvb3RlclwiOiBbXSxcbiAgICBcIm9QcmV2aW91c1NlYXJjaFwiOiB7fSxcbiAgICBcImFvUHJlU2VhcmNoQ29sc1wiOiBbXSxcbiAgICBcImFhU29ydGluZ1wiOiBudWxsLFxuICAgIFwiYWFTb3J0aW5nRml4ZWRcIjogW10sXG4gICAgXCJhc1N0cmlwZUNsYXNzZXNcIjogbnVsbCxcbiAgICBcImFzRGVzdHJveVN0cmlwZXNcIjogW10sXG4gICAgXCJzRGVzdHJveVdpZHRoXCI6IDAsXG4gICAgXCJhb1Jvd0NhbGxiYWNrXCI6IFtdLFxuICAgIFwiYW9IZWFkZXJDYWxsYmFja1wiOiBbXSxcbiAgICBcImFvRm9vdGVyQ2FsbGJhY2tcIjogW10sXG4gICAgXCJhb0RyYXdDYWxsYmFja1wiOiBbXSxcbiAgICBcImFvUm93Q3JlYXRlZENhbGxiYWNrXCI6IFtdLFxuICAgIFwiYW9QcmVEcmF3Q2FsbGJhY2tcIjogW10sXG4gICAgXCJhb0luaXRDb21wbGV0ZVwiOiBbXSxcbiAgICBcImFvU3RhdGVTYXZlUGFyYW1zXCI6IFtdLFxuICAgIFwiYW9TdGF0ZUxvYWRQYXJhbXNcIjogW10sXG4gICAgXCJhb1N0YXRlTG9hZGVkXCI6IFtdLFxuICAgIFwic1RhYmxlSWRcIjogXCJcIixcbiAgICBcIm5UYWJsZVwiOiBudWxsLFxuICAgIFwiblRIZWFkXCI6IG51bGwsXG4gICAgXCJuVEZvb3RcIjogbnVsbCxcbiAgICBcIm5UQm9keVwiOiBudWxsLFxuICAgIFwiblRhYmxlV3JhcHBlclwiOiBudWxsLFxuICAgIFwiYkRlZmVyTG9hZGluZ1wiOiBmYWxzZSxcbiAgICBcImJJbml0aWFsaXNlZFwiOiBmYWxzZSxcbiAgICBcImFvT3BlblJvd3NcIjogW10sXG4gICAgXCJzRG9tXCI6IG51bGwsXG4gICAgXCJzZWFyY2hEZWxheVwiOiBudWxsLFxuICAgIFwic1BhZ2luYXRpb25UeXBlXCI6IFwidHdvX2J1dHRvblwiLFxuICAgIFwiaVN0YXRlRHVyYXRpb25cIjogMCxcbiAgICBcImFvU3RhdGVTYXZlXCI6IFtdLFxuICAgIFwiYW9TdGF0ZUxvYWRcIjogW10sXG4gICAgXCJvU2F2ZWRTdGF0ZVwiOiBudWxsLFxuICAgIFwib0xvYWRlZFN0YXRlXCI6IG51bGwsXG4gICAgXCJzQWpheFNvdXJjZVwiOiBudWxsLFxuICAgIFwic0FqYXhEYXRhUHJvcFwiOiBudWxsLFxuICAgIFwiYkFqYXhEYXRhR2V0XCI6IHRydWUsXG4gICAgXCJqcVhIUlwiOiBudWxsLFxuICAgIFwianNvblwiOiB1bmRlZmluZWQsXG4gICAgXCJvQWpheERhdGFcIjogdW5kZWZpbmVkLFxuICAgIFwiZm5TZXJ2ZXJEYXRhXCI6IG51bGwsXG4gICAgXCJhb1NlcnZlclBhcmFtc1wiOiBbXSxcbiAgICBcInNTZXJ2ZXJNZXRob2RcIjogbnVsbCxcbiAgICBcImZuRm9ybWF0TnVtYmVyXCI6IG51bGwsXG4gICAgXCJhTGVuZ3RoTWVudVwiOiBudWxsLFxuICAgIFwiaURyYXdcIjogMCxcbiAgICBcImJEcmF3aW5nXCI6IGZhbHNlLFxuICAgIFwiaURyYXdFcnJvclwiOiAtMSxcbiAgICBcIl9pRGlzcGxheUxlbmd0aFwiOiAxMCxcbiAgICBcIl9pRGlzcGxheVN0YXJ0XCI6IDAsXG4gICAgXCJfaVJlY29yZHNUb3RhbFwiOiAwLFxuICAgIFwiX2lSZWNvcmRzRGlzcGxheVwiOiAwLFxuICAgIFwib0NsYXNzZXNcIjoge30sXG4gICAgXCJiRmlsdGVyZWRcIjogZmFsc2UsXG4gICAgXCJiU29ydGVkXCI6IGZhbHNlLFxuICAgIFwiYlNvcnRDZWxsc1RvcFwiOiBudWxsLFxuICAgIFwib0luaXRcIjogbnVsbCxcbiAgICBcImFvRGVzdHJveUNhbGxiYWNrXCI6IFtdLFxuICAgIFwiZm5SZWNvcmRzVG90YWxcIjogZnVuY3Rpb24gZm5SZWNvcmRzVG90YWwoKSB7XG4gICAgICByZXR1cm4gX2ZuRGF0YVNvdXJjZSh0aGlzKSA9PSAnc3NwJyA/IHRoaXMuX2lSZWNvcmRzVG90YWwgKiAxIDogdGhpcy5haURpc3BsYXlNYXN0ZXIubGVuZ3RoO1xuICAgIH0sXG4gICAgXCJmblJlY29yZHNEaXNwbGF5XCI6IGZ1bmN0aW9uIGZuUmVjb3Jkc0Rpc3BsYXkoKSB7XG4gICAgICByZXR1cm4gX2ZuRGF0YVNvdXJjZSh0aGlzKSA9PSAnc3NwJyA/IHRoaXMuX2lSZWNvcmRzRGlzcGxheSAqIDEgOiB0aGlzLmFpRGlzcGxheS5sZW5ndGg7XG4gICAgfSxcbiAgICBcImZuRGlzcGxheUVuZFwiOiBmdW5jdGlvbiBmbkRpc3BsYXlFbmQoKSB7XG4gICAgICB2YXIgbGVuID0gdGhpcy5faURpc3BsYXlMZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSB0aGlzLl9pRGlzcGxheVN0YXJ0LFxuICAgICAgICAgIGNhbGMgPSBzdGFydCArIGxlbixcbiAgICAgICAgICByZWNvcmRzID0gdGhpcy5haURpc3BsYXkubGVuZ3RoLFxuICAgICAgICAgIGZlYXR1cmVzID0gdGhpcy5vRmVhdHVyZXMsXG4gICAgICAgICAgcGFnaW5hdGUgPSBmZWF0dXJlcy5iUGFnaW5hdGU7XG5cbiAgICAgIGlmIChmZWF0dXJlcy5iU2VydmVyU2lkZSkge1xuICAgICAgICByZXR1cm4gcGFnaW5hdGUgPT09IGZhbHNlIHx8IGxlbiA9PT0gLTEgPyBzdGFydCArIHJlY29yZHMgOiBNYXRoLm1pbihzdGFydCArIGxlbiwgdGhpcy5faVJlY29yZHNEaXNwbGF5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAhcGFnaW5hdGUgfHwgY2FsYyA+IHJlY29yZHMgfHwgbGVuID09PSAtMSA/IHJlY29yZHMgOiBjYWxjO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJvSW5zdGFuY2VcIjogbnVsbCxcbiAgICBcInNJbnN0YW5jZVwiOiBudWxsLFxuICAgIFwiaVRhYkluZGV4XCI6IDAsXG4gICAgXCJuU2Nyb2xsSGVhZFwiOiBudWxsLFxuICAgIFwiblNjcm9sbEZvb3RcIjogbnVsbCxcbiAgICBcImFMYXN0U29ydFwiOiBbXSxcbiAgICBcIm9QbHVnaW5zXCI6IHt9LFxuICAgIFwicm93SWRGblwiOiBudWxsLFxuICAgIFwicm93SWRcIjogbnVsbFxuICB9O1xuICBEYXRhVGFibGUuZXh0ID0gX2V4dCA9IHtcbiAgICBidXR0b25zOiB7fSxcbiAgICBjbGFzc2VzOiB7fSxcbiAgICBidWlsZDogXCJkdC9kdC0xLjEwLjE4XCIsXG4gICAgZXJyTW9kZTogXCJhbGVydFwiLFxuICAgIGZlYXR1cmU6IFtdLFxuICAgIHNlYXJjaDogW10sXG4gICAgc2VsZWN0b3I6IHtcbiAgICAgIGNlbGw6IFtdLFxuICAgICAgY29sdW1uOiBbXSxcbiAgICAgIHJvdzogW11cbiAgICB9LFxuICAgIGludGVybmFsOiB7fSxcbiAgICBsZWdhY3k6IHtcbiAgICAgIGFqYXg6IG51bGxcbiAgICB9LFxuICAgIHBhZ2VyOiB7fSxcbiAgICByZW5kZXJlcjoge1xuICAgICAgcGFnZUJ1dHRvbjoge30sXG4gICAgICBoZWFkZXI6IHt9XG4gICAgfSxcbiAgICBvcmRlcjoge30sXG4gICAgdHlwZToge1xuICAgICAgZGV0ZWN0OiBbXSxcbiAgICAgIHNlYXJjaDoge30sXG4gICAgICBvcmRlcjoge31cbiAgICB9LFxuICAgIF91bmlxdWU6IDAsXG4gICAgZm5WZXJzaW9uQ2hlY2s6IERhdGFUYWJsZS5mblZlcnNpb25DaGVjayxcbiAgICBpQXBpSW5kZXg6IDAsXG4gICAgb0pVSUNsYXNzZXM6IHt9LFxuICAgIHNWZXJzaW9uOiBEYXRhVGFibGUudmVyc2lvblxuICB9O1xuICAkLmV4dGVuZChfZXh0LCB7XG4gICAgYWZuRmlsdGVyaW5nOiBfZXh0LnNlYXJjaCxcbiAgICBhVHlwZXM6IF9leHQudHlwZS5kZXRlY3QsXG4gICAgb2ZuU2VhcmNoOiBfZXh0LnR5cGUuc2VhcmNoLFxuICAgIG9Tb3J0OiBfZXh0LnR5cGUub3JkZXIsXG4gICAgYWZuU29ydERhdGE6IF9leHQub3JkZXIsXG4gICAgYW9GZWF0dXJlczogX2V4dC5mZWF0dXJlLFxuICAgIG9BcGk6IF9leHQuaW50ZXJuYWwsXG4gICAgb1N0ZENsYXNzZXM6IF9leHQuY2xhc3NlcyxcbiAgICBvUGFnaW5hdGlvbjogX2V4dC5wYWdlclxuICB9KTtcbiAgJC5leHRlbmQoRGF0YVRhYmxlLmV4dC5jbGFzc2VzLCB7XG4gICAgXCJzVGFibGVcIjogXCJkYXRhVGFibGVcIixcbiAgICBcInNOb0Zvb3RlclwiOiBcIm5vLWZvb3RlclwiLFxuICAgIFwic1BhZ2VCdXR0b25cIjogXCJwYWdpbmF0ZV9idXR0b25cIixcbiAgICBcInNQYWdlQnV0dG9uQWN0aXZlXCI6IFwiY3VycmVudFwiLFxuICAgIFwic1BhZ2VCdXR0b25EaXNhYmxlZFwiOiBcImRpc2FibGVkXCIsXG4gICAgXCJzU3RyaXBlT2RkXCI6IFwib2RkXCIsXG4gICAgXCJzU3RyaXBlRXZlblwiOiBcImV2ZW5cIixcbiAgICBcInNSb3dFbXB0eVwiOiBcImRhdGFUYWJsZXNfZW1wdHlcIixcbiAgICBcInNXcmFwcGVyXCI6IFwiZGF0YVRhYmxlc193cmFwcGVyXCIsXG4gICAgXCJzRmlsdGVyXCI6IFwiZGF0YVRhYmxlc19maWx0ZXJcIixcbiAgICBcInNJbmZvXCI6IFwiZGF0YVRhYmxlc19pbmZvXCIsXG4gICAgXCJzUGFnaW5nXCI6IFwiZGF0YVRhYmxlc19wYWdpbmF0ZSBwYWdpbmdfXCIsXG4gICAgXCJzTGVuZ3RoXCI6IFwiZGF0YVRhYmxlc19sZW5ndGhcIixcbiAgICBcInNQcm9jZXNzaW5nXCI6IFwiZGF0YVRhYmxlc19wcm9jZXNzaW5nXCIsXG4gICAgXCJzU29ydEFzY1wiOiBcInNvcnRpbmdfYXNjXCIsXG4gICAgXCJzU29ydERlc2NcIjogXCJzb3J0aW5nX2Rlc2NcIixcbiAgICBcInNTb3J0YWJsZVwiOiBcInNvcnRpbmdcIixcbiAgICBcInNTb3J0YWJsZUFzY1wiOiBcInNvcnRpbmdfYXNjX2Rpc2FibGVkXCIsXG4gICAgXCJzU29ydGFibGVEZXNjXCI6IFwic29ydGluZ19kZXNjX2Rpc2FibGVkXCIsXG4gICAgXCJzU29ydGFibGVOb25lXCI6IFwic29ydGluZ19kaXNhYmxlZFwiLFxuICAgIFwic1NvcnRDb2x1bW5cIjogXCJzb3J0aW5nX1wiLFxuICAgIFwic0ZpbHRlcklucHV0XCI6IFwiXCIsXG4gICAgXCJzTGVuZ3RoU2VsZWN0XCI6IFwiXCIsXG4gICAgXCJzU2Nyb2xsV3JhcHBlclwiOiBcImRhdGFUYWJsZXNfc2Nyb2xsXCIsXG4gICAgXCJzU2Nyb2xsSGVhZFwiOiBcImRhdGFUYWJsZXNfc2Nyb2xsSGVhZFwiLFxuICAgIFwic1Njcm9sbEhlYWRJbm5lclwiOiBcImRhdGFUYWJsZXNfc2Nyb2xsSGVhZElubmVyXCIsXG4gICAgXCJzU2Nyb2xsQm9keVwiOiBcImRhdGFUYWJsZXNfc2Nyb2xsQm9keVwiLFxuICAgIFwic1Njcm9sbEZvb3RcIjogXCJkYXRhVGFibGVzX3Njcm9sbEZvb3RcIixcbiAgICBcInNTY3JvbGxGb290SW5uZXJcIjogXCJkYXRhVGFibGVzX3Njcm9sbEZvb3RJbm5lclwiLFxuICAgIFwic0hlYWRlclRIXCI6IFwiXCIsXG4gICAgXCJzRm9vdGVyVEhcIjogXCJcIixcbiAgICBcInNTb3J0SlVJQXNjXCI6IFwiXCIsXG4gICAgXCJzU29ydEpVSURlc2NcIjogXCJcIixcbiAgICBcInNTb3J0SlVJXCI6IFwiXCIsXG4gICAgXCJzU29ydEpVSUFzY0FsbG93ZWRcIjogXCJcIixcbiAgICBcInNTb3J0SlVJRGVzY0FsbG93ZWRcIjogXCJcIixcbiAgICBcInNTb3J0SlVJV3JhcHBlclwiOiBcIlwiLFxuICAgIFwic1NvcnRJY29uXCI6IFwiXCIsXG4gICAgXCJzSlVJSGVhZGVyXCI6IFwiXCIsXG4gICAgXCJzSlVJRm9vdGVyXCI6IFwiXCJcbiAgfSk7XG4gIHZhciBleHRQYWdpbmF0aW9uID0gRGF0YVRhYmxlLmV4dC5wYWdlcjtcblxuICBmdW5jdGlvbiBfbnVtYmVycyhwYWdlLCBwYWdlcykge1xuICAgIHZhciBudW1iZXJzID0gW10sXG4gICAgICAgIGJ1dHRvbnMgPSBleHRQYWdpbmF0aW9uLm51bWJlcnNfbGVuZ3RoLFxuICAgICAgICBoYWxmID0gTWF0aC5mbG9vcihidXR0b25zIC8gMiksXG4gICAgICAgIGkgPSAxO1xuXG4gICAgaWYgKHBhZ2VzIDw9IGJ1dHRvbnMpIHtcbiAgICAgIG51bWJlcnMgPSBfcmFuZ2UoMCwgcGFnZXMpO1xuICAgIH0gZWxzZSBpZiAocGFnZSA8PSBoYWxmKSB7XG4gICAgICBudW1iZXJzID0gX3JhbmdlKDAsIGJ1dHRvbnMgLSAyKTtcbiAgICAgIG51bWJlcnMucHVzaCgnZWxsaXBzaXMnKTtcbiAgICAgIG51bWJlcnMucHVzaChwYWdlcyAtIDEpO1xuICAgIH0gZWxzZSBpZiAocGFnZSA+PSBwYWdlcyAtIDEgLSBoYWxmKSB7XG4gICAgICBudW1iZXJzID0gX3JhbmdlKHBhZ2VzIC0gKGJ1dHRvbnMgLSAyKSwgcGFnZXMpO1xuICAgICAgbnVtYmVycy5zcGxpY2UoMCwgMCwgJ2VsbGlwc2lzJyk7XG4gICAgICBudW1iZXJzLnNwbGljZSgwLCAwLCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbnVtYmVycyA9IF9yYW5nZShwYWdlIC0gaGFsZiArIDIsIHBhZ2UgKyBoYWxmIC0gMSk7XG4gICAgICBudW1iZXJzLnB1c2goJ2VsbGlwc2lzJyk7XG4gICAgICBudW1iZXJzLnB1c2gocGFnZXMgLSAxKTtcbiAgICAgIG51bWJlcnMuc3BsaWNlKDAsIDAsICdlbGxpcHNpcycpO1xuICAgICAgbnVtYmVycy5zcGxpY2UoMCwgMCwgMCk7XG4gICAgfVxuXG4gICAgbnVtYmVycy5EVF9lbCA9ICdzcGFuJztcbiAgICByZXR1cm4gbnVtYmVycztcbiAgfVxuXG4gICQuZXh0ZW5kKGV4dFBhZ2luYXRpb24sIHtcbiAgICBzaW1wbGU6IGZ1bmN0aW9uIHNpbXBsZShwYWdlLCBwYWdlcykge1xuICAgICAgcmV0dXJuIFsncHJldmlvdXMnLCAnbmV4dCddO1xuICAgIH0sXG4gICAgZnVsbDogZnVuY3Rpb24gZnVsbChwYWdlLCBwYWdlcykge1xuICAgICAgcmV0dXJuIFsnZmlyc3QnLCAncHJldmlvdXMnLCAnbmV4dCcsICdsYXN0J107XG4gICAgfSxcbiAgICBudW1iZXJzOiBmdW5jdGlvbiBudW1iZXJzKHBhZ2UsIHBhZ2VzKSB7XG4gICAgICByZXR1cm4gW19udW1iZXJzKHBhZ2UsIHBhZ2VzKV07XG4gICAgfSxcbiAgICBzaW1wbGVfbnVtYmVyczogZnVuY3Rpb24gc2ltcGxlX251bWJlcnMocGFnZSwgcGFnZXMpIHtcbiAgICAgIHJldHVybiBbJ3ByZXZpb3VzJywgX251bWJlcnMocGFnZSwgcGFnZXMpLCAnbmV4dCddO1xuICAgIH0sXG4gICAgZnVsbF9udW1iZXJzOiBmdW5jdGlvbiBmdWxsX251bWJlcnMocGFnZSwgcGFnZXMpIHtcbiAgICAgIHJldHVybiBbJ2ZpcnN0JywgJ3ByZXZpb3VzJywgX251bWJlcnMocGFnZSwgcGFnZXMpLCAnbmV4dCcsICdsYXN0J107XG4gICAgfSxcbiAgICBmaXJzdF9sYXN0X251bWJlcnM6IGZ1bmN0aW9uIGZpcnN0X2xhc3RfbnVtYmVycyhwYWdlLCBwYWdlcykge1xuICAgICAgcmV0dXJuIFsnZmlyc3QnLCBfbnVtYmVycyhwYWdlLCBwYWdlcyksICdsYXN0J107XG4gICAgfSxcbiAgICBfbnVtYmVyczogX251bWJlcnMsXG4gICAgbnVtYmVyc19sZW5ndGg6IDdcbiAgfSk7XG4gICQuZXh0ZW5kKHRydWUsIERhdGFUYWJsZS5leHQucmVuZGVyZXIsIHtcbiAgICBwYWdlQnV0dG9uOiB7XG4gICAgICBfOiBmdW5jdGlvbiBfKHNldHRpbmdzLCBob3N0LCBpZHgsIGJ1dHRvbnMsIHBhZ2UsIHBhZ2VzKSB7XG4gICAgICAgIHZhciBjbGFzc2VzID0gc2V0dGluZ3Mub0NsYXNzZXM7XG4gICAgICAgIHZhciBsYW5nID0gc2V0dGluZ3Mub0xhbmd1YWdlLm9QYWdpbmF0ZTtcbiAgICAgICAgdmFyIGFyaWEgPSBzZXR0aW5ncy5vTGFuZ3VhZ2Uub0FyaWEucGFnaW5hdGUgfHwge307XG4gICAgICAgIHZhciBidG5EaXNwbGF5LFxuICAgICAgICAgICAgYnRuQ2xhc3MsXG4gICAgICAgICAgICBjb3VudGVyID0gMDtcblxuICAgICAgICB2YXIgYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKGNvbnRhaW5lciwgYnV0dG9ucykge1xuICAgICAgICAgIHZhciBpLCBpZW4sIG5vZGUsIGJ1dHRvbjtcblxuICAgICAgICAgIHZhciBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbiBjbGlja0hhbmRsZXIoZSkge1xuICAgICAgICAgICAgX2ZuUGFnZUNoYW5nZShzZXR0aW5ncywgZS5kYXRhLmFjdGlvbiwgdHJ1ZSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGZvciAoaSA9IDAsIGllbiA9IGJ1dHRvbnMubGVuZ3RoOyBpIDwgaWVuOyBpKyspIHtcbiAgICAgICAgICAgIGJ1dHRvbiA9IGJ1dHRvbnNbaV07XG5cbiAgICAgICAgICAgIGlmICgkLmlzQXJyYXkoYnV0dG9uKSkge1xuICAgICAgICAgICAgICB2YXIgaW5uZXIgPSAkKCc8JyArIChidXR0b24uRFRfZWwgfHwgJ2RpdicpICsgJy8+JykuYXBwZW5kVG8oY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgYXR0YWNoKGlubmVyLCBidXR0b24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnRuRGlzcGxheSA9IG51bGw7XG4gICAgICAgICAgICAgIGJ0bkNsYXNzID0gJyc7XG5cbiAgICAgICAgICAgICAgc3dpdGNoIChidXR0b24pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdlbGxpcHNpcyc6XG4gICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKCc8c3BhbiBjbGFzcz1cImVsbGlwc2lzXCI+JiN4MjAyNjs8L3NwYW4+Jyk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2ZpcnN0JzpcbiAgICAgICAgICAgICAgICAgIGJ0bkRpc3BsYXkgPSBsYW5nLnNGaXJzdDtcbiAgICAgICAgICAgICAgICAgIGJ0bkNsYXNzID0gYnV0dG9uICsgKHBhZ2UgPiAwID8gJycgOiAnICcgKyBjbGFzc2VzLnNQYWdlQnV0dG9uRGlzYWJsZWQpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdwcmV2aW91cyc6XG4gICAgICAgICAgICAgICAgICBidG5EaXNwbGF5ID0gbGFuZy5zUHJldmlvdXM7XG4gICAgICAgICAgICAgICAgICBidG5DbGFzcyA9IGJ1dHRvbiArIChwYWdlID4gMCA/ICcnIDogJyAnICsgY2xhc3Nlcy5zUGFnZUJ1dHRvbkRpc2FibGVkKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgICAgICAgICAgICBidG5EaXNwbGF5ID0gbGFuZy5zTmV4dDtcbiAgICAgICAgICAgICAgICAgIGJ0bkNsYXNzID0gYnV0dG9uICsgKHBhZ2UgPCBwYWdlcyAtIDEgPyAnJyA6ICcgJyArIGNsYXNzZXMuc1BhZ2VCdXR0b25EaXNhYmxlZCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2xhc3QnOlxuICAgICAgICAgICAgICAgICAgYnRuRGlzcGxheSA9IGxhbmcuc0xhc3Q7XG4gICAgICAgICAgICAgICAgICBidG5DbGFzcyA9IGJ1dHRvbiArIChwYWdlIDwgcGFnZXMgLSAxID8gJycgOiAnICcgKyBjbGFzc2VzLnNQYWdlQnV0dG9uRGlzYWJsZWQpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgYnRuRGlzcGxheSA9IGJ1dHRvbiArIDE7XG4gICAgICAgICAgICAgICAgICBidG5DbGFzcyA9IHBhZ2UgPT09IGJ1dHRvbiA/IGNsYXNzZXMuc1BhZ2VCdXR0b25BY3RpdmUgOiAnJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGJ0bkRpc3BsYXkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gJCgnPGE+Jywge1xuICAgICAgICAgICAgICAgICAgJ2NsYXNzJzogY2xhc3Nlcy5zUGFnZUJ1dHRvbiArICcgJyArIGJ0bkNsYXNzLFxuICAgICAgICAgICAgICAgICAgJ2FyaWEtY29udHJvbHMnOiBzZXR0aW5ncy5zVGFibGVJZCxcbiAgICAgICAgICAgICAgICAgICdhcmlhLWxhYmVsJzogYXJpYVtidXR0b25dLFxuICAgICAgICAgICAgICAgICAgJ2RhdGEtZHQtaWR4JzogY291bnRlcixcbiAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6IHNldHRpbmdzLmlUYWJJbmRleCxcbiAgICAgICAgICAgICAgICAgICdpZCc6IGlkeCA9PT0gMCAmJiB0eXBlb2YgYnV0dG9uID09PSAnc3RyaW5nJyA/IHNldHRpbmdzLnNUYWJsZUlkICsgJ18nICsgYnV0dG9uIDogbnVsbFxuICAgICAgICAgICAgICAgIH0pLmh0bWwoYnRuRGlzcGxheSkuYXBwZW5kVG8oY29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgIF9mbkJpbmRBY3Rpb24obm9kZSwge1xuICAgICAgICAgICAgICAgICAgYWN0aW9uOiBidXR0b25cbiAgICAgICAgICAgICAgICB9LCBjbGlja0hhbmRsZXIpO1xuXG4gICAgICAgICAgICAgICAgY291bnRlcisrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBhY3RpdmVFbDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGFjdGl2ZUVsID0gJChob3N0KS5maW5kKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLmRhdGEoJ2R0LWlkeCcpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICAgIGF0dGFjaCgkKGhvc3QpLmVtcHR5KCksIGJ1dHRvbnMpO1xuXG4gICAgICAgIGlmIChhY3RpdmVFbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgJChob3N0KS5maW5kKCdbZGF0YS1kdC1pZHg9JyArIGFjdGl2ZUVsICsgJ10nKS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgJC5leHRlbmQoRGF0YVRhYmxlLmV4dC50eXBlLmRldGVjdCwgW2Z1bmN0aW9uIChkLCBzZXR0aW5ncykge1xuICAgIHZhciBkZWNpbWFsID0gc2V0dGluZ3Mub0xhbmd1YWdlLnNEZWNpbWFsO1xuICAgIHJldHVybiBfaXNOdW1iZXIoZCwgZGVjaW1hbCkgPyAnbnVtJyArIGRlY2ltYWwgOiBudWxsO1xuICB9LCBmdW5jdGlvbiAoZCwgc2V0dGluZ3MpIHtcbiAgICBpZiAoZCAmJiAhKGQgaW5zdGFuY2VvZiBEYXRlKSAmJiAhX3JlX2RhdGUudGVzdChkKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlZCA9IERhdGUucGFyc2UoZCk7XG4gICAgcmV0dXJuIHBhcnNlZCAhPT0gbnVsbCAmJiAhaXNOYU4ocGFyc2VkKSB8fCBfZW1wdHkoZCkgPyAnZGF0ZScgOiBudWxsO1xuICB9LCBmdW5jdGlvbiAoZCwgc2V0dGluZ3MpIHtcbiAgICB2YXIgZGVjaW1hbCA9IHNldHRpbmdzLm9MYW5ndWFnZS5zRGVjaW1hbDtcbiAgICByZXR1cm4gX2lzTnVtYmVyKGQsIGRlY2ltYWwsIHRydWUpID8gJ251bS1mbXQnICsgZGVjaW1hbCA6IG51bGw7XG4gIH0sIGZ1bmN0aW9uIChkLCBzZXR0aW5ncykge1xuICAgIHZhciBkZWNpbWFsID0gc2V0dGluZ3Mub0xhbmd1YWdlLnNEZWNpbWFsO1xuICAgIHJldHVybiBfaHRtbE51bWVyaWMoZCwgZGVjaW1hbCkgPyAnaHRtbC1udW0nICsgZGVjaW1hbCA6IG51bGw7XG4gIH0sIGZ1bmN0aW9uIChkLCBzZXR0aW5ncykge1xuICAgIHZhciBkZWNpbWFsID0gc2V0dGluZ3Mub0xhbmd1YWdlLnNEZWNpbWFsO1xuICAgIHJldHVybiBfaHRtbE51bWVyaWMoZCwgZGVjaW1hbCwgdHJ1ZSkgPyAnaHRtbC1udW0tZm10JyArIGRlY2ltYWwgOiBudWxsO1xuICB9LCBmdW5jdGlvbiAoZCwgc2V0dGluZ3MpIHtcbiAgICByZXR1cm4gX2VtcHR5KGQpIHx8IHR5cGVvZiBkID09PSAnc3RyaW5nJyAmJiBkLmluZGV4T2YoJzwnKSAhPT0gLTEgPyAnaHRtbCcgOiBudWxsO1xuICB9XSk7XG4gICQuZXh0ZW5kKERhdGFUYWJsZS5leHQudHlwZS5zZWFyY2gsIHtcbiAgICBodG1sOiBmdW5jdGlvbiBodG1sKGRhdGEpIHtcbiAgICAgIHJldHVybiBfZW1wdHkoZGF0YSkgPyBkYXRhIDogdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnID8gZGF0YS5yZXBsYWNlKF9yZV9uZXdfbGluZXMsIFwiIFwiKS5yZXBsYWNlKF9yZV9odG1sLCBcIlwiKSA6ICcnO1xuICAgIH0sXG4gICAgc3RyaW5nOiBmdW5jdGlvbiBzdHJpbmcoZGF0YSkge1xuICAgICAgcmV0dXJuIF9lbXB0eShkYXRhKSA/IGRhdGEgOiB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycgPyBkYXRhLnJlcGxhY2UoX3JlX25ld19saW5lcywgXCIgXCIpIDogZGF0YTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBfX251bWVyaWNSZXBsYWNlID0gZnVuY3Rpb24gX19udW1lcmljUmVwbGFjZShkLCBkZWNpbWFsUGxhY2UsIHJlMSwgcmUyKSB7XG4gICAgaWYgKGQgIT09IDAgJiYgKCFkIHx8IGQgPT09ICctJykpIHtcbiAgICAgIHJldHVybiAtSW5maW5pdHk7XG4gICAgfVxuXG4gICAgaWYgKGRlY2ltYWxQbGFjZSkge1xuICAgICAgZCA9IF9udW1Ub0RlY2ltYWwoZCwgZGVjaW1hbFBsYWNlKTtcbiAgICB9XG5cbiAgICBpZiAoZC5yZXBsYWNlKSB7XG4gICAgICBpZiAocmUxKSB7XG4gICAgICAgIGQgPSBkLnJlcGxhY2UocmUxLCAnJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZTIpIHtcbiAgICAgICAgZCA9IGQucmVwbGFjZShyZTIsICcnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZCAqIDE7XG4gIH07XG5cbiAgZnVuY3Rpb24gX2FkZE51bWVyaWNTb3J0KGRlY2ltYWxQbGFjZSkge1xuICAgICQuZWFjaCh7XG4gICAgICBcIm51bVwiOiBmdW5jdGlvbiBudW0oZCkge1xuICAgICAgICByZXR1cm4gX19udW1lcmljUmVwbGFjZShkLCBkZWNpbWFsUGxhY2UpO1xuICAgICAgfSxcbiAgICAgIFwibnVtLWZtdFwiOiBmdW5jdGlvbiBudW1GbXQoZCkge1xuICAgICAgICByZXR1cm4gX19udW1lcmljUmVwbGFjZShkLCBkZWNpbWFsUGxhY2UsIF9yZV9mb3JtYXR0ZWRfbnVtZXJpYyk7XG4gICAgICB9LFxuICAgICAgXCJodG1sLW51bVwiOiBmdW5jdGlvbiBodG1sTnVtKGQpIHtcbiAgICAgICAgcmV0dXJuIF9fbnVtZXJpY1JlcGxhY2UoZCwgZGVjaW1hbFBsYWNlLCBfcmVfaHRtbCk7XG4gICAgICB9LFxuICAgICAgXCJodG1sLW51bS1mbXRcIjogZnVuY3Rpb24gaHRtbE51bUZtdChkKSB7XG4gICAgICAgIHJldHVybiBfX251bWVyaWNSZXBsYWNlKGQsIGRlY2ltYWxQbGFjZSwgX3JlX2h0bWwsIF9yZV9mb3JtYXR0ZWRfbnVtZXJpYyk7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKGtleSwgZm4pIHtcbiAgICAgIF9leHQudHlwZS5vcmRlcltrZXkgKyBkZWNpbWFsUGxhY2UgKyAnLXByZSddID0gZm47XG5cbiAgICAgIGlmIChrZXkubWF0Y2goL15odG1sXFwtLykpIHtcbiAgICAgICAgX2V4dC50eXBlLnNlYXJjaFtrZXkgKyBkZWNpbWFsUGxhY2VdID0gX2V4dC50eXBlLnNlYXJjaC5odG1sO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgJC5leHRlbmQoX2V4dC50eXBlLm9yZGVyLCB7XG4gICAgXCJkYXRlLXByZVwiOiBmdW5jdGlvbiBkYXRlUHJlKGQpIHtcbiAgICAgIHZhciB0cyA9IERhdGUucGFyc2UoZCk7XG4gICAgICByZXR1cm4gaXNOYU4odHMpID8gLUluZmluaXR5IDogdHM7XG4gICAgfSxcbiAgICBcImh0bWwtcHJlXCI6IGZ1bmN0aW9uIGh0bWxQcmUoYSkge1xuICAgICAgcmV0dXJuIF9lbXB0eShhKSA/ICcnIDogYS5yZXBsYWNlID8gYS5yZXBsYWNlKC88Lio/Pi9nLCBcIlwiKS50b0xvd2VyQ2FzZSgpIDogYSArICcnO1xuICAgIH0sXG4gICAgXCJzdHJpbmctcHJlXCI6IGZ1bmN0aW9uIHN0cmluZ1ByZShhKSB7XG4gICAgICByZXR1cm4gX2VtcHR5KGEpID8gJycgOiB0eXBlb2YgYSA9PT0gJ3N0cmluZycgPyBhLnRvTG93ZXJDYXNlKCkgOiAhYS50b1N0cmluZyA/ICcnIDogYS50b1N0cmluZygpO1xuICAgIH0sXG4gICAgXCJzdHJpbmctYXNjXCI6IGZ1bmN0aW9uIHN0cmluZ0FzYyh4LCB5KSB7XG4gICAgICByZXR1cm4geCA8IHkgPyAtMSA6IHggPiB5ID8gMSA6IDA7XG4gICAgfSxcbiAgICBcInN0cmluZy1kZXNjXCI6IGZ1bmN0aW9uIHN0cmluZ0Rlc2MoeCwgeSkge1xuICAgICAgcmV0dXJuIHggPCB5ID8gMSA6IHggPiB5ID8gLTEgOiAwO1xuICAgIH1cbiAgfSk7XG5cbiAgX2FkZE51bWVyaWNTb3J0KCcnKTtcblxuICAkLmV4dGVuZCh0cnVlLCBEYXRhVGFibGUuZXh0LnJlbmRlcmVyLCB7XG4gICAgaGVhZGVyOiB7XG4gICAgICBfOiBmdW5jdGlvbiBfKHNldHRpbmdzLCBjZWxsLCBjb2x1bW4sIGNsYXNzZXMpIHtcbiAgICAgICAgJChzZXR0aW5ncy5uVGFibGUpLm9uKCdvcmRlci5kdC5EVCcsIGZ1bmN0aW9uIChlLCBjdHgsIHNvcnRpbmcsIGNvbHVtbnMpIHtcbiAgICAgICAgICBpZiAoc2V0dGluZ3MgIT09IGN0eCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBjb2xJZHggPSBjb2x1bW4uaWR4O1xuICAgICAgICAgIGNlbGwucmVtb3ZlQ2xhc3MoY29sdW1uLnNTb3J0aW5nQ2xhc3MgKyAnICcgKyBjbGFzc2VzLnNTb3J0QXNjICsgJyAnICsgY2xhc3Nlcy5zU29ydERlc2MpLmFkZENsYXNzKGNvbHVtbnNbY29sSWR4XSA9PSAnYXNjJyA/IGNsYXNzZXMuc1NvcnRBc2MgOiBjb2x1bW5zW2NvbElkeF0gPT0gJ2Rlc2MnID8gY2xhc3Nlcy5zU29ydERlc2MgOiBjb2x1bW4uc1NvcnRpbmdDbGFzcyk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGpxdWVyeXVpOiBmdW5jdGlvbiBqcXVlcnl1aShzZXR0aW5ncywgY2VsbCwgY29sdW1uLCBjbGFzc2VzKSB7XG4gICAgICAgICQoJzxkaXYvPicpLmFkZENsYXNzKGNsYXNzZXMuc1NvcnRKVUlXcmFwcGVyKS5hcHBlbmQoY2VsbC5jb250ZW50cygpKS5hcHBlbmQoJCgnPHNwYW4vPicpLmFkZENsYXNzKGNsYXNzZXMuc1NvcnRJY29uICsgJyAnICsgY29sdW1uLnNTb3J0aW5nQ2xhc3NKVUkpKS5hcHBlbmRUbyhjZWxsKTtcbiAgICAgICAgJChzZXR0aW5ncy5uVGFibGUpLm9uKCdvcmRlci5kdC5EVCcsIGZ1bmN0aW9uIChlLCBjdHgsIHNvcnRpbmcsIGNvbHVtbnMpIHtcbiAgICAgICAgICBpZiAoc2V0dGluZ3MgIT09IGN0eCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBjb2xJZHggPSBjb2x1bW4uaWR4O1xuICAgICAgICAgIGNlbGwucmVtb3ZlQ2xhc3MoY2xhc3Nlcy5zU29ydEFzYyArIFwiIFwiICsgY2xhc3Nlcy5zU29ydERlc2MpLmFkZENsYXNzKGNvbHVtbnNbY29sSWR4XSA9PSAnYXNjJyA/IGNsYXNzZXMuc1NvcnRBc2MgOiBjb2x1bW5zW2NvbElkeF0gPT0gJ2Rlc2MnID8gY2xhc3Nlcy5zU29ydERlc2MgOiBjb2x1bW4uc1NvcnRpbmdDbGFzcyk7XG4gICAgICAgICAgY2VsbC5maW5kKCdzcGFuLicgKyBjbGFzc2VzLnNTb3J0SWNvbikucmVtb3ZlQ2xhc3MoY2xhc3Nlcy5zU29ydEpVSUFzYyArIFwiIFwiICsgY2xhc3Nlcy5zU29ydEpVSURlc2MgKyBcIiBcIiArIGNsYXNzZXMuc1NvcnRKVUkgKyBcIiBcIiArIGNsYXNzZXMuc1NvcnRKVUlBc2NBbGxvd2VkICsgXCIgXCIgKyBjbGFzc2VzLnNTb3J0SlVJRGVzY0FsbG93ZWQpLmFkZENsYXNzKGNvbHVtbnNbY29sSWR4XSA9PSAnYXNjJyA/IGNsYXNzZXMuc1NvcnRKVUlBc2MgOiBjb2x1bW5zW2NvbElkeF0gPT0gJ2Rlc2MnID8gY2xhc3Nlcy5zU29ydEpVSURlc2MgOiBjb2x1bW4uc1NvcnRpbmdDbGFzc0pVSSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIF9faHRtbEVzY2FwZUVudGl0aWVzID0gZnVuY3Rpb24gX19odG1sRXNjYXBlRW50aXRpZXMoZCkge1xuICAgIHJldHVybiB0eXBlb2YgZCA9PT0gJ3N0cmluZycgPyBkLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7JykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpIDogZDtcbiAgfTtcblxuICBEYXRhVGFibGUucmVuZGVyID0ge1xuICAgIG51bWJlcjogZnVuY3Rpb24gbnVtYmVyKHRob3VzYW5kcywgZGVjaW1hbCwgcHJlY2lzaW9uLCBwcmVmaXgsIHBvc3RmaXgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpc3BsYXk6IGZ1bmN0aW9uIGRpc3BsYXkoZCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgZCAhPT0gJ251bWJlcicgJiYgdHlwZW9mIGQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbmVnYXRpdmUgPSBkIDwgMCA/ICctJyA6ICcnO1xuICAgICAgICAgIHZhciBmbG8gPSBwYXJzZUZsb2F0KGQpO1xuXG4gICAgICAgICAgaWYgKGlzTmFOKGZsbykpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2h0bWxFc2NhcGVFbnRpdGllcyhkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmbG8gPSBmbG8udG9GaXhlZChwcmVjaXNpb24pO1xuICAgICAgICAgIGQgPSBNYXRoLmFicyhmbG8pO1xuICAgICAgICAgIHZhciBpbnRQYXJ0ID0gcGFyc2VJbnQoZCwgMTApO1xuICAgICAgICAgIHZhciBmbG9hdFBhcnQgPSBwcmVjaXNpb24gPyBkZWNpbWFsICsgKGQgLSBpbnRQYXJ0KS50b0ZpeGVkKHByZWNpc2lvbikuc3Vic3RyaW5nKDIpIDogJyc7XG4gICAgICAgICAgcmV0dXJuIG5lZ2F0aXZlICsgKHByZWZpeCB8fCAnJykgKyBpbnRQYXJ0LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgdGhvdXNhbmRzKSArIGZsb2F0UGFydCArIChwb3N0Zml4IHx8ICcnKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIHRleHQ6IGZ1bmN0aW9uIHRleHQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXNwbGF5OiBfX2h0bWxFc2NhcGVFbnRpdGllc1xuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gX2ZuRXh0ZXJuQXBpRnVuYyhmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYXJncyA9IFtfZm5TZXR0aW5nc0Zyb21Ob2RlKHRoaXNbRGF0YVRhYmxlLmV4dC5pQXBpSW5kZXhdKV0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgICAgcmV0dXJuIERhdGFUYWJsZS5leHQuaW50ZXJuYWxbZm5dLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH1cblxuICAkLmV4dGVuZChEYXRhVGFibGUuZXh0LmludGVybmFsLCB7XG4gICAgX2ZuRXh0ZXJuQXBpRnVuYzogX2ZuRXh0ZXJuQXBpRnVuYyxcbiAgICBfZm5CdWlsZEFqYXg6IF9mbkJ1aWxkQWpheCxcbiAgICBfZm5BamF4VXBkYXRlOiBfZm5BamF4VXBkYXRlLFxuICAgIF9mbkFqYXhQYXJhbWV0ZXJzOiBfZm5BamF4UGFyYW1ldGVycyxcbiAgICBfZm5BamF4VXBkYXRlRHJhdzogX2ZuQWpheFVwZGF0ZURyYXcsXG4gICAgX2ZuQWpheERhdGFTcmM6IF9mbkFqYXhEYXRhU3JjLFxuICAgIF9mbkFkZENvbHVtbjogX2ZuQWRkQ29sdW1uLFxuICAgIF9mbkNvbHVtbk9wdGlvbnM6IF9mbkNvbHVtbk9wdGlvbnMsXG4gICAgX2ZuQWRqdXN0Q29sdW1uU2l6aW5nOiBfZm5BZGp1c3RDb2x1bW5TaXppbmcsXG4gICAgX2ZuVmlzaWJsZVRvQ29sdW1uSW5kZXg6IF9mblZpc2libGVUb0NvbHVtbkluZGV4LFxuICAgIF9mbkNvbHVtbkluZGV4VG9WaXNpYmxlOiBfZm5Db2x1bW5JbmRleFRvVmlzaWJsZSxcbiAgICBfZm5WaXNibGVDb2x1bW5zOiBfZm5WaXNibGVDb2x1bW5zLFxuICAgIF9mbkdldENvbHVtbnM6IF9mbkdldENvbHVtbnMsXG4gICAgX2ZuQ29sdW1uVHlwZXM6IF9mbkNvbHVtblR5cGVzLFxuICAgIF9mbkFwcGx5Q29sdW1uRGVmczogX2ZuQXBwbHlDb2x1bW5EZWZzLFxuICAgIF9mbkh1bmdhcmlhbk1hcDogX2ZuSHVuZ2FyaWFuTWFwLFxuICAgIF9mbkNhbWVsVG9IdW5nYXJpYW46IF9mbkNhbWVsVG9IdW5nYXJpYW4sXG4gICAgX2ZuTGFuZ3VhZ2VDb21wYXQ6IF9mbkxhbmd1YWdlQ29tcGF0LFxuICAgIF9mbkJyb3dzZXJEZXRlY3Q6IF9mbkJyb3dzZXJEZXRlY3QsXG4gICAgX2ZuQWRkRGF0YTogX2ZuQWRkRGF0YSxcbiAgICBfZm5BZGRUcjogX2ZuQWRkVHIsXG4gICAgX2ZuTm9kZVRvRGF0YUluZGV4OiBfZm5Ob2RlVG9EYXRhSW5kZXgsXG4gICAgX2ZuTm9kZVRvQ29sdW1uSW5kZXg6IF9mbk5vZGVUb0NvbHVtbkluZGV4LFxuICAgIF9mbkdldENlbGxEYXRhOiBfZm5HZXRDZWxsRGF0YSxcbiAgICBfZm5TZXRDZWxsRGF0YTogX2ZuU2V0Q2VsbERhdGEsXG4gICAgX2ZuU3BsaXRPYmpOb3RhdGlvbjogX2ZuU3BsaXRPYmpOb3RhdGlvbixcbiAgICBfZm5HZXRPYmplY3REYXRhRm46IF9mbkdldE9iamVjdERhdGFGbixcbiAgICBfZm5TZXRPYmplY3REYXRhRm46IF9mblNldE9iamVjdERhdGFGbixcbiAgICBfZm5HZXREYXRhTWFzdGVyOiBfZm5HZXREYXRhTWFzdGVyLFxuICAgIF9mbkNsZWFyVGFibGU6IF9mbkNsZWFyVGFibGUsXG4gICAgX2ZuRGVsZXRlSW5kZXg6IF9mbkRlbGV0ZUluZGV4LFxuICAgIF9mbkludmFsaWRhdGU6IF9mbkludmFsaWRhdGUsXG4gICAgX2ZuR2V0Um93RWxlbWVudHM6IF9mbkdldFJvd0VsZW1lbnRzLFxuICAgIF9mbkNyZWF0ZVRyOiBfZm5DcmVhdGVUcixcbiAgICBfZm5CdWlsZEhlYWQ6IF9mbkJ1aWxkSGVhZCxcbiAgICBfZm5EcmF3SGVhZDogX2ZuRHJhd0hlYWQsXG4gICAgX2ZuRHJhdzogX2ZuRHJhdyxcbiAgICBfZm5SZURyYXc6IF9mblJlRHJhdyxcbiAgICBfZm5BZGRPcHRpb25zSHRtbDogX2ZuQWRkT3B0aW9uc0h0bWwsXG4gICAgX2ZuRGV0ZWN0SGVhZGVyOiBfZm5EZXRlY3RIZWFkZXIsXG4gICAgX2ZuR2V0VW5pcXVlVGhzOiBfZm5HZXRVbmlxdWVUaHMsXG4gICAgX2ZuRmVhdHVyZUh0bWxGaWx0ZXI6IF9mbkZlYXR1cmVIdG1sRmlsdGVyLFxuICAgIF9mbkZpbHRlckNvbXBsZXRlOiBfZm5GaWx0ZXJDb21wbGV0ZSxcbiAgICBfZm5GaWx0ZXJDdXN0b206IF9mbkZpbHRlckN1c3RvbSxcbiAgICBfZm5GaWx0ZXJDb2x1bW46IF9mbkZpbHRlckNvbHVtbixcbiAgICBfZm5GaWx0ZXI6IF9mbkZpbHRlcixcbiAgICBfZm5GaWx0ZXJDcmVhdGVTZWFyY2g6IF9mbkZpbHRlckNyZWF0ZVNlYXJjaCxcbiAgICBfZm5Fc2NhcGVSZWdleDogX2ZuRXNjYXBlUmVnZXgsXG4gICAgX2ZuRmlsdGVyRGF0YTogX2ZuRmlsdGVyRGF0YSxcbiAgICBfZm5GZWF0dXJlSHRtbEluZm86IF9mbkZlYXR1cmVIdG1sSW5mbyxcbiAgICBfZm5VcGRhdGVJbmZvOiBfZm5VcGRhdGVJbmZvLFxuICAgIF9mbkluZm9NYWNyb3M6IF9mbkluZm9NYWNyb3MsXG4gICAgX2ZuSW5pdGlhbGlzZTogX2ZuSW5pdGlhbGlzZSxcbiAgICBfZm5Jbml0Q29tcGxldGU6IF9mbkluaXRDb21wbGV0ZSxcbiAgICBfZm5MZW5ndGhDaGFuZ2U6IF9mbkxlbmd0aENoYW5nZSxcbiAgICBfZm5GZWF0dXJlSHRtbExlbmd0aDogX2ZuRmVhdHVyZUh0bWxMZW5ndGgsXG4gICAgX2ZuRmVhdHVyZUh0bWxQYWdpbmF0ZTogX2ZuRmVhdHVyZUh0bWxQYWdpbmF0ZSxcbiAgICBfZm5QYWdlQ2hhbmdlOiBfZm5QYWdlQ2hhbmdlLFxuICAgIF9mbkZlYXR1cmVIdG1sUHJvY2Vzc2luZzogX2ZuRmVhdHVyZUh0bWxQcm9jZXNzaW5nLFxuICAgIF9mblByb2Nlc3NpbmdEaXNwbGF5OiBfZm5Qcm9jZXNzaW5nRGlzcGxheSxcbiAgICBfZm5GZWF0dXJlSHRtbFRhYmxlOiBfZm5GZWF0dXJlSHRtbFRhYmxlLFxuICAgIF9mblNjcm9sbERyYXc6IF9mblNjcm9sbERyYXcsXG4gICAgX2ZuQXBwbHlUb0NoaWxkcmVuOiBfZm5BcHBseVRvQ2hpbGRyZW4sXG4gICAgX2ZuQ2FsY3VsYXRlQ29sdW1uV2lkdGhzOiBfZm5DYWxjdWxhdGVDb2x1bW5XaWR0aHMsXG4gICAgX2ZuVGhyb3R0bGU6IF9mblRocm90dGxlLFxuICAgIF9mbkNvbnZlcnRUb1dpZHRoOiBfZm5Db252ZXJ0VG9XaWR0aCxcbiAgICBfZm5HZXRXaWRlc3ROb2RlOiBfZm5HZXRXaWRlc3ROb2RlLFxuICAgIF9mbkdldE1heExlblN0cmluZzogX2ZuR2V0TWF4TGVuU3RyaW5nLFxuICAgIF9mblN0cmluZ1RvQ3NzOiBfZm5TdHJpbmdUb0NzcyxcbiAgICBfZm5Tb3J0RmxhdHRlbjogX2ZuU29ydEZsYXR0ZW4sXG4gICAgX2ZuU29ydDogX2ZuU29ydCxcbiAgICBfZm5Tb3J0QXJpYTogX2ZuU29ydEFyaWEsXG4gICAgX2ZuU29ydExpc3RlbmVyOiBfZm5Tb3J0TGlzdGVuZXIsXG4gICAgX2ZuU29ydEF0dGFjaExpc3RlbmVyOiBfZm5Tb3J0QXR0YWNoTGlzdGVuZXIsXG4gICAgX2ZuU29ydGluZ0NsYXNzZXM6IF9mblNvcnRpbmdDbGFzc2VzLFxuICAgIF9mblNvcnREYXRhOiBfZm5Tb3J0RGF0YSxcbiAgICBfZm5TYXZlU3RhdGU6IF9mblNhdmVTdGF0ZSxcbiAgICBfZm5Mb2FkU3RhdGU6IF9mbkxvYWRTdGF0ZSxcbiAgICBfZm5TZXR0aW5nc0Zyb21Ob2RlOiBfZm5TZXR0aW5nc0Zyb21Ob2RlLFxuICAgIF9mbkxvZzogX2ZuTG9nLFxuICAgIF9mbk1hcDogX2ZuTWFwLFxuICAgIF9mbkJpbmRBY3Rpb246IF9mbkJpbmRBY3Rpb24sXG4gICAgX2ZuQ2FsbGJhY2tSZWc6IF9mbkNhbGxiYWNrUmVnLFxuICAgIF9mbkNhbGxiYWNrRmlyZTogX2ZuQ2FsbGJhY2tGaXJlLFxuICAgIF9mbkxlbmd0aE92ZXJmbG93OiBfZm5MZW5ndGhPdmVyZmxvdyxcbiAgICBfZm5SZW5kZXJlcjogX2ZuUmVuZGVyZXIsXG4gICAgX2ZuRGF0YVNvdXJjZTogX2ZuRGF0YVNvdXJjZSxcbiAgICBfZm5Sb3dBdHRyaWJ1dGVzOiBfZm5Sb3dBdHRyaWJ1dGVzLFxuICAgIF9mbkV4dGVuZDogX2ZuRXh0ZW5kLFxuICAgIF9mbkNhbGN1bGF0ZUVuZDogZnVuY3Rpb24gX2ZuQ2FsY3VsYXRlRW5kKCkge31cbiAgfSk7XG4gICQuZm4uZGF0YVRhYmxlID0gRGF0YVRhYmxlO1xuICBEYXRhVGFibGUuJCA9ICQ7XG4gICQuZm4uZGF0YVRhYmxlU2V0dGluZ3MgPSBEYXRhVGFibGUuc2V0dGluZ3M7XG4gICQuZm4uZGF0YVRhYmxlRXh0ID0gRGF0YVRhYmxlLmV4dDtcblxuICAkLmZuLkRhdGFUYWJsZSA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgcmV0dXJuICQodGhpcykuZGF0YVRhYmxlKG9wdHMpLmFwaSgpO1xuICB9O1xuXG4gICQuZWFjaChEYXRhVGFibGUsIGZ1bmN0aW9uIChwcm9wLCB2YWwpIHtcbiAgICAkLmZuLkRhdGFUYWJsZVtwcm9wXSA9IHZhbDtcbiAgfSk7XG4gIHJldHVybiAkLmZuLmRhdGFUYWJsZTtcbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgSW5uZXJGb3JtQnV0dG9uID0ge1xuICBfcHJvcDoge1xuICAgIGVsZW06IG51bGwsXG4gICAgaW5uZXJCdXR0b25Db25maWc6IG51bGwsXG4gICAgZm9ybVJ1bnRpbWVJbnN0YW5jZTogbnVsbCxcbiAgICBsaXN0QnV0dG9uUE86IG51bGwsXG4gICAgZm9ybVJ1bnRpbWVDYXRlZ29yeTogXCJcIlxuICB9LFxuICBJbnN0YW5jZTogZnVuY3Rpb24gSW5zdGFuY2UoaW5uZXJCdXR0b25Db25maWcsIGZvcm1SdW50aW1lSW5zdGFuY2UsIGxpc3RCdXR0b25QTywgZm9ybVJ1bnRpbWVDYXRlZ29yeSkge1xuICAgIHZhciBlbGVtID0gJCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJvcGVyYXRpb24tYnV0dG9uIG9wZXJhdGlvbi1idXR0b24tcHJpbWFyeVwiIGlkPVwiJyArIGlubmVyQnV0dG9uQ29uZmlnLmlkICsgJ1wiPjxzcGFuPicgKyBpbm5lckJ1dHRvbkNvbmZpZy5jYXB0aW9uICsgJzwvc3Bhbj48L2J1dHRvbj4nKTtcbiAgICBlbGVtLmJpbmQoXCJjbGlja1wiLCB7XG4gICAgICBcImlubmVyQnV0dG9uQ29uZmlnXCI6IGlubmVyQnV0dG9uQ29uZmlnLFxuICAgICAgXCJmb3JtUnVudGltZUluc3RhbmNlXCI6IGZvcm1SdW50aW1lSW5zdGFuY2UsXG4gICAgICBcImxpc3RCdXR0b25QT1wiOiBsaXN0QnV0dG9uUE8sXG4gICAgICBcImZvcm1SdW50aW1lQ2F0ZWdvcnlcIjogZm9ybVJ1bnRpbWVDYXRlZ29yeSxcbiAgICAgIFwiX3RoaXNcIjogdGhpc1xuICAgIH0sIHRoaXMuQnV0dG9uQ2xpY2tFdmVudCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVsZW06IGVsZW1cbiAgICB9O1xuICB9LFxuICBHZXRQcm9wOiBmdW5jdGlvbiBHZXRQcm9wKHNlbmRlcikge1xuICAgIHJldHVybiB7XG4gICAgICBlbGVtOiBzZW5kZXIuZGF0YS5fdGhpcyxcbiAgICAgIGlubmVyQnV0dG9uQ29uZmlnOiBzZW5kZXIuZGF0YS5pbm5lckJ1dHRvbkNvbmZpZyxcbiAgICAgIGZvcm1SdW50aW1lSW5zdGFuY2U6IHNlbmRlci5kYXRhLmZvcm1SdW50aW1lSW5zdGFuY2UsXG4gICAgICBsaXN0QnV0dG9uUE86IHNlbmRlci5kYXRhLmxpc3RCdXR0b25QTyxcbiAgICAgIGZvcm1SdW50aW1lQ2F0ZWdvcnk6IHNlbmRlci5kYXRhLmZvcm1SdW50aW1lQ2F0ZWdvcnlcbiAgICB9O1xuICB9LFxuICBCdXR0b25DbGlja0V2ZW50OiBmdW5jdGlvbiBCdXR0b25DbGlja0V2ZW50KHNlbmRlcikge1xuICAgIERpYWxvZ1V0aWxpdHkuRnJhbWVfQ2xvc2VEaWFsb2cod2luZG93KTtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIElubmVyRm9ybUNsb3NlQnV0dG9uID0ge1xuICBfcHJvcDogSW5uZXJGb3JtQnV0dG9uLl9wcm9wLFxuICBJbnN0YW5jZTogSW5uZXJGb3JtQnV0dG9uLkluc3RhbmNlLFxuICBHZXRCdXR0b25FbGVtOiBJbm5lckZvcm1CdXR0b24uR2V0QnV0dG9uRWxlbSxcbiAgQnV0dG9uQ2xpY2tFdmVudDogZnVuY3Rpb24gQnV0dG9uQ2xpY2tFdmVudChzZW5kZXIpIHtcbiAgICBEaWFsb2dVdGlsaXR5LkZyYW1lX0Nsb3NlRGlhbG9nKHdpbmRvdyk7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBJbm5lckZvcm1Kc0NsaWVudEJ1dHRvbiA9IHtcbiAgX3Byb3A6IElubmVyRm9ybUJ1dHRvbi5fcHJvcCxcbiAgSW5zdGFuY2U6IElubmVyRm9ybUJ1dHRvbi5JbnN0YW5jZSxcbiAgR2V0QnV0dG9uRWxlbTogSW5uZXJGb3JtQnV0dG9uLkdldEJ1dHRvbkVsZW0sXG4gIEJ1dHRvbkNsaWNrRXZlbnQ6IGZ1bmN0aW9uIEJ1dHRvbkNsaWNrRXZlbnQoc2VuZGVyKSB7XG4gICAgdmFyIGlubmVyQnV0dG9uQ29uZmlnID0gc2VuZGVyLmRhdGEuaW5uZXJCdXR0b25Db25maWc7XG4gICAgdmFyIGFjdGlvblR5cGUgPSBpbm5lckJ1dHRvbkNvbmZpZy5hY3Rpb25UeXBlO1xuXG4gICAgaWYgKGFjdGlvblR5cGUgPT0gXCJyZWxvYWREYXRhXCIpIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5wcmludCgpO1xuICAgIH1cbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIElubmVyRm9ybVNhdmVCdXR0b24gPSB7XG4gIF9wcm9wOiBJbm5lckZvcm1CdXR0b24uX3Byb3AsXG4gIEluc3RhbmNlOiBJbm5lckZvcm1CdXR0b24uSW5zdGFuY2UsXG4gIEdldEJ1dHRvbkVsZW06IElubmVyRm9ybUJ1dHRvbi5HZXRCdXR0b25FbGVtLFxuICBCdXR0b25DbGlja0V2ZW50OiBmdW5jdGlvbiBCdXR0b25DbGlja0V2ZW50KHNlbmRlcikge1xuICAgIHZhciBpbm5lckJ1dHRvbkNvbmZpZyA9IHNlbmRlci5kYXRhLmlubmVyQnV0dG9uQ29uZmlnO1xuICAgIHZhciBmb3JtUnVudGltZUluc3RhbmNlID0gc2VuZGVyLmRhdGEuZm9ybVJ1bnRpbWVJbnN0YW5jZTtcbiAgICB2YXIgbGlzdEJ1dHRvblBPID0gc2VuZGVyLmRhdGEubGlzdEJ1dHRvblBPO1xuICAgIHZhciBfdGhpcyA9IHNlbmRlci5kYXRhLl90aGlzO1xuICAgIHZhciBzYXZlQW5kQ2xvc2UgPSBpbm5lckJ1dHRvbkNvbmZpZy5zYXZlQW5kQ2xvc2U7XG4gICAgdmFyIHZhbGlkYXRlUmVzdWx0ID0gVmFsaWRhdGVSdWxlc1J1bnRpbWUuVmFsaWRhdGVTdWJtaXRFbmFibGUoKTtcbiAgICBfdGhpcy5fcHJvcCA9IElubmVyRm9ybUJ1dHRvbi5HZXRQcm9wKHNlbmRlcik7XG5cbiAgICBpZiAoVmFsaWRhdGVSdWxlc1J1bnRpbWUuQWxlcnRWYWxpZGF0ZUVycm9ycyh2YWxpZGF0ZVJlc3VsdCkpIHtcbiAgICAgIHZhciBmb3JtRGF0YUNvbXBsZXhQTyA9IGZvcm1SdW50aW1lSW5zdGFuY2UuU2VyaWFsaXphdGlvbkZvcm1EYXRhKCk7XG4gICAgICB2YXIgb3BlcmF0aW9uVHlwZSA9IGZvcm1SdW50aW1lSW5zdGFuY2UuX1Byb3BfQ29uZmlnLk9wZXJhdGlvblR5cGU7XG4gICAgICBEaWFsb2dVdGlsaXR5LkFsZXJ0TG9hZGluZyh3aW5kb3csIERpYWxvZ1V0aWxpdHkuRGlhbG9nTG9hZGluZ0lkLCB7XG4gICAgICAgIHRpdGxlOiBcIuezu+e7n+aPkOekulwiXG4gICAgICB9LCBcIuezu+e7n+WkhOeQhuS4rSzor7fnqI3lgJkuLi5cIik7XG4gICAgICBSdW50aW1lR2VuZXJhbEluc3RhbmNlLlN1Ym1pdEZvcm1EYXRhQ29tcGxleFBPTGlzdFRvU2VydmVyKGZvcm1EYXRhQ29tcGxleFBPLCBmb3JtRGF0YUNvbXBsZXhQTy5yZWNvcmRJZCwgaW5uZXJCdXR0b25Db25maWcuaWQsIGxpc3RCdXR0b25QTy5idXR0b25JZCwgb3BlcmF0aW9uVHlwZSwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgICBpZiAodGhpcy5fcHJvcC5mb3JtUnVudGltZUNhdGVnb3J5ID09IEZvcm1SdW50aW1lU2luZ2xlUGFnZU9iamVjdC5GT1JNX1JVTlRJTUVfQ0FURUdPUllfTElTVCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5fcHJvcCk7XG4gICAgICAgICAgICB2YXIgbGlzdEZvcm1CdXR0b25FbGVtSWQgPSBmb3JtUnVudGltZUluc3RhbmNlLkdldE9wZW5lZExpc3RGb3JtQnV0dG9uSWQoKTtcbiAgICAgICAgICAgIHdpbmRvdy5PcGVuZXJXaW5kb3dPYmouV0xEQ1RfTGlzdFRhYmxlQ29udGFpbmVyLlRyeVJlbG9hZEZvckxpc3RGb3JtQnV0dG9uKGxpc3RGb3JtQnV0dG9uRWxlbUlkKTtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgRGlhbG9nVXRpbGl0eS5DbG9zZURpYWxvZyhEaWFsb2dVdGlsaXR5LkRpYWxvZ0xvYWRpbmdJZCk7XG4gICAgICAgICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnQod2luZG93LCBEaWFsb2dVdGlsaXR5LkRpYWxvZ0lkMDIsIHt9LCByZXN1bHQubWVzc2FnZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIERpYWxvZ1V0aWxpdHkuRnJhbWVfQ2xvc2VEaWFsb2cod2luZG93KTtcbiAgICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fcHJvcC5mb3JtUnVudGltZUNhdGVnb3J5ID09IEZvcm1SdW50aW1lU2luZ2xlUGFnZU9iamVjdC5GT1JNX1JVTlRJTUVfQ0FURUdPUllfSU5ERVBFTkRFTkNFKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcHJvcC5mb3JtUnVudGltZUluc3RhbmNlLl9Gb3JtUE8uZm9ybU9wZXJhdGlvblR5cGUgPT0gXCJkZXZcIikge1xuICAgICAgICAgICAgICB2YXIgZGV2T3BlcmF0aW9uRW5kRnVuYyA9IEJhc2VVdGlsaXR5LkdldFVybFBhcmFWYWx1ZShcImRldk9wZXJhdGlvbkVuZEZ1bmNcIik7XG5cbiAgICAgICAgICAgICAgaWYgKFN0cmluZ1V0aWxpdHkuSXNOb3ROdWxsT3JFbXB0eShkZXZPcGVyYXRpb25FbmRGdW5jKSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5PcGVuZXJXaW5kb3dPYmpbZGV2T3BlcmF0aW9uRW5kRnVuY10odGhpcy5fcHJvcCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodGhpcy5fcHJvcC5pbm5lckJ1dHRvbkNvbmZpZy5zYXZlQW5kQ2xvc2UgPT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBEaWFsb2dVdGlsaXR5LkNsb3NlRGlhbG9nKERpYWxvZ1V0aWxpdHkuRGlhbG9nTG9hZGluZ0lkKTtcbiAgICAgICAgICAgICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnQod2luZG93LCBEaWFsb2dVdGlsaXR5LkRpYWxvZ0lkMDIsIHt9LCByZXN1bHQubWVzc2FnZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBEaWFsb2dVdGlsaXR5LkZyYW1lX0Nsb3NlRGlhbG9nKHdpbmRvdyk7XG4gICAgICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBEaWFsb2dVdGlsaXR5LkNsb3NlRGlhbG9nKERpYWxvZ1V0aWxpdHkuRGlhbG9nTG9hZGluZ0lkKTtcbiAgICAgICAgICAgICAgRGlhbG9nVXRpbGl0eS5BbGVydCh3aW5kb3csIERpYWxvZ1V0aWxpdHkuRGlhbG9nSWQwMiwge30sIHJlc3VsdC5tZXNzYWdlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNhdmVBbmRDbG9zZSkge1xuICAgICAgICAgICAgICAgICAgRGlhbG9nVXRpbGl0eS5BbGVydFRleHQoXCLlhbPpl63nqpflj6Ms5pyq5a6M5oiQIVwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgRGlhbG9nVXRpbGl0eS5DbG9zZURpYWxvZyhEaWFsb2dVdGlsaXR5LkRpYWxvZ0xvYWRpbmdJZCk7XG4gICAgICAgIH1cbiAgICAgIH0sIF90aGlzKTtcbiAgICB9XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBXRkRDVF9CYWlkdU1hcENvbnRhaW5lciA9IHtcbiAgX3Byb3A6IHtcbiAgICBlbGVtSWQ6IFwiXCIsXG4gICAgY2xpZW50SW5zdGFuY2VOYW1lOiBcIlwiLFxuICAgICRzaW5nbGVDb250cm9sRWxlbTogbnVsbCxcbiAgICBtYXBPYmo6IG51bGwsXG4gICAgbWFwU2VsZWN0ZWRMbmdMYXQ6IFwiXCIsXG4gICAgbWFwRWRpdE9ianM6IFtdLFxuICAgIG1hcFZpZXdPYmpzOiBbXSxcbiAgICBvbGRFZGl0RGF0YTogbnVsbCxcbiAgICBvcGVyYXRpb25UeXBlOiBcIlwiXG4gIH0sXG4gIExvYWRCYWlEdUpzQ29tcGxldGVkOiBmdW5jdGlvbiBMb2FkQmFpRHVKc0NvbXBsZXRlZCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5fcHJvcC5tYXBPYmogPSBuZXcgQk1hcEdMLk1hcCh0aGlzLl9wcm9wLmVsZW1JZCk7XG5cbiAgICB0aGlzLl9wcm9wLm1hcE9iai5jZW50ZXJBbmRab29tKG5ldyBCTWFwR0wuUG9pbnQoMTE0LjU0MjAwMTMyNjQ1MDk3LCAyMi43NTQxNDI3OTU5MDc4MjUpLCAxNik7XG5cbiAgICB0aGlzLl9wcm9wLm1hcE9iai5lbmFibGVTY3JvbGxXaGVlbFpvb20odHJ1ZSk7XG5cbiAgICB0aGlzLl9wcm9wLm1hcE9iai5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBfdGhpcy5fcHJvcC5tYXBTZWxlY3RlZExuZ0xhdCA9IGUubGF0bG5nO1xuICAgIH0pO1xuXG4gICAgaWYgKCFCYXNlVXRpbGl0eS5Jc1ZpZXdPcGVyYXRpb24odGhpcy5fcHJvcC5vcGVyYXRpb25UeXBlKSkge1xuICAgICAgdGhpcy5Jbml0RHJhd0NvbnRyb2woKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcHJvcC5vbGRFZGl0RGF0YSkge1xuICAgICAgY29uc29sZS5sb2codGhpcy5fcHJvcC5vbGRFZGl0RGF0YSk7XG4gICAgICB2YXIgbWFwRGF0YSA9IHRoaXMuX3Byb3Aub2xkRWRpdERhdGE7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFwRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAobWFwRGF0YVtpXS50eXBlID09IFwicG9pbnRcIikge1xuICAgICAgICAgIHZhciBwb2ludCA9IG5ldyBCTWFwR0wuUG9pbnQobWFwRGF0YVtpXS5wYXRoLmxuZywgbWFwRGF0YVtpXS5wYXRoLmxhdCk7XG4gICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBCTWFwR0wuTWFya2VyKHBvaW50LCB7fSk7XG5cbiAgICAgICAgICB0aGlzLl9wcm9wLm1hcE9iai5hZGRPdmVybGF5KG1hcmtlcik7XG5cbiAgICAgICAgICB0aGlzLl9wcm9wLm1hcE9iai5wYW5Ubyhwb2ludCk7XG5cbiAgICAgICAgICB0aGlzLmFkZFRvTWFwRWRpdE9ianMoXCJwb2ludFwiLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBJbml0aWFsaXplQXRJbnN0YW5jZTogZnVuY3Rpb24gSW5pdGlhbGl6ZUF0SW5zdGFuY2UoaW5pdGlhbGl6ZVBhcmFzLCBjbGllbnRJbnN0YW5jZU5hbWUsIGVsZW1JZCkge30sXG4gIFJlbmRlcmVyQ2hhaW46IGZ1bmN0aW9uIFJlbmRlcmVyQ2hhaW4oX3JlbmRlcmVyQ2hhaW5QYXJhcykge1xuICAgIGNvbnNvbGUubG9nKF9yZW5kZXJlckNoYWluUGFyYXMpO1xuICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSBfcmVuZGVyZXJDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgICB0aGlzLl9wcm9wLmVsZW1JZCA9ICRzaW5nbGVDb250cm9sRWxlbS5hdHRyKFwiaWRcIik7XG4gICAgdGhpcy5fcHJvcC5jbGllbnRJbnN0YW5jZU5hbWUgPSAkc2luZ2xlQ29udHJvbEVsZW0uYXR0cihcImNsaWVudF9pbnN0YW5jZV9uYW1lXCIpO1xuICAgIHRoaXMuX3Byb3AuJHNpbmdsZUNvbnRyb2xFbGVtID0gJHNpbmdsZUNvbnRyb2xFbGVtO1xuICAgIHRoaXMuX3Byb3Aub3BlcmF0aW9uVHlwZSA9IF9yZW5kZXJlckNoYWluUGFyYXMuZm9ybVJ1bnRpbWVJbnN0YW5jZS5fUHJvcF9Db25maWcuT3BlcmF0aW9uVHlwZTtcbiAgICAkKFwiI1wiICsgdGhpcy5fcHJvcC5lbGVtSWQpLmFkZENsYXNzKFwibWFwLWNvbnRyb2wtd3JhcFwiKTtcbiAgICB2YXIgbG9hZEZ1bmMgPSB0aGlzLl9wcm9wLmNsaWVudEluc3RhbmNlTmFtZSArIFwiLkxvYWRCYWlEdUpzQ29tcGxldGVkXCI7XG4gICAgQmFpZHVNYXBVdGlsaXR5LkxvYWRKc0NvbXBsZXRlZChsb2FkRnVuYyk7XG4gIH0sXG4gIFJlbmRlcmVyRGF0YUNoYWluOiBmdW5jdGlvbiBSZW5kZXJlckRhdGFDaGFpbigpIHt9LFxuICBHZXRWYWx1ZTogZnVuY3Rpb24gR2V0VmFsdWUoJGVsZW0sIG9yaWdpbmFsRGF0YSwgcGFyYXMpIHtcbiAgICB2YXIgbWFwRGF0YSA9IFtdO1xuXG4gICAgaWYgKHRoaXMuX3Byb3AubWFwRWRpdE9ianMgJiYgdGhpcy5fcHJvcC5tYXBFZGl0T2Jqcy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3Byb3AubWFwRWRpdE9ianMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3AubWFwRWRpdE9ianNbaV0udHlwZSA9PSBcInBvaW50XCIpIHtcbiAgICAgICAgICBtYXBEYXRhLnB1c2goe1xuICAgICAgICAgICAgXCJ0eXBlXCI6IHRoaXMuX3Byb3AubWFwRWRpdE9ianNbaV0udHlwZSxcbiAgICAgICAgICAgIFwicGF0aFwiOiB0aGlzLl9wcm9wLm1hcEVkaXRPYmpzW2ldLm9iai5nZXRQb3NpdGlvbigpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWFwRGF0YSA9IEpzb25VdGlsaXR5Lkpzb25Ub1N0cmluZyhtYXBEYXRhKTtcbiAgICB9XG5cbiAgICBvcmlnaW5hbERhdGEudmFsdWUgPSBtYXBEYXRhO1xuICAgIHJldHVybiBvcmlnaW5hbERhdGE7XG4gIH0sXG4gIFNldFZhbHVlOiBmdW5jdGlvbiBTZXRWYWx1ZSgkZWxlbSwgZmllbGRQTywgcmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvLCBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcykge1xuICAgIGlmIChmaWVsZFBPICYmIGZpZWxkUE8udmFsdWUpIHtcbiAgICAgIHRoaXMuX3Byb3Aub2xkRWRpdERhdGEgPSBKc29uVXRpbGl0eS5TdHJpbmdUb0pzb24oZmllbGRQTy52YWx1ZSk7XG4gICAgfVxuICB9LFxuICBUb1ZpZXdTdGF0dXM6IGZ1bmN0aW9uIFRvVmlld1N0YXR1cygkZWxlbSwgZmllbGRQTywgcmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvLCBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcykge30sXG4gIGFkZFRvTWFwRWRpdE9ianM6IGZ1bmN0aW9uIGFkZFRvTWFwRWRpdE9ianModHlwZSwgZWRpdE9iaikge1xuICAgIHRoaXMuX3Byb3AubWFwRWRpdE9ianMucHVzaCh7XG4gICAgICBcInR5cGVcIjogdHlwZSxcbiAgICAgIFwib2JqXCI6IGVkaXRPYmpcbiAgICB9KTtcbiAgfSxcbiAgSW5pdERyYXdDb250cm9sOiBmdW5jdGlvbiBJbml0RHJhd0NvbnRyb2woKSB7XG4gICAgdmFyICRzaW5nbGVDb250cm9sRWxlbSA9IHRoaXMuX3Byb3AuJHNpbmdsZUNvbnRyb2xFbGVtO1xuICAgICRzaW5nbGVDb250cm9sRWxlbS5wYXJlbnQoKS5hZGRDbGFzcyhcIm1hcC1jb250cm9sLXdyYXBcIik7XG4gICAgdmFyICRkcmF3Q29udHJvbFdyYXAgPSAkKFwiPGRpdiBjbGFzcz0nbWFwLW9wZXJhdGlvbi1idXR0b24td3JhcCc+PC9kaXY+XCIpO1xuICAgIHZhciAkYXBwZW5kQWRkUG9pbnRDb250cm9sID0gJChcIjxkaXYgY2xhc3M9J21hcC1vcGVyYXRpb24tYnV0dG9uIG1hcC1vcGVyYXRpb24tYnV0dG9uLWFkZC1wb2ludCcgdGl0bGU9J+a3u+WKoOWumuS9jeeCuSc+PC9kaXY+XCIpO1xuICAgIHZhciAkYXBwZW5kQ2xlYXJDb250cm9sID0gJChcIjxkaXYgY2xhc3M9J21hcC1vcGVyYXRpb24tYnV0dG9uIG1hcC1vcGVyYXRpb24tYnV0dG9uLWNsZWFyJyB0aXRsZT0n5riF56m66K6+572uJz48L2Rpdj5cIik7XG4gICAgJGRyYXdDb250cm9sV3JhcC5hcHBlbmQoJGFwcGVuZEFkZFBvaW50Q29udHJvbCk7XG4gICAgJGRyYXdDb250cm9sV3JhcC5hcHBlbmQoJGFwcGVuZENsZWFyQ29udHJvbCk7XG4gICAgJHNpbmdsZUNvbnRyb2xFbGVtLnBhcmVudCgpLmFwcGVuZCgkZHJhd0NvbnRyb2xXcmFwKTtcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAkYXBwZW5kQWRkUG9pbnRDb250cm9sLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMuX3Byb3AubWFwU2VsZWN0ZWRMbmdMYXQpIHtcbiAgICAgICAgRGlhbG9nVXRpbGl0eS5BbGVydFRleHQoXCLor7flhYjngrnlh7vlnLDlm77vvIznoa7orqTlnZDmoIfjgIJcIik7XG4gICAgICB9XG5cbiAgICAgIHZhciBwb2ludCA9IG5ldyBCTWFwR0wuUG9pbnQoX3RoaXMuX3Byb3AubWFwU2VsZWN0ZWRMbmdMYXQubG5nLCBfdGhpcy5fcHJvcC5tYXBTZWxlY3RlZExuZ0xhdC5sYXQpO1xuICAgICAgdmFyIG1hcmtlciA9IG5ldyBCTWFwR0wuTWFya2VyKHBvaW50LCB7fSk7XG5cbiAgICAgIF90aGlzLl9wcm9wLm1hcE9iai5hZGRPdmVybGF5KG1hcmtlcik7XG5cbiAgICAgIF90aGlzLmFkZFRvTWFwRWRpdE9ianMoXCJwb2ludFwiLCBtYXJrZXIpO1xuICAgIH0pO1xuICAgICRhcHBlbmRDbGVhckNvbnRyb2wuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdGhpcy5fcHJvcC5tYXBFZGl0T2Jqcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZWRpdE9iaiA9IF90aGlzLl9wcm9wLm1hcEVkaXRPYmpzW2ldO1xuXG4gICAgICAgIF90aGlzLl9wcm9wLm1hcE9iai5yZW1vdmVPdmVybGF5KGVkaXRPYmoub2JqKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuX3Byb3AubWFwRWRpdE9ianMgPSBbXTtcbiAgICB9KTtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9yZWZfZmlsZVBhdGggPSAkKFwic2NyaXB0XCIpLmxhc3QoKS5hdHRyKFwic3JjXCIpO1xuXG52YXIgV0ZEQ1RfQ0tFZGl0b3I0ID0ge1xuICBja2VkaXRvckluc3RhbmNlOiBudWxsLFxuICBSZW5kZXJlckNoYWluOiBmdW5jdGlvbiBSZW5kZXJlckNoYWluKF9yZW5kZXJlckNoYWluUGFyYXMpIHtcbiAgICB2YXIgJHNpbmdsZUNvbnRyb2xFbGVtID0gX3JlbmRlcmVyQ2hhaW5QYXJhcy4kc2luZ2xlQ29udHJvbEVsZW07XG4gICAgdmFyIGFyZWFIZWlnaHQgPSAkc2luZ2xlQ29udHJvbEVsZW0uaGVpZ2h0KCk7XG5cbiAgICBpZiAoQmFzZVV0aWxpdHkuSXNWaWV3T3BlcmF0aW9uKF9yZW5kZXJlckNoYWluUGFyYXMuZm9ybVJ1bnRpbWVJbnN0YW5jZS5HZXRPcGVyYXRpb25UeXBlKCkpKSB7fSBlbHNlIHtcbiAgICAgIHZhciBmaWxlbmFtZSA9IF9yZWZfZmlsZVBhdGguc3Vic3RyKF9yZWZfZmlsZVBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuXG4gICAgICB2YXIgZWRpdG9yQ29uZmlnVXJsID0gQmFzZVV0aWxpdHkuQXBwZW5kVGltZVN0YW1wVXJsKF9yZWZfZmlsZVBhdGgucmVwbGFjZShmaWxlbmFtZSwgXCJDb250cm9sL1dlYkZvcm1Db250cm9sL1wiICsgJHNpbmdsZUNvbnRyb2xFbGVtLmF0dHIoXCJjdXN0b21jb25maWdcIikpKTtcbiAgICAgIGNvbnNvbGUubG9nKGVkaXRvckNvbmZpZ1VybCk7XG4gICAgICB0aGlzLmNrZWRpdG9ySW5zdGFuY2UgPSBDS0VESVRPUi5yZXBsYWNlKCRzaW5nbGVDb250cm9sRWxlbS5hdHRyKFwiaWRcIiksIHtcbiAgICAgICAgY3VzdG9tQ29uZmlnOiBlZGl0b3JDb25maWdVcmwsXG4gICAgICAgIGZvcm1SdW50aW1lSW5zdGFuY2U6IF9yZW5kZXJlckNoYWluUGFyYXMuZm9ybVJ1bnRpbWVJbnN0YW5jZVxuICAgICAgfSk7XG4gICAgICB0aGlzLmNrZWRpdG9ySW5zdGFuY2UuY29uZmlnLmhlaWdodCA9IGFyZWFIZWlnaHQ7XG4gICAgfVxuICB9LFxuICBSZW5kZXJlckRhdGFDaGFpbjogZnVuY3Rpb24gUmVuZGVyZXJEYXRhQ2hhaW4oKSB7fSxcbiAgR2V0VmFsdWU6IGZ1bmN0aW9uIEdldFZhbHVlKCRlbGVtLCBvcmlnaW5hbERhdGEsIHBhcmFzKSB7XG4gICAgb3JpZ2luYWxEYXRhLnZhbHVlID0gdGhpcy5ja2VkaXRvckluc3RhbmNlLmdldERhdGEoKTtcbiAgICByZXR1cm4gb3JpZ2luYWxEYXRhO1xuICB9LFxuICBTZXRWYWx1ZTogZnVuY3Rpb24gU2V0VmFsdWUoJGVsZW0sIGZpZWxkUE8sIHJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQbywgX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMpIHtcbiAgICBpZiAoZmllbGRQTykge1xuICAgICAgJGVsZW0udmFsKGZpZWxkUE8udmFsdWUpO1xuICAgICAgJGVsZW0uYXR0cihcImNvbnRyb2xfdmFsdWVcIiwgZmllbGRQTy52YWx1ZSk7XG4gICAgfVxuICB9LFxuICBUb1ZpZXdTdGF0dXM6IGZ1bmN0aW9uIFRvVmlld1N0YXR1cygkZWxlbSwgZmllbGRQTywgcmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvLCBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcykge1xuICAgIHZhciAkdmlld0VsZW0gPSAkKFwiPGRpdj48L2Rpdj5cIik7XG4gICAgdmFyIG9sZEFsbEF0dHJzID0gQmFzZVV0aWxpdHkuR2V0RWxlbUFsbEF0dHIoJGVsZW0pO1xuICAgICR2aWV3RWxlbS5hdHRyKG9sZEFsbEF0dHJzKTtcbiAgICAkdmlld0VsZW0ucmVtb3ZlQ2xhc3MoKTtcbiAgICAkdmlld0VsZW0uaHRtbChmaWVsZFBPLnZhbHVlKTtcbiAgICAkdmlld0VsZW0uY3NzKFwib3ZlcmZsb3dcIiwgXCJhdXRvXCIpO1xuICAgICR2aWV3RWxlbS5oZWlnaHQoJHZpZXdFbGVtLmhlaWdodCgpICsgMTAwKTtcbiAgICAkZWxlbS5yZXBsYWNlV2l0aCgkdmlld0VsZW0pO1xuICB9XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgV0ZEQ1RfRG9jdW1lbnRDb250ZW50VXBsb2FkQ29udmVydFRvUERGQ29udGFpbmVyID0ge1xuICBJbml0U3R5bGU6IEhUTUxDb250cm9sLkluaXRTdHlsZSxcbiAgUmVuZGVyZXJDaGFpbjogZnVuY3Rpb24gUmVuZGVyZXJDaGFpbihfcmVuZGVyZXJDaGFpblBhcmFzKSB7fSxcbiAgUmVuZGVyZXJEYXRhQ2hhaW46IGZ1bmN0aW9uIFJlbmRlcmVyRGF0YUNoYWluKCkge30sXG4gIEdldFZhbHVlOiBIVE1MQ29udHJvbC5HZXRWYWx1ZSxcbiAgU2V0VmFsdWU6IEhUTUxDb250cm9sLlNldFZhbHVlLFxuICBUb1ZpZXdTdGF0dXM6IEhUTUxDb250cm9sLlRvVmlld1N0YXR1cyxcbiAgVHJ5QmluZFVybFZhbHVlOiBIVE1MQ29udHJvbC5UcnlCaW5kVXJsVmFsdWVcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBXRkRDVF9Ecm9wRG93blNlbGVjdCA9IHtcbiAgSW5pdFN0eWxlOiBIVE1MQ29udHJvbC5Jbml0U3R5bGUsXG4gIFJlbmRlcmVyQ2hhaW46IGZ1bmN0aW9uIFJlbmRlcmVyQ2hhaW4oX3JlbmRlcmVyQ2hhaW5QYXJhcykge1xuICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSBfcmVuZGVyZXJDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgICB2YXIgZGVmYXVsdFNlbGVjdGVkID0gJHNpbmdsZUNvbnRyb2xFbGVtLmF0dHIoXCJkZWZhdWx0c2VsZWN0ZWRcIik7XG5cbiAgICBpZiAoZGVmYXVsdFNlbGVjdGVkKSB7XG4gICAgICAkc2luZ2xlQ29udHJvbEVsZW0udmFsKGRlZmF1bHRTZWxlY3RlZCk7XG4gICAgfVxuICB9LFxuICBSZW5kZXJlckRhdGFDaGFpbjogSFRNTENvbnRyb2wuUmVuZGVyZXJEYXRhQ2hhaW4sXG4gIEdldFZhbHVlOiBIVE1MQ29udHJvbC5HZXRWYWx1ZSxcbiAgU2V0VmFsdWU6IEhUTUxDb250cm9sLlNldFZhbHVlLFxuICBUb1ZpZXdTdGF0dXM6IEhUTUxDb250cm9sLlRvVmlld1N0YXR1cyxcbiAgVHJ5QmluZFVybFZhbHVlOiBIVE1MQ29udHJvbC5UcnlCaW5kVXJsVmFsdWVcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBXRkRDVF9GaWxlSW1hZ2VMaXN0ID0ge1xuICBfb2JqZWN0VHlwZTogXCJJbnN0YW5jZVwiLFxuICBfcHJvcE1hcDoge30sXG4gIF9wcm9wOiB7XG4gICAgJHNpbmdsZUNvbnRyb2xFbGVtOiBudWxsLFxuICAgIGluc3RhbmNlTmFtZTogbnVsbCxcbiAgICBlbGVtSWQ6IG51bGwsXG4gICAgb3BCdXR0b25zOiBudWxsLFxuICAgIGJlZm9yZVNlbGVjdEpTTWV0aG9kOiBudWxsLFxuICAgIGFmdGVyVXBsb2FkZWRKc01ldGhvZDogbnVsbCxcbiAgICBmaWxlRXhUeXBlOiBudWxsLFxuICAgIGF1dGhUeXBlOiBudWxsLFxuICAgIHJlbmRlcmVyQ29udGFpbmVySnNNZXRob2Q6IG51bGwsXG4gICAgcmVuZGVyZXJTaW5nbGVSb3dKc01ldGhvZDogbnVsbCxcbiAgICBjYXRlZ29yeVR5cGU6IG51bGwsXG4gICAgZ2V0QmluZFJlY29yZElkSnNNZXRob2Q6IG51bGwsXG4gICAgZ2V0QmluZFJlY29yZFR5cGVKc01ldGhvZDogbnVsbCxcbiAgICB1c2VUZW1wbGF0ZTogbnVsbCxcbiAgICB1cGxvYWRFbmFibGU6IGZhbHNlLFxuICAgIGRvd25sb2FkRW5hYmxlOiBmYWxzZSxcbiAgICBkZWxldGVFbmFibGU6IGZhbHNlLFxuICAgIHByZXZpZXdFbmFibGU6IGZhbHNlLFxuICAgIG1vdmVPcmRlckVuYWJsZTogZmFsc2UsXG4gICAgY2xpY2tGaWxlTmFtZUFjdGlvbjogbnVsbCxcbiAgICBvYmpUeXBlOiBcIlwiXG4gIH0sXG4gIGFjSW50ZXJmYWNlOiB7XG4gICAgZ2V0RmlsZUxpc3REYXRhOiBcIi9SZXN0L0J1aWxkZXIvUnVuVGltZS9GaWxlUnVudGltZS9HZXRJbWFnZUZpbGVMaXN0RGF0YVwiLFxuICAgIGRvd25Mb2FkRmlsZUJ5RmlsZUlkOiBcIi9SZXN0L0J1aWxkZXIvUnVuVGltZS9GaWxlUnVudGltZS9Eb3duTG9hZEZpbGVCeUZpbGVJZFwiXG4gIH0sXG4gIFJlbmRlcmVyQ2hhaW46IGZ1bmN0aW9uIFJlbmRlcmVyQ2hhaW4oX3JlbmRlcmVyQ2hhaW5QYXJhcykge1xuICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSBfcmVuZGVyZXJDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgICB0aGlzLkJpbmRFbGVtZW50QXR0clRvSW5zdGFuY2VQcm9wKCRzaW5nbGVDb250cm9sRWxlbSk7XG4gICAgJHNpbmdsZUNvbnRyb2xFbGVtLmh0bWwoXCJcIik7XG4gICAgdGhpcy5CdWlsZEZpbGVMaXN0KCk7XG4gIH0sXG4gIFJlbmRlcmVyRGF0YUNoYWluOiBmdW5jdGlvbiBSZW5kZXJlckRhdGFDaGFpbigpIHt9LFxuICBHZXRWYWx1ZTogSFRNTENvbnRyb2wuR2V0VmFsdWUsXG4gIFNldFZhbHVlOiBIVE1MQ29udHJvbC5TZXRWYWx1ZSxcbiAgQmluZEVsZW1lbnRBdHRyVG9JbnN0YW5jZVByb3A6IGZ1bmN0aW9uIEJpbmRFbGVtZW50QXR0clRvSW5zdGFuY2VQcm9wKCRzaW5nbGVDb250cm9sRWxlbSkge1xuICAgIGlmICghdGhpcy5fcHJvcC5nZXRCaW5kUmVjb3JkSWRKc01ldGhvZCkge1xuICAgICAgdGhpcy5fcHJvcC5nZXRCaW5kUmVjb3JkSWRKc01ldGhvZCA9IHRoaXMuX3Byb3AuaW5zdGFuY2VOYW1lICsgXCIuR2V0VGhpc1JlY29yZElkKClcIjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX3Byb3AuZ2V0QmluZFJlY29yZFR5cGVKc01ldGhvZCkge1xuICAgICAgdGhpcy5fcHJvcC5nZXRCaW5kUmVjb3JkVHlwZUpzTWV0aG9kID0gdGhpcy5fcHJvcC5pbnN0YW5jZU5hbWUgKyBcIi5HZXRUaGlzUmVjb3JkVHlwZSgpXCI7XG4gICAgfVxuICB9LFxuICBHZXRUaGlzUmVjb3JkSWQ6IGZ1bmN0aW9uIEdldFRoaXNSZWNvcmRJZCgpIHtcbiAgICB2YXIgb2JqSWQgPSBcIlwiO1xuXG4gICAgaWYgKGZvcm1SdW50aW1lSW5zdCAmJiBmb3JtUnVudGltZUluc3QuR2V0V2ViRm9ybVJUUGFyYXMoKSAmJiBmb3JtUnVudGltZUluc3QuR2V0V2ViRm9ybVJUUGFyYXMoKS5SZWNvcmRJZCkge1xuICAgICAgb2JqSWQgPSBmb3JtUnVudGltZUluc3QuR2V0V2ViRm9ybVJUUGFyYXMoKS5SZWNvcmRJZDtcbiAgICB9IGVsc2Uge1xuICAgICAgRGlhbG9nVXRpbGl0eS5BbGVydFRleHQoXCLmn6Xmib7kuI3liLDnu5HlrprnmoTorrDlvZVJRFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqSWQ7XG4gIH0sXG4gIEdldFRoaXNSZWNvcmRUeXBlOiBmdW5jdGlvbiBHZXRUaGlzUmVjb3JkVHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvcC5vYmpUeXBlO1xuICB9LFxuICBCdWlsZEZpbGVMaXN0OiBmdW5jdGlvbiBCdWlsZEZpbGVMaXN0KCkge1xuICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSB0aGlzLl9wcm9wLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgICB2YXIgZmlsZV9pbWFnZV9saXN0X3dyYXBfaWQgPSBcImZpbGVfaW1hZ2VfbGlzdF93cmFwXCIgKyB0aGlzLl9wcm9wLmVsZW1JZDtcbiAgICAkKFwiI1wiICsgZmlsZV9pbWFnZV9saXN0X3dyYXBfaWQpLnJlbW92ZSgpO1xuICAgIHZhciAkZGl2V2FycCA9ICQoXCI8ZGl2IGNsYXNzPSdmaWxlLWltYWdlLWxpc3Qtd3JhcCcgaWQ9J1wiICsgZmlsZV9pbWFnZV9saXN0X3dyYXBfaWQgKyBcIic+PC9kaXY+XCIpO1xuICAgIHZhciBvYmpJZCA9IGV2YWwodGhpcy5fcHJvcC5nZXRCaW5kUmVjb3JkSWRKc01ldGhvZCk7XG4gICAgdmFyIGNhdGVnb3J5ID0gdGhpcy5fcHJvcC5jYXRlZ29yeVR5cGU7XG4gICAgQWpheFV0aWxpdHkuUG9zdCh0aGlzLmFjSW50ZXJmYWNlLmdldEZpbGVMaXN0RGF0YSwge1xuICAgICAgb2JqSWQ6IG9iaklkLFxuICAgICAgY2F0ZWdvcnlUeXBlOiBjYXRlZ29yeVxuICAgIH0sIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdC5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGZpbGVJbmZvID0gcmVzdWx0LmRhdGFbaV07XG4gICAgICAgICAgdmFyIGltZ0VsZW0gPSB0aGlzLkJ1aWxkRmlsZURpc2xheShyZXN1bHQsIGZpbGVJbmZvKTtcbiAgICAgICAgICAkZGl2V2FycC5hcHBlbmQoaW1nRWxlbSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICB9LCB0aGlzKTtcbiAgICAkKCRzaW5nbGVDb250cm9sRWxlbS5hcHBlbmQoJGRpdldhcnApKTtcbiAgfSxcbiAgQnVpbGRGaWxlRGlzbGF5OiBmdW5jdGlvbiBCdWlsZEZpbGVEaXNsYXkocmVzcG9uc2VKU09OLCBmaWxlSW5mbykge1xuICAgIHZhciBmaWxlSWQgPSBmaWxlSW5mby5maWxlSWQ7XG4gICAgdmFyIGltZ0VsZW0gPSBcIjxkaXYgY2xhc3M9J2ltZy13cmFwJz48aW1nIHNyYz0nXCIgKyBCYXNlVXRpbGl0eS5CdWlsZEFjdGlvbih0aGlzLmFjSW50ZXJmYWNlLmRvd25Mb2FkRmlsZUJ5RmlsZUlkLCB7XG4gICAgICBmaWxlSWQ6IGZpbGVJZFxuICAgIH0pICsgXCInIC8+PC9kaXY+XCI7XG4gICAgcmV0dXJuIGltZ0VsZW07XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBXRkRDVF9GaWxlVXBsb2FkQ29udGFpbmVyID0ge1xuICBfb2JqZWN0VHlwZTogXCJJbnN0YW5jZVwiLFxuICBfcHJvcE1hcDoge30sXG4gIF9wcm9wOiB7XG4gICAgJHNpbmdsZUNvbnRyb2xFbGVtOiBudWxsLFxuICAgIGluc3RhbmNlTmFtZTogbnVsbCxcbiAgICBlbGVtSWQ6IG51bGwsXG4gICAgb3BCdXR0b25zOiBudWxsLFxuICAgIGJlZm9yZVNlbGVjdEpTTWV0aG9kOiBudWxsLFxuICAgIGFmdGVyVXBsb2FkZWRKc01ldGhvZDogbnVsbCxcbiAgICBmaWxlRXhUeXBlOiBudWxsLFxuICAgIGF1dGhUeXBlOiBudWxsLFxuICAgIHJlbmRlcmVyQ29udGFpbmVySnNNZXRob2Q6IG51bGwsXG4gICAgcmVuZGVyZXJTaW5nbGVSb3dKc01ldGhvZDogbnVsbCxcbiAgICBjYXRlZ29yeVR5cGU6IG51bGwsXG4gICAgZ2V0QmluZFJlY29yZElkSnNNZXRob2Q6IG51bGwsXG4gICAgZ2V0QmluZFJlY29yZFR5cGVKc01ldGhvZDogbnVsbCxcbiAgICB1c2VUZW1wbGF0ZTogbnVsbCxcbiAgICB1cGxvYWRFbmFibGU6IGZhbHNlLFxuICAgIGRvd25sb2FkRW5hYmxlOiBmYWxzZSxcbiAgICBkZWxldGVFbmFibGU6IGZhbHNlLFxuICAgIHByZXZpZXdFbmFibGU6IGZhbHNlLFxuICAgIG1vdmVPcmRlckVuYWJsZTogZmFsc2UsXG4gICAgY2xpY2tGaWxlTmFtZUFjdGlvbjogbnVsbCxcbiAgICBvYmpUeXBlOiBcIlwiXG4gIH0sXG4gIGFjSW50ZXJmYWNlOiB7XG4gICAgZ2V0RmlsZUxpc3REYXRhOiBcIi9SZXN0L0J1aWxkZXIvUnVuVGltZS9GaWxlUnVudGltZS9HZXRGaWxlTGlzdERhdGFcIixcbiAgICB1cGxvYWRGaWxlOiBcIi9SZXN0L0J1aWxkZXIvUnVuVGltZS9GaWxlUnVudGltZS9VcGxvYWRGaWxlXCIsXG4gICAgZG93bmxvYWRGaWxlOiBcIi9SZXN0L0J1aWxkZXIvUnVuVGltZS9GaWxlUnVudGltZS9Eb3duTG9hZEZpbGVCeUZpbGVJZFwiLFxuICAgIGRlbGV0ZUZpbGU6IFwiL1Jlc3QvQnVpbGRlci9SdW5UaW1lL0ZpbGVSdW50aW1lL0RlbGV0ZUZpbGVCeUZpbGVJZFwiXG4gIH0sXG4gIFJlbmRlcmVyQ2hhaW46IGZ1bmN0aW9uIFJlbmRlcmVyQ2hhaW4oX3JlbmRlcmVyQ2hhaW5QYXJhcykge1xuICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSBfcmVuZGVyZXJDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgICB0aGlzLkJpbmRFbGVtZW50QXR0clRvSW5zdGFuY2VQcm9wKCRzaW5nbGVDb250cm9sRWxlbSk7XG4gICAgJHNpbmdsZUNvbnRyb2xFbGVtLmh0bWwoXCJcIik7XG4gICAgdGhpcy5CdWlsZFVwbG9hZENvbnRhaW5lcigpO1xuICAgIHRoaXMuQnVpbGRGaWxlTGlzdCgpO1xuICB9LFxuICBSZW5kZXJlckRhdGFDaGFpbjogZnVuY3Rpb24gUmVuZGVyZXJEYXRhQ2hhaW4oKSB7fSxcbiAgR2V0VmFsdWU6IEhUTUxDb250cm9sLkdldFZhbHVlLFxuICBTZXRWYWx1ZTogSFRNTENvbnRyb2wuU2V0VmFsdWUsXG4gIFRvVmlld1N0YXR1czogZnVuY3Rpb24gVG9WaWV3U3RhdHVzKCRlbGVtLCBmaWVsZFBPLCByZWxhdGlvbkZvcm1SZWNvcmRDb21wbGV4UG8sIF9yZW5kZXJlckRhdGFDaGFpblBhcmFzKSB7XG4gICAgJChcIiNcIiArIHRoaXMuX3Byb3AudXBsb2FkV2FycElkKS5oaWRlKCk7XG4gICAgJChcIiNcIiArIHRoaXMuX3Byb3AuZWxlbUlkKS5maW5kKFwiLmRlbGV0ZS1idXR0b24tZWxlbVwiKS5oaWRlKCk7XG4gICAgJChcIiNcIiArIHRoaXMuX3Byb3AuZWxlbUlkKS5maW5kKFwiLm1vdmUtdXAtYnV0dG9uLWVsZW1cIikuaGlkZSgpO1xuICAgICQoXCIjXCIgKyB0aGlzLl9wcm9wLmVsZW1JZCkuZmluZChcIi5tb3ZlLWRvd24tYnV0dG9uLWVsZW1cIikuaGlkZSgpO1xuICB9LFxuICBCaW5kRWxlbWVudEF0dHJUb0luc3RhbmNlUHJvcDogZnVuY3Rpb24gQmluZEVsZW1lbnRBdHRyVG9JbnN0YW5jZVByb3AoJHNpbmdsZUNvbnRyb2xFbGVtKSB7XG4gICAgaWYgKCF0aGlzLl9wcm9wLmdldEJpbmRSZWNvcmRJZEpzTWV0aG9kKSB7XG4gICAgICB0aGlzLl9wcm9wLmdldEJpbmRSZWNvcmRJZEpzTWV0aG9kID0gdGhpcy5fcHJvcC5pbnN0YW5jZU5hbWUgKyBcIi5HZXRUaGlzUmVjb3JkSWQoKVwiO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fcHJvcC5nZXRCaW5kUmVjb3JkVHlwZUpzTWV0aG9kKSB7XG4gICAgICB0aGlzLl9wcm9wLmdldEJpbmRSZWNvcmRUeXBlSnNNZXRob2QgPSB0aGlzLl9wcm9wLmluc3RhbmNlTmFtZSArIFwiLkdldFRoaXNSZWNvcmRUeXBlKClcIjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcHJvcC5vcEJ1dHRvbnMuaW5kZXhPZihcInVwbG9hZFwiKSA+PSAwKSB7XG4gICAgICB0aGlzLl9wcm9wLnVwbG9hZEVuYWJsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Byb3Aub3BCdXR0b25zLmluZGV4T2YoXCJkb3dubG9hZFwiKSA+PSAwKSB7XG4gICAgICB0aGlzLl9wcm9wLmRvd25sb2FkRW5hYmxlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcHJvcC5vcEJ1dHRvbnMuaW5kZXhPZihcImRlbGV0ZVwiKSA+PSAwKSB7XG4gICAgICB0aGlzLl9wcm9wLmRlbGV0ZUVuYWJsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Byb3Aub3BCdXR0b25zLmluZGV4T2YoXCJvbmxpbmUtcHJldmlld1wiKSA+PSAwKSB7XG4gICAgICB0aGlzLl9wcm9wLnByZXZpZXdFbmFibGUgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wcm9wLm9wQnV0dG9ucy5pbmRleE9mKFwibW92ZS1vcmRlclwiKSA+PSAwKSB7XG4gICAgICB0aGlzLl9wcm9wLm1vdmVPcmRlckVuYWJsZSA9IHRydWU7XG4gICAgfVxuICB9LFxuICBHZXRUaGlzUmVjb3JkSWQ6IGZ1bmN0aW9uIEdldFRoaXNSZWNvcmRJZCgpIHtcbiAgICB2YXIgb2JqSWQgPSBcIlwiO1xuXG4gICAgaWYgKGZvcm1SdW50aW1lSW5zdCAmJiBmb3JtUnVudGltZUluc3QuR2V0V2ViRm9ybVJUUGFyYXMoKSAmJiBmb3JtUnVudGltZUluc3QuR2V0V2ViRm9ybVJUUGFyYXMoKS5SZWNvcmRJZCkge1xuICAgICAgb2JqSWQgPSBmb3JtUnVudGltZUluc3QuR2V0V2ViRm9ybVJUUGFyYXMoKS5SZWNvcmRJZDtcbiAgICB9IGVsc2Uge1xuICAgICAgRGlhbG9nVXRpbGl0eS5BbGVydFRleHQoXCLmn6Xmib7kuI3liLDnu5HlrprnmoTorrDlvZVJRFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqSWQ7XG4gIH0sXG4gIEdldFRoaXNSZWNvcmRUeXBlOiBmdW5jdGlvbiBHZXRUaGlzUmVjb3JkVHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvcC5vYmpUeXBlO1xuICB9LFxuICBHZXRVcGxvYWRFbmRQb2ludFJlcXVlc3Q6IGZ1bmN0aW9uIEdldFVwbG9hZEVuZFBvaW50UmVxdWVzdCgpIHtcbiAgICB2YXIgZW5kUG9pbnQgPSBCYXNlVXRpbGl0eS5HZXRSb290UGF0aCgpICsgdGhpcy5hY0ludGVyZmFjZS51cGxvYWRGaWxlO1xuICAgIHZhciBwYXJhcyA9IHtcbiAgICAgIG9ialR5cGU6IGV2YWwodGhpcy5fcHJvcC5nZXRCaW5kUmVjb3JkVHlwZUpzTWV0aG9kKSxcbiAgICAgIG9iaklkOiBldmFsKHRoaXMuX3Byb3AuZ2V0QmluZFJlY29yZElkSnNNZXRob2QpLFxuICAgICAgY2F0ZWdvcnlUeXBlOiB0aGlzLl9wcm9wLmNhdGVnb3J5VHlwZVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIGVuZHBvaW50OiBlbmRQb2ludCxcbiAgICAgIHBhcmFtczogcGFyYXNcbiAgICB9O1xuICB9LFxuICBDcmVhdGVEZWZhdWx0VGVtcGxhdGU6IGZ1bmN0aW9uIENyZWF0ZURlZmF1bHRUZW1wbGF0ZSh0ZW1wbGF0ZUlkKSB7XG4gICAgJCh3aW5kb3cuZG9jdW1lbnQuYm9keSkuYXBwZW5kKFwiPHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L3RlbXBsYXRlXFxcIiBpZD1cXFwiXCIgKyB0ZW1wbGF0ZUlkICsgXCJcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicXEtdXBsb2FkZXItc2VsZWN0b3IgcXEtdXBsb2FkZXIgcXEtZ2FsbGVyeVxcXCIgcXEtZHJvcC1hcmVhLXRleHQ9XFxcIlxcdTYyRDZcXHU2NTNFXFx1NjU4N1xcdTRFRjZcXHU1MjMwXFx1OEZEOVxcdTkxQ0NcXHU4RkRCXFx1ODg0Q1xcdTRFMEFcXHU0RjIwXFx1MzAwMlxcXCIgc3R5bGU9XFxcIm1pbi1oZWlnaHQ6IDc4cHg7XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJxcS10b3RhbC1wcm9ncmVzcy1iYXItY29udGFpbmVyLXNlbGVjdG9yIHFxLXRvdGFsLXByb2dyZXNzLWJhci1jb250YWluZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IHJvbGU9XFxcInByb2dyZXNzYmFyXFxcIiBhcmlhLXZhbHVlbm93PVxcXCIwXFxcIiBhcmlhLXZhbHVlbWluPVxcXCIwXFxcIiBhcmlhLXZhbHVlbWF4PVxcXCIxMDBcXFwiIGNsYXNzPVxcXCJxcS10b3RhbC1wcm9ncmVzcy1iYXItc2VsZWN0b3IgcXEtcHJvZ3Jlc3MtYmFyIHFxLXRvdGFsLXByb2dyZXNzLWJhclxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicXEtdXBsb2FkLWRyb3AtYXJlYS1zZWxlY3RvciBxcS11cGxvYWQtZHJvcC1hcmVhXFxcIiBxcS1oaWRlLWRyb3B6b25lPlxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwicXEtdXBsb2FkLWRyb3AtYXJlYS10ZXh0LXNlbGVjdG9yXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicXEtdXBsb2FkLWJ1dHRvbi1zZWxlY3RvciBxcS11cGxvYWQtYnV0dG9uXFxcIiBzdHlsZT1cXFwiZmxvYXQ6IHJpZ2h0XFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdj5cXHU5MDA5XFx1NjJFOVxcdTY1ODdcXHU0RUY2PC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInFxLWRyb3AtcHJvY2Vzc2luZy1zZWxlY3RvciBxcS1kcm9wLXByb2Nlc3NpbmdcXFwiPlxcbiAgICAgICAgICAgICAgICA8c3Bhbj5Qcm9jZXNzaW5nIGRyb3BwZWQgZmlsZXMuLi48L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJxcS1kcm9wLXByb2Nlc3Npbmctc3Bpbm5lci1zZWxlY3RvciBxcS1kcm9wLXByb2Nlc3Npbmctc3Bpbm5lclxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICA8dWwgY2xhc3M9XFxcInFxLXVwbG9hZC1saXN0LXNlbGVjdG9yIHFxLXVwbG9hZC1saXN0XFxcIiByb2xlPVxcXCJyZWdpb25cXFwiIGFyaWEtbGl2ZT1cXFwicG9saXRlXFxcIiBhcmlhLXJlbGV2YW50PVxcXCJhZGRpdGlvbnMgcmVtb3ZhbHNcXFwiIHN0eWxlPVxcXCJkaXNwbGF5OiBub25lXFxcIj5cXG4gICAgICAgICAgICAgICAgPGxpPlxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gcm9sZT1cXFwic3RhdHVzXFxcIiBjbGFzcz1cXFwicXEtdXBsb2FkLXN0YXR1cy10ZXh0LXNlbGVjdG9yIHFxLXVwbG9hZC1zdGF0dXMtdGV4dFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicXEtcHJvZ3Jlc3MtYmFyLWNvbnRhaW5lci1zZWxlY3RvciBxcS1wcm9ncmVzcy1iYXItY29udGFpbmVyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHJvbGU9XFxcInByb2dyZXNzYmFyXFxcIiBhcmlhLXZhbHVlbm93PVxcXCIwXFxcIiBhcmlhLXZhbHVlbWluPVxcXCIwXFxcIiBhcmlhLXZhbHVlbWF4PVxcXCIxMDBcXFwiIGNsYXNzPVxcXCJxcS1wcm9ncmVzcy1iYXItc2VsZWN0b3IgcXEtcHJvZ3Jlc3MtYmFyXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInFxLXVwbG9hZC1zcGlubmVyLXNlbGVjdG9yIHFxLXVwbG9hZC1zcGlubmVyXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJxcS10aHVtYm5haWwtd3JhcHBlclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cXFwicXEtdGh1bWJuYWlsLXNlbGVjdG9yXFxcIiBxcS1tYXgtc2l6ZT1cXFwiMTIwXFxcIiBxcS1zZXJ2ZXItc2NhbGU+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwicXEtdXBsb2FkLWNhbmNlbC1zZWxlY3RvciBxcS11cGxvYWQtY2FuY2VsXFxcIj5YPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcInFxLXVwbG9hZC1yZXRyeS1zZWxlY3RvciBxcS11cGxvYWQtcmV0cnlcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJxcS1idG4gcXEtcmV0cnktaWNvblxcXCIgYXJpYS1sYWJlbD1cXFwiUmV0cnlcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICBSZXRyeVxcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxuXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJxcS1maWxlLWluZm9cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInFxLWZpbGUtbmFtZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJxcS11cGxvYWQtZmlsZS1zZWxlY3RvciBxcS11cGxvYWQtZmlsZVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwicXEtZWRpdC1maWxlbmFtZS1pY29uLXNlbGVjdG9yIHFxLWJ0biBxcS1lZGl0LWZpbGVuYW1lLWljb25cXFwiIGFyaWEtbGFiZWw9XFxcIkVkaXQgZmlsZW5hbWVcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcInFxLWVkaXQtZmlsZW5hbWUtc2VsZWN0b3IgcXEtZWRpdC1maWxlbmFtZVxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiIHR5cGU9XFxcInRleHRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJxcS11cGxvYWQtc2l6ZS1zZWxlY3RvciBxcS11cGxvYWQtc2l6ZVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwicXEtYnRuIHFxLXVwbG9hZC1kZWxldGUtc2VsZWN0b3IgcXEtdXBsb2FkLWRlbGV0ZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJxcS1idG4gcXEtZGVsZXRlLWljb25cXFwiIGFyaWEtbGFiZWw9XFxcIkRlbGV0ZVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwicXEtYnRuIHFxLXVwbG9hZC1wYXVzZS1zZWxlY3RvciBxcS11cGxvYWQtcGF1c2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwicXEtYnRuIHFxLXBhdXNlLWljb25cXFwiIGFyaWEtbGFiZWw9XFxcIlBhdXNlXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJxcS1idG4gcXEtdXBsb2FkLWNvbnRpbnVlLXNlbGVjdG9yIHFxLXVwbG9hZC1jb250aW51ZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJxcS1idG4gcXEtY29udGludWUtaWNvblxcXCIgYXJpYS1sYWJlbD1cXFwiQ29udGludWVcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgIDwvdWw+XFxuXFxuICAgICAgICAgICAgPGRpYWxvZyBjbGFzcz1cXFwicXEtYWxlcnQtZGlhbG9nLXNlbGVjdG9yXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicXEtZGlhbG9nLW1lc3NhZ2Utc2VsZWN0b3JcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJxcS1kaWFsb2ctYnV0dG9uc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcInFxLWNhbmNlbC1idXR0b24tc2VsZWN0b3JcXFwiPkNsb3NlPC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGlhbG9nPlxcblxcbiAgICAgICAgICAgIDxkaWFsb2cgY2xhc3M9XFxcInFxLWNvbmZpcm0tZGlhbG9nLXNlbGVjdG9yXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicXEtZGlhbG9nLW1lc3NhZ2Utc2VsZWN0b3JcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJxcS1kaWFsb2ctYnV0dG9uc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcInFxLWNhbmNlbC1idXR0b24tc2VsZWN0b3JcXFwiPk5vPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcInFxLW9rLWJ1dHRvbi1zZWxlY3RvclxcXCI+WWVzPC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGlhbG9nPlxcblxcbiAgICAgICAgICAgIDxkaWFsb2cgY2xhc3M9XFxcInFxLXByb21wdC1kaWFsb2ctc2VsZWN0b3JcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJxcS1kaWFsb2ctbWVzc2FnZS1zZWxlY3RvclxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicXEtZGlhbG9nLWJ1dHRvbnNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJxcS1jYW5jZWwtYnV0dG9uLXNlbGVjdG9yXFxcIj5DYW5jZWw8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwicXEtb2stYnV0dG9uLXNlbGVjdG9yXFxcIj5PazwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2RpYWxvZz5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L3NjcmlwdD5cIik7XG4gIH0sXG4gIEJ1aWxkVXBsb2FkQ29udGFpbmVyOiBmdW5jdGlvbiBCdWlsZFVwbG9hZENvbnRhaW5lcigpIHtcbiAgICBpZiAodGhpcy5fcHJvcC51cGxvYWRFbmFibGUpIHtcbiAgICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSB0aGlzLl9wcm9wLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgICAgIHZhciB1cGxvYWRXYXJwSWQgPSAndXBsb2FkV2FycF8nICsgdGhpcy5fcHJvcC5lbGVtSWQ7XG4gICAgICB0aGlzLl9wcm9wLnVwbG9hZFdhcnBJZCA9IHVwbG9hZFdhcnBJZDtcbiAgICAgIHZhciAkdXBsb2FkV2FycCA9ICQoXCI8ZGl2IGlkPSdcIiArIHVwbG9hZFdhcnBJZCArIFwiJz48L2Rpdj5cIik7XG4gICAgICAkc2luZ2xlQ29udHJvbEVsZW0uYXBwZW5kKCR1cGxvYWRXYXJwKTtcbiAgICAgIHZhciB0ZW1wbGF0ZUlkID0gXCJxcS10ZW1wbGF0ZV9cIiArIHRoaXMuX3Byb3AuZWxlbUlkO1xuXG4gICAgICBpZiAodGhpcy5fcHJvcC51c2VUZW1wbGF0ZSA9PSBcImRlZmF1bHRUZW1wbGF0ZVwiKSB7XG4gICAgICAgIHRoaXMuQ3JlYXRlRGVmYXVsdFRlbXBsYXRlKHRlbXBsYXRlSWQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgZ2FsbGVyeVVwbG9hZGVyID0gbmV3IHFxLkZpbmVVcGxvYWRlcih7XG4gICAgICAgIGVsZW1lbnQ6ICR1cGxvYWRXYXJwWzBdLFxuICAgICAgICB0ZW1wbGF0ZTogdGVtcGxhdGVJZCxcbiAgICAgICAgbXVsdGlwbGU6IGZhbHNlLFxuICAgICAgICByZXF1ZXN0OiB0aGlzLkdldFVwbG9hZEVuZFBvaW50UmVxdWVzdCgpLFxuICAgICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKGlkLCBuYW1lLCByZXNwb25zZUpTT04sIHhocikge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlSlNPTi5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgIF90aGlzLkJ1aWxkRmlsZUxpc3QoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnRUZXh0KHJlc3BvbnNlSlNPTi5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgQnVpbGRGaWxlTGlzdDogZnVuY3Rpb24gQnVpbGRGaWxlTGlzdCgpIHtcbiAgICB2YXIgJHNpbmdsZUNvbnRyb2xFbGVtID0gdGhpcy5fcHJvcC4kc2luZ2xlQ29udHJvbEVsZW07XG4gICAgdmFyIHVwbG9hZF9maWxlX2xpc3Rfd3JhcF9pZCA9IFwidXBsb2FkX2ZpbGVfbGlzdF93YXJwX1wiICsgdGhpcy5fcHJvcC5lbGVtSWQ7XG4gICAgJChcIiNcIiArIHVwbG9hZF9maWxlX2xpc3Rfd3JhcF9pZCkucmVtb3ZlKCk7XG4gICAgdmFyICRkaXZXYXJwID0gJChcIjxkaXYgY2xhc3M9J3VwbG9hZF9maWxlX2xpc3Rfd3JhcCcgaWQ9J1wiICsgdXBsb2FkX2ZpbGVfbGlzdF93cmFwX2lkICsgXCInPjx0YWJsZSBjbGFzcz0nZmlsZV9saXN0X3RhYmxlJz48dGhlYWQ+PHRyPjx0aCBzdHlsZT0nd2lkdGg6IDgwcHgnPue8luWPtzwvdGg+PHRoPuaWh+S7tuWQjeensDwvdGg+PHRoIHN0eWxlPSd3aWR0aDogMTQwcHgnPuS4iuS8oOaXtumXtDwvdGg+PHRoIHN0eWxlPSd3aWR0aDogMTQwcHgnPuS4iuS8oOS6ujwvdGg+PHRoIHN0eWxlPSd3aWR0aDogMTQwcHgnPuaWh+S7tuWkp+WwjzwvdGg+PHRoIHN0eWxlPSd3aWR0aDogMTQwcHgnPuaTjeS9nDwvdGg+PC90cj48L3RoZWFkPjx0Ym9keT48L3Rib2R5PjwvdGFibGU+PC9kaXY+XCIpO1xuICAgIHZhciAkdGJvZHkgPSAkZGl2V2FycC5maW5kKFwidGJvZHlcIik7XG4gICAgdmFyIG9iaklkID0gZXZhbCh0aGlzLl9wcm9wLmdldEJpbmRSZWNvcmRJZEpzTWV0aG9kKTtcbiAgICB2YXIgY2F0ZWdvcnkgPSB0aGlzLl9wcm9wLmNhdGVnb3J5VHlwZTtcbiAgICBBamF4VXRpbGl0eS5Qb3N0KHRoaXMuYWNJbnRlcmZhY2UuZ2V0RmlsZUxpc3REYXRhLCB7XG4gICAgICBvYmpJZDogb2JqSWQsXG4gICAgICBjYXRlZ29yeVR5cGU6IGNhdGVnb3J5XG4gICAgfSwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0LmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgZmlsZUluZm8gPSByZXN1bHQuZGF0YVtpXTtcbiAgICAgICAgICAkdGJvZHkuYXBwZW5kKHRoaXMuQnVpbGRGaWxlSW5mb1RhYmxlUm93KHJlc3VsdCwgZmlsZUluZm8pKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoQmFzZVV0aWxpdHkuSXNWaWV3T3BlcmF0aW9uKGZvcm1SdW50aW1lSW5zdC5HZXRPcGVyYXRpb25UeXBlKCkpKSB7XG4gICAgICAgIHRoaXMuVG9WaWV3U3RhdHVzKCk7XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG4gICAgJCgkc2luZ2xlQ29udHJvbEVsZW0uYXBwZW5kKCRkaXZXYXJwKSk7XG4gIH0sXG4gIEJ1aWxkRmlsZUluZm9UYWJsZVJvdzogZnVuY3Rpb24gQnVpbGRGaWxlSW5mb1RhYmxlUm93KHJlc3BvbnNlSlNPTiwgZmlsZUluZm8pIHtcbiAgICB2YXIgZmlsZUNvZGUgPSBmaWxlSW5mby5maWxlQ29kZTtcbiAgICB2YXIgZmlsZU5hbWUgPSBTdHJpbmdVdGlsaXR5LkVuY29kZUh0bWwoZmlsZUluZm8uZmlsZU5hbWUpO1xuICAgIHZhciBmaWxlQ3JlYXRlVGltZSA9IERhdGVVdGlsaXR5LkRhdGFGb3JtYXRCeVRpbWVTdGFtcChmaWxlSW5mby5maWxlQ3JlYXRlVGltZSwgXCJ5eXl5LU1NLWRkXCIpO1xuICAgIHZhciBmaWxlU2l6ZSA9IEhhcmREaXNrVXRpbGl0eS5CeXRlQ29udmVydChmaWxlSW5mby5maWxlU2l6ZSk7XG4gICAgdmFyIGZpbGVDcmVhdG9yTmFtZSA9IFN0cmluZ1V0aWxpdHkuRW5jb2RlSHRtbChmaWxlSW5mby5maWxlQ3JlYXRvck5hbWUpO1xuICAgIHZhciAkdHJPYmogPSAkKFwiPHRyPjx0ZCBzdHlsZT1cXFwidGV4dC1hbGlnbjogY2VudGVyXFxcIj5cIi5jb25jYXQoZmlsZUNvZGUsIFwiPC90ZD48dGQ+XCIpLmNvbmNhdChmaWxlTmFtZSwgXCI8L3RkPjx0ZCBzdHlsZT1cXFwidGV4dC1hbGlnbjogY2VudGVyXFxcIj5cIikuY29uY2F0KGZpbGVDcmVhdGVUaW1lLCBcIjwvdGQ+PHRkIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBjZW50ZXJcXFwiPlwiKS5jb25jYXQoZmlsZUNyZWF0b3JOYW1lLCBcIjwvdGQ+PHRkIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBjZW50ZXJcXFwiPlwiKS5jb25jYXQoZmlsZVNpemUsIFwiPC90ZD48dGQgc3R5bGU9XFxcInRleHQtYWxpZ246IGNlbnRlclxcXCI+PC90ZD48L3RyPlwiKSk7XG4gICAgdGhpcy5CdWlsZEZpbGVJbmZvVGFibGVSb3dJbm5lckJ1dHRvbnMocmVzcG9uc2VKU09OLCBmaWxlSW5mbywgJHRyT2JqKTtcbiAgICByZXR1cm4gJHRyT2JqO1xuICB9LFxuICBCdWlsZEZpbGVJbmZvVGFibGVSb3dJbm5lckJ1dHRvbnM6IGZ1bmN0aW9uIEJ1aWxkRmlsZUluZm9UYWJsZVJvd0lubmVyQnV0dG9ucyhyZXNwb25zZUpTT04sIGZpbGVJbmZvLCAkdHIpIHtcbiAgICBpZiAoIXRoaXMuX3Byb3AuZG93bmxvYWRFbmFibGUgJiYgIXRoaXMuX3Byb3AuZGVsZXRlRW5hYmxlICYmIHRoaXMuX3Byb3AucHJldmlld0VuYWJsZSAmJiB0aGlzLl9wcm9wLm1vdmVPcmRlckVuYWJsZSkge31cblxuICAgIHZhciAkdHJMYXN0VGQgPSAkdHIuZmluZChcInRkOmxhc3RcIik7XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuX3Byb3AuZGVsZXRlRW5hYmxlKSB7XG4gICAgICB2YXIgJGRlbGV0ZUVsZW0gPSAkKFwiPGRpdiBjbGFzcz0nZmlsZS1saXN0LWlubmVyLWJ1dHRvbiBkZWxldGUtYnV0dG9uLWVsZW0nIHRpdGxlPSfngrnlh7vliKDpmaQnPjwvZGl2PlwiKTtcbiAgICAgICRkZWxldGVFbGVtLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgRGlhbG9nVXRpbGl0eS5Db25maXJtKHdpbmRvdywgXCLnoa7orqTliKDpmaTpmYTku7bjgJBcIiArIGZpbGVJbmZvLmZpbGVOYW1lICsgXCLjgJHlkJc/XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBBamF4VXRpbGl0eS5Qb3N0KF90aGlzLmFjSW50ZXJmYWNlLmRlbGV0ZUZpbGUsIHtcbiAgICAgICAgICAgIGZpbGVJZDogZmlsZUluZm8uZmlsZUlkXG4gICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICRkZWxldGVFbGVtLnBhcmVudCgpLnBhcmVudCgpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIF90aGlzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgICR0ckxhc3RUZC5hcHBlbmQoJGRlbGV0ZUVsZW0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wcm9wLm1vdmVPcmRlckVuYWJsZSB8fCB0cnVlKSB7XG4gICAgICB2YXIgJG1vdmVVcEVsZW0gPSAkKFwiPGRpdiBjbGFzcz0nZmlsZS1saXN0LWlubmVyLWJ1dHRvbiBtb3ZlLXVwLWJ1dHRvbi1lbGVtJyB0aXRsZT0n54K55Ye75LiK56e7Jz48L2Rpdj5cIik7XG4gICAgICAkbW92ZVVwRWxlbS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnRUZXh0KFwi5pqC5LiN5pSv5oyBIVwiKTtcbiAgICAgIH0pO1xuICAgICAgdmFyICRtb3ZlRG93bkVsZW0gPSAkKFwiPGRpdiBjbGFzcz0nZmlsZS1saXN0LWlubmVyLWJ1dHRvbiBtb3ZlLWRvd24tYnV0dG9uLWVsZW0nIHRpdGxlPSfngrnlh7vkuIvnp7snPjwvZGl2PlwiKTtcbiAgICAgICRtb3ZlRG93bkVsZW0uY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBEaWFsb2dVdGlsaXR5LkFsZXJ0VGV4dChcIuaaguS4jeaUr+aMgSFcIik7XG4gICAgICB9KTtcbiAgICAgICR0ckxhc3RUZC5hcHBlbmQoJG1vdmVVcEVsZW0pO1xuICAgICAgJHRyTGFzdFRkLmFwcGVuZCgkbW92ZURvd25FbGVtKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcHJvcC5kb3dubG9hZEVuYWJsZSkge1xuICAgICAgdmFyICRkb3dubG9hZEVsZW0gPSAkKFwiPGRpdiBjbGFzcz0nZmlsZS1saXN0LWlubmVyLWJ1dHRvbiBkb3dubG9hZC1idXR0b24tZWxlbScgdGl0bGU9J+eCueWHu+S4i+i9vSc+PC9kaXY+XCIpO1xuICAgICAgJGRvd25sb2FkRWxlbS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB1cmwgPSBCYXNlVXRpbGl0eS5HZXRSb290UGF0aCgpICsgX3RoaXMuYWNJbnRlcmZhY2UuZG93bmxvYWRGaWxlICsgXCI/ZmlsZUlkPVwiICsgZmlsZUluZm8uZmlsZUlkO1xuICAgICAgICB3aW5kb3cub3Blbih1cmwpO1xuICAgICAgfSk7XG4gICAgICAkdHJMYXN0VGQuYXBwZW5kKCRkb3dubG9hZEVsZW0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wcm9wLnByZXZpZXdFbmFibGUgfHwgdHJ1ZSkge1xuICAgICAgdmFyICRwcmV2aWV3RWxlbSA9ICQoXCI8ZGl2IGNsYXNzPSdmaWxlLWxpc3QtaW5uZXItYnV0dG9uIHByZXZpZXctYnV0dG9uLWVsZW0nIHRpdGxlPSfngrnlh7vpooTop4gnPjwvZGl2PlwiKTtcbiAgICAgICRwcmV2aWV3RWxlbS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnRUZXh0KFwi5pqC5LiN5pSv5oyBIVwiKTtcbiAgICAgIH0pO1xuICAgICAgJHRyTGFzdFRkLmFwcGVuZCgkcHJldmlld0VsZW0pO1xuICAgIH1cbiAgfSxcbiAgVGVzdEZpbGVQcmV2aWV3RW5hYmxlOiBmdW5jdGlvbiBUZXN0RmlsZVByZXZpZXdFbmFibGUoZmlsZUluZm8pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIFdGRENUX1JhZGlvR3JvdXAgPSB7XG4gIHJhZGlvR3JvdXBOYW1lOiBcIlwiLFxuICByYWRpb0dyb3VwV3JhcElkOiBcIlwiLFxuICBsZXZlbDJCaW5kQ29udHJvbElkOiBcIlwiLFxuICBJbml0U3R5bGU6IEhUTUxDb250cm9sLkluaXRTdHlsZSxcbiAgUmVuZGVyZXJDaGFpbjogZnVuY3Rpb24gUmVuZGVyZXJDaGFpbihfcmVuZGVyZXJDaGFpblBhcmFzKSB7XG4gICAgdmFyICRzaW5nbGVDb250cm9sRWxlbSA9IF9yZW5kZXJlckNoYWluUGFyYXMuJHNpbmdsZUNvbnRyb2xFbGVtO1xuICAgIHZhciBkYXRhU291cmNlID0gZGVjb2RlVVJJQ29tcG9uZW50KCRzaW5nbGVDb250cm9sRWxlbS5hdHRyKFwiZGF0YXNvdXJjZVwiKSk7XG4gICAgZGF0YVNvdXJjZSA9IEpzb25VdGlsaXR5LlN0cmluZ1RvSnNvbihkYXRhU291cmNlKTtcbiAgICB2YXIgZGVmYXVsdElzQ2hlY2tlZCA9IHRydWU7XG4gICAgJHNpbmdsZUNvbnRyb2xFbGVtLmhpZGUoKTtcbiAgICB2YXIgZGVmYXVsdFNlbGVjdGVkID0gJHNpbmdsZUNvbnRyb2xFbGVtLmF0dHIoXCJkZWZhdWx0c2VsZWN0ZWRcIik7XG4gICAgdGhpcy5yYWRpb0dyb3VwTmFtZSA9IFwicmFkaW9Hcm91cE5hbWVfXCIgKyAkc2luZ2xlQ29udHJvbEVsZW0uYXR0cihcImlkXCIpO1xuICAgIHRoaXMucmFkaW9Hcm91cFdyYXBJZCA9IFwicmFkaW9Hcm91cFdyYXBfXCIgKyAkc2luZ2xlQ29udHJvbEVsZW0uYXR0cihcImlkXCIpO1xuICAgIHRoaXMubGV2ZWwyQmluZENvbnRyb2xJZCA9ICRzaW5nbGVDb250cm9sRWxlbS5hdHRyKFwibGV2ZWwyYmluZGNvbnRyb2xpZFwiKTtcbiAgICAkKFwiI1wiICsgdGhpcy5yYWRpb0dyb3VwV3JhcElkKS5yZW1vdmUoKTtcbiAgICB2YXIgcmFkaW9Hcm91cERpdiA9ICQoXCI8ZGl2IGNsYXNzPSdyYWRpb0dyb3VwQ29udGFpbmVyJyBpZD0nXCIgKyB0aGlzLnJhZGlvR3JvdXBXcmFwSWQgKyBcIicgc3R5bGU9J21hcmdpbjogNHB4IDBweDsnIC8+XCIpO1xuICAgIHZhciByb3dudW0gPSAkc2luZ2xlQ29udHJvbEVsZW0uYXR0cihcInJvd251bVwiKTtcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFTb3VyY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gZGF0YVNvdXJjZVtpXTtcbiAgICAgIHZhciB0ZXh0ID0gaXRlbS5JVEVYVDtcbiAgICAgIHZhciB2YWx1ZSA9IGl0ZW0uSVZBTFVFO1xuICAgICAgdmFyIG5ld1JvdyA9IGZhbHNlO1xuXG4gICAgICBpZiAoaSAhPSAwICYmIHJvd251bSA+IDEpIHtcbiAgICAgICAgbmV3Um93ID0gaSAlIHJvd251bSA9PSAwO1xuICAgICAgfSBlbHNlIGlmIChyb3dudW0gPT0gMSkge1xuICAgICAgICBuZXdSb3cgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4dCAhPSBcIi0t6K+36YCJ5oupLS1cIikge1xuICAgICAgICB2YXIgaXRlbVJhZGlvSWQgPSB0aGlzLnJhZGlvR3JvdXBOYW1lICsgXCJfXCIgKyBpO1xuICAgICAgICB2YXIgaXRlbVJhZGlvID0gJChcIjxpbnB1dCB0eXBlPSdyYWRpbycgbmFtZT0nXCIgKyB0aGlzLnJhZGlvR3JvdXBOYW1lICsgXCInIGlkPSdcIiArIGl0ZW1SYWRpb0lkICsgXCInIC8+XCIpO1xuICAgICAgICBpdGVtUmFkaW8udmFsKHZhbHVlKTtcblxuICAgICAgICBpZiAodmFsdWUgPT0gZGVmYXVsdFNlbGVjdGVkKSB7XG4gICAgICAgICAgaXRlbVJhZGlvLnByb3AoXCJjaGVja2VkXCIsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmFkaW9Hcm91cERpdi5hcHBlbmQoaXRlbVJhZGlvKTtcbiAgICAgICAgcmFkaW9Hcm91cERpdi5hcHBlbmQoXCI8bGFiZWwgZm9yPSdcIiArIGl0ZW1SYWRpb0lkICsgXCInIHN0eWxlPSdtYXJnaW4tcmlnaHQ6IDhweCc+XCIgKyB0ZXh0ICsgXCI8L2xhYmVsPlwiKTtcblxuICAgICAgICBpZiAobmV3Um93KSB7XG4gICAgICAgICAgcmFkaW9Hcm91cERpdi5hcHBlbmQoXCI8YnIgLz5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5JczJMZXZlbEREKCkpIHtcbiAgICAgICAgICBpdGVtUmFkaW8uY2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9ICQodGhpcykudmFsKCk7XG5cbiAgICAgICAgICAgIF90aGlzLlRyeUJpbmQyTGV2ZWxERCgkc2luZ2xlQ29udHJvbEVsZW0sIHZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgICRzaW5nbGVDb250cm9sRWxlbS5hZnRlcihyYWRpb0dyb3VwRGl2KTtcblxuICAgIGlmIChkZWZhdWx0U2VsZWN0ZWQpIHt9XG4gIH0sXG4gIFJlbmRlcmVyRGF0YUNoYWluOiBmdW5jdGlvbiBSZW5kZXJlckRhdGFDaGFpbigpIHt9LFxuICBHZXRWYWx1ZTogZnVuY3Rpb24gR2V0VmFsdWUoJGVsZW0sIG9yaWdpbmFsRGF0YSwgcGFyYXMpIHtcbiAgICBvcmlnaW5hbERhdGEudmFsdWUgPSAkKFwiW25hbWU9J1wiICsgdGhpcy5yYWRpb0dyb3VwTmFtZSArIFwiJ106Y2hlY2tlZFwiKS52YWwoKTtcblxuICAgIGlmIChvcmlnaW5hbERhdGEudmFsdWUgPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvcmlnaW5hbERhdGEudmFsdWUgPSBcIlwiO1xuICAgIH1cblxuICAgIHJldHVybiBvcmlnaW5hbERhdGE7XG4gIH0sXG4gIFNldFZhbHVlOiBmdW5jdGlvbiBTZXRWYWx1ZSgkZWxlbSwgZmllbGRQTywgcmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvLCBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcykge1xuICAgIGlmIChmaWVsZFBPKSB7XG4gICAgICAkZWxlbS52YWwoZmllbGRQTy52YWx1ZSk7XG4gICAgICAkZWxlbS5hdHRyKFwiY29udHJvbF92YWx1ZVwiLCBmaWVsZFBPLnZhbHVlKTtcbiAgICAgICQoXCJbbmFtZT0nXCIgKyB0aGlzLnJhZGlvR3JvdXBOYW1lICsgXCInXVt2YWx1ZT0nXCIgKyBmaWVsZFBPLnZhbHVlICsgXCInXVwiKS5wcm9wKFwiY2hlY2tlZFwiLCB0cnVlKTtcblxuICAgICAgaWYgKGZpZWxkUE8udmFsdWUpIHtcbiAgICAgICAgdGhpcy5UcnlCaW5kMkxldmVsREQoJGVsZW0sIGZpZWxkUE8udmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgVG9WaWV3U3RhdHVzOiBmdW5jdGlvbiBUb1ZpZXdTdGF0dXMoJGVsZW0sIGZpZWxkUE8sIHJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQbywgX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMpIHtcbiAgICAkKFwiW25hbWU9J1wiICsgdGhpcy5yYWRpb0dyb3VwTmFtZSArIFwiJ11cIikucGFyZW50KCkucmVtb3ZlKCk7XG4gICAgdmFyIG9sZEFsbEF0dHJzID0gQmFzZVV0aWxpdHkuR2V0RWxlbUFsbEF0dHIoJGVsZW0pO1xuICAgIHZhciAkdmlld0VsZW0gPSAkKFwiPGxhYmVsIC8+XCIpO1xuICAgICR2aWV3RWxlbS5hdHRyKG9sZEFsbEF0dHJzKTtcbiAgICAkdmlld0VsZW0ucmVtb3ZlQ2xhc3MoKTtcbiAgICAkdmlld0VsZW0uc2hvdygpO1xuICAgICR2aWV3RWxlbS50ZXh0KCRlbGVtLnZhbCgpKTtcbiAgICAkZWxlbS5yZXBsYWNlV2l0aCgkdmlld0VsZW0pO1xuICB9LFxuICBJczJMZXZlbEREOiBmdW5jdGlvbiBJczJMZXZlbEREKCkge1xuICAgIHJldHVybiBTdHJpbmdVdGlsaXR5LklzTm90TnVsbE9yRW1wdHkodGhpcy5sZXZlbDJCaW5kQ29udHJvbElkKTtcbiAgfSxcbiAgVHJ5QmluZDJMZXZlbEREOiBmdW5jdGlvbiBUcnlCaW5kMkxldmVsREQoJHNpbmdsZUNvbnRyb2xFbGVtLCB2YWx1ZSkge1xuICAgIHZhciBsZXZlbDJCaW5kQ29udHJvbElkID0gJHNpbmdsZUNvbnRyb2xFbGVtLmF0dHIoXCJsZXZlbDJiaW5kY29udHJvbGlkXCIpO1xuXG4gICAgaWYgKGxldmVsMkJpbmRDb250cm9sSWQpIHtcbiAgICAgIHZhciBkYXRhU291cmNlQWxsTGV2ZWwgPSBkZWNvZGVVUklDb21wb25lbnQoJHNpbmdsZUNvbnRyb2xFbGVtLmF0dHIoXCJkYXRhc291cmNlYWxsbGV2ZWxcIikpO1xuICAgICAgZGF0YVNvdXJjZUFsbExldmVsID0gSnNvblV0aWxpdHkuU3RyaW5nVG9Kc29uKGRhdGFTb3VyY2VBbGxMZXZlbCk7XG4gICAgICB2YXIgY2hpbGREREFycmF5ID0gQXJyYXlVdGlsaXR5LldoZXJlKGRhdGFTb3VyY2VBbGxMZXZlbCwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uUEFSRU5UVkFMVUUgPT0gdmFsdWU7XG4gICAgICB9KTtcbiAgICAgIHZhciAkbDJFbGVtID0gJChcIiNcIiArIGxldmVsMkJpbmRDb250cm9sSWQpO1xuICAgICAgdmFyIGNoaWxkRERBcnJheUpzb24gPSBKc29uVXRpbGl0eS5Kc29uVG9TdHJpbmcoY2hpbGREREFycmF5KTtcbiAgICAgICRsMkVsZW0uYXR0cihcImRhdGFzb3VyY2VcIiwgY2hpbGREREFycmF5SnNvbik7XG4gICAgICB2YXIgZWxlbUluc3RhbmNlID0gSFRNTENvbnRyb2wuR2V0Q29udHJvbEluc3RhbmNlQnlFbGVtKCRsMkVsZW0pO1xuICAgICAgZWxlbUluc3RhbmNlLlJlbmRlcmVyQ2hhaW4oe1xuICAgICAgICAkc2luZ2xlQ29udHJvbEVsZW06ICRsMkVsZW1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIFdGRENUX1NlbGVjdE9yZ2FuVXNlciA9IHtcbiAgYWNJbnRlcmZhY2U6IHtcbiAgICBnZXRPcmdhblRyZWVEYXRhOiBcIi9SZXN0L0J1aWxkZXIvUnVuVGltZS9PcmdhblJ1bnRpbWUvR2V0RnVsbEVuYWJsZU9yZ2FuXCIsXG4gICAgcmVsb2FkTGlzdERhdGE6IFwiL1Jlc3QvQnVpbGRlci9SdW5UaW1lL1VzZXJSdW50aW1lL0dldFVzZXJCeU9yZ2FuSWRcIlxuICB9LFxuICB0cmVlQ29uZmlnOiB7XG4gICAgdHJlZUlkRmllbGROYW1lOiBcIm9yZ2FuSWRcIixcbiAgICB0cmVlT2JqOiBudWxsLFxuICAgIHRyZWVTZWxlY3RlZE5vZGU6IG51bGwsXG4gICAgdHJlZVNldHRpbmc6IHtcbiAgICAgIGFzeW5jOiB7XG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcbiAgICAgICAgdXJsOiBcIlwiXG4gICAgICB9LFxuICAgICAgZGF0YToge1xuICAgICAgICBrZXk6IHtcbiAgICAgICAgICBuYW1lOiBcIm9yZ2FuTmFtZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHNpbXBsZURhdGE6IHtcbiAgICAgICAgICBlbmFibGU6IHRydWUsXG4gICAgICAgICAgaWRLZXk6IFwib3JnYW5JZFwiLFxuICAgICAgICAgIHBJZEtleTogXCJvcmdhblBhcmVudElkXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNhbGxiYWNrOiB7XG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQsIHRyZWVJZCwgdHJlZU5vZGUpIHtcbiAgICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLmdldFpUcmVlT2JqKHRyZWVJZCkuX2hvc3Q7XG5cbiAgICAgICAgICBfc2VsZi5TZWxlY3RlZE9yZ2FuTm9kZShldmVudCwgdHJlZUlkLCB0cmVlTm9kZSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQXN5bmNTdWNjZXNzOiBmdW5jdGlvbiBvbkFzeW5jU3VjY2VzcyhldmVudCwgdHJlZUlkLCB0cmVlTm9kZSwgbXNnKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgdXNlckNvbmZpZzoge1xuICAgIHVzZXJXYXJwRWxlbU9iajogbnVsbFxuICB9LFxuICBzZWxlY3RlZFVzZXI6IHtcbiAgICBkYXRhOiBbXVxuICB9LFxuICBfb2JqZWN0VHlwZTogXCJJbnN0YW5jZVwiLFxuICBfcHJvcDoge1xuICAgIGJ1dHRvbklkOiBudWxsLFxuICAgIGJ1dHRvblRleHQ6IG51bGwsXG4gICAgbXVsdGlwbGVTcGxpdDogbnVsbCxcbiAgICByZXN1bHROYW1lQmluZFRvQ29udHJvbEZpZWxkOiBudWxsLFxuICAgIHJlc3VsdFZhbHVlQmluZFRvQ29udHJvbEZpZWxkOiBudWxsLFxuICAgIHJlc3VsdE5hbWVCaW5kVG9Db250cm9sSWQ6IG51bGwsXG4gICAgcmVzdWx0VmFsdWVCaW5kVG9Db250cm9sSWQ6IG51bGwsXG4gICAgc2VsZWN0Q29uZGl0aW9uOiBudWxsLFxuICAgIHdpbmRvd0NhcHRpb246IG51bGwsXG4gICAgc2VsZWN0TnVtYmVyOiBudWxsLFxuICAgIHNldHRpbmdUeXBlOiBudWxsLFxuICAgIGRlZmF1bHRTZWxlY3RlZE9yZ2FuSWQ6IG51bGwsXG4gICAgY29udGFpbmVySWQ6IG51bGwsXG4gICAgc2luZ2xlU2VsZWN0QXV0b0Nsb3NlOiBudWxsXG4gIH0sXG4gIFJlbmRlcmVyQ2hhaW46IGZ1bmN0aW9uIFJlbmRlcmVyQ2hhaW4oX3JlbmRlcmVyQ2hhaW5QYXJhcykge1xuICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSBfcmVuZGVyZXJDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgICB2YXIgJGJ1dHRvbiA9ICRzaW5nbGVDb250cm9sRWxlbTtcbiAgICB2YXIgYnV0dG9uVGV4dCA9ICRidXR0b24uYXR0cihcImJ1dHRvbnRleHRcIik7XG4gICAgJGJ1dHRvbi50ZXh0KGJ1dHRvblRleHQpO1xuICAgICRidXR0b24uY3NzKHtcbiAgICAgIFwicGFkZGluZ1wiOiBcIjJweCA2cHhcIlxuICAgIH0pO1xuICAgICRidXR0b24uYmluZChcImNsaWNrXCIsIHtcbiAgICAgIFwiYnV0dG9uRWxlbVwiOiAkYnV0dG9uLFxuICAgICAgXCJzZWxmSW5zdGFuY2VcIjogdGhpc1xuICAgIH0sIHRoaXMuQ2xpY2tFdmVudCk7XG4gIH0sXG4gIFJlbmRlcmVyRGF0YUNoYWluOiBmdW5jdGlvbiBSZW5kZXJlckRhdGFDaGFpbigpIHt9LFxuICBHZXRWYWx1ZTogSFRNTENvbnRyb2wuR2V0VmFsdWUsXG4gIFNldFZhbHVlOiBIVE1MQ29udHJvbC5TZXRWYWx1ZSxcbiAgVG9WaWV3U3RhdHVzOiBIVE1MQ29udHJvbC5Ub1ZpZXdTdGF0dXMsXG4gIEJ1aWxkQ29udGVudEhUTUw6IGZ1bmN0aW9uIEJ1aWxkQ29udGVudEhUTUwoYnV0dG9uSWQsIHNlbGVjdGVkT3JnYW5JZCkge1xuICAgIHZhciBjb250YWluZXJJZCA9IFwiZGlhbG9nQ29udGFpbmVyX1wiICsgYnV0dG9uSWQ7XG4gICAgdmFyIHVzZXJDb250YWluZXJJZCA9IGNvbnRhaW5lcklkICsgXCJfdXNlcldyYXBcIjtcbiAgICB2YXIgdHJlZVVMSWQgPSBcInRyZWVVTElkX1wiICsgYnV0dG9uSWQ7XG5cbiAgICBpZiAoJChcIiNcIiArIGNvbnRhaW5lcklkKS5sZW5ndGggPT0gMCkge1xuICAgICAgdmFyIGh0bWxUZW1wbGF0ZSA9IFwiPGRpdiBpZD0nXCIuY29uY2F0KGNvbnRhaW5lcklkLCBcIicgY2xhc3M9XFxcInNlbGVjdF9vcmdhbl91c2VyX3dyYXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibGVmdF90cmVlX3dyYXBcXFwiPjx1bCByZWY9XFxcInpUcmVlVUxcXFwiIGNsYXNzPVxcXCJ6dHJlZVxcXCIgaWQ9XFxcIlwiKS5jb25jYXQodHJlZVVMSWQsIFwiXFxcIj48L3VsPjwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicmlnaHRfc2VsZWN0ZWRfd3JhcFxcXCIgaWQ9XFxcIlwiKS5jb25jYXQodXNlckNvbnRhaW5lcklkLCBcIlxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJidXR0b25zX291dGVyX3dyYXBcXFwiPjxkaXYgY2xhc3M9XFxcImJ1dHRvbnNfaW5uZXJfd3JhcFxcXCI+PGJ1dHRvbiBjbGFzcz1cXFwiYnV0dG9uIGJ1dHRvbi1wcmltYXJ5XFxcIiBuYW1lPVxcXCJidG5FbnN1cmVcXFwiPlxcdTc4NkVcXHU4QkE0PC9idXR0b24+PGJ1dHRvbiBjbGFzcz1cXFwiYnV0dG9uXFxcIiBuYW1lPVxcXCJidG5DbG9zZVxcXCI+XFx1NTE3M1xcdTk1RUQ8L2J1dHRvbj48YnV0dG9uIGNsYXNzPVxcXCJidXR0b25cXFwiIG5hbWU9XFxcImJ0bkNsZWFyXFxcIj5cXHU2RTA1XFx1N0E3QVxcdTkwMDlcXHU2MkU5PC9idXR0b24+PC9kaXY+PC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlwiKTtcbiAgICAgIHZhciAkY29udGFpbmVyRGl2ID0gJChodG1sVGVtcGxhdGUpO1xuICAgICAgJGNvbnRhaW5lckRpdi5oaWRlKCk7XG4gICAgICAkKGRvY3VtZW50LmJvZHkpLmFwcGVuZCgkY29udGFpbmVyRGl2KTtcblxuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgJGNvbnRhaW5lckRpdi5maW5kKFwiW25hbWU9J2J0bkVuc3VyZSddXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuRW5zdXJlQ2xpY2tFdmVudCgpO1xuICAgICAgfSk7XG4gICAgICAkY29udGFpbmVyRGl2LmZpbmQoXCJbbmFtZT0nYnRuQ2xvc2UnXVwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLkNsb3NlQ2xpY2tFdmVudCgpO1xuICAgICAgfSk7XG4gICAgICAkY29udGFpbmVyRGl2LmZpbmQoXCJbbmFtZT0nYnRuQ2xlYXInXVwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLkNsZWFyQ2xpY2tFdmVudCgpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnVzZXJDb25maWcudXNlcldhcnBFbGVtT2JqID0gJGNvbnRhaW5lckRpdi5maW5kKFwiI1wiICsgdXNlckNvbnRhaW5lcklkKTtcbiAgICAgIEFqYXhVdGlsaXR5LlBvc3QodGhpcy5hY0ludGVyZmFjZS5nZXRPcmdhblRyZWVEYXRhLCB7fSwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICAgIHRoaXMudHJlZUNvbmZpZy50cmVlT2JqID0gJC5mbi56VHJlZS5pbml0KCQoXCIjXCIgKyB0cmVlVUxJZCksIHRoaXMudHJlZUNvbmZpZy50cmVlU2V0dGluZywgcmVzdWx0LmRhdGEpO1xuICAgICAgICAgIHRoaXMudHJlZUNvbmZpZy50cmVlT2JqLmV4cGFuZEFsbCh0cnVlKTtcbiAgICAgICAgICB0aGlzLnRyZWVDb25maWcudHJlZU9iai5faG9zdCA9IHRoaXM7XG5cbiAgICAgICAgICBpZiAoIVN0cmluZ1V0aWxpdHkuSXNOdWxsT3JFbXB0eShzZWxlY3RlZE9yZ2FuSWQpKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMudHJlZUNvbmZpZy50cmVlT2JqLmdldE5vZGVCeVBhcmFtKFwib3JnYW5JZFwiLCBzZWxlY3RlZE9yZ2FuSWQsIG51bGwpO1xuICAgICAgICAgICAgdGhpcy50cmVlQ29uZmlnLnRyZWVPYmouc2VsZWN0Tm9kZShub2RlKTtcbiAgICAgICAgICAgIHRoaXMuQnVpbGRVc2VyVGFibGUoc2VsZWN0ZWRPcmdhbklkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgRGlhbG9nVXRpbGl0eS5BbGVydCh3aW5kb3csIERpYWxvZ1V0aWxpdHkuRGlhbG9nQWxlcnRJZCwge30sIHJlc3VsdC5tZXNzYWdlLCBmdW5jdGlvbiAoKSB7fSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiBjb250YWluZXJJZDtcbiAgfSxcbiAgQ2xlYXJVc2VyVGFibGU6IGZ1bmN0aW9uIENsZWFyVXNlclRhYmxlKCkge1xuICAgIHRoaXMudXNlckNvbmZpZy51c2VyV2FycEVsZW1PYmouaHRtbChcIlwiKTtcbiAgfSxcbiAgQnVpbGRVc2VyVGFibGU6IGZ1bmN0aW9uIEJ1aWxkVXNlclRhYmxlKG9yZ2FuSWQpIHtcbiAgICBBamF4VXRpbGl0eS5Qb3N0KHRoaXMuYWNJbnRlcmZhY2UucmVsb2FkTGlzdERhdGEsIHtcbiAgICAgIG9yZ2FuSWQ6IG9yZ2FuSWRcbiAgICB9LCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuQ2xlYXJVc2VyVGFibGUoKTtcbiAgICAgICAgdmFyICR1c2VyVGFibGUgPSAkKFwiPHRhYmxlIGNsYXNzPVxcXCJ1c2VyVGFibGVcXFwiPjx0cj48dGggc3R5bGU9XFxcIndpZHRoOiA0MHB4XFxcIj5cXHU5MDA5XFx1NjJFOTwvdGg+PHRoIHN0eWxlPVxcXCJ3aWR0aDogODBweFxcXCI+XFx1NTlEM1xcdTU0MEQ8L3RoPjx0aCBzdHlsZT1cXFwid2lkdGg6IDEwMHB4XFxcIj5cXHU2MjRCXFx1NjczQVxcdTUzRjdcXHU3ODAxPC90aD48dGg+XFx1NTkwN1xcdTZDRTg8L3RoPjwvdHI+PC90YWJsZT5cIik7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHQuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciB1c2VyRGF0YSA9IHJlc3VsdC5kYXRhW2ldO1xuICAgICAgICAgIHZhciB1c2VySWQgPSB1c2VyRGF0YS51c2VySWQ7XG4gICAgICAgICAgdmFyIHVzZXJOYW1lID0gU3RyaW5nVXRpbGl0eS5FbmNvZGVIdG1sKHVzZXJEYXRhLnVzZXJOYW1lKTtcbiAgICAgICAgICB2YXIgdXNlclBob25lTnVtYmVyID0gU3RyaW5nVXRpbGl0eS5FbmNvZGVIdG1sKHVzZXJEYXRhLnVzZXJQaG9uZU51bWJlciA/IHVzZXJEYXRhLnVzZXJQaG9uZU51bWJlciA6IFwiXCIpO1xuICAgICAgICAgIHZhciB1c2VyRGVzYyA9IFN0cmluZ1V0aWxpdHkuRW5jb2RlSHRtbCh1c2VyRGF0YS51c2VyRGVzYyA/IHVzZXJEYXRhLnVzZXJEZXNjIDogXCJcIik7XG4gICAgICAgICAgdmFyIGNoZWNrQm94SWQgPSBcImNieF91c2VyX1wiICsgdXNlcklkO1xuICAgICAgICAgIHZhciBzZWxlY3ROdW1iZXIgPSBfdGhpcy5fcHJvcC5zZWxlY3ROdW1iZXI7XG5cbiAgICAgICAgICB2YXIgdXNlcklzU2VsZWN0ZWQgPSBfdGhpcy5UZXN0VXNlcklzU2VsZWN0ZWQodXNlckRhdGEpO1xuXG4gICAgICAgICAgdmFyICR0ciA9ICQoXCI8dHI+PHRkIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBjZW50ZXJcXFwiPjxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgaWQ9XFxcIlwiLmNvbmNhdChjaGVja0JveElkLCBcIlxcXCIgLz48L3RkPjx0ZCBzdHlsZT1cXFwidGV4dC1hbGlnbjogY2VudGVyXFxcIj5cIikuY29uY2F0KHVzZXJOYW1lLCBcIjwvdGQ+PHRkIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBjZW50ZXJcXFwiPlwiKS5jb25jYXQodXNlclBob25lTnVtYmVyLCBcIjwvdGQ+PHRkPlwiKS5jb25jYXQodXNlckRlc2MsIFwiPC90ZD48L3RyPlwiKSk7XG4gICAgICAgICAgJHRyLmJpbmQoXCJjbGlja1wiLCB7XG4gICAgICAgICAgICBcInNlbGZJbnN0YW5jZVwiOiB0aGlzLFxuICAgICAgICAgICAgXCJ1c2VyRGF0YVwiOiB1c2VyRGF0YSxcbiAgICAgICAgICAgIFwidXNlcklkXCI6IHVzZXJJZCxcbiAgICAgICAgICAgIFwidXNlck5hbWVcIjogdXNlck5hbWUsXG4gICAgICAgICAgICBcImNoZWNrQm94SWRcIjogY2hlY2tCb3hJZCxcbiAgICAgICAgICAgIFwic2VsZWN0TnVtYmVyXCI6IHNlbGVjdE51bWJlclxuICAgICAgICAgIH0sIHRoaXMuVXNlckNsaWNrRXZlbnQpO1xuICAgICAgICAgICR0ci5maW5kKFwiI1wiICsgY2hlY2tCb3hJZCkuYmluZChcImNsaWNrXCIsIHtcbiAgICAgICAgICAgIFwic2VsZkluc3RhbmNlXCI6IHRoaXMsXG4gICAgICAgICAgICBcInVzZXJEYXRhXCI6IHVzZXJEYXRhLFxuICAgICAgICAgICAgXCJ1c2VySWRcIjogdXNlcklkLFxuICAgICAgICAgICAgXCJ1c2VyTmFtZVwiOiB1c2VyTmFtZSxcbiAgICAgICAgICAgIFwiY2hlY2tCb3hJZFwiOiBjaGVja0JveElkLFxuICAgICAgICAgICAgXCJzZWxlY3ROdW1iZXJcIjogc2VsZWN0TnVtYmVyXG4gICAgICAgICAgfSwgdGhpcy5Vc2VyQ2xpY2tFdmVudCk7XG5cbiAgICAgICAgICBpZiAodXNlcklzU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICR0ci5maW5kKFwiI1wiICsgY2hlY2tCb3hJZCkucHJvcChcImNoZWNrZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJHVzZXJUYWJsZS5maW5kKFwidGJvZHlcIikuYXBwZW5kKCR0cik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVzZXJDb25maWcudXNlcldhcnBFbGVtT2JqLmFwcGVuZCgkdXNlclRhYmxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnQod2luZG93LCBEaWFsb2dVdGlsaXR5LkRpYWxvZ0FsZXJ0SWQsIHt9LCByZXN1bHQubWVzc2FnZSwgZnVuY3Rpb24gKCkge30pO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9LFxuICBTZWxlY3RlZE9yZ2FuTm9kZTogZnVuY3Rpb24gU2VsZWN0ZWRPcmdhbk5vZGUoZXZlbnQsIHRyZWVJZCwgdHJlZU5vZGUpIHtcbiAgICBjb25zb2xlLmxvZyh0cmVlTm9kZSk7XG4gICAgdGhpcy5CdWlsZFVzZXJUYWJsZSh0cmVlTm9kZS5vcmdhbklkKTtcbiAgfSxcbiAgVW5DaGVja0FsbFVzZXJFeGNsdWRlOiBmdW5jdGlvbiBVbkNoZWNrQWxsVXNlckV4Y2x1ZGUoY2hlY2tCb3hJZCkge1xuICAgIHRoaXMudXNlckNvbmZpZy51c2VyV2FycEVsZW1PYmouZmluZChcImlucHV0W3R5cGU9J2NoZWNrYm94J11baWQhPSdcIiArIGNoZWNrQm94SWQgKyBcIiddXCIpLnByb3AoXCJjaGVja2VkXCIsIGZhbHNlKTtcbiAgfSxcbiAgQ2xlYXJTZWxlY3RlZFVzZXI6IGZ1bmN0aW9uIENsZWFyU2VsZWN0ZWRVc2VyKCkge1xuICAgIHRoaXMuc2VsZWN0ZWRVc2VyLmRhdGEgPSBbXTtcbiAgfSxcbiAgQWRkVXNlclRvU2VsZWN0ZWREYXRhOiBmdW5jdGlvbiBBZGRVc2VyVG9TZWxlY3RlZERhdGEoc2VsZWN0TnVtYmVyLCB1c2VyRGF0YSkge1xuICAgIGlmIChzZWxlY3ROdW1iZXIgPT0gXCJzaW5nbGVcIikge1xuICAgICAgdGhpcy5DbGVhclNlbGVjdGVkVXNlcigpO1xuICAgICAgdGhpcy5zZWxlY3RlZFVzZXIuZGF0YS5wdXNoKHVzZXJEYXRhKTtcbiAgICB9IGVsc2UgaWYgKHNlbGVjdE51bWJlciA9PSBcIm11bHRpcGxlXCIpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRVc2VyLmRhdGEucHVzaCh1c2VyRGF0YSk7XG4gICAgfVxuICB9LFxuICBEZWxldGVVc2VyVG9TZWxlY3RlZERhdGE6IGZ1bmN0aW9uIERlbGV0ZVVzZXJUb1NlbGVjdGVkRGF0YShzZWxlY3ROdW1iZXIsIHVzZXJEYXRhKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnNlbGVjdGVkVXNlci5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5zZWxlY3RlZFVzZXIuZGF0YVtpXS51c2VySWQgPT0gdXNlckRhdGEudXNlcklkKSB7XG4gICAgICAgIEFycmF5VXRpbGl0eS5EZWxldGUodGhpcy5zZWxlY3RlZFVzZXIuZGF0YSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBUZXN0VXNlcklzU2VsZWN0ZWQ6IGZ1bmN0aW9uIFRlc3RVc2VySXNTZWxlY3RlZCh1c2VyRGF0YSkge1xuICAgIGlmICh0aGlzLnNlbGVjdGVkVXNlci5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zZWxlY3RlZFVzZXIuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFVzZXIuZGF0YVtpXS51c2VySWQgPT0gdXNlckRhdGEudXNlcklkKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIFVzZXJDbGlja0V2ZW50OiBmdW5jdGlvbiBVc2VyQ2xpY2tFdmVudChzZW5kZXIpIHtcbiAgICB2YXIgX3RoaXMgPSBzZW5kZXIuZGF0YS5zZWxmSW5zdGFuY2U7XG4gICAgdmFyIHVzZXJEYXRhID0gc2VuZGVyLmRhdGEudXNlckRhdGE7XG4gICAgdmFyIHVzZXJJZCA9IHNlbmRlci5kYXRhLnVzZXJJZDtcbiAgICB2YXIgdXNlck5hbWUgPSBzZW5kZXIuZGF0YS51c2VyTmFtZTtcbiAgICB2YXIgY2hlY2tCb3hJZCA9IHNlbmRlci5kYXRhLmNoZWNrQm94SWQ7XG4gICAgdmFyIHNlbGVjdE51bWJlciA9IHNlbmRlci5kYXRhLnNlbGVjdE51bWJlcjtcblxuICAgIGlmIChzZWxlY3ROdW1iZXIgPT0gXCJzaW5nbGVcIikge1xuICAgICAgX3RoaXMuVW5DaGVja0FsbFVzZXJFeGNsdWRlKGNoZWNrQm94SWQpO1xuICAgIH1cblxuICAgIGlmICghJChcIiNcIiArIGNoZWNrQm94SWQpLnByb3AoXCJjaGVja2VkXCIpKSB7XG4gICAgICAkKFwiI1wiICsgY2hlY2tCb3hJZCkucHJvcChcImNoZWNrZWRcIiwgdHJ1ZSk7XG5cbiAgICAgIF90aGlzLkFkZFVzZXJUb1NlbGVjdGVkRGF0YShzZWxlY3ROdW1iZXIsIHVzZXJEYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJChcIiNcIiArIGNoZWNrQm94SWQpLnByb3AoXCJjaGVja2VkXCIsIGZhbHNlKTtcblxuICAgICAgX3RoaXMuRGVsZXRlVXNlclRvU2VsZWN0ZWREYXRhKHNlbGVjdE51bWJlciwgdXNlckRhdGEpO1xuICAgIH1cblxuICAgIGlmIChfdGhpcy5zZWxlY3RlZFVzZXIuZGF0YS5sZW5ndGggPT0gMSAmJiBfdGhpcy5fcHJvcC5zaW5nbGVTZWxlY3RBdXRvQ2xvc2UgPT0gXCJ0cnVlXCIpIHtcbiAgICAgIF90aGlzLkVuc3VyZUNsaWNrRXZlbnQoKTtcbiAgICB9XG5cbiAgICBzZW5kZXIuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH0sXG4gIENsaWNrRXZlbnQ6IGZ1bmN0aW9uIENsaWNrRXZlbnQoc2VuZGVyKSB7XG4gICAgdmFyICRidXR0b24gPSBzZW5kZXIuZGF0YS5idXR0b25FbGVtO1xuICAgIHZhciBfc2VsZiA9IHNlbmRlci5kYXRhLnNlbGZJbnN0YW5jZTtcbiAgICBfc2VsZi5fcHJvcC5idXR0b25JZCA9ICRidXR0b24uYXR0cihcImlkXCIpO1xuICAgIHZhciB3aW5kb3dXaWR0aCA9IDcwMDtcbiAgICB2YXIgd2luZG93SGVpZ2h0ID0gNTAwO1xuICAgIF9zZWxmLl9wcm9wLmNvbnRhaW5lcklkID0gX3NlbGYuQnVpbGRDb250ZW50SFRNTChfc2VsZi5fcHJvcC5idXR0b25JZCwgX3NlbGYuX3Byb3AuZGVmYXVsdFNlbGVjdGVkT3JnYW5JZCk7XG4gICAgRGlhbG9nVXRpbGl0eS5EaWFsb2dFbGVtKF9zZWxmLl9wcm9wLmNvbnRhaW5lcklkLCB7XG4gICAgICB3aWR0aDogd2luZG93V2lkdGgsXG4gICAgICBoZWlnaHQ6IHdpbmRvd0hlaWdodCxcbiAgICAgIHRpdGxlOiBfc2VsZi5fcHJvcC53aW5kb3dDYXB0aW9uLFxuICAgICAgbW9kYWw6IHRydWVcbiAgICB9LCAxLCB0cnVlKTtcbiAgfSxcbiAgQnVpbGRTZWxlY3RlZE5hbWU6IGZ1bmN0aW9uIEJ1aWxkU2VsZWN0ZWROYW1lKCkge1xuICAgIHZhciBuYW1lcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnNlbGVjdGVkVXNlci5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuYW1lcy5wdXNoKHRoaXMuc2VsZWN0ZWRVc2VyLmRhdGFbaV0udXNlck5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lcy5qb2luKHRoaXMuX3Byb3AubXVsdGlwbGVTcGxpdCk7XG4gIH0sXG4gIEJ1aWxkU2VsZWN0ZWRWYWx1ZTogZnVuY3Rpb24gQnVpbGRTZWxlY3RlZFZhbHVlKCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zZWxlY3RlZFVzZXIuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWVzLnB1c2godGhpcy5zZWxlY3RlZFVzZXIuZGF0YVtpXS51c2VySWQpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXMuam9pbih0aGlzLl9wcm9wLm11bHRpcGxlU3BsaXQpO1xuICB9LFxuICBFbnN1cmVDbGlja0V2ZW50OiBmdW5jdGlvbiBFbnN1cmVDbGlja0V2ZW50KCkge1xuICAgIHZhciBwcm9wID0gdGhpcy5fcHJvcDtcblxuICAgIGlmIChwcm9wLnNldHRpbmdUeXBlID09IFwiYmluZ1RvQ29udHJvbFwiKSB7XG4gICAgICBpZiAocHJvcC5yZXN1bHROYW1lQmluZFRvQ29udHJvbElkKSB7XG4gICAgICAgICQoXCIjXCIgKyBwcm9wLnJlc3VsdE5hbWVCaW5kVG9Db250cm9sSWQpLnZhbCh0aGlzLkJ1aWxkU2VsZWN0ZWROYW1lKCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvcC5yZXN1bHRWYWx1ZUJpbmRUb0NvbnRyb2xJZCkge1xuICAgICAgICAkKFwiI1wiICsgcHJvcC5yZXN1bHRWYWx1ZUJpbmRUb0NvbnRyb2xJZCkudmFsKHRoaXMuQnVpbGRTZWxlY3RlZFZhbHVlKCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvcC5yZXN1bHROYW1lQmluZFRvQ29udHJvbEZpZWxkKSB7fVxuXG4gICAgICBpZiAocHJvcC5yZXN1bHRWYWx1ZUJpbmRUb0NvbnRyb2xGaWVsZCkge31cbiAgICB9XG5cbiAgICB0aGlzLkJpbmRSZXN1bHRUbyh0aGlzLkJ1aWxkU2VsZWN0ZWRWYWx1ZSgpLCB0aGlzLkJ1aWxkU2VsZWN0ZWROYW1lKCkpO1xuICAgIHRoaXMuQ2xvc2VDbGlja0V2ZW50KCk7XG4gIH0sXG4gIENsb3NlQ2xpY2tFdmVudDogZnVuY3Rpb24gQ2xvc2VDbGlja0V2ZW50KCkge1xuICAgIERpYWxvZ1V0aWxpdHkuQ2xvc2VCeUVsZW1JZCh0aGlzLl9wcm9wLmNvbnRhaW5lcklkKTtcbiAgfSxcbiAgQ2xlYXJDbGlja0V2ZW50OiBmdW5jdGlvbiBDbGVhckNsaWNrRXZlbnQoKSB7XG4gICAgdGhpcy5DbGVhclNlbGVjdGVkVXNlcigpO1xuICAgIHRoaXMuVW5DaGVja0FsbFVzZXJFeGNsdWRlKFwibm90XCIpO1xuICAgIHRoaXMuQmluZFJlc3VsdFRvKFwiXCIsIFwiXCIpO1xuICAgIHRoaXMuQ2xvc2VDbGlja0V2ZW50KCk7XG4gIH0sXG4gIEJpbmRSZXN1bHRUbzogZnVuY3Rpb24gQmluZFJlc3VsdFRvKHZhbHVlLCBuYW1lKSB7XG4gICAgdmFyIHByb3AgPSB0aGlzLl9wcm9wO1xuXG4gICAgaWYgKHByb3Auc2V0dGluZ1R5cGUgPT0gXCJiaW5nVG9Db250cm9sXCIpIHtcbiAgICAgIGlmIChwcm9wLnJlc3VsdE5hbWVCaW5kVG9Db250cm9sSWQpIHtcbiAgICAgICAgJChcIiNcIiArIHByb3AucmVzdWx0TmFtZUJpbmRUb0NvbnRyb2xJZCkudmFsKG5hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvcC5yZXN1bHRWYWx1ZUJpbmRUb0NvbnRyb2xJZCkge1xuICAgICAgICAkKFwiI1wiICsgcHJvcC5yZXN1bHRWYWx1ZUJpbmRUb0NvbnRyb2xJZCkudmFsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3AucmVzdWx0TmFtZUJpbmRUb0NvbnRyb2xGaWVsZCkge31cblxuICAgICAgaWYgKHByb3AucmVzdWx0VmFsdWVCaW5kVG9Db250cm9sRmllbGQpIHt9XG4gICAgfVxuICB9XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgV0ZEQ1RfU2ltcGxlTGFiZWwgPSB7XG4gIFJlbmRlcmVyQ2hhaW46IEhUTUxDb250cm9sLlJlbmRlcmVyQ2hhaW4sXG4gIFJlbmRlcmVyRGF0YUNoYWluOiBIVE1MQ29udHJvbC5SZW5kZXJlckRhdGFDaGFpbixcbiAgR2V0VmFsdWU6IGZ1bmN0aW9uIEdldFZhbHVlKCRlbGVtLCBvcmlnaW5hbERhdGEsIHBhcmFzKSB7XG4gICAgb3JpZ2luYWxEYXRhLnZhbHVlID0gJGVsZW0udGV4dCgpO1xuICAgIHJldHVybiBvcmlnaW5hbERhdGE7XG4gIH0sXG4gIFNldFZhbHVlOiBmdW5jdGlvbiBTZXRWYWx1ZSgkZWxlbSwgZmllbGRQTywgcmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvLCBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcykge1xuICAgIGlmIChmaWVsZFBPKSB7XG4gICAgICB2YXIgZGVmZm9ybWF0ID0gJGVsZW0uYXR0cihcImRlZmZvcm1hdFwiKTtcblxuICAgICAgaWYgKGRlZmZvcm1hdCA9PSBcInl5eXktTU0tZGRcIikge1xuICAgICAgICB2YXIgY3RWYWx1ZSA9IGZpZWxkUE8udmFsdWU7XG5cbiAgICAgICAgaWYgKGN0VmFsdWUpIHtcbiAgICAgICAgICB2YXIgY3REYXRlID0gRGF0ZVV0aWxpdHkuQ29udmVydEZyb21TdHJpbmcoY3RWYWx1ZSk7XG4gICAgICAgICAgY3RWYWx1ZSA9IERhdGVVdGlsaXR5LkZvcm1hdChjdERhdGUsIGRlZmZvcm1hdCk7XG4gICAgICAgIH1cblxuICAgICAgICAkZWxlbS50ZXh0KGN0VmFsdWUpO1xuICAgICAgICAkZWxlbS5hdHRyKFwiY29udHJvbF92YWx1ZVwiLCBjdFZhbHVlKTtcbiAgICAgICAgJGVsZW0uYXR0cihcImNvbnRyb2xfc291cmNlX3ZhbHVlXCIsIGZpZWxkUE8udmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGVsZW0udGV4dChmaWVsZFBPLnZhbHVlKTtcbiAgICAgICAgJGVsZW0uYXR0cihcImNvbnRyb2xfdmFsdWVcIiwgZmllbGRQTy52YWx1ZSk7XG4gICAgICAgICRlbGVtLmF0dHIoXCJjb250cm9sX3NvdXJjZV92YWx1ZVwiLCBmaWVsZFBPLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBXRkRDVF9TdWJGb3JtTGlzdENvbnRhaW5lciA9IHtcbiAgX0FkZEJ1dHRvbkVsZW06IG51bGwsXG4gIF8kVGVtcGxhdGVUYWJsZVJvdzogbnVsbCxcbiAgXyRTaW5nbGVDb250cm9sRWxlbTogbnVsbCxcbiAgXyRUYWJsZUVsZW06IG51bGwsXG4gIF8kVGFibGVIZWFkRWxlbTogbnVsbCxcbiAgXyRUYWJsZUJvZHlFbGVtOiBudWxsLFxuICBfRWRpdEluUm93OiB0cnVlLFxuICBfRGlzcGxheV9PUEJ1dHRvbnNfQWRkOiB0cnVlLFxuICBfRGlzcGxheV9PUEJ1dHRvbnNfVXBkYXRlOiB0cnVlLFxuICBfRGlzcGxheV9PUEJ1dHRvbnNfRGVsOiB0cnVlLFxuICBfRGlzcGxheV9PUEJ1dHRvbnNfVmlldzogdHJ1ZSxcbiAgX0Zvcm1SdW50aW1lSG9zdDogbnVsbCxcbiAgX0Zvcm1EYXRhUmVsYXRpb25MaXN0OiBudWxsLFxuICBSZW5kZXJlckNoYWluOiBmdW5jdGlvbiBSZW5kZXJlckNoYWluKF9yZW5kZXJlckNoYWluUGFyYXMpIHtcbiAgICB2YXIgJHNpbmdsZUNvbnRyb2xFbGVtID0gX3JlbmRlcmVyQ2hhaW5QYXJhcy4kc2luZ2xlQ29udHJvbEVsZW07XG4gICAgdGhpcy5fJFNpbmdsZUNvbnRyb2xFbGVtID0gJHNpbmdsZUNvbnRyb2xFbGVtO1xuICAgIHRoaXMuXyRUYWJsZUVsZW0gPSB0aGlzLl8kU2luZ2xlQ29udHJvbEVsZW0uZmluZChcInRhYmxlXCIpO1xuICAgIHRoaXMuXyRUYWJsZUJvZHlFbGVtID0gdGhpcy5fJFRhYmxlRWxlbS5maW5kKFwidGJvZHlcIik7XG4gICAgdGhpcy5fJFRhYmxlSGVhZEVsZW0gPSB0aGlzLl8kVGFibGVFbGVtLmZpbmQoXCJ0aGVhZFwiKTtcbiAgICB0aGlzLl9FZGl0SW5Sb3cgPSAkc2luZ2xlQ29udHJvbEVsZW0uYXR0cihcImVkaXRpbnJvd1wiKSA9PSBcImZhbHNlXCIgPyBmYWxzZSA6IHRydWU7XG4gICAgdGhpcy5fRm9ybVJ1bnRpbWVIb3N0ID0gX3JlbmRlcmVyQ2hhaW5QYXJhcy5mb3JtUnVudGltZUluc3RhbmNlO1xuICAgIHRoaXMuX0Zvcm1EYXRhUmVsYXRpb25MaXN0ID0gdGhpcy5fRm9ybVJ1bnRpbWVIb3N0Ll9Gb3JtRGF0YVJlbGF0aW9uTGlzdDtcbiAgICB2YXIgb3BidXR0b25zID0gJHNpbmdsZUNvbnRyb2xFbGVtLmF0dHIoXCJvcGJ1dHRvbnNcIik7XG4gICAgdGhpcy5fRGlzcGxheV9PUEJ1dHRvbnNfQWRkID0gb3BidXR0b25zLmluZGV4T2YoXCJhZGRcIikgPj0gMDtcbiAgICB0aGlzLl9EaXNwbGF5X09QQnV0dG9uc19VcGRhdGUgPSBvcGJ1dHRvbnMuaW5kZXhPZihcInVwZGF0ZVwiKSA+PSAwO1xuICAgIHRoaXMuX0Rpc3BsYXlfT1BCdXR0b25zX0RlbCA9IG9wYnV0dG9ucy5pbmRleE9mKFwiZGVsZXRlXCIpID49IDA7XG4gICAgdGhpcy5fRGlzcGxheV9PUEJ1dHRvbnNfVmlldyA9IG9wYnV0dG9ucy5pbmRleE9mKFwidmlld1wiKSA+PSAwO1xuICAgIHZhciBzb3VyY2VIVE1MID0gJHNpbmdsZUNvbnRyb2xFbGVtLmh0bWwoKTtcbiAgICB2YXIgc291cmNlVGFibGUgPSAkc2luZ2xlQ29udHJvbEVsZW0uZmluZChcInRhYmxlW2lzX3RlbXBsYXRlX3RhYmxlPSd0cnVlJ11cIik7XG4gICAgc291cmNlVGFibGUuYWRkQ2xhc3MoXCJzdWItZm9ybS1saXN0LXRhYmxlXCIpO1xuICAgICRzaW5nbGVDb250cm9sRWxlbS5odG1sKFwiXCIpO1xuICAgIHRoaXMuX0FkZEJ1dHRvbkVsZW0gPSAkKFwiPGRpdiBjbGFzcz0nc2ZsYi1idXR0b24gc2ZsYi1hZGQnIHRpdGxlPSfmlrDlop4nPuaWsOWinjwvZGl2PlwiKTtcblxuICAgIGlmICh0aGlzLl9EaXNwbGF5X09QQnV0dG9uc19BZGQpIHtcbiAgICAgICRzaW5nbGVDb250cm9sRWxlbS5wcmVwZW5kKFwiPGRpdiBjbGFzcz0nc3ViLWZvcm0tbGlzdC1idXR0b24td3JhcCc+PC9kaXY+XCIpLmZpbmQoXCJkaXZcIikuYXBwZW5kKHRoaXMuX0FkZEJ1dHRvbkVsZW0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9EaXNwbGF5X09QQnV0dG9uc19EZWwgfHwgdGhpcy5fRGlzcGxheV9PUEJ1dHRvbnNfVXBkYXRlIHx8IHRoaXMuX0Rpc3BsYXlfT1BCdXR0b25zX1ZpZXcpIHtcbiAgICAgIHRoaXMuXyRUYWJsZUhlYWRFbGVtLmZpbmQoXCJ0clwiKS5hcHBlbmQoXCI8dGggc3R5bGU9J3dpZHRoOiAxMjBweCc+5pON5L2cPC90aD5cIik7XG4gICAgfVxuXG4gICAgJHNpbmdsZUNvbnRyb2xFbGVtLmFwcGVuZChzb3VyY2VUYWJsZSk7XG4gICAgdmFyIGluc3RhbmNlTmFtZSA9IEhUTUxDb250cm9sLkdldENvbnRyb2xJbnN0YW5jZU5hbWVCeUVsZW0oJHNpbmdsZUNvbnRyb2xFbGVtKTtcblxuICAgIHRoaXMuX0FkZEJ1dHRvbkVsZW0uYmluZChcImNsaWNrXCIsIHtcbiAgICAgIGhvc3RFbGVtOiAkc2luZ2xlQ29udHJvbEVsZW0sXG4gICAgICBfcmVuZGVyZXJDaGFpblBhcmFzOiBfcmVuZGVyZXJDaGFpblBhcmFzLFxuICAgICAgc2VsZk9iajogdGhpcyxcbiAgICAgIGluc3RhbmNlTmFtZTogaW5zdGFuY2VOYW1lXG4gICAgfSwgdGhpcy5BZGRFdmVudCk7XG5cbiAgICB0aGlzLl8kVGVtcGxhdGVUYWJsZVJvdyA9ICRzaW5nbGVDb250cm9sRWxlbS5maW5kKFwidGFibGUgdGJvZHkgdHJcIikuY2xvbmUoKTtcbiAgICAkc2luZ2xlQ29udHJvbEVsZW0uZmluZChcInRhYmxlIHRib2R5IHRyXCIpLnJlbW92ZSgpO1xuICAgIHZhciB2YWxpZGF0ZVJlbmRlcmVyQ2hhaW5FbmFibGUgPSB0aGlzLlZhbGlkYXRlUmVuZGVyZXJDaGFpbkVuYWJsZSgpO1xuXG4gICAgaWYgKCF2YWxpZGF0ZVJlbmRlcmVyQ2hhaW5FbmFibGUuc3VjY2Vzcykge1xuICAgICAgRGlhbG9nVXRpbGl0eS5BbGVydFRleHQodmFsaWRhdGVSZW5kZXJlckNoYWluRW5hYmxlLm1zZyk7XG4gICAgfVxuXG4gICAgdmFyIHJlbGF0aW9uUE8gPSB0aGlzLlRyeUdldFJlbGF0aW9uUE9DbG9uZSgpO1xuICAgICRzaW5nbGVDb250cm9sRWxlbS5hdHRyKFwicmVsYXRpb25fcG9faWRcIiwgcmVsYXRpb25QTy5pZCk7XG4gIH0sXG4gIFJlbmRlcmVyRGF0YUNoYWluOiBmdW5jdGlvbiBSZW5kZXJlckRhdGFDaGFpbihfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcykge1xuICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcy4kc2luZ2xlQ29udHJvbEVsZW07XG4gICAgdmFyIHJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQbyA9IF9yZW5kZXJlckRhdGFDaGFpblBhcmFzLnJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQbztcbiAgICB2YXIgcmVsYXRpb25fcG9faWQgPSAkc2luZ2xlQ29udHJvbEVsZW0uYXR0cihcInJlbGF0aW9uX3BvX2lkXCIpO1xuICAgIHZhciByZWxhdGlvblBPID0gRm9ybVJlbGF0aW9uUE9VdGlsaXR5LkZpbmRSZWxhdGlvblBPSW5SZWxhdGlvbkZvcm1SZWNvcmRDb21wbGV4UG8ocmVsYXRpb25Gb3JtUmVjb3JkQ29tcGxleFBvLCByZWxhdGlvbl9wb19pZCk7XG4gICAgdmFyIGxpc3REYXRhUmVjb3JkID0gRm9ybVJlbGF0aW9uUE9VdGlsaXR5LkdldDFUb05EYXRhUmVjb3JkKHJlbGF0aW9uUE8pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0RGF0YVJlY29yZC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG9uZURhdGFSZWNvcmQgPSBsaXN0RGF0YVJlY29yZFtpXTtcblxuICAgICAgaWYgKHRoaXMuX0VkaXRJblJvdykge1xuICAgICAgICB0aGlzLklubmVyUm93X0FkZFJvd1RvQ29udGFpbmVyKG9uZURhdGFSZWNvcmQsIHJlbGF0aW9uUE8ucGtGaWVsZE5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNoaWxkUmVsYXRpb25QT0FycmF5ID0gW107XG4gICAgICAgIHZhciBzdWJSZWxhdGlvblBPID0gQXJyYXlVdGlsaXR5LldoZXJlU2luZ2xlKHJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQby5mb3JtUmVjb3JkRGF0YVJlbGF0aW9uUE9MaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtLnBhcmVudElkID09IHJlbGF0aW9uX3BvX2lkO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGNsb25lU3ViUmVsYXRpb25QTyA9IEFycmF5VXRpbGl0eS5XaGVyZVNpbmdsZSh0aGlzLl9Gb3JtRGF0YVJlbGF0aW9uTGlzdCwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gaXRlbS5wYXJlbnRJZCA9PSByZWxhdGlvbl9wb19pZDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHN1YlJlbGF0aW9uUE8pIHtcbiAgICAgICAgICB2YXIgc2VsZktleUZpZWxkTmFtZSA9IHN1YlJlbGF0aW9uUE8uc2VsZktleUZpZWxkTmFtZTtcbiAgICAgICAgICB2YXIgb3V0ZXJLZXlGaWVsZE5hbWUgPSBzdWJSZWxhdGlvblBPLm91dGVyS2V5RmllbGROYW1lO1xuICAgICAgICAgIHZhciBvdXRlcktleUZpZWxkVmFsdWUgPSBGb3JtUmVsYXRpb25QT1V0aWxpdHkuRmluZEZpZWxkVmFsdWVJbk9uZURhdGFSZWNvcmQob25lRGF0YVJlY29yZCwgb3V0ZXJLZXlGaWVsZE5hbWUpO1xuICAgICAgICAgIHZhciB0ZW1wUE8gPSBKc29uVXRpbGl0eS5DbG9uZVNpbXBsZShjbG9uZVN1YlJlbGF0aW9uUE8pO1xuICAgICAgICAgIHZhciBhbGxSZWNvcmRMaXN0ID0gRm9ybVJlbGF0aW9uUE9VdGlsaXR5LkdldDFUb05EYXRhUmVjb3JkKHN1YlJlbGF0aW9uUE8pO1xuICAgICAgICAgIHZhciB0aGlzUE9MaXN0RGF0YVJlY29yZCA9IFtdO1xuXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBhbGxSZWNvcmRMaXN0Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgb25lUmVjb3JkID0gYWxsUmVjb3JkTGlzdFtqXTtcbiAgICAgICAgICAgIHZhciBmaWVsZFBPQXJyYXkgPSBGb3JtUmVsYXRpb25QT1V0aWxpdHkuRmluZFJlY29yZEZpZWxkUE9BcnJheShvbmVSZWNvcmQpO1xuXG4gICAgICAgICAgICBpZiAoQXJyYXlVdGlsaXR5LlRydWUoZmllbGRQT0FycmF5LCBmdW5jdGlvbiAoZmllbGRJdGVtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmaWVsZEl0ZW0uZmllbGROYW1lID09IHNlbGZLZXlGaWVsZE5hbWUgJiYgZmllbGRJdGVtLnZhbHVlID09IG91dGVyS2V5RmllbGRWYWx1ZTtcbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgIHRoaXNQT0xpc3REYXRhUmVjb3JkLnB1c2gob25lUmVjb3JkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBGb3JtUmVsYXRpb25QT1V0aWxpdHkuQWRkMVRvTkRhdGFSZWNvcmQodGVtcFBPLCB0aGlzUE9MaXN0RGF0YVJlY29yZCk7XG4gICAgICAgICAgY2hpbGRSZWxhdGlvblBPQXJyYXkucHVzaCh0ZW1wUE8pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5EaWFsb2dfQWRkUm93VG9Db250YWluZXIob25lRGF0YVJlY29yZCwgdHJ1ZSwgcmVsYXRpb25QTy5wa0ZpZWxkTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5Jbm5lclJvd19Db21wbGV0ZWRMYXN0RWRpdCgpO1xuICB9LFxuICBTZXJpYWxpemF0aW9uVmFsdWU6IGZ1bmN0aW9uIFNlcmlhbGl6YXRpb25WYWx1ZShvcmlnaW5hbEZvcm1EYXRhUmVsYXRpb24sIHJlbGF0aW9uUE8sIGNvbnRyb2wpIHtcbiAgICB0aGlzLklubmVyUm93X0NvbXBsZXRlZExhc3RFZGl0KCk7XG4gICAgdmFyIGFsbERhdGEgPSBbXTtcbiAgICB2YXIgYWxsJFRyQXR0ckNoaWxkUmVsYXRpb25Qb0FycmF5ID0gW107XG5cbiAgICB2YXIgdHJzID0gdGhpcy5fJFNpbmdsZUNvbnRyb2xFbGVtLmZpbmQoXCJ0cltpc19zdWJfbGlzdF90cj0ndHJ1ZSddXCIpO1xuXG4gICAgdmFyIHNlbGZQTyA9IHRoaXMuVHJ5R2V0UmVsYXRpb25QT0Nsb25lKCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyICR0ciA9ICQodHJzW2ldKTtcbiAgICAgIHZhciBzaW5nbGVSZWxhdGlvblBPID0gdGhpcy5HZXRSb3dEYXRhKCR0cik7XG4gICAgICB2YXIgdGVtcFJlY29yZCA9IEZvcm1SZWxhdGlvblBPVXRpbGl0eS5HZXQxVG8xRGF0YVJlY29yZChzaW5nbGVSZWxhdGlvblBPKTtcbiAgICAgIHZhciBpZFZhbHVlID0gRm9ybVJlbGF0aW9uUE9VdGlsaXR5LkZpbmRGaWVsZFBPSW5PbmVEYXRhUmVjb3JkKHRlbXBSZWNvcmQsIHNlbGZQTy5wa0ZpZWxkTmFtZSkudmFsdWU7XG4gICAgICB2YXIgdGVtcFNlbGZSZWNvcmQgPSB0aGlzLlRyeUJ1aWxkUmVjb3JkKHNpbmdsZVJlbGF0aW9uUE8sIGlkVmFsdWUsIHRlbXBSZWNvcmQucmVjb3JkRmllbGRQT0xpc3QpO1xuICAgICAgYWxsRGF0YS5wdXNoKHRlbXBTZWxmUmVjb3JkKTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhhbGxEYXRhKTtcblxuICAgIGlmICghdGhpcy5fRWRpdEluUm93KSB7XG4gICAgICByZWxhdGlvblBPLmlzU2F2ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIEZvcm1SZWxhdGlvblBPVXRpbGl0eS5BZGQxVG9ORGF0YVJlY29yZChyZWxhdGlvblBPLCBhbGxEYXRhKTtcbiAgfSxcbiAgR2V0VmFsdWU6IGZ1bmN0aW9uIEdldFZhbHVlKCRlbGVtLCBvcmlnaW5hbERhdGEsIHBhcmFzKSB7XG4gICAgRGlhbG9nVXRpbGl0eS5BbGVydFRleHQoXCJEeW5hbWljQ29udGFpbmVy57G75Z6L55qE5o6n5Lu255qE5bqP5YiX5YyW5Lqk55SxU2VyaWFsaXphdGlvblZhbHVl5pa55rOV6Ieq6KGM5a6M5oiQIVwiKTtcbiAgfSxcbiAgU2V0VmFsdWU6IGZ1bmN0aW9uIFNldFZhbHVlKCRlbGVtLCByZWxhdGlvbkZvcm1SZWNvcmRDb21wbGV4UG8sIF9yZW5kZXJlckRhdGFDaGFpblBhcmFzKSB7fSxcbiAgVG9WaWV3U3RhdHVzOiBmdW5jdGlvbiBUb1ZpZXdTdGF0dXMoJGVsZW0sIHJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQbywgX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMpIHtcbiAgICAkZWxlbS5maW5kKFwiLnN1Yi1mb3JtLWxpc3QtYnV0dG9uLXdyYXBcIikuaGlkZSgpO1xuICAgICRlbGVtLmZpbmQoXCIuc2ZsdC10ZC1vcGVyYXRpb24tdXBkYXRlXCIpLmhpZGUoKTtcbiAgICAkZWxlbS5maW5kKFwiLnNmbHQtdGQtb3BlcmF0aW9uLWRlbFwiKS5oaWRlKCk7XG4gIH0sXG4gIEFkZEV2ZW50OiBmdW5jdGlvbiBBZGRFdmVudChzZW5kZXIpIHtcbiAgICB2YXIgJGhvc3RFbGVtID0gc2VuZGVyLmRhdGEuaG9zdEVsZW07XG4gICAgdmFyIHNlbGZPYmogPSBzZW5kZXIuZGF0YS5zZWxmT2JqO1xuICAgIHZhciBpbnN0YW5jZU5hbWUgPSBzZW5kZXIuZGF0YS5pbnN0YW5jZU5hbWU7XG4gICAgdmFyIHJlbmRlcmVyQ2hhaW5QYXJhcyA9IHNlbmRlci5kYXRhLl9yZW5kZXJlckNoYWluUGFyYXM7XG5cbiAgICBpZiAoc2VsZk9iai5fRWRpdEluUm93KSB7XG4gICAgICBzZWxmT2JqLklubmVyUm93X0FkZFJvd1RvQ29udGFpbmVyKG51bGwsIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmT2JqLkRpYWxvZ19TaG93QWRkUm93U3ViRm9ybURpYWxvZyhzZW5kZXIsICRob3N0RWxlbSwgcmVuZGVyZXJDaGFpblBhcmFzLCBpbnN0YW5jZU5hbWUpO1xuICAgIH1cbiAgfSxcbiAgVmFsaWRhdGVTZXJpYWxpemF0aW9uU3ViRm9ybURhdGFFbmFibGU6IGZ1bmN0aW9uIFZhbGlkYXRlU2VyaWFsaXphdGlvblN1YkZvcm1EYXRhRW5hYmxlKHNlcmlhbGl6YXRpb25TdWJGb3JtRGF0YSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBWYWxpZGF0ZVJlbmRlcmVyQ2hhaW5FbmFibGU6IGZ1bmN0aW9uIFZhbGlkYXRlUmVuZGVyZXJDaGFpbkVuYWJsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIG1zZzogXCJcIlxuICAgIH07XG4gIH0sXG4gIEdldFJvd0lkOiBmdW5jdGlvbiBHZXRSb3dJZCgkdHIpIHtcbiAgICB2YXIgaWQgPSAkdHIuYXR0cihcInRyX3JlY29yZF9pZFwiKTtcbiAgICByZXR1cm4gaWQ7XG4gIH0sXG4gIFNldFJvd0lkOiBmdW5jdGlvbiBTZXRSb3dJZCgkdHIsIGlkVmFsdWUpIHtcbiAgICAkdHIuYXR0cihcInRyX3JlY29yZF9pZFwiLCBpZFZhbHVlKTtcbiAgfSxcbiAgR2V0Um93RGF0YTogZnVuY3Rpb24gR2V0Um93RGF0YSgkdHIpIHtcbiAgICB2YXIganNvbiA9ICR0ci5hdHRyKFwidHJfcmVjb3JkX2RhdGFcIik7XG4gICAgcmV0dXJuIEpzb25VdGlsaXR5LlN0cmluZ1RvSnNvbihqc29uKTtcbiAgfSxcbiAgR2V0Q2hpbGRSZWxhdGlvblBPQXJyYXk6IGZ1bmN0aW9uIEdldENoaWxkUmVsYXRpb25QT0FycmF5KCR0cikge1xuICAgIHZhciBqc29uID0gJHRyLmF0dHIoXCJjaGlsZF9yZWxhdGlvbl9wb19hcnJheVwiKTtcblxuICAgIGlmICghU3RyaW5nVXRpbGl0eS5Jc051bGxPckVtcHR5KGpzb24pKSB7XG4gICAgICByZXR1cm4gSnNvblV0aWxpdHkuU3RyaW5nVG9Kc29uKGpzb24pO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBTYXZlRGF0YVRvUm93QXR0cjogZnVuY3Rpb24gU2F2ZURhdGFUb1Jvd0F0dHIocmVsYXRpb25QTywgJHRyLCBhYm91dFJlbGF0aW9uUE9BcnJheSkge1xuICAgICR0ci5hdHRyKFwiaXNfc3ViX2xpc3RfdHJcIiwgXCJ0cnVlXCIpO1xuICAgICR0ci5hdHRyKFwidHJfcmVjb3JkX2lkXCIsIEZvcm1SZWxhdGlvblBPVXRpbGl0eS5GaW5kRmllbGRQT0J5UmVsYXRpb25QTyhyZWxhdGlvblBPLCByZWxhdGlvblBPLnBrRmllbGROYW1lKS52YWx1ZSk7XG4gICAgJHRyLmF0dHIoXCJ0cl9yZWNvcmRfZGF0YVwiLCBKc29uVXRpbGl0eS5Kc29uVG9TdHJpbmcocmVsYXRpb25QTykpO1xuXG4gICAgaWYgKGFib3V0UmVsYXRpb25QT0FycmF5ICYmIGFib3V0UmVsYXRpb25QT0FycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICR0ci5hdHRyKFwiY2hpbGRfcmVsYXRpb25fcG9fYXJyYXlcIiwgSnNvblV0aWxpdHkuSnNvblRvU3RyaW5nKGFib3V0UmVsYXRpb25QT0FycmF5KSk7XG4gICAgfVxuICB9LFxuICBUcnlHZXRDaGlsZFJlbGF0aW9uUE9BcnJheUNsb25lOiBmdW5jdGlvbiBUcnlHZXRDaGlsZFJlbGF0aW9uUE9BcnJheUNsb25lKHJlbGF0aW9uUE8pIHtcbiAgICB2YXIgY2hpbGRSZWxhdGlvbiA9IEFycmF5VXRpbGl0eS5XaGVyZSh0aGlzLl9Gb3JtRGF0YVJlbGF0aW9uTGlzdCwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLnBhcmVudElkID09IHJlbGF0aW9uUE8uaWQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIEpzb25VdGlsaXR5LkNsb25lQXJyYXlTaW1wbGUoY2hpbGRSZWxhdGlvbik7XG4gIH0sXG4gIFRyeUdldFJlbGF0aW9uUE9DbG9uZTogZnVuY3Rpb24gVHJ5R2V0UmVsYXRpb25QT0Nsb25lKCkge1xuICAgIGlmICh0aGlzLl9wbykge1xuICAgICAgcmV0dXJuIEpzb25VdGlsaXR5LkNsb25lU2ltcGxlKHRoaXMuX3BvKTtcbiAgICB9XG5cbiAgICB2YXIgYmluZERhdGFTb3VyY2UgPSB0aGlzLlRyeUdldEJpbmREYXRhU291cmNlQXR0cigpO1xuICAgIHZhciBwbyA9IG51bGw7XG5cbiAgICBpZiAoYmluZERhdGFTb3VyY2UgPT0gXCJhdXRvVGVzdGluZ1wiKSB7XG4gICAgICB2YXIgYmluZFRhYmxlTmFtZSA9IHRoaXMuVHJ5R2V0SW5uZXJDb250cm9sQmluZFRhYmxlTmFtZSgpO1xuICAgICAgcG8gPSBGb3JtUmVsYXRpb25QT1V0aWxpdHkuRmluZFJlbGF0aW9uUE9CeVRhYmxlTmFtZSh0aGlzLl9Gb3JtRGF0YVJlbGF0aW9uTGlzdCwgYmluZFRhYmxlTmFtZSk7XG5cbiAgICAgIGlmIChwbyA9PSBudWxsKSB7XG4gICAgICAgIHZhciBlcnJNc2cgPSBcIldGRENUX1N1YkZvcm1MaXN0Q29udGFpbmVyLlRyeUdldFJlbGF0aW9uUE866YCa6L+H5YaF6YOo5o6n5Lu257uR5a6a55qE6KGo5om+5LiN5Yiw5YW35L2T55qE5pWw5o2u5YWz6IGU5a6e5L2T77yBXCI7XG4gICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnRUZXh0KGVyck1zZyk7XG4gICAgICAgIHRocm93IGVyck1zZztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcG8gPSBGb3JtUmVsYXRpb25QT1V0aWxpdHkuRmluZFJlbGF0aW9uUE9CeUlkKHRoaXMuX0Zvcm1EYXRhUmVsYXRpb25MaXN0LCBiaW5kRGF0YVNvdXJjZSk7XG5cbiAgICAgIGlmIChwbyA9PSBudWxsKSB7XG4gICAgICAgIHZhciBlcnJNc2cgPSBcIldGRENUX1N1YkZvcm1MaXN0Q29udGFpbmVyLlRyeUdldFJlbGF0aW9uUE866YCa6L+HSURcIiArIGJpbmREYXRhU291cmNlICsgXCLmib7kuI3liLDlhbfkvZPnmoTmlbDmja7lhbPogZTlrp7kvZPvvIFcIjtcbiAgICAgICAgRGlhbG9nVXRpbGl0eS5BbGVydFRleHQoZXJyTXNnKTtcbiAgICAgICAgdGhyb3cgZXJyTXNnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3BvID0gcG87XG4gICAgcmV0dXJuIEpzb25VdGlsaXR5LkNsb25lU2ltcGxlKHRoaXMuX3BvKTtcbiAgfSxcbiAgVHJ5R2V0SW5uZXJDb250cm9sQmluZFRhYmxlTmFtZTogZnVuY3Rpb24gVHJ5R2V0SW5uZXJDb250cm9sQmluZFRhYmxlTmFtZSgpIHtcbiAgICB2YXIgY29udHJvbHMgPSBIVE1MQ29udHJvbC5GaW5kQUxMQ29udHJvbHModGhpcy5fJFRlbXBsYXRlVGFibGVSb3cpO1xuICAgIHZhciB0YWJsZU5hbWUgPSBudWxsO1xuICAgIGNvbnRyb2xzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0YWJsZU5hbWUpIHtcbiAgICAgICAgdGFibGVOYW1lID0gSFRNTENvbnRyb2wuR2V0Q29udHJvbEJpbmRUYWJsZU5hbWUoJCh0aGlzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFibGVOYW1lICE9IEhUTUxDb250cm9sLkdldENvbnRyb2xCaW5kVGFibGVOYW1lKCQodGhpcykpKSB7XG4gICAgICAgICAgRGlhbG9nVXRpbGl0eS5BbGVydFRleHQoXCLlrZDooajljLrln5/kuK3nmoTmjqfku7bnu5HlrprkuoblpJrkuKrooaghXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRhYmxlTmFtZTtcbiAgfSxcbiAgVHJ5R2V0QmluZERhdGFTb3VyY2VBdHRyOiBmdW5jdGlvbiBUcnlHZXRCaW5kRGF0YVNvdXJjZUF0dHIoKSB7XG4gICAgcmV0dXJuIHRoaXMuXyRTaW5nbGVDb250cm9sRWxlbS5hdHRyKFwiYmluZGRhdGFzb3VyY2VcIik7XG4gIH0sXG4gIFRyeUJ1aWxkUmVjb3JkOiBmdW5jdGlvbiBUcnlCdWlsZFJlY29yZChyZWxhdGlvblBPLCByZWNvcmRJZCwgZmllbGRQT0FycmF5KSB7XG4gICAgdmFyIG91dGVyRmllbGROYW1lID0gcmVsYXRpb25QTy5vdXRlcktleUZpZWxkTmFtZTtcbiAgICB2YXIgc2VsZktleUZpZWxkTmFtZSA9IHJlbGF0aW9uUE8uc2VsZktleUZpZWxkTmFtZTtcbiAgICB2YXIgb3V0ZXJGaWVsZFZhbHVlID0gXCJcIjtcbiAgICB2YXIgcGFyZW50UmVsYXRpb25QTyA9IEFycmF5VXRpbGl0eS5XaGVyZVNpbmdsZSh0aGlzLl9Gb3JtRGF0YVJlbGF0aW9uTGlzdCwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLmlkID09IHJlbGF0aW9uUE8ucGFyZW50SWQ7XG4gICAgfSk7XG5cbiAgICBpZiAoU3RyaW5nVXRpbGl0eS5Jc051bGxPckVtcHR5KG91dGVyRmllbGROYW1lKSkge1xuICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IFwi5pWw5o2u5rqQ5pyq6K6+572u5aSW6ZSu5YWz6IGU5a2X5q61IVwiO1xuICAgICAgRGlhbG9nVXRpbGl0eS5BbGVydFRleHQoZXJyb3JNZXNzYWdlKTtcbiAgICAgIHRocm93IGVycm9yTWVzc2FnZTtcbiAgICB9XG5cbiAgICBpZiAoU3RyaW5nVXRpbGl0eS5Jc051bGxPckVtcHR5KHNlbGZLZXlGaWVsZE5hbWUpKSB7XG4gICAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCLmlbDmja7mupDmnKrorr7nva7mnKzouqvlhbPogZTlrZfmrrUhXCI7XG4gICAgICBEaWFsb2dVdGlsaXR5LkFsZXJ0VGV4dChlcnJvck1lc3NhZ2UpO1xuICAgICAgdGhyb3cgZXJyb3JNZXNzYWdlO1xuICAgIH1cblxuICAgIGlmIChGb3JtUmVsYXRpb25QT1V0aWxpdHkuSXNNYWluUmVsYXRpb25QTyhwYXJlbnRSZWxhdGlvblBPKSkge1xuICAgICAgb3V0ZXJGaWVsZFZhbHVlID0gdGhpcy5fRm9ybVJ1bnRpbWVIb3N0LkdldFJlY29yZElkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0YWJsZUlkID0gcGFyZW50UmVsYXRpb25QTy50YWJsZUlkO1xuICAgICAgdmFyIGZpZWxkVmFsdWUgPSBIVE1MQ29udHJvbC5HZXRTaW1wbGVDb250cm9sVmFsdWUodGFibGVJZCwgb3V0ZXJGaWVsZE5hbWUpO1xuXG4gICAgICBpZiAoU3RyaW5nVXRpbGl0eS5Jc051bGxPckVtcHR5KGZpZWxkVmFsdWUpKSB7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBcIuaJvuS4jeWIsOe7keWumuS6huihqDpcIiArIHRhYmxlSWQgKyBcIizlrZfmrrU6XCIgKyBvdXRlckZpZWxkTmFtZSArIFwi55qE5o6n5Lu2LOivt+ehruiupOmhtemdouaUvue9ruS6huivpeaOp+S7tizlubblrZjlnKjlgLwhXCI7XG4gICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnRUZXh0KGVycm9yTWVzc2FnZSk7XG4gICAgICAgIHRocm93IGVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gRm9ybVJlbGF0aW9uUE9VdGlsaXR5LkJ1aWxkUmVjb3JkKGZpZWxkUE9BcnJheSwgXCJcIiwgcmVjb3JkSWQsIG91dGVyRmllbGROYW1lLCBvdXRlckZpZWxkVmFsdWUsIHNlbGZLZXlGaWVsZE5hbWUpO1xuICB9LFxuICBfJExhc3RFZGl0Um93OiBudWxsLFxuICBJbm5lclJvd19BZGRSb3dUb0NvbnRhaW5lcjogZnVuY3Rpb24gSW5uZXJSb3dfQWRkUm93VG9Db250YWluZXIob25lRGF0YVJlY29yZCwgc3ViVGFibGVQS0ZpZWxkTmFtZSkge1xuICAgIHRoaXMuSW5uZXJSb3dfQ29tcGxldGVkTGFzdEVkaXQoKTtcblxuICAgIHZhciAkdHIgPSB0aGlzLl8kVGVtcGxhdGVUYWJsZVJvdy5jbG9uZSgpO1xuXG4gICAgdmFyIGxhc3RPcGVyYXRpb25UZCA9ICQoXCI8dGQ+PGRpdiBjbGFzcz0nc2ZsdC10ZC1vcGVyYXRpb24tb3V0ZXItd3JhcCc+PC9kaXY+PC90ZD5cIik7XG4gICAgdmFyIGxhc3RPcGVyYXRpb25PdXRlckRpdiA9IGxhc3RPcGVyYXRpb25UZC5maW5kKFwiZGl2XCIpO1xuICAgIHZhciBidG5fb3BlcmF0aW9uX2RlbCA9ICQoXCI8ZGl2IHRpdGxlPSfliKDpmaQnIGNsYXNzPSdzZmx0LXRkLW9wZXJhdGlvbi1kZWwnPjwvZGl2PlwiKTtcbiAgICBidG5fb3BlcmF0aW9uX2RlbC5iaW5kKFwiY2xpY2tcIiwge1xuICAgICAgc2VsZk9iajogdGhpc1xuICAgIH0sIGZ1bmN0aW9uIChidG5fZGVsX3NlbmRlcikge1xuICAgICAgdmFyIHNlbGZPYmogPSBidG5fZGVsX3NlbmRlci5kYXRhLnNlbGZPYmo7XG4gICAgICBzZWxmT2JqLklubmVyUm93X0RlbGV0ZSgkKHRoaXMpLnBhcmVudCgpLnBhcmVudCgpLnBhcmVudCgpKTtcbiAgICB9KTtcbiAgICBsYXN0T3BlcmF0aW9uT3V0ZXJEaXYuYXBwZW5kKGJ0bl9vcGVyYXRpb25fZGVsKTtcbiAgICB2YXIgYnRuX29wZXJhdGlvbl91cGRhdGUgPSAkKFwiPGRpdiB0aXRsZT0n57yW6L6RJyBjbGFzcz0nc2ZsdC10ZC1vcGVyYXRpb24tdXBkYXRlJz48L2Rpdj5cIik7XG4gICAgYnRuX29wZXJhdGlvbl91cGRhdGUuYmluZChcImNsaWNrXCIsIHtcbiAgICAgIHNlbGZPYmo6IHRoaXNcbiAgICB9LCBmdW5jdGlvbiAoYnRuX3VwZGF0ZV9zZW5kZXIpIHtcbiAgICAgIHZhciBzZWxmT2JqID0gYnRuX3VwZGF0ZV9zZW5kZXIuZGF0YS5zZWxmT2JqO1xuICAgICAgc2VsZk9iai5Jbm5lclJvd19Ub0VkaXRTdGF0dXMoJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKS5wYXJlbnQoKSk7XG4gICAgfSk7XG4gICAgbGFzdE9wZXJhdGlvbk91dGVyRGl2LmFwcGVuZChidG5fb3BlcmF0aW9uX3VwZGF0ZSk7XG4gICAgJHRyLmFwcGVuZChsYXN0T3BlcmF0aW9uVGQpO1xuXG4gICAgdGhpcy5fJFRhYmxlQm9keUVsZW0uYXBwZW5kKCR0cik7XG5cbiAgICB0aGlzLl8kTGFzdEVkaXRSb3cgPSAkdHI7XG4gICAgdmFyIGNvbnRyb2xzID0gSFRNTENvbnRyb2wuRmluZEFMTENvbnRyb2xzKHRoaXMuXyRMYXN0RWRpdFJvdyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRyb2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY29udHJvbCA9ICQoY29udHJvbHNbaV0pO1xuICAgICAgdmFyIGNvbnRyb2xJbnN0YW5jZSA9IEhUTUxDb250cm9sLkdldENvbnRyb2xJbnN0YW5jZUJ5RWxlbShjb250cm9sKTtcbiAgICAgIHZhciBmaWVsZE5hbWUgPSBIVE1MQ29udHJvbC5HZXRDb250cm9sQmluZEZpZWxkTmFtZShjb250cm9sKTtcbiAgICAgIGNvbnRyb2xJbnN0YW5jZS5SZW5kZXJlckNoYWluKHtcbiAgICAgICAgJHNpbmdsZUNvbnRyb2xFbGVtOiBjb250cm9sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAob25lRGF0YVJlY29yZCkge1xuICAgICAgdmFyIGNvbnRyb2xzID0gSFRNTENvbnRyb2wuRmluZEFMTENvbnRyb2xzKHRoaXMuXyRMYXN0RWRpdFJvdyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udHJvbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNvbnRyb2wgPSAkKGNvbnRyb2xzW2ldKTtcbiAgICAgICAgdmFyIGNvbnRyb2xJbnN0YW5jZSA9IEhUTUxDb250cm9sLkdldENvbnRyb2xJbnN0YW5jZUJ5RWxlbShjb250cm9sKTtcbiAgICAgICAgdmFyIGZpZWxkTmFtZSA9IEhUTUxDb250cm9sLkdldENvbnRyb2xCaW5kRmllbGROYW1lKGNvbnRyb2wpO1xuICAgICAgICB2YXIgZmllbGRQTyA9IEZvcm1SZWxhdGlvblBPVXRpbGl0eS5GaW5kRmllbGRQT0luT25lRGF0YVJlY29yZEVuYWJsZU51bGwob25lRGF0YVJlY29yZCwgZmllbGROYW1lKTtcbiAgICAgICAgY29udHJvbEluc3RhbmNlLlNldFZhbHVlKGNvbnRyb2wsIGZpZWxkUE8sIG51bGwsIG51bGwpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaWRWYWx1ZSA9IEZvcm1SZWxhdGlvblBPVXRpbGl0eS5GaW5kRmllbGRQT0luT25lRGF0YVJlY29yZChvbmVEYXRhUmVjb3JkLCBzdWJUYWJsZVBLRmllbGROYW1lKS52YWx1ZTtcbiAgICAgIHRoaXMuU2V0Um93SWQoJHRyLCBpZFZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIElubmVyUm93X1RvRWRpdFN0YXR1czogZnVuY3Rpb24gSW5uZXJSb3dfVG9FZGl0U3RhdHVzKCR0cikge1xuICAgIHRoaXMuSW5uZXJSb3dfQ29tcGxldGVkTGFzdEVkaXQoKTtcbiAgICB2YXIgcm93UmVsYXRpb25QTyA9IHRoaXMuR2V0Um93RGF0YSgkdHIpO1xuICAgIHZhciByb3dTcGFuQ29udHJvbHMgPSAkdHIuZmluZChcIltpc19pbm5lcl9yb3dfc3Bhbj0ndHJ1ZSddXCIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3dTcGFuQ29udHJvbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzcGFuQ29udHJvbCA9ICQocm93U3BhbkNvbnRyb2xzW2ldKTtcbiAgICAgIHZhciBjb250cm9sSWQgPSBzcGFuQ29udHJvbC5hdHRyKFwiZWRpdF9jb250cm9sX2lkXCIpO1xuXG4gICAgICB2YXIgZWRpdENvbnRyb2wgPSB0aGlzLl8kVGVtcGxhdGVUYWJsZVJvdy5maW5kKFwiI1wiICsgY29udHJvbElkKS5jbG9uZSgpO1xuXG4gICAgICB2YXIgZmllbGROYW1lID0gSFRNTENvbnRyb2wuR2V0Q29udHJvbEJpbmRGaWVsZE5hbWUoZWRpdENvbnRyb2wpO1xuICAgICAgdmFyIGZpZWxkUE8gPSBGb3JtUmVsYXRpb25QT1V0aWxpdHkuRmluZEZpZWxkUE9CeVJlbGF0aW9uUE8ocm93UmVsYXRpb25QTywgZmllbGROYW1lKTtcbiAgICAgIHZhciBlZGl0Q29udHJvbEluc3RhbmNlID0gSFRNTENvbnRyb2wuR2V0Q29udHJvbEluc3RhbmNlQnlFbGVtKGVkaXRDb250cm9sKTtcbiAgICAgIGVkaXRDb250cm9sSW5zdGFuY2UuU2V0VmFsdWUoZWRpdENvbnRyb2wsIGZpZWxkUE8sIHt9KTtcbiAgICAgIHNwYW5Db250cm9sLnBhcmVudCgpLmFwcGVuZChlZGl0Q29udHJvbCk7XG4gICAgICBzcGFuQ29udHJvbC5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLl8kTGFzdEVkaXRSb3cgPSAkdHI7XG4gIH0sXG4gIElubmVyUm93X1RvVmlld1N0YXR1czogZnVuY3Rpb24gSW5uZXJSb3dfVG9WaWV3U3RhdHVzKHJlbGF0aW9uUE8sICR0cikge1xuICAgIGlmICh0aGlzLl8kTGFzdEVkaXRSb3cpIHtcbiAgICAgIHZhciBjb250cm9scyA9IEhUTUxDb250cm9sLkZpbmRBTExDb250cm9scyh0aGlzLl8kTGFzdEVkaXRSb3cpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRyb2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzaW5nbGVDb250cm9sID0gJChjb250cm9sc1tpXSk7XG4gICAgICAgIHZhciBmaWVsZE5hbWUgPSBIVE1MQ29udHJvbC5HZXRDb250cm9sQmluZEZpZWxkTmFtZShzaW5nbGVDb250cm9sKTtcbiAgICAgICAgdmFyIGZpZWxkVmFsdWUgPSBGb3JtUmVsYXRpb25QT1V0aWxpdHkuRmluZEZpZWxkUE9CeVJlbGF0aW9uUE8ocmVsYXRpb25QTywgZmllbGROYW1lKS52YWx1ZTtcbiAgICAgICAgdmFyIHR4dFNwYW4gPSAkKFwiPHNwYW4gaXNfaW5uZXJfcm93X3NwYW49J3RydWUnIGVkaXRfY29udHJvbF9pZD0nXCIgKyBzaW5nbGVDb250cm9sLmF0dHIoXCJpZFwiKSArIFwiJz5cIiArIGZpZWxkVmFsdWUgKyBcIjwvc3Bhbj5cIik7XG4gICAgICAgIHNpbmdsZUNvbnRyb2wuYmVmb3JlKHR4dFNwYW4pO1xuICAgICAgICBzaW5nbGVDb250cm9sLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuXyRMYXN0RWRpdFJvdyA9IG51bGw7XG4gIH0sXG4gIElubmVyUm93X0RlbGV0ZTogZnVuY3Rpb24gSW5uZXJSb3dfRGVsZXRlKCR0cikge1xuICAgIHRoaXMuSW5uZXJSb3dfQ29tcGxldGVkTGFzdEVkaXQoKTtcbiAgICBjb25zb2xlLmxvZyh0aGlzLl9Gb3JtUnVudGltZUhvc3QpO1xuXG4gICAgaWYgKHRoaXMuX0Zvcm1SdW50aW1lSG9zdC5fUHJvcF9Db25maWcuT3BlcmF0aW9uVHlwZSA9PSBCYXNlVXRpbGl0eS5HZXRBZGRPcGVyYXRpb25OYW1lKCkpIHtcbiAgICAgICR0ci5yZW1vdmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgRGlhbG9nVXRpbGl0eS5Db25maXJtKHdpbmRvdywgXCLnoa7orqTliKDpmaTlvZPliY3orrDlvZU/XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJvd1JlbGF0aW9uUE8gPSB0aGlzLkdldFJvd0RhdGEoJHRyKTtcbiAgICAgICAgY29uc29sZS5sb2cocm93UmVsYXRpb25QTyk7XG4gICAgICAgIHZhciB0aGlzUmVjb3JkSWQgPSByb3dSZWxhdGlvblBPLm9uZURhdGFSZWNvcmQucmVjb3JkSWQ7XG4gICAgICAgIHZhciB0aGlzVGFibGVJZCA9IHJvd1JlbGF0aW9uUE8udGFibGVJZDtcbiAgICAgICAgUnVudGltZUdlbmVyYWxJbnN0YW5jZS5EZWxldGVUYWJsZVJlY29yZCh0aGlzVGFibGVJZCwgdGhpc1JlY29yZElkLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgJHRyLnJlbW92ZSgpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgfSxcbiAgSW5uZXJSb3dfQ29tcGxldGVkTGFzdEVkaXQ6IGZ1bmN0aW9uIElubmVyUm93X0NvbXBsZXRlZExhc3RFZGl0KCkge1xuICAgIGlmICh0aGlzLl8kTGFzdEVkaXRSb3cpIHtcbiAgICAgIHZhciBjb250cm9scyA9IEhUTUxDb250cm9sLkZpbmRBTExDb250cm9scyh0aGlzLl8kTGFzdEVkaXRSb3cpO1xuICAgICAgdmFyIHJlbGF0aW9uUE8gPSB0aGlzLlRyeUdldFJlbGF0aW9uUE9DbG9uZSgpO1xuICAgICAgdmFyIHJlY29yZEZpZWxkUE9MaXN0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udHJvbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNpbmdsZUNvbnRyb2wgPSAkKGNvbnRyb2xzW2ldKTtcbiAgICAgICAgdmFyIGZpZWxkVHJhbnNmZXJQTyA9IEhUTUxDb250cm9sLlRyeUdldEZpZWxkVHJhbnNmZXJQTyhzaW5nbGVDb250cm9sLCByZWxhdGlvblBPLmlkLCByZWxhdGlvblBPLnNpbmdsZU5hbWUsIHJlbGF0aW9uUE8ucmVsYXRpb25UeXBlKTtcbiAgICAgICAgcmVjb3JkRmllbGRQT0xpc3QucHVzaChmaWVsZFRyYW5zZmVyUE8pO1xuICAgICAgfVxuXG4gICAgICB2YXIgaWRWYWx1ZSA9IHRoaXMuR2V0Um93SWQodGhpcy5fJExhc3RFZGl0Um93KTtcblxuICAgICAgaWYgKCFpZFZhbHVlKSB7XG4gICAgICAgIGlkVmFsdWUgPSBTdHJpbmdVdGlsaXR5Lkd1aWQoKTtcbiAgICAgIH1cblxuICAgICAgRm9ybVJlbGF0aW9uUE9VdGlsaXR5LkNyZWF0ZUlkRmllbGRJblJlY29yZEZpZWxkUE9BcnJheShyZWNvcmRGaWVsZFBPTGlzdCwgaWRWYWx1ZSwgdGhpcy5fRm9ybVJ1bnRpbWVIb3N0Ll9Gb3JtUE8sIHJlbGF0aW9uUE8udGFibGVJZCk7XG4gICAgICB2YXIgdGVtcFJlY29yZCA9IHRoaXMuVHJ5QnVpbGRSZWNvcmQocmVsYXRpb25QTywgaWRWYWx1ZSwgcmVjb3JkRmllbGRQT0xpc3QpO1xuICAgICAgcmVsYXRpb25QTyA9IEZvcm1SZWxhdGlvblBPVXRpbGl0eS5BZGQxVG8xRGF0YVJlY29yZEZpZWxkUE9MaXN0KHJlbGF0aW9uUE8sIHJlY29yZEZpZWxkUE9MaXN0LCBcIlwiLCB0ZW1wUmVjb3JkLnJlY29yZElkLCB0ZW1wUmVjb3JkLm91dGVyRmllbGROYW1lLCB0ZW1wUmVjb3JkLm91dGVyRmllbGRWYWx1ZSwgdGVtcFJlY29yZC5zZWxmRmllbGROYW1lKTtcbiAgICAgIHRoaXMuU2F2ZURhdGFUb1Jvd0F0dHIocmVsYXRpb25QTywgdGhpcy5fJExhc3RFZGl0Um93KTtcbiAgICAgIHRoaXMuSW5uZXJSb3dfVG9WaWV3U3RhdHVzKHJlbGF0aW9uUE8sIHRoaXMuXyRMYXN0RWRpdFJvdyk7XG4gICAgfVxuICB9LFxuICBEaWFsb2dfR2V0X0J1dHRvbl9DbGlja19QYXJhOiBmdW5jdGlvbiBEaWFsb2dfR2V0X0J1dHRvbl9DbGlja19QYXJhKCRzaW5nbGVDb250cm9sRWxlbSkge1xuICAgIHZhciByZWxhdGlvblBPID0gdGhpcy5UcnlHZXRSZWxhdGlvblBPQ2xvbmUoKTtcbiAgICBjb25zb2xlLmxvZyhcIuWtkOihqOWklumUrjpcIiArIHJlbGF0aW9uUE8ub3V0ZXJLZXlGaWVsZE5hbWUpO1xuICAgIHZhciBwYXJhID0ge1xuICAgICAgZm9ybUlkOiAkc2luZ2xlQ29udHJvbEVsZW0uYXR0cihcImZvcm1pZFwiKSxcbiAgICAgIGJ1dHRvbklkOiBcIlwiLFxuICAgICAgZWxlbUlkOiBcIlwiLFxuICAgICAgcmVjb3JkSWQ6IFwiXCIsXG4gICAgICB3aW5kb3dIZWlnaHQ6ICRzaW5nbGVDb250cm9sRWxlbS5hdHRyKFwid2luZG93aGVpZ2h0XCIpLFxuICAgICAgd2luZG93V2lkdGg6ICRzaW5nbGVDb250cm9sRWxlbS5hdHRyKFwid2luZG93d2lkdGhcIiksXG4gICAgICBpbnN0YW5jZU5hbWU6ICRzaW5nbGVDb250cm9sRWxlbS5hdHRyKFwiY2xpZW50X2luc3RhbmNlX25hbWVcIiksXG4gICAgICBkaWFsb2dXaW5kb3dUaXRsZTogJHNpbmdsZUNvbnRyb2xFbGVtLmF0dHIoXCJkaWFsb2d3aW5kb3d0aXRsZVwiKSxcbiAgICAgIHBhcmVudFJlY29yZElkOiB0aGlzLl9Gb3JtUnVudGltZUhvc3QuR2V0UmVjb3JkSWQoKSxcbiAgICAgIHNlbGZLZXlGaWVsZE5hbWU6IHJlbGF0aW9uUE8uc2VsZktleUZpZWxkTmFtZSxcbiAgICAgIG91dGVyS2V5RmllbGROYW1lOiByZWxhdGlvblBPLm91dGVyS2V5RmllbGROYW1lXG4gICAgfTtcbiAgICByZXR1cm4gcGFyYTtcbiAgfSxcbiAgRGlhbG9nX0FkZFJvd19BZGRWaWV3QnV0dG9uOiBmdW5jdGlvbiBEaWFsb2dfQWRkUm93X0FkZFZpZXdCdXR0b24ob3BlcmF0aW9uT3V0ZXJEaXYsICR0ciwgaWRWYWx1ZSwgb25lRGF0YVJlY29yZCwgJHNpbmdsZUNvbnRyb2xFbGVtLCBpc1ByZXZpZXcpIHtcbiAgICB2YXIgYnRuX29wZXJhdGlvbl92aWV3ID0gJChcIjxkaXYgdGl0bGU9J+afpeeciycgY2xhc3M9J3NmbHQtdGQtb3BlcmF0aW9uLXZpZXcnPjwvZGl2PlwiKTtcbiAgICB2YXIgZGlhbG9nV2luZG93UGFyYSA9IHRoaXMuRGlhbG9nX0dldF9CdXR0b25fQ2xpY2tfUGFyYSgkc2luZ2xlQ29udHJvbEVsZW0pO1xuICAgIGJ0bl9vcGVyYXRpb25fdmlldy5iaW5kKFwiY2xpY2tcIiwge1xuICAgICAgXCIkdHJcIjogJHRyLFxuICAgICAgXCJpZFZhbHVlXCI6IGlkVmFsdWUsXG4gICAgICBcIm9uZURhdGFSZWNvcmRcIjogb25lRGF0YVJlY29yZCxcbiAgICAgIFwiZGlhbG9nV2luZG93UGFyYVwiOiBkaWFsb2dXaW5kb3dQYXJhLFxuICAgICAgXCJpc1ByZXZpZXdcIjogaXNQcmV2aWV3XG4gICAgfSwgZnVuY3Rpb24gKHNlbmRlcikge1xuICAgICAgdmFyIGRpYWxvZ1dpbmRvd1BhcmEgPSBzZW5kZXIuZGF0YS5kaWFsb2dXaW5kb3dQYXJhO1xuICAgICAgZGlhbG9nV2luZG93UGFyYS5PcGVyYXRpb25UeXBlID0gXCJ2aWV3XCI7XG4gICAgICBkaWFsb2dXaW5kb3dQYXJhLnJlY29yZElkID0gc2VuZGVyLmRhdGEuaWRWYWx1ZTtcbiAgICAgIHZhciB1cmw7XG5cbiAgICAgIGlmIChpc1ByZXZpZXcpIHtcbiAgICAgICAgdXJsID0gQmFzZVV0aWxpdHkuQnVpbGRWaWV3KFwiL0hUTUwvQnVpbGRlci9Gb3JtL1N1YkZvcm1QcmV2aWV3Lmh0bWxcIiwgZGlhbG9nV2luZG93UGFyYSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmwgPSBCYXNlVXRpbGl0eS5CdWlsZFZpZXcoXCIvSFRNTC9CdWlsZGVyL1J1bnRpbWUvV2ViRm9ybVN1YlJ1bnRpbWUuaHRtbFwiLCBkaWFsb2dXaW5kb3dQYXJhKTtcbiAgICAgIH1cblxuICAgICAgRGlhbG9nVXRpbGl0eS5PcGVuSWZyYW1lV2luZG93KHdpbmRvdywgRGlhbG9nVXRpbGl0eS5EaWFsb2dJZCwgdXJsLCB7XG4gICAgICAgIHRpdGxlOiBkaWFsb2dXaW5kb3dQYXJhLmRpYWxvZ1dpbmRvd1RpdGxlLFxuICAgICAgICB3aWR0aDogZGlhbG9nV2luZG93UGFyYS53aW5kb3dXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBkaWFsb2dXaW5kb3dQYXJhLndpbmRvd0hlaWdodFxuICAgICAgfSwgMSk7XG4gICAgfSk7XG4gICAgb3BlcmF0aW9uT3V0ZXJEaXYuYXBwZW5kKGJ0bl9vcGVyYXRpb25fdmlldyk7XG4gIH0sXG4gIERpYWxvZ19BZGRSb3dfQWRkVXBkYXRlQnV0dG9uOiBmdW5jdGlvbiBEaWFsb2dfQWRkUm93X0FkZFVwZGF0ZUJ1dHRvbihvcGVyYXRpb25PdXRlckRpdiwgJHRyLCBpZFZhbHVlLCBvbmVEYXRhUmVjb3JkLCAkc2luZ2xlQ29udHJvbEVsZW0sIGlzUHJldmlldykge1xuICAgIHZhciBidG5fb3BlcmF0aW9uX3ZpZXcgPSAkKFwiPGRpdiB0aXRsZT0n57yW6L6RJyBjbGFzcz0nc2ZsdC10ZC1vcGVyYXRpb24tdXBkYXRlJz48L2Rpdj5cIik7XG4gICAgdmFyIGRpYWxvZ1dpbmRvd1BhcmEgPSB0aGlzLkRpYWxvZ19HZXRfQnV0dG9uX0NsaWNrX1BhcmEoJHNpbmdsZUNvbnRyb2xFbGVtKTtcbiAgICBidG5fb3BlcmF0aW9uX3ZpZXcuYmluZChcImNsaWNrXCIsIHtcbiAgICAgIFwiJHRyXCI6ICR0cixcbiAgICAgIFwiaWRWYWx1ZVwiOiBpZFZhbHVlLFxuICAgICAgXCJvbmVEYXRhUmVjb3JkXCI6IG9uZURhdGFSZWNvcmQsXG4gICAgICBcImRpYWxvZ1dpbmRvd1BhcmFcIjogZGlhbG9nV2luZG93UGFyYSxcbiAgICAgIFwiaXNQcmV2aWV3XCI6IGlzUHJldmlld1xuICAgIH0sIGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICAgIHZhciBkaWFsb2dXaW5kb3dQYXJhID0gc2VuZGVyLmRhdGEuZGlhbG9nV2luZG93UGFyYTtcbiAgICAgIGRpYWxvZ1dpbmRvd1BhcmEub3BlcmF0aW9uVHlwZSA9IFwidXBkYXRlXCI7XG4gICAgICBkaWFsb2dXaW5kb3dQYXJhLnJlY29yZElkID0gc2VuZGVyLmRhdGEuaWRWYWx1ZTtcbiAgICAgIHZhciB1cmw7XG5cbiAgICAgIGlmIChpc1ByZXZpZXcpIHtcbiAgICAgICAgdXJsID0gQmFzZVV0aWxpdHkuQnVpbGRWaWV3KFwiL0hUTUwvQnVpbGRlci9Gb3JtL1N1YkZvcm1QcmV2aWV3Lmh0bWxcIiwgZGlhbG9nV2luZG93UGFyYSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmwgPSBCYXNlVXRpbGl0eS5CdWlsZFZpZXcoXCIvSFRNTC9CdWlsZGVyL1J1bnRpbWUvV2ViRm9ybVN1YlJ1bnRpbWUuaHRtbFwiLCBkaWFsb2dXaW5kb3dQYXJhKTtcbiAgICAgIH1cblxuICAgICAgRGlhbG9nVXRpbGl0eS5PcGVuSWZyYW1lV2luZG93KHdpbmRvdywgRGlhbG9nVXRpbGl0eS5EaWFsb2dJZCwgdXJsLCB7XG4gICAgICAgIHRpdGxlOiBkaWFsb2dXaW5kb3dQYXJhLmRpYWxvZ1dpbmRvd1RpdGxlLFxuICAgICAgICB3aWR0aDogZGlhbG9nV2luZG93UGFyYS53aW5kb3dXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBkaWFsb2dXaW5kb3dQYXJhLndpbmRvd0hlaWdodFxuICAgICAgfSwgMSk7XG4gICAgfSk7XG4gICAgb3BlcmF0aW9uT3V0ZXJEaXYuYXBwZW5kKGJ0bl9vcGVyYXRpb25fdmlldyk7XG4gIH0sXG4gIERpYWxvZ19BZGRSb3dfQWRkRGVsZXRlQnV0dG9uOiBmdW5jdGlvbiBEaWFsb2dfQWRkUm93X0FkZERlbGV0ZUJ1dHRvbihvcGVyYXRpb25PdXRlckRpdiwgJHRyLCBpZFZhbHVlLCBvbmVEYXRhUmVjb3JkLCAkc2luZ2xlQ29udHJvbEVsZW0sIGlzUHJldmlldykge1xuICAgIHZhciBidG5fb3BlcmF0aW9uX3ZpZXcgPSAkKFwiPGRpdiB0aXRsZT0n5Yig6ZmkJyBjbGFzcz0nc2ZsdC10ZC1vcGVyYXRpb24tZGVsJz48L2Rpdj5cIik7XG4gICAgYnRuX29wZXJhdGlvbl92aWV3LmJpbmQoXCJjbGlja1wiLCB7XG4gICAgICBcIiR0clwiOiAkdHIsXG4gICAgICBcImlkVmFsdWVcIjogaWRWYWx1ZSxcbiAgICAgIFwib25lRGF0YVJlY29yZFwiOiBvbmVEYXRhUmVjb3JkLFxuICAgICAgXCJpc1ByZXZpZXdcIjogaXNQcmV2aWV3XG4gICAgfSwgZnVuY3Rpb24gKHNlbmRlcikge1xuICAgICAgc2VuZGVyLmRhdGEuJHRyLnJlbW92ZSgpO1xuICAgIH0pO1xuICAgIG9wZXJhdGlvbk91dGVyRGl2LmFwcGVuZChidG5fb3BlcmF0aW9uX3ZpZXcpO1xuICB9LFxuICBEaWFsb2dfU2hvd0FkZFJvd1N1YkZvcm1EaWFsb2c6IGZ1bmN0aW9uIERpYWxvZ19TaG93QWRkUm93U3ViRm9ybURpYWxvZyhzZW5kZXIsICRzaW5nbGVDb250cm9sRWxlbSwgX3JlbmRlcmVyQ2hhaW5QYXJhcywgaW5zdGFuY2VOYW1lKSB7XG4gICAgdmFyIGRpYWxvZ1dpbmRvd1BhcmEgPSB0aGlzLkRpYWxvZ19HZXRfQnV0dG9uX0NsaWNrX1BhcmEoJHNpbmdsZUNvbnRyb2xFbGVtKTtcblxuICAgIGlmICghZGlhbG9nV2luZG93UGFyYS5kaWFsb2dXaW5kb3dUaXRsZSkge1xuICAgICAgZGlhbG9nV2luZG93UGFyYS5kaWFsb2dXaW5kb3dUaXRsZSA9IFwi5bqU55So5p6E5bu657O757ufXCI7XG4gICAgfVxuXG4gICAgZGlhbG9nV2luZG93UGFyYS5vcGVyYXRpb25UeXBlID0gXCJhZGRcIjtcbiAgICBkaWFsb2dXaW5kb3dQYXJhLnJlY29yZElkID0gU3RyaW5nVXRpbGl0eS5HdWlkKCk7XG5cbiAgICB2YXIgaXNQcmV2aWV3ID0gdGhpcy5fRm9ybVJ1bnRpbWVIb3N0LklzUHJldmlldygpO1xuXG4gICAgdmFyIHVybDtcblxuICAgIGlmIChpc1ByZXZpZXcpIHtcbiAgICAgIHVybCA9IEJhc2VVdGlsaXR5LkJ1aWxkVmlldyhcIi9IVE1ML0J1aWxkZXIvRm9ybS9TdWJGb3JtUHJldmlldy5odG1sXCIsIGRpYWxvZ1dpbmRvd1BhcmEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cmwgPSBCYXNlVXRpbGl0eS5CdWlsZFZpZXcoXCIvSFRNTC9CdWlsZGVyL1J1bnRpbWUvV2ViRm9ybVN1YlJ1bnRpbWUuaHRtbFwiLCBkaWFsb2dXaW5kb3dQYXJhKTtcbiAgICB9XG5cbiAgICBEaWFsb2dVdGlsaXR5Lk9wZW5JZnJhbWVXaW5kb3cod2luZG93LCBEaWFsb2dVdGlsaXR5LkRpYWxvZ0lkLCB1cmwsIHtcbiAgICAgIHRpdGxlOiBkaWFsb2dXaW5kb3dQYXJhLmRpYWxvZ1dpbmRvd1RpdGxlLFxuICAgICAgd2lkdGg6IGRpYWxvZ1dpbmRvd1BhcmEud2luZG93V2lkdGgsXG4gICAgICBoZWlnaHQ6IGRpYWxvZ1dpbmRvd1BhcmEud2luZG93SGVpZ2h0XG4gICAgfSwgMSk7XG4gIH0sXG4gIERpYWxvZ19TdWJGb3JtRGlhbG9nQ29tcGxldGVkRWRpdDogZnVuY3Rpb24gRGlhbG9nX1N1YkZvcm1EaWFsb2dDb21wbGV0ZWRFZGl0KGluc3RhbmNlTmFtZSwgb3BlcmF0aW9uVHlwZSwgc2VyaWFsaXphdGlvblN1YkZvcm1EYXRhKSB7XG4gICAgdmFyIHRoaXNJbnN0YW5jZSA9IEhUTUxDb250cm9sLkdldEluc3RhbmNlKGluc3RhbmNlTmFtZSk7XG4gICAgKGZ1bmN0aW9uIChvcGVyYXRpb25UeXBlLCBzZXJpYWxpemF0aW9uU3ViRm9ybURhdGEpIHtcbiAgICAgIHZhciBzdWJGb3JtTWFpblJlbGF0aW9uUE8gPSBGb3JtUmVsYXRpb25QT1V0aWxpdHkuRmluZE1haW5SZWxhdGlvblBPKHNlcmlhbGl6YXRpb25TdWJGb3JtRGF0YS5mb3JtUmVjb3JkRGF0YVJlbGF0aW9uUE9MaXN0KTtcbiAgICAgIHZhciBvbmVEYXRhUmVjb3JkID0gRm9ybVJlbGF0aW9uUE9VdGlsaXR5LkdldDFUbzFEYXRhUmVjb3JkKHN1YkZvcm1NYWluUmVsYXRpb25QTyk7XG4gICAgICB0aGlzLkRpYWxvZ19BZGRSb3dUb0NvbnRhaW5lcihvbmVEYXRhUmVjb3JkLCBmYWxzZSwgc3ViRm9ybU1haW5SZWxhdGlvblBPLnBrRmllbGROYW1lKTtcbiAgICB9KS5jYWxsKHRoaXNJbnN0YW5jZSwgb3BlcmF0aW9uVHlwZSwgc2VyaWFsaXphdGlvblN1YkZvcm1EYXRhKTtcbiAgfSxcbiAgRGlhbG9nX0FkZFJvd1RvQ29udGFpbmVyOiBmdW5jdGlvbiBEaWFsb2dfQWRkUm93VG9Db250YWluZXIob25lRGF0YVJlY29yZCwgZGF0YUlzRnJvbVNlcnZlciwgc3ViVGFibGVQS0ZpZWxkTmFtZSkge1xuICAgIGlmIChvbmVEYXRhUmVjb3JkKSB7XG4gICAgICB2YXIgJHRyID0gdGhpcy5fJFRlbXBsYXRlVGFibGVSb3cuY2xvbmUoKTtcblxuICAgICAgdmFyIGNvbnRyb2xzID0gSFRNTENvbnRyb2wuRmluZEFMTENvbnRyb2xzKCR0cik7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udHJvbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNvbnRyb2wgPSAkKGNvbnRyb2xzW2ldKTtcbiAgICAgICAgdmFyIGNvbnRyb2xJbnN0YW5jZSA9IEhUTUxDb250cm9sLkdldENvbnRyb2xJbnN0YW5jZUJ5RWxlbShjb250cm9sKTtcbiAgICAgICAgdmFyIGZpZWxkTmFtZSA9IEhUTUxDb250cm9sLkdldENvbnRyb2xCaW5kRmllbGROYW1lKGNvbnRyb2wpO1xuICAgICAgICB2YXIgZmllbGRQTyA9IEZvcm1SZWxhdGlvblBPVXRpbGl0eS5GaW5kRmllbGRQT0luT25lRGF0YVJlY29yZChvbmVEYXRhUmVjb3JkLCBmaWVsZE5hbWUpO1xuICAgICAgICBjb250cm9sSW5zdGFuY2UuU2V0VmFsdWUoY29udHJvbCwgZmllbGRQTywgbnVsbCwgbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKHN1YlRhYmxlUEtGaWVsZE5hbWUpO1xuICAgICAgdmFyIGlkRmllbGRQTyA9IEZvcm1SZWxhdGlvblBPVXRpbGl0eS5GaW5kRmllbGRQT0luT25lRGF0YVJlY29yZChvbmVEYXRhUmVjb3JkLCBzdWJUYWJsZVBLRmllbGROYW1lKTtcbiAgICAgIHZhciBsYXN0T3BlcmF0aW9uVGQgPSAkKFwiPHRkPjxkaXYgY2xhc3M9J3NmbHQtdGQtb3BlcmF0aW9uLW91dGVyLXdyYXAnPjwvZGl2PjwvdGQ+XCIpO1xuICAgICAgdmFyIGxhc3RPcGVyYXRpb25PdXRlckRpdiA9IGxhc3RPcGVyYXRpb25UZC5maW5kKFwiZGl2XCIpO1xuXG4gICAgICBpZiAoZGF0YUlzRnJvbVNlcnZlcikge1xuICAgICAgICBpZiAodGhpcy5fRGlzcGxheV9PUEJ1dHRvbnNfVmlldykge1xuICAgICAgICAgIHRoaXMuRGlhbG9nX0FkZFJvd19BZGRWaWV3QnV0dG9uKGxhc3RPcGVyYXRpb25PdXRlckRpdiwgJHRyLCBpZEZpZWxkUE8udmFsdWUsIG9uZURhdGFSZWNvcmQsIHRoaXMuXyRTaW5nbGVDb250cm9sRWxlbSwgdGhpcy5fRm9ybVJ1bnRpbWVIb3N0LklzUHJldmlldygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9EaXNwbGF5X09QQnV0dG9uc19VcGRhdGUpIHtcbiAgICAgICAgICB0aGlzLkRpYWxvZ19BZGRSb3dfQWRkVXBkYXRlQnV0dG9uKGxhc3RPcGVyYXRpb25PdXRlckRpdiwgJHRyLCBpZEZpZWxkUE8udmFsdWUsIG9uZURhdGFSZWNvcmQsIHRoaXMuXyRTaW5nbGVDb250cm9sRWxlbSwgdGhpcy5fRm9ybVJ1bnRpbWVIb3N0LklzUHJldmlldygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9EaXNwbGF5X09QQnV0dG9uc19EZWwpIHtcbiAgICAgICAgICB0aGlzLkRpYWxvZ19BZGRSb3dfQWRkRGVsZXRlQnV0dG9uKGxhc3RPcGVyYXRpb25PdXRlckRpdiwgJHRyLCBpZEZpZWxkUE8udmFsdWUsIG9uZURhdGFSZWNvcmQsIHRoaXMuXyRTaW5nbGVDb250cm9sRWxlbSwgdGhpcy5fRm9ybVJ1bnRpbWVIb3N0LklzUHJldmlldygpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5EaWFsb2dfQWRkUm93X0FkZFZpZXdCdXR0b24obGFzdE9wZXJhdGlvbk91dGVyRGl2LCAkdHIsIGlkRmllbGRQTy52YWx1ZSwgb25lRGF0YVJlY29yZCwgdGhpcy5fJFNpbmdsZUNvbnRyb2xFbGVtLCB0aGlzLl9Gb3JtUnVudGltZUhvc3QuSXNQcmV2aWV3KCkpO1xuICAgICAgICB0aGlzLkRpYWxvZ19BZGRSb3dfQWRkVXBkYXRlQnV0dG9uKGxhc3RPcGVyYXRpb25PdXRlckRpdiwgJHRyLCBpZEZpZWxkUE8udmFsdWUsIG9uZURhdGFSZWNvcmQsIHRoaXMuXyRTaW5nbGVDb250cm9sRWxlbSwgdGhpcy5fRm9ybVJ1bnRpbWVIb3N0LklzUHJldmlldygpKTtcbiAgICAgICAgdGhpcy5EaWFsb2dfQWRkUm93X0FkZERlbGV0ZUJ1dHRvbihsYXN0T3BlcmF0aW9uT3V0ZXJEaXYsICR0ciwgaWRGaWVsZFBPLnZhbHVlLCBvbmVEYXRhUmVjb3JkLCB0aGlzLl8kU2luZ2xlQ29udHJvbEVsZW0sIHRoaXMuX0Zvcm1SdW50aW1lSG9zdC5Jc1ByZXZpZXcoKSk7XG4gICAgICB9XG5cbiAgICAgICR0ci5hcHBlbmQobGFzdE9wZXJhdGlvblRkKTtcbiAgICAgIHZhciBpZFZhbHVlID0gaWRGaWVsZFBPLnZhbHVlO1xuXG4gICAgICB2YXIgJG9sZFRyRWxlbSA9IHRoaXMuXyRTaW5nbGVDb250cm9sRWxlbS5maW5kKFwidHJbdHJfcmVjb3JkX2lkPSdcIiArIGlkVmFsdWUgKyBcIiddXCIpO1xuXG4gICAgICBpZiAoJG9sZFRyRWxlbS5sZW5ndGggPT0gMCkge1xuICAgICAgICB0aGlzLl8kVGFibGVCb2R5RWxlbS5hcHBlbmQoJHRyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRvbGRUckVsZW0uYWZ0ZXIoJHRyKTtcbiAgICAgICAgJG9sZFRyRWxlbS5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbGF0aW9uUE8gPSB0aGlzLlRyeUdldFJlbGF0aW9uUE9DbG9uZSgpO1xuICAgICAgcmVsYXRpb25QTyA9IEZvcm1SZWxhdGlvblBPVXRpbGl0eS5BZGQxVG8xRGF0YVJlY29yZChyZWxhdGlvblBPLCBvbmVEYXRhUmVjb3JkKTtcbiAgICAgIHRoaXMuU2F2ZURhdGFUb1Jvd0F0dHIocmVsYXRpb25QTywgJHRyKTtcbiAgICB9XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBXRkRDVF9UYWJDb250YWluZXIgPSB7XG4gIFJlbmRlcmVyQ2hhaW46IGZ1bmN0aW9uIFJlbmRlcmVyQ2hhaW4oX3JlbmRlcmVyQ2hhaW5QYXJhcykge1xuICAgIHZhciAkdGFiYmVyID0gX3JlbmRlcmVyQ2hhaW5QYXJhcy4kc2luZ2xlQ29udHJvbEVsZW07XG4gICAgJHRhYmJlci5oaWRlKCk7XG4gICAgdmFyICRsYWJlcnMgPSAkdGFiYmVyLmNoaWxkcmVuKFwiW3RhYl9pZF1cIik7XG4gICAgdmFyICR1bCA9ICQoXCI8dWw+PC91bD5cIik7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8ICRsYWJlcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciAkbGFiZXIgPSAkKCRsYWJlcnNbal0pO1xuICAgICAgJHVsLmFwcGVuZChcIjxsaT48YSBocmVmPScjXCIgKyAkbGFiZXIuYXR0cihcInRhYl9pZFwiKSArIFwiJz5cIiArICRsYWJlci50ZXh0KCkgKyBcIjwvYT48bGk+XCIpO1xuICAgIH1cblxuICAgICRsYWJlcnMucmVtb3ZlKCk7XG4gICAgJHRhYmJlci5wcmVwZW5kKCR1bCk7XG4gICAgJChcIiNcIiArICR0YWJiZXIuYXR0cihcImlkXCIpKS50YWJzKCk7XG4gICAgJHRhYmJlci5zaG93KCk7XG4gICAgSFRNTENvbnRyb2wuUmVuZGVyZXJDaGFpbihfcmVuZGVyZXJDaGFpblBhcmFzKTtcbiAgfSxcbiAgUmVuZGVyZXJEYXRhQ2hhaW46IEhUTUxDb250cm9sLlJlbmRlcmVyRGF0YUNoYWluLFxuICBHZXRWYWx1ZTogSFRNTENvbnRyb2wuR2V0VmFsdWUsXG4gIFNldFZhbHVlOiBIVE1MQ29udHJvbC5TZXRWYWx1ZVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIFdGRENUX1RleHRBcmVhID0ge1xuICBSZW5kZXJlckNoYWluOiBmdW5jdGlvbiBSZW5kZXJlckNoYWluKF9yZW5kZXJlckNoYWluUGFyYXMpIHt9LFxuICBSZW5kZXJlckRhdGFDaGFpbjogZnVuY3Rpb24gUmVuZGVyZXJEYXRhQ2hhaW4oKSB7fSxcbiAgR2V0VmFsdWU6IEhUTUxDb250cm9sLkdldFZhbHVlLFxuICBTZXRWYWx1ZTogSFRNTENvbnRyb2wuU2V0VmFsdWUsXG4gIFRvVmlld1N0YXR1czogSFRNTENvbnRyb2wuVG9WaWV3U3RhdHVzXG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgV0ZEQ1RfVGV4dEJveCA9IHtcbiAgSW5pdFN0eWxlOiBIVE1MQ29udHJvbC5Jbml0U3R5bGUsXG4gIFJlbmRlcmVyQ2hhaW46IGZ1bmN0aW9uIFJlbmRlcmVyQ2hhaW4oX3JlbmRlcmVyQ2hhaW5QYXJhcykge1xuICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSBfcmVuZGVyZXJDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgICAkc2luZ2xlQ29udHJvbEVsZW0uYXR0cihcImF1dG9jb21wbGV0ZVwiLCBcIm9mZlwiKTtcbiAgfSxcbiAgUmVuZGVyZXJEYXRhQ2hhaW46IGZ1bmN0aW9uIFJlbmRlcmVyRGF0YUNoYWluKCkge30sXG4gIEdldFZhbHVlOiBIVE1MQ29udHJvbC5HZXRWYWx1ZSxcbiAgU2V0VmFsdWU6IEhUTUxDb250cm9sLlNldFZhbHVlLFxuICBUb1ZpZXdTdGF0dXM6IEhUTUxDb250cm9sLlRvVmlld1N0YXR1cyxcbiAgVHJ5QmluZFVybFZhbHVlOiBIVE1MQ29udHJvbC5UcnlCaW5kVXJsVmFsdWVcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBXRkRDVF9UZXh0RGF0ZVRpbWUgPSB7XG4gIEluaXRTdHlsZTogSFRNTENvbnRyb2wuSW5pdFN0eWxlLFxuICBSZW5kZXJlckNoYWluOiBmdW5jdGlvbiBSZW5kZXJlckNoYWluKF9yZW5kZXJlckNoYWluUGFyYXMpIHtcbiAgICB2YXIgJHNpbmdsZUNvbnRyb2xFbGVtID0gX3JlbmRlcmVyQ2hhaW5QYXJhcy4kc2luZ2xlQ29udHJvbEVsZW07XG4gICAgJHNpbmdsZUNvbnRyb2xFbGVtLmF0dHIoXCJhdXRvY29tcGxldGVcIiwgXCJvZmZcIik7XG4gIH0sXG4gIFJlbmRlcmVyRGF0YUNoYWluOiBIVE1MQ29udHJvbC5SZW5kZXJlckRhdGFDaGFpbixcbiAgR2V0VmFsdWU6IEhUTUxDb250cm9sLkdldFZhbHVlLFxuICBTZXRWYWx1ZTogZnVuY3Rpb24gU2V0VmFsdWUoJGVsZW0sIGZpZWxkUE8sIHJlbGF0aW9uRm9ybVJlY29yZENvbXBsZXhQbywgX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMpIHtcbiAgICBpZiAoZmllbGRQTykge1xuICAgICAgdmFyIGN0VmFsdWUgPSBmaWVsZFBPLnZhbHVlO1xuICAgICAgdmFyIGN0RGF0ZSA9IERhdGVVdGlsaXR5LkNvbnZlcnRGcm9tU3RyaW5nKGN0VmFsdWUpO1xuICAgICAgY3RWYWx1ZSA9IERhdGVVdGlsaXR5LkZvcm1hdChjdERhdGUsICRlbGVtLmF0dHIoXCJkYXRldGltZWZvcm1hdFwiKSk7XG4gICAgICAkZWxlbS52YWwoY3RWYWx1ZSk7XG4gICAgICAkZWxlbS5hdHRyKFwiY29udHJvbF92YWx1ZVwiLCBjdFZhbHVlKTtcbiAgICAgICRlbGVtLmF0dHIoXCJjb250cm9sX3RpbWVfdmFsdWVcIiwgZmllbGRQTy52YWx1ZSk7XG4gICAgfVxuICB9LFxuICBUb1ZpZXdTdGF0dXM6IEhUTUxDb250cm9sLlRvVmlld1N0YXR1c1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIFdMRENUX0RlbGV0ZUJ1dHRvbiA9IHtcbiAgX0xpc3RUYWJsZUNvbnRhaW5lckluc3RhbmNlOiBudWxsLFxuICBSZW5kZXJlckNoYWluOiBIVE1MQ29udHJvbC5SZW5kZXJlckNoYWluLFxuICBSZXNvbHZlU2VsZjogZnVuY3Rpb24gUmVzb2x2ZVNlbGYoX3JlbmRlcmVyQ2hhaW5QYXJhcykge1xuICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSBfcmVuZGVyZXJDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgICB2YXIgY2FwdGlvbiA9ICRzaW5nbGVDb250cm9sRWxlbS5hdHRyKFwiYnV0dG9uY2FwdGlvblwiKTtcbiAgICB2YXIgJGJ1dHRvbiA9ICQoXCI8YnV0dG9uIGNsYXNzPSd3bGRjdC1saXN0LWJ1dHRvbic+XCIgKyBjYXB0aW9uICsgXCI8L2J1dHRvbj5cIik7XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSAkc2luZ2xlQ29udHJvbEVsZW0ucHJvcChcImF0dHJpYnV0ZXNcIik7XG4gICAgJC5lYWNoKGF0dHJpYnV0ZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICRidXR0b24uYXR0cih0aGlzLm5hbWUsIHRoaXMudmFsdWUpO1xuICAgIH0pO1xuICAgICRidXR0b24uYmluZChcImNsaWNrXCIsIHtcbiAgICAgIFwiYnV0dG9uRWxlbVwiOiAkYnV0dG9uLFxuICAgICAgXCJzZWxmSW5zdGFuY2VcIjogdGhpc1xuICAgIH0sIHRoaXMuQ2xpY2tFdmVudCk7XG4gICAgdmFyIGlzc2hvdyA9ICRidXR0b24uYXR0cihcImlzc2hvd1wiKTtcblxuICAgIGlmIChpc3Nob3cgPT0gXCJmYWxzZVwiKSB7XG4gICAgICAkYnV0dG9uLmhpZGUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJGJ1dHRvbjtcbiAgfSxcbiAgUmVuZGVyZXJEYXRhQ2hhaW46IGZ1bmN0aW9uIFJlbmRlcmVyRGF0YUNoYWluKF9yZW5kZXJlckRhdGFDaGFpblBhcmFzKSB7XG4gICAgdmFyICRzaW5nbGVDb250cm9sRWxlbSA9IF9yZW5kZXJlckRhdGFDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgICB2YXIgJFdMRENUX0xpc3RCdXR0b25Db250YWluZXIgPSAkc2luZ2xlQ29udHJvbEVsZW0ucGFyZW50cyhcIltzaW5nbGVuYW1lPSdXTERDVF9MaXN0QnV0dG9uQ29udGFpbmVyJ11cIik7XG4gICAgdmFyICRXTERDVF9MaXN0VGFibGVDb250YWluZXJFbGVtID0gJFdMRENUX0xpc3RCdXR0b25Db250YWluZXIubmV4dEFsbChcIltjbGllbnRfcmVzb2x2ZT0nV0xEQ1RfTGlzdFRhYmxlQ29udGFpbmVyJ11cIik7XG4gICAgdGhpcy5fTGlzdFRhYmxlQ29udGFpbmVySW5zdGFuY2UgPSBIVE1MQ29udHJvbC5HZXRDb250cm9sSW5zdGFuY2VCeUVsZW0oJFdMRENUX0xpc3RUYWJsZUNvbnRhaW5lckVsZW0pO1xuICB9LFxuICBDbGlja0V2ZW50OiBmdW5jdGlvbiBDbGlja0V2ZW50KHNlbmRlcikge1xuICAgIHZhciAkYnV0dG9uID0gc2VuZGVyLmRhdGEuYnV0dG9uRWxlbTtcbiAgICB2YXIgX3NlbGYgPSBzZW5kZXIuZGF0YS5zZWxmSW5zdGFuY2U7XG4gICAgdmFyIGJpbmRhdXRob3JpdHkgPSAkYnV0dG9uLmF0dHIoXCJiaW5kYXV0aG9yaXR5XCIpO1xuICAgIHZhciBidXR0b25jYXB0aW9uID0gJGJ1dHRvbi5hdHRyKFwiYnV0dG9uY2FwdGlvblwiKTtcbiAgICB2YXIgYnV0dG9udHlwZSA9ICRidXR0b24uYXR0cihcImJ1dHRvbnR5cGVcIik7XG4gICAgdmFyIGN1c3RjbGllbnRjbGlja2JlZm9yZW1ldGhvZCA9ICRidXR0b24uYXR0cihcImN1c3RjbGllbnRjbGlja2JlZm9yZW1ldGhvZFwiKTtcbiAgICB2YXIgY3VzdGNsaWVudGNsaWNrYmVmb3JlbWV0aG9kcGFyYSA9ICRidXR0b24uYXR0cihcImN1c3RjbGllbnRjbGlja2JlZm9yZW1ldGhvZHBhcmFcIik7XG4gICAgdmFyIGN1c3RjbGllbnRyZW5kZXJlcmFmdGVybWV0aG9kcGFyYSA9ICRidXR0b24uYXR0cihcImN1c3RjbGllbnRyZW5kZXJlcmFmdGVybWV0aG9kcGFyYVwiKTtcbiAgICB2YXIgY3VzdGNsaWVudHJlbmRlcmVyYWZ0ZXJtZXRob2RwYXJhcGFyYSA9ICRidXR0b24uYXR0cihcImN1c3RjbGllbnRyZW5kZXJlcmFmdGVybWV0aG9kcGFyYXBhcmFcIik7XG4gICAgdmFyIGN1c3RjbGllbnRyZW5kZXJlcm1ldGhvZCA9ICRidXR0b24uYXR0cihcImN1c3RjbGllbnRyZW5kZXJlcm1ldGhvZFwiKTtcbiAgICB2YXIgY3VzdGNsaWVudHJlbmRlcmVybWV0aG9kcGFyYSA9ICRidXR0b24uYXR0cihcImN1c3RjbGllbnRyZW5kZXJlcm1ldGhvZHBhcmFcIik7XG4gICAgdmFyIGN1c3RzZXJ2ZXJyZXNvbHZlbWV0aG9kID0gJGJ1dHRvbi5hdHRyKFwiY3VzdHNlcnZlcnJlc29sdmVtZXRob2RcIik7XG4gICAgdmFyIGN1c3RzZXJ2ZXJyZXNvbHZlbWV0aG9kcGFyYSA9ICRidXR0b24uYXR0cihcImN1c3RzZXJ2ZXJyZXNvbHZlbWV0aG9kcGFyYVwiKTtcbiAgICB2YXIgZWxlbWlkID0gJGJ1dHRvbi5hdHRyKFwiaWRcIik7XG4gICAgdmFyIGJ1dHRvbmlkID0gJGJ1dHRvbi5hdHRyKFwiYnV0dG9uaWRcIik7XG4gICAgdmFyIG9wZW50eXBlID0gJGJ1dHRvbi5hdHRyKFwib3BlbnR5cGVcIik7XG4gICAgdmFyIG9wZXJhdGlvbiA9ICRidXR0b24uYXR0cihcIm9wZXJhdGlvblwiKTtcbiAgICB2YXIgc2luZ2xlbmFtZSA9ICRidXR0b24uYXR0cihcInNpbmdsZW5hbWVcIik7XG4gICAgdmFyIHdpbmRvd2NhcHRpb24gPSAkYnV0dG9uLmF0dHIoXCJ3aW5kb3djYXB0aW9uXCIpO1xuICAgIHZhciBjbGllbnRfcmVzb2x2ZSA9ICRidXR0b24uYXR0cihcImNsaWVudF9yZXNvbHZlXCIpO1xuICAgIHZhciBpc0NvbmZpcm0gPSAkYnV0dG9uLmF0dHIoXCJpc2NvbmZpcm1cIik7XG4gICAgdmFyIGRlbGV0ZVRhYmxlQXQgPSAkYnV0dG9uLmF0dHIoXCJkZWxldGV0YWJsZWF0XCIpO1xuICAgIHZhciBkZWxldGVUeXBlID0gJGJ1dHRvbi5hdHRyKFwiZGVsZXRldHlwZVwiKTtcbiAgICB2YXIgY29uZmlybUZpZWxkID0gJGJ1dHRvbi5hdHRyKFwiY29uZmlybWZpZWxkXCIpO1xuICAgIHZhciBjb25maXJtRm9ybWF0ID0gJGJ1dHRvbi5hdHRyKFwiY29uZmlybWZvcm1hdFwiKTtcbiAgICB2YXIgYmluZERhdGFTZXRJZCA9ICRidXR0b24uYXR0cihcImJpbmRkYXRhc2V0aWRcIik7XG4gICAgdmFyIHJlY29yZElkID0gXCJcIjtcblxuICAgIGlmIChvcGVyYXRpb24gPT0gXCJkZWxldGVcIikge1xuICAgICAgdmFyIGNoZWNrZWRSZWNvcmRPYmpzID0gX3NlbGYuX0xpc3RUYWJsZUNvbnRhaW5lckluc3RhbmNlLkdldENoZWNrZWRSZWNvcmQoKTtcblxuICAgICAgaWYgKGNoZWNrZWRSZWNvcmRPYmpzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnRUZXh0KFwi6K+36YCJ5oup6ZyA6KaB6L+b6KGM5pON5L2c55qE6K6w5b2VIVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChjaGVja2VkUmVjb3JkT2Jqcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnRUZXh0KFwi5LiA5qyh5Y+q6IO95pON5L2c5LiA5p2h6K6w5b2VIVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVjb3JkSWQgPSBjaGVja2VkUmVjb3JkT2Jqc1swXS5JZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoU3RyaW5nVXRpbGl0eS50b1VwcGVyQ2FzZShpc0NvbmZpcm0pID09IFwiVFJVRVwiKSB7XG4gICAgICBEaWFsb2dVdGlsaXR5LkNvbmZpcm0od2luZG93LCBcIuaCqOehruiupOimgeWIoOmZpOWQlz9cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBSdW50aW1lR2VuZXJhbEluc3RhbmNlLkRlbGV0ZURhdGFTZXRSZWNvcmQoZWxlbWlkLCBiaW5kRGF0YVNldElkLCByZWNvcmRJZCwgdGhpcyk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBXTERDVF9Gb3JtQnV0dG9uID0ge1xuICBfTGlzdFRhYmxlQ29udGFpbmVySW5zdGFuY2U6IG51bGwsXG4gIFJlbmRlcmVyQ2hhaW46IEhUTUxDb250cm9sLlJlbmRlcmVyQ2hhaW4sXG4gIFJlc29sdmVTZWxmOiBmdW5jdGlvbiBSZXNvbHZlU2VsZihfcmVuZGVyZXJDaGFpblBhcmFzKSB7XG4gICAgdmFyICRzaW5nbGVDb250cm9sRWxlbSA9IF9yZW5kZXJlckNoYWluUGFyYXMuJHNpbmdsZUNvbnRyb2xFbGVtO1xuICAgIHZhciBjYXB0aW9uID0gJHNpbmdsZUNvbnRyb2xFbGVtLmF0dHIoXCJidXR0b25jYXB0aW9uXCIpO1xuICAgIHZhciAkYnV0dG9uID0gJChcIjxidXR0b24gY2xhc3M9J3dsZGN0LWxpc3QtYnV0dG9uJz5cIiArIGNhcHRpb24gKyBcIjwvYnV0dG9uPlwiKTtcbiAgICB2YXIgYXR0cmlidXRlcyA9ICRzaW5nbGVDb250cm9sRWxlbS5wcm9wKFwiYXR0cmlidXRlc1wiKTtcbiAgICAkLmVhY2goYXR0cmlidXRlcywgZnVuY3Rpb24gKCkge1xuICAgICAgJGJ1dHRvbi5hdHRyKHRoaXMubmFtZSwgdGhpcy52YWx1ZSk7XG4gICAgfSk7XG4gICAgJGJ1dHRvbi5iaW5kKFwiY2xpY2tcIiwge1xuICAgICAgXCJidXR0b25FbGVtXCI6ICRidXR0b24sXG4gICAgICBcInNlbGZJbnN0YW5jZVwiOiB0aGlzXG4gICAgfSwgdGhpcy5DbGlja0V2ZW50KTtcbiAgICB2YXIgaXNzaG93ID0gJGJ1dHRvbi5hdHRyKFwiaXNzaG93XCIpO1xuXG4gICAgaWYgKGlzc2hvdyA9PSBcImZhbHNlXCIpIHtcbiAgICAgICRidXR0b24uaGlkZSgpO1xuICAgIH1cblxuICAgIHJldHVybiAkYnV0dG9uO1xuICB9LFxuICBSZW5kZXJlckRhdGFDaGFpbjogZnVuY3Rpb24gUmVuZGVyZXJEYXRhQ2hhaW4oX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMpIHtcbiAgICB2YXIgJHNpbmdsZUNvbnRyb2xFbGVtID0gX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMuJHNpbmdsZUNvbnRyb2xFbGVtO1xuICAgIHZhciAkV0xEQ1RfTGlzdEJ1dHRvbkNvbnRhaW5lciA9ICRzaW5nbGVDb250cm9sRWxlbS5wYXJlbnRzKFwiW3NpbmdsZW5hbWU9J1dMRENUX0xpc3RCdXR0b25Db250YWluZXInXVwiKTtcbiAgICB2YXIgJFdMRENUX0xpc3RUYWJsZUNvbnRhaW5lckVsZW0gPSAkV0xEQ1RfTGlzdEJ1dHRvbkNvbnRhaW5lci5uZXh0QWxsKFwiW2NsaWVudF9yZXNvbHZlPSdXTERDVF9MaXN0VGFibGVDb250YWluZXInXVwiKTtcbiAgICB0aGlzLl9MaXN0VGFibGVDb250YWluZXJJbnN0YW5jZSA9IEhUTUxDb250cm9sLkdldENvbnRyb2xJbnN0YW5jZUJ5RWxlbSgkV0xEQ1RfTGlzdFRhYmxlQ29udGFpbmVyRWxlbSk7XG4gIH0sXG4gIENsaWNrRXZlbnQ6IGZ1bmN0aW9uIENsaWNrRXZlbnQoc2VuZGVyKSB7XG4gICAgdmFyICRidXR0b24gPSBzZW5kZXIuZGF0YS5idXR0b25FbGVtO1xuICAgIHZhciBfc2VsZiA9IHNlbmRlci5kYXRhLnNlbGZJbnN0YW5jZTtcbiAgICB2YXIgYmluZGF1dGhvcml0eSA9ICRidXR0b24uYXR0cihcImJpbmRhdXRob3JpdHlcIik7XG4gICAgdmFyIGJ1dHRvbmNhcHRpb24gPSAkYnV0dG9uLmF0dHIoXCJidXR0b25jYXB0aW9uXCIpO1xuICAgIHZhciBidXR0b250eXBlID0gJGJ1dHRvbi5hdHRyKFwiYnV0dG9udHlwZVwiKTtcbiAgICB2YXIgY3VzdGNsaWVudGNsaWNrYmVmb3JlbWV0aG9kID0gJGJ1dHRvbi5hdHRyKFwiY3VzdGNsaWVudGNsaWNrYmVmb3JlbWV0aG9kXCIpO1xuICAgIHZhciBjdXN0Y2xpZW50Y2xpY2tiZWZvcmVtZXRob2RwYXJhID0gJGJ1dHRvbi5hdHRyKFwiY3VzdGNsaWVudGNsaWNrYmVmb3JlbWV0aG9kcGFyYVwiKTtcbiAgICB2YXIgY3VzdGNsaWVudHJlbmRlcmVyYWZ0ZXJtZXRob2RwYXJhID0gJGJ1dHRvbi5hdHRyKFwiY3VzdGNsaWVudHJlbmRlcmVyYWZ0ZXJtZXRob2RwYXJhXCIpO1xuICAgIHZhciBjdXN0Y2xpZW50cmVuZGVyZXJhZnRlcm1ldGhvZHBhcmFwYXJhID0gJGJ1dHRvbi5hdHRyKFwiY3VzdGNsaWVudHJlbmRlcmVyYWZ0ZXJtZXRob2RwYXJhcGFyYVwiKTtcbiAgICB2YXIgY3VzdGNsaWVudHJlbmRlcmVybWV0aG9kID0gJGJ1dHRvbi5hdHRyKFwiY3VzdGNsaWVudHJlbmRlcmVybWV0aG9kXCIpO1xuICAgIHZhciBjdXN0Y2xpZW50cmVuZGVyZXJtZXRob2RwYXJhID0gJGJ1dHRvbi5hdHRyKFwiY3VzdGNsaWVudHJlbmRlcmVybWV0aG9kcGFyYVwiKTtcbiAgICB2YXIgY3VzdHNlcnZlcnJlc29sdmVtZXRob2QgPSAkYnV0dG9uLmF0dHIoXCJjdXN0c2VydmVycmVzb2x2ZW1ldGhvZFwiKTtcbiAgICB2YXIgY3VzdHNlcnZlcnJlc29sdmVtZXRob2RwYXJhID0gJGJ1dHRvbi5hdHRyKFwiY3VzdHNlcnZlcnJlc29sdmVtZXRob2RwYXJhXCIpO1xuICAgIHZhciBmb3JtY29kZSA9ICRidXR0b24uYXR0cihcImZvcm1jb2RlXCIpO1xuICAgIHZhciBmb3JtaWQgPSAkYnV0dG9uLmF0dHIoXCJmb3JtaWRcIik7XG4gICAgdmFyIGZvcm1tb2R1bGVpZCA9ICRidXR0b24uYXR0cihcImZvcm1tb2R1bGVpZFwiKTtcbiAgICB2YXIgZm9ybW1vZHVsZW5hbWUgPSAkYnV0dG9uLmF0dHIoXCJmb3JtbW9kdWxlbmFtZVwiKTtcbiAgICB2YXIgZm9ybW5hbWUgPSAkYnV0dG9uLmF0dHIoXCJmb3JtbmFtZVwiKTtcbiAgICB2YXIgZWxlbWlkID0gJGJ1dHRvbi5hdHRyKFwiaWRcIik7XG4gICAgdmFyIGJ1dHRvbmlkID0gJGJ1dHRvbi5hdHRyKFwiYnV0dG9uaWRcIik7XG4gICAgdmFyIGlubmVyYnV0dG9uanNvbnN0cmluZyA9ICRidXR0b24uYXR0cihcImlubmVyYnV0dG9uanNvbnN0cmluZ1wiKTtcbiAgICB2YXIgb3BlbnR5cGUgPSAkYnV0dG9uLmF0dHIoXCJvcGVudHlwZVwiKTtcbiAgICB2YXIgb3BlcmF0aW9uID0gJGJ1dHRvbi5hdHRyKFwib3BlcmF0aW9uXCIpO1xuICAgIHZhciBzaW5nbGVuYW1lID0gJGJ1dHRvbi5hdHRyKFwic2luZ2xlbmFtZVwiKTtcbiAgICB2YXIgd2luZG93Y2FwdGlvbiA9ICRidXR0b24uYXR0cihcIndpbmRvd2NhcHRpb25cIik7XG4gICAgdmFyIHdpbmRvd2hlaWdodCA9ICRidXR0b24uYXR0cihcIndpbmRvd2hlaWdodFwiKTtcbiAgICB2YXIgd2luZG93d2lkdGggPSAkYnV0dG9uLmF0dHIoXCJ3aW5kb3d3aWR0aFwiKTtcbiAgICB2YXIgY2xpZW50X3Jlc29sdmUgPSAkYnV0dG9uLmF0dHIoXCJjbGllbnRfcmVzb2x2ZVwiKTtcbiAgICB2YXIgcmVjb3JkSWQgPSBcIlwiO1xuXG4gICAgaWYgKG9wZXJhdGlvbiA9PSBcInVwZGF0ZVwiIHx8IG9wZXJhdGlvbiA9PSBcInZpZXdcIikge1xuICAgICAgdmFyIGNoZWNrZWRSZWNvcmRPYmpzID0gX3NlbGYuX0xpc3RUYWJsZUNvbnRhaW5lckluc3RhbmNlLkdldENoZWNrZWRSZWNvcmQoKTtcblxuICAgICAgaWYgKGNoZWNrZWRSZWNvcmRPYmpzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnRUZXh0KFwi6K+36YCJ5oup6ZyA6KaB6L+b6KGM5pON5L2c55qE6K6w5b2VIVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChjaGVja2VkUmVjb3JkT2Jqcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnRUZXh0KFwi5LiA5qyh5Y+q6IO95pON5L2c5LiA5p2h6K6w5b2VIVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVjb3JkSWQgPSBjaGVja2VkUmVjb3JkT2Jqc1swXS5JZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcGFyYVN0ciA9IEJhc2VVdGlsaXR5LkdldFVybFBhcmFWYWx1ZShcIm1lbnVSaWdodFVybFBhcmFcIik7XG4gICAgRGlhbG9nVXRpbGl0eS5GcmFtZV9PcGVuSWZyYW1lV2luZG93KHdpbmRvdywgRGlhbG9nVXRpbGl0eS5EaWFsb2dJZCwgQmFzZVV0aWxpdHkuQnVpbGRWaWV3KFwiL0hUTUwvQnVpbGRlci9SdW50aW1lL1dlYkZvcm1SdW50aW1lLmh0bWxcIiwge1xuICAgICAgXCJmb3JtSWRcIjogZm9ybWlkLFxuICAgICAgXCJidXR0b25JZFwiOiBidXR0b25pZCxcbiAgICAgIFwibGlzdEZvcm1CdXR0b25FbGVtSWRcIjogZWxlbWlkLFxuICAgICAgXCJyZWNvcmRJZFwiOiByZWNvcmRJZCxcbiAgICAgIFwib3BlcmF0aW9uVHlwZVwiOiBvcGVyYXRpb24sXG4gICAgICBcIndpbmRvd1dpZHRoXCI6IHdpbmRvd3dpZHRoLFxuICAgICAgXCJ3aW5kb3dIZWlnaHRcIjogd2luZG93aGVpZ2h0LFxuICAgICAgXCJtZW51UmlnaHRVcmxQYXJhXCI6IHBhcmFTdHJcbiAgICB9KSwge1xuICAgICAgXCJ3aWR0aFwiOiB3aW5kb3d3aWR0aCxcbiAgICAgIFwiaGVpZ2h0XCI6IHdpbmRvd2hlaWdodCxcbiAgICAgIFwidGl0bGVcIjogd2luZG93Y2FwdGlvblxuICAgIH0sIDEsIHRydWUpO1xuICB9XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgV0xEQ1RfTGlzdEJ1dHRvbkNvbnRhaW5lciA9IHtcbiAgX29iamVjdFR5cGU6IFwiSW5zdGFuY2VcIixcbiAgX3Byb3A6IHtcbiAgICAkc2luZ2xlQ29udHJvbEVsZW06IG51bGwsXG4gICAgaW5zdGFuY2VOYW1lOiBudWxsLFxuICAgIGVsZW1JZDogbnVsbCxcbiAgICBzdGF0dXM6IG51bGxcbiAgfSxcbiAgUmVuZGVyZXJDaGFpbjogZnVuY3Rpb24gUmVuZGVyZXJDaGFpbihfcmVuZGVyZXJDaGFpblBhcmFzKSB7XG4gICAgdmFyICRzaW5nbGVDb250cm9sRWxlbSA9IF9yZW5kZXJlckNoYWluUGFyYXMuJHNpbmdsZUNvbnRyb2xFbGVtO1xuICAgIHZhciAkYnV0dG9uRGl2RWxlbUxpc3QgPSAkc2luZ2xlQ29udHJvbEVsZW0uZmluZChcImRpdlwiICsgSFRNTENvbnRyb2xBdHRycy5TRUxFQ1RFRF9KQlVJTEQ0RENfQ1VTVE9NKTtcbiAgICAkc2luZ2xlQ29udHJvbEVsZW0uZmluZChcIltpcy1vcC1idXR0b24td3JhcC10YWJsZT0ndHJ1ZSddXCIpLmhpZGUoKTtcbiAgICB2YXIgaW5uZXJXcmFwID0gJHNpbmdsZUNvbnRyb2xFbGVtLmZpbmQoXCIud2xkY3QtbGlzdC1idXR0b24taW5uZXItd3JhcFwiKTtcbiAgICB2YXIgaW5uZXJJbnNpZGVXcmFwRGl2ID0gJChcIjxkaXYgY2xhc3M9J3dsZGN0LWxpc3QtYnV0dG9uLWlubmVyLWluc2lkZS13cmFwJyAvPlwiKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJGJ1dHRvbkRpdkVsZW1MaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgJGJ1dHRvbkVsZW0gPSAkKCRidXR0b25EaXZFbGVtTGlzdFtpXSk7XG4gICAgICB2YXIgY2xpZW50UmVzb2x2ZU5hbWUgPSAkYnV0dG9uRWxlbS5hdHRyKEhUTUxDb250cm9sQXR0cnMuQ0xJRU5UX1JFU09MVkUpO1xuICAgICAgdmFyIGNsaWVudFJlc29sdmVPYmplY3QgPSBPYmplY3QuY3JlYXRlKGV2YWwoY2xpZW50UmVzb2x2ZU5hbWUpKTtcbiAgICAgIHZhciAkcmVzb2x2ZWRFbGVtID0gY2xpZW50UmVzb2x2ZU9iamVjdC5SZXNvbHZlU2VsZih7XG4gICAgICAgIHNvdXJjZUhUTUw6IF9yZW5kZXJlckNoYWluUGFyYXMuc291cmNlSFRNTCxcbiAgICAgICAgJHJvb3RFbGVtOiBfcmVuZGVyZXJDaGFpblBhcmFzLiRyb290RWxlbSxcbiAgICAgICAgJHBhcmVudENvbnRyb2xFbGVtOiAkc2luZ2xlQ29udHJvbEVsZW0sXG4gICAgICAgICRzaW5nbGVDb250cm9sRWxlbTogJGJ1dHRvbkVsZW0sXG4gICAgICAgIGFsbERhdGE6IF9yZW5kZXJlckNoYWluUGFyYXMuYWxsRGF0YVxuICAgICAgfSk7XG4gICAgICBpbm5lckluc2lkZVdyYXBEaXYuYXBwZW5kKCRyZXNvbHZlZEVsZW0pO1xuICAgIH1cblxuICAgIGlubmVyV3JhcC5hcHBlbmQoaW5uZXJJbnNpZGVXcmFwRGl2KTtcbiAgICBpbm5lcldyYXAuYXBwZW5kKFwiPGRpdiBzdHlsZT1cXFwiY2xlYXI6IGJvdGg7XFxcIj48L2Rpdj5cIik7XG5cbiAgICBpZiAodGhpcy5fcHJvcC5zdGF0dXMgPT0gXCJkaXNhYmxlXCIgfHwgUnVudGltZUdlbmVyYWxJbnN0YW5jZS5UcnlHZXRVcmxQYXJhVmlld09ubHkoKSkge1xuICAgICAgJHNpbmdsZUNvbnRyb2xFbGVtLmhpZGUoKTtcbiAgICB9XG4gIH0sXG4gIFJlbmRlcmVyRGF0YUNoYWluOiBIVE1MQ29udHJvbC5SZW5kZXJlckRhdGFDaGFpblxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIFdMRENUX0xpc3RDb21wbGV4U2VhcmNoQ29udGFpbmVyID0ge1xuICBfb2JqZWN0VHlwZTogXCJJbnN0YW5jZVwiLFxuICBfcHJvcDoge1xuICAgICRzaW5nbGVDb250cm9sRWxlbTogbnVsbCxcbiAgICBpbnN0YW5jZU5hbWU6IG51bGwsXG4gICAgZWxlbUlkOiBudWxsLFxuICAgIHN0YXR1czogbnVsbFxuICB9LFxuICBfJFNpbmdsZUNvbnRyb2xFbGVtOiBudWxsLFxuICBfJENvbXBsZXhTZWFyY2hCdXR0b246IG51bGwsXG4gIF8kQ2xlYXJCdXR0b246IG51bGwsXG4gIF8kQ2xvc2VCdXR0b246IG51bGwsXG4gIFJlbmRlcmVyQ2hhaW46IGZ1bmN0aW9uIFJlbmRlcmVyQ2hhaW4oX3JlbmRlcmVyQ2hhaW5QYXJhcykge1xuICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSBfcmVuZGVyZXJDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgICB0aGlzLl8kU2luZ2xlQ29udHJvbEVsZW0gPSAkc2luZ2xlQ29udHJvbEVsZW07XG4gICAgJHNpbmdsZUNvbnRyb2xFbGVtLmhpZGUoKTtcbiAgICAkc2luZ2xlQ29udHJvbEVsZW0uZmluZChcIi53bGRjdC1saXN0LWNvbXBsZXgtc2VhcmNoLWlubmVyLXdyYXBcIikuaGVpZ2h0KFwiMzA1cHhcIik7XG4gICAgJHNpbmdsZUNvbnRyb2xFbGVtLmZpbmQoXCIud2xkY3QtbGlzdC1jb21wbGV4LXNlYXJjaC1pbm5lci13cmFwXCIpLmNzcyhcIm92ZXJmbG93XCIsIFwiYXV0b1wiKTtcbiAgICAkc2luZ2xlQ29udHJvbEVsZW0uZmluZChcIi53bGRjdC1saXN0LWNvbXBsZXgtc2VhcmNoLWlubmVyLXdyYXBcIikuYWRkQ2xhc3MoXCJkaXYtY3VzdG9tLXNjcm9sbFwiKTtcbiAgICB2YXIgJHNlYXJjaEJ1dHRvbnNXcmFwID0gJChcIjxkaXYgY2xhc3M9J3dsZGN0LWxpc3QtY29tcGxleC1zZWFyY2gtYnV0dG9uLWlubmVyLXdyYXAnPjxkaXYgY2xhc3M9J2J1dHRvbi1pbm5lci13cmFwJz48L2Rpdj48L2Rpdj5cIik7XG4gICAgdGhpcy5fJENvbXBsZXhTZWFyY2hCdXR0b24gPSAkKFwiPGJ1dHRvbj7mn6Xor6I8L2J1dHRvbj5cIik7XG4gICAgdGhpcy5fJENsZWFyQnV0dG9uID0gJChcIjxidXR0b24+5riF56m6PC9idXR0b24+XCIpO1xuICAgIHRoaXMuXyRDbG9zZUJ1dHRvbiA9ICQoXCI8YnV0dG9uPuWFs+mXrTwvYnV0dG9uPlwiKTtcbiAgICAkc2VhcmNoQnV0dG9uc1dyYXAuZmluZChcIi5idXR0b24taW5uZXItd3JhcFwiKS5hcHBlbmQodGhpcy5fJENvbXBsZXhTZWFyY2hCdXR0b24pLmFwcGVuZCh0aGlzLl8kQ2xlYXJCdXR0b24pLmFwcGVuZCh0aGlzLl8kQ2xvc2VCdXR0b24pO1xuICAgICRzaW5nbGVDb250cm9sRWxlbS5hcHBlbmQoJHNlYXJjaEJ1dHRvbnNXcmFwKTtcbiAgfSxcbiAgUmVuZGVyZXJEYXRhQ2hhaW46IEhUTUxDb250cm9sLlJlbmRlcmVyRGF0YUNoYWluLFxuICBCdWlsZGVyU2VhcmNoQ29uZGl0aW9uOiBmdW5jdGlvbiBCdWlsZGVyU2VhcmNoQ29uZGl0aW9uKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgIHZhciBhbGxDb250cm9scyA9IHRoaXMuXyRTaW5nbGVDb250cm9sRWxlbS5maW5kKEhUTUxDb250cm9sQXR0cnMuU0VMRUNURURfSkJVSUxENERDX0NVU1RPTSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbENvbnRyb2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgJGVsZW0gPSAkKGFsbENvbnRyb2xzW2ldKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IEhUTUxDb250cm9sLkdldENvbnRyb2xJbnN0YW5jZUJ5RWxlbSgkZWxlbSk7XG4gICAgICB2YXIgdmFsT2JqID0gaW5zdGFuY2UuR2V0VmFsdWUoJGVsZW0sIHt9KTtcbiAgICAgIHZhciB2YWx1ZSA9IHZhbE9iai52YWx1ZTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICBvcGVyYXRvcjogJGVsZW0uYXR0cihcImNvbHVtbm9wZXJhdG9yXCIpLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICB0YWJsZU5hbWU6ICRlbGVtLmF0dHIoXCJjb2x1bW50YWJsZW5hbWVcIiksXG4gICAgICAgICAgZmllbGROYW1lOiAkZWxlbS5hdHRyKFwiY29sdW1ubmFtZVwiKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICBHZXRTdGF0dXM6IGZ1bmN0aW9uIEdldFN0YXR1cygpIHtcbiAgICB2YXIgc3RhdHVzID0gdGhpcy5fJFNpbmdsZUNvbnRyb2xFbGVtLmF0dHIoXCJzdGF0dXNcIik7XG5cbiAgICBpZiAoc3RhdHVzID09IFwiXCIpIHtcbiAgICAgIHN0YXR1cyA9IFwiZW5hYmxlXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXR1cztcbiAgfSxcbiAgSGlkZTogZnVuY3Rpb24gSGlkZSgpIHtcbiAgICB0aGlzLl8kU2luZ2xlQ29udHJvbEVsZW0uaGlkZSgpO1xuICB9XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgV0xEQ1RfTGlzdFNpbXBsZVNlYXJjaENvbnRhaW5lciA9IHtcbiAgX29iamVjdFR5cGU6IFwiSW5zdGFuY2VcIixcbiAgX3Byb3A6IHtcbiAgICAkc2luZ2xlQ29udHJvbEVsZW06IG51bGwsXG4gICAgaW5zdGFuY2VOYW1lOiBudWxsLFxuICAgIGVsZW1JZDogbnVsbCxcbiAgICBzdGF0dXM6IG51bGxcbiAgfSxcbiAgXyRTaW1wbGVTZWFyY2hCdXR0b246IG51bGwsXG4gIF8kU2hvd0NvbXBsZXhTZWFyY2hCdXR0b246IG51bGwsXG4gIF8kU2luZ2xlQ29udHJvbEVsZW06IG51bGwsXG4gIFJlbmRlcmVyQ2hhaW46IGZ1bmN0aW9uIFJlbmRlcmVyQ2hhaW4oX3JlbmRlcmVyQ2hhaW5QYXJhcykge1xuICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSBfcmVuZGVyZXJDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgICB0aGlzLl8kU2luZ2xlQ29udHJvbEVsZW0gPSAkc2luZ2xlQ29udHJvbEVsZW07XG4gICAgdmFyIHBhZ2VXaWR0aCA9IFBhZ2VTdHlsZVV0aWxpdHkuR2V0UGFnZVdpZHRoKCk7XG4gICAgdmFyIGJ1dHRvbldyYXBXaWR0aCA9IDIwMDtcbiAgICAkc2luZ2xlQ29udHJvbEVsZW0uZmluZChcInRhYmxlOmZpcnN0XCIpLndpZHRoKHBhZ2VXaWR0aCAtIGJ1dHRvbldyYXBXaWR0aCk7XG4gICAgdmFyICRzZWFyY2hCdXR0b25zV3JhcCA9ICQoXCI8ZGl2IGNsYXNzPSd3bGRjdC1saXN0LXNpbXBsZS1zZWFyY2gtYnV0dG9uLWlubmVyLXdyYXAnIC8+XCIpO1xuICAgICRzZWFyY2hCdXR0b25zV3JhcC53aWR0aChidXR0b25XcmFwV2lkdGggLSA0MCk7XG4gICAgdGhpcy5fJFNpbXBsZVNlYXJjaEJ1dHRvbiA9ICQoXCI8YnV0dG9uPuafpeivojwvYnV0dG9uPlwiKTtcbiAgICB0aGlzLl8kU2hvd0NvbXBsZXhTZWFyY2hCdXR0b24gPSAkKFwiPGJ1dHRvbj7pq5jnuqfmn6Xor6I8L2J1dHRvbj5cIik7XG4gICAgJHNlYXJjaEJ1dHRvbnNXcmFwLmFwcGVuZCh0aGlzLl8kU2ltcGxlU2VhcmNoQnV0dG9uKTtcbiAgICAkc2VhcmNoQnV0dG9uc1dyYXAuYXBwZW5kKHRoaXMuXyRTaG93Q29tcGxleFNlYXJjaEJ1dHRvbik7XG4gICAgJHNpbmdsZUNvbnRyb2xFbGVtLmFwcGVuZCgkc2VhcmNoQnV0dG9uc1dyYXApO1xuICAgIEhUTUxDb250cm9sLlJlbmRlcmVyQ2hhaW4oX3JlbmRlcmVyQ2hhaW5QYXJhcyk7XG4gIH0sXG4gIFJlbmRlcmVyRGF0YUNoYWluOiBIVE1MQ29udHJvbC5SZW5kZXJlckRhdGFDaGFpbixcbiAgQnVpbGRlclNlYXJjaENvbmRpdGlvbjogZnVuY3Rpb24gQnVpbGRlclNlYXJjaENvbmRpdGlvbigpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICB2YXIgYWxsQ29udHJvbHMgPSB0aGlzLl8kU2luZ2xlQ29udHJvbEVsZW0uZmluZChIVE1MQ29udHJvbEF0dHJzLlNFTEVDVEVEX0pCVUlMRDREQ19DVVNUT00pO1xuXG4gICAgdmFyIGhpZENvbnRyb2xzID0gdGhpcy5fJFNpbmdsZUNvbnRyb2xFbGVtLnBhcmVudCgpLmZpbmQoXCJbc2luZ2xlbmFtZT0nV0xEQ1RfSGlkZUNvbnRhaW5lciddXCIpLmZpbmQoXCJbY29sdW1ubmFtZV1bY29sdW1ub3BlcmF0b3JdXCIpO1xuXG4gICAgJC5tZXJnZShhbGxDb250cm9scywgaGlkQ29udHJvbHMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxDb250cm9scy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyICRlbGVtID0gJChhbGxDb250cm9sc1tpXSk7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBIVE1MQ29udHJvbC5HZXRDb250cm9sSW5zdGFuY2VCeUVsZW0oJGVsZW0pO1xuICAgICAgdmFyIHZhbE9iaiA9IGluc3RhbmNlLkdldFZhbHVlKCRlbGVtLCB7fSk7XG4gICAgICB2YXIgdmFsdWUgPSB2YWxPYmoudmFsdWU7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IFN0cmluZ1V0aWxpdHkuVHJpbSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgb3BlcmF0b3I6ICRlbGVtLmF0dHIoXCJjb2x1bW5vcGVyYXRvclwiKSxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIHRhYmxlTmFtZTogJGVsZW0uYXR0cihcImNvbHVtbnRhYmxlbmFtZVwiKSxcbiAgICAgICAgICAgIGZpZWxkTmFtZTogJGVsZW0uYXR0cihcImNvbHVtbm5hbWVcIilcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIEdldFN0YXR1czogZnVuY3Rpb24gR2V0U3RhdHVzKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLl8kU2luZ2xlQ29udHJvbEVsZW0uYXR0cihcInN0YXR1c1wiKTtcblxuICAgIGlmIChzdGF0dXMgPT0gXCJcIikge1xuICAgICAgc3RhdHVzID0gXCJlbmFibGVcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdHVzO1xuICB9LFxuICBIaWRlOiBmdW5jdGlvbiBIaWRlKCkge1xuICAgIHRoaXMuXyRTaW5nbGVDb250cm9sRWxlbS5oaWRlKCk7XG4gIH0sXG4gIEhpZGVDb21wbGV4QnV0dG9uOiBmdW5jdGlvbiBIaWRlQ29tcGxleEJ1dHRvbigpIHtcbiAgICB0aGlzLl8kU2hvd0NvbXBsZXhTZWFyY2hCdXR0b24ucmVtb3ZlKCk7XG5cbiAgICB0aGlzLl8kU2ltcGxlU2VhcmNoQnV0dG9uLnBhcmVudCgpLndpZHRoKFwiODBweFwiKTtcblxuICAgIHZhciBwYWdlV2lkdGggPSBQYWdlU3R5bGVVdGlsaXR5LkdldFBhZ2VXaWR0aCgpO1xuXG4gICAgdGhpcy5fJFNpbmdsZUNvbnRyb2xFbGVtLmZpbmQoXCJ0YWJsZTpmaXJzdFwiKS53aWR0aChwYWdlV2lkdGggLSAxMjApO1xuICB9XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgV0xEQ1RfTGlzdFRhYmxlQ2hlY2tCb3ggPSB7XG4gIFJlbmRlcmVyQ2hhaW46IEhUTUxDb250cm9sLlJlbmRlcmVyQ2hhaW4sXG4gIFJlbmRlcmVyRGF0YUNoYWluOiBmdW5jdGlvbiBSZW5kZXJlckRhdGFDaGFpbihfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcykge1xuICAgIHZhciB2YWx1ZSA9IF9yZW5kZXJlckRhdGFDaGFpblBhcmFzLnZhbDtcbiAgICB2YXIgJHRkID0gX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMuJHRkO1xuICAgICR0ZC5jc3MoXCJ0ZXh0QWxpZ25cIiwgXCJjZW50ZXJcIik7XG4gICAgdmFyICRjaGVja2JveCA9ICQoXCI8aW5wdXQgaXNyb3dfY2hlY2tib3g9XFxcInRydWVcXFwiIHR5cGU9XFxcImNoZWNrYm94XFxcIiBjbGFzcz1cXFwibGlzdC1jaGVja2JveC1jXFxcIiB2YWx1ZT1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiByb3dfY2hlY2tib3hfcmVjb3JkX2lkPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPlwiKTtcbiAgICAkY2hlY2tib3guYmluZChcImNsaWNrXCIsIHtcbiAgICAgIFwic2VsZkluc3RhbmNlXCI6IHRoaXMsXG4gICAgICBcIiRlbGVtXCI6ICRjaGVja2JveFxuICAgIH0sIHRoaXMuQ2xpY2tFdmVudCk7XG4gICAgJHRkLmh0bWwoXCJcIik7XG4gICAgJHRkLmFwcGVuZCgkY2hlY2tib3gpO1xuICB9LFxuICBDbGlja0V2ZW50OiBmdW5jdGlvbiBDbGlja0V2ZW50KHNlbmRlcikge1xuICAgIHZhciAkZWxlbSA9IHNlbmRlci5kYXRhLiRlbGVtO1xuXG4gICAgdmFyIGxpc3RUYWJsZUNvbnRhaW5lckluc3RhbmNlID0gV0xEQ1RfTGlzdFRhYmxlQ29udGFpbmVyLl9fSW5uZXJFbGVtR2V0SW5zdGFuY2UoJGVsZW0pO1xuXG4gICAgaWYgKCRlbGVtLnByb3AoXCJjaGVja2VkXCIpKSB7XG4gICAgICBsaXN0VGFibGVDb250YWluZXJJbnN0YW5jZS5TYXZlQ2hlY2tlZFJvd0RhdGEoJGVsZW0udmFsKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0VGFibGVDb250YWluZXJJbnN0YW5jZS5EZWxldGVDaGVja2VkUm93RGF0YSgkZWxlbS52YWwoKSk7XG4gICAgfVxuICB9XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgV0xEQ1RfTGlzdFRhYmxlQ29udGFpbmVyID0ge1xuICBHZXRIVE1MOiBmdW5jdGlvbiBHZXRIVE1MKCkge1xuICAgIHJldHVybiBcIjx0YWJsZSBpZD1cXFwiZXhhbXBsZVxcXCIgY2xhc3M9XFxcInN0cmlwZSByb3ctYm9yZGVyIG9yZGVyLWNvbHVtblxcXCIgc3R5bGU9XFxcIndpZHRoOjEwMCVcXFwiPlxcblwiICsgXCIgICAgICAgIDx0aGVhZD5cXG5cIiArIFwiICAgICAgICAgICAgPHRyPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRoIGNvbHNwYW49JzInPkZpcnN0IG5hbWU8L3RoPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRoPlBvc2l0aW9uPC90aD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0aD5PZmZpY2U8L3RoPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRoIGNvbHNwYW49JzInPkFnZTwvdGg+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGg+U2FsYXJ5PC90aD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0aD5FeHRuLjwvdGg+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGg+RS1tYWlsPC90aD5cXG5cIiArIFwiICAgICAgICAgICAgPC90cj5cXG5cIiArIFwiICAgICAgICAgICAgPHRyPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRoPkZpcnN0IG5hbWU8L3RoPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRoPkxhc3QgbmFtZTwvdGg+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGg+UG9zaXRpb248L3RoPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRoPk9mZmljZTwvdGg+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGg+QWdlPC90aD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0aD5TdGFydCBkYXRlPC90aD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0aD5TYWxhcnk8L3RoPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRoPkV4dG4uPC90aD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0aD5FLW1haWw8L3RoPlxcblwiICsgXCIgICAgICAgICAgICA8L3RyPlxcblwiICsgXCIgICAgICAgIDwvdGhlYWQ+XFxuXCIgKyBcIiAgICAgICAgPHRib2R5PlxcblwiICsgXCIgICAgICAgICAgICA8dHI+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+PGEgb25jbGljaz0nYWxlcnQoMSknPlRpZ2VyPC9hPjwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+Tml4b248L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPlN5c3RlbSBBcmNoaXRlY3Q8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkVkaW5idXJnaDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+NjE8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjIwMTEvMDQvMjU8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPiQzMjAsODAwPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD41NDIxPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD50Lm5peG9uQGRhdGF0YWJsZXMubmV0PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgPC90cj5cXG5cIiArIFwiICAgICAgICAgICAgPHRyPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkdhcnJldHQ8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPldpbnRlcnM8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkFjY291bnRhbnQ8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPlRva3lvPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD42MzwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MjAxMS8wNy8yNTwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+JDE3MCw3NTA8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjg0MjI8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPmcud2ludGVyc0BkYXRhdGFibGVzLm5ldDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgIDwvdHI+XFxuXCIgKyBcIiAgICAgICAgICAgIDx0cj5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5Bc2h0b248L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkNveDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+SnVuaW9yIFRlY2huaWNhbCBBdXRob3I8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPlNhbiBGcmFuY2lzY288L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjY2PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4yMDA5LzAxLzEyPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4kODYsMDAwPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4xNTYyPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5hLmNveEBkYXRhdGFibGVzLm5ldDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgIDwvdHI+XFxuXCIgKyBcIiAgICAgICAgICAgIDx0cj5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5DZWRyaWM8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPktlbGx5PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5TZW5pb3IgSmF2YXNjcmlwdCBEZXZlbG9wZXI8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkVkaW5idXJnaDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MjI8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjIwMTIvMDMvMjk8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPiQ0MzMsMDYwPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD42MjI0PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5jLmtlbGx5QGRhdGF0YWJsZXMubmV0PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgPC90cj5cXG5cIiArIFwiICAgICAgICAgICAgPHRyPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkFpcmk8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPlNhdG91PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5BY2NvdW50YW50PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5Ub2t5bzwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MzM8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjIwMDgvMTEvMjg8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPiQxNjIsNzAwPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD41NDA3PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5hLnNhdG91QGRhdGF0YWJsZXMubmV0PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgPC90cj5cXG5cIiArIFwiICAgICAgICAgICAgPHRyPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkJyaWVsbGU8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPldpbGxpYW1zb248L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkludGVncmF0aW9uIFNwZWNpYWxpc3Q8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPk5ldyBZb3JrPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD42MTwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MjAxMi8xMi8wMjwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+JDM3MiwwMDA8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjQ4MDQ8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPmIud2lsbGlhbXNvbkBkYXRhdGFibGVzLm5ldDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgIDwvdHI+XFxuXCIgKyBcIiAgICAgICAgICAgIDx0cj5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5IZXJyb2Q8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkNoYW5kbGVyPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5TYWxlcyBBc3Npc3RhbnQ8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPlNhbiBGcmFuY2lzY288L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjU5PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4yMDEyLzA4LzA2PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4kMTM3LDUwMDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+OTYwODwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+aC5jaGFuZGxlckBkYXRhdGFibGVzLm5ldDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgIDwvdHI+XFxuXCIgKyBcIiAgICAgICAgICAgIDx0cj5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5SaG9uYTwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+RGF2aWRzb248L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkludGVncmF0aW9uIFNwZWNpYWxpc3Q8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPlRva3lvPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD41NTwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MjAxMC8xMC8xNDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+JDMyNyw5MDA8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjYyMDA8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPnIuZGF2aWRzb25AZGF0YXRhYmxlcy5uZXQ8L3RkPlxcblwiICsgXCIgICAgICAgICAgICA8L3RyPlxcblwiICsgXCIgICAgICAgICAgICA8dHI+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+Q29sbGVlbjwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+SHVyc3Q8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkphdmFzY3JpcHQgRGV2ZWxvcGVyPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5TYW4gRnJhbmNpc2NvPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4zOTwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MjAwOS8wOS8xNTwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+JDIwNSw1MDA8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjIzNjA8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPmMuaHVyc3RAZGF0YXRhYmxlcy5uZXQ8L3RkPlxcblwiICsgXCIgICAgICAgICAgICA8L3RyPlxcblwiICsgXCIgICAgICAgICAgICA8dHI+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+U29ueWE8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkZyb3N0PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5Tb2Z0d2FyZSBFbmdpbmVlcjwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+RWRpbmJ1cmdoPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4yMzwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MjAwOC8xMi8xMzwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+JDEwMyw2MDA8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjE2Njc8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPnMuZnJvc3RAZGF0YXRhYmxlcy5uZXQ8L3RkPlxcblwiICsgXCIgICAgICAgICAgICA8L3RyPlxcblwiICsgXCIgICAgICAgICAgICA8dHI+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+SmVuYTwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+R2FpbmVzPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5PZmZpY2UgTWFuYWdlcjwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+TG9uZG9uPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4zMDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MjAwOC8xMi8xOTwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+JDkwLDU2MDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MzgxNDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+ai5nYWluZXNAZGF0YXRhYmxlcy5uZXQ8L3RkPlxcblwiICsgXCIgICAgICAgICAgICA8L3RyPlxcblwiICsgXCIgICAgICAgICAgICA8dHI+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+UXVpbm48L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkZseW5uPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5TdXBwb3J0IExlYWQ8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkVkaW5idXJnaDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MjI8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjIwMTMvMDMvMDM8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPiQzNDIsMDAwPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD45NDk3PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5xLmZseW5uQGRhdGF0YWJsZXMubmV0PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgPC90cj5cXG5cIiArIFwiICAgICAgICAgICAgPHRyPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkNoYXJkZTwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+TWFyc2hhbGw8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPlJlZ2lvbmFsIERpcmVjdG9yPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5TYW4gRnJhbmNpc2NvPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4zNjwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MjAwOC8xMC8xNjwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+JDQ3MCw2MDA8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjY3NDE8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPmMubWFyc2hhbGxAZGF0YXRhYmxlcy5uZXQ8L3RkPlxcblwiICsgXCIgICAgICAgICAgICA8L3RyPlxcblwiICsgXCIgICAgICAgICAgICA8dHI+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+SGFsZXk8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPktlbm5lZHk8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPlNlbmlvciBNYXJrZXRpbmcgRGVzaWduZXI8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkxvbmRvbjwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+NDM8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjIwMTIvMTIvMTg8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPiQzMTMsNTAwPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4zNTk3PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5oLmtlbm5lZHlAZGF0YXRhYmxlcy5uZXQ8L3RkPlxcblwiICsgXCIgICAgICAgICAgICA8L3RyPlxcblwiICsgXCIgICAgICAgICAgICA8dHI+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+VGF0eWFuYTwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+Rml0enBhdHJpY2s8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPlJlZ2lvbmFsIERpcmVjdG9yPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5Mb25kb248L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjE5PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4yMDEwLzAzLzE3PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4kMzg1LDc1MDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MTk2NTwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+dC5maXR6cGF0cmlja0BkYXRhdGFibGVzLm5ldDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgIDwvdHI+XFxuXCIgKyBcIiAgICAgICAgICAgIDx0cj5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5NaWNoYWVsPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5TaWx2YTwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+TWFya2V0aW5nIERlc2lnbmVyPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5Mb25kb248L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjY2PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4yMDEyLzExLzI3PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4kMTk4LDUwMDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MTU4MTwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+bS5zaWx2YUBkYXRhdGFibGVzLm5ldDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgIDwvdHI+XFxuXCIgKyBcIiAgICAgICAgICAgIDx0cj5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5DaGFyZGU8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPk1hcnNoYWxsPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5SZWdpb25hbCBEaXJlY3RvcjwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+U2FuIEZyYW5jaXNjbzwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MzY8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjIwMDgvMTAvMTY8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPiQ0NzAsNjAwPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD42NzQxPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5jLm1hcnNoYWxsQGRhdGF0YWJsZXMubmV0PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgPC90cj5cXG5cIiArIFwiICAgICAgICAgICAgPHRyPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkhhbGV5PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5LZW5uZWR5PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5TZW5pb3IgTWFya2V0aW5nIERlc2lnbmVyPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5Mb25kb248L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjQzPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4yMDEyLzEyLzE4PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4kMzEzLDUwMDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MzU5NzwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+aC5rZW5uZWR5QGRhdGF0YWJsZXMubmV0PC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgPC90cj5cXG5cIiArIFwiICAgICAgICAgICAgPHRyPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPlRhdHlhbmE8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPkZpdHpwYXRyaWNrPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD5SZWdpb25hbCBEaXJlY3RvcjwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+TG9uZG9uPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD4xOTwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MjAxMC8wMy8xNzwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+JDM4NSw3NTA8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjE5NjU8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPnQuZml0enBhdHJpY2tAZGF0YXRhYmxlcy5uZXQ8L3RkPlxcblwiICsgXCIgICAgICAgICAgICA8L3RyPlxcblwiICsgXCIgICAgICAgICAgICA8dHI+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+TWljaGFlbDwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+U2lsdmE8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPk1hcmtldGluZyBEZXNpZ25lcjwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+TG9uZG9uPC90ZD5cXG5cIiArIFwiICAgICAgICAgICAgICAgIDx0ZD42NjwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+MjAxMi8xMS8yNzwvdGQ+XFxuXCIgKyBcIiAgICAgICAgICAgICAgICA8dGQ+JDE5OCw1MDA8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPjE1ODE8L3RkPlxcblwiICsgXCIgICAgICAgICAgICAgICAgPHRkPm0uc2lsdmFAZGF0YXRhYmxlcy5uZXQ8L3RkPlxcblwiICsgXCIgICAgICAgICAgICA8L3RyPlxcblwiICsgXCIgICAgICAgIDwvdGJvZHk+XFxuXCIgKyBcIiAgICA8L3RhYmxlPlwiO1xuICB9LFxuICBfb2JqZWN0VHlwZTogXCJJbnN0YW5jZVwiLFxuICBfcHJvcDoge1xuICAgICRzaW5nbGVDb250cm9sRWxlbTogbnVsbCxcbiAgICBpbnN0YW5jZU5hbWU6IG51bGwsXG4gICAgZWxlbUlkOiBudWxsXG4gIH0sXG4gIF9JbnN0YW5jZU1hcDoge30sXG4gIF9DdXJyZW50UGFnZU51bTogMSxcbiAgX0RhdGFTZXQ6IG51bGwsXG4gIF9DYWNoZSRTaW5nbGVDb250cm9sRWxlbTogbnVsbCxcbiAgX0NhY2hlUmVuZGVyZXJEYXRhQ2hhaW5QYXJhczogbnVsbCxcbiAgX1NpbXBsZVNlYXJjaENvbnRhaW5lckluc3RhbmNlOiBudWxsLFxuICBfQ29tcGxleFNlYXJjaENvbnRhaW5lckluc3RhbmNlOiBudWxsLFxuICBfUXVlcnlQT0xpc3Q6IFtdLFxuICBfQ2hlY2tlZFJlY29yZEFycmF5OiBbXSxcbiAgXyRFbGVtOiBudWxsLFxuICBfTGlzdFJ1bnRpbWVJbnN0YW5jZTogbnVsbCxcbiAgR2V0SW5zdGFuY2U6IGZ1bmN0aW9uIEdldEluc3RhbmNlKG5hbWUpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fSW5zdGFuY2VNYXApIHtcbiAgICAgIGlmIChrZXkgPT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fSW5zdGFuY2VNYXBba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaW5zdGFuY2UgPSBldmFsKG5hbWUpO1xuICAgIHRoaXMuX0luc3RhbmNlTWFwW25hbWVdID0gaW5zdGFuY2U7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9LFxuICBJbml0aWFsaXplOiBmdW5jdGlvbiBJbml0aWFsaXplKCkge30sXG4gIFJlbmRlcmVyQ2hhaW46IGZ1bmN0aW9uIFJlbmRlcmVyQ2hhaW4oX3JlbmRlcmVyQ2hhaW5QYXJhcykge1xuICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSBfcmVuZGVyZXJDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgICB0aGlzLl9MaXN0UnVudGltZUluc3RhbmNlID0gX3JlbmRlcmVyQ2hhaW5QYXJhcy5saXN0UnVudGltZUluc3RhbmNlO1xuICAgIHRoaXMuXyRFbGVtID0gJHNpbmdsZUNvbnRyb2xFbGVtO1xuICAgIHZhciAkc2ltcGxlU2VhcmNoQ29udGFpbmVyRWxlbSA9ICRzaW5nbGVDb250cm9sRWxlbS5wcmV2QWxsKFwiW2NsaWVudF9yZXNvbHZlPSdXTERDVF9MaXN0U2ltcGxlU2VhcmNoQ29udGFpbmVyJ11cIik7XG4gICAgdmFyICRjb21wbGV4U2VhcmNoQ29udGFpbmVyRWxlbSA9ICRzaW5nbGVDb250cm9sRWxlbS5wcmV2QWxsKFwiW2NsaWVudF9yZXNvbHZlPSdXTERDVF9MaXN0Q29tcGxleFNlYXJjaENvbnRhaW5lciddXCIpO1xuICAgIHRoaXMuX1NpbXBsZVNlYXJjaENvbnRhaW5lckluc3RhbmNlID0gSFRNTENvbnRyb2wuR2V0Q29udHJvbEluc3RhbmNlQnlFbGVtKCRzaW1wbGVTZWFyY2hDb250YWluZXJFbGVtKTtcbiAgICB0aGlzLl9Db21wbGV4U2VhcmNoQ29udGFpbmVySW5zdGFuY2UgPSBIVE1MQ29udHJvbC5HZXRDb250cm9sSW5zdGFuY2VCeUVsZW0oJGNvbXBsZXhTZWFyY2hDb250YWluZXJFbGVtKTtcblxuICAgIHRoaXMuX1NpbXBsZVNlYXJjaENvbnRhaW5lckluc3RhbmNlLl8kU2ltcGxlU2VhcmNoQnV0dG9uLmJpbmQoXCJjbGlja1wiLCB7XG4gICAgICBcImxpc3RJbnN0YW5jZVwiOiB0aGlzXG4gICAgfSwgdGhpcy5TaW1wbGVTZWFyY2hDbGlja0V2ZW50KTtcblxuICAgIHRoaXMuX1NpbXBsZVNlYXJjaENvbnRhaW5lckluc3RhbmNlLl8kU2hvd0NvbXBsZXhTZWFyY2hCdXR0b24uYmluZChcImNsaWNrXCIsIHtcbiAgICAgIFwibGlzdEluc3RhbmNlXCI6IHRoaXNcbiAgICB9LCB0aGlzLlNob3dDb21wbGV4U2VhcmNoQ2xpY2tFdmVudCk7XG5cbiAgICB0aGlzLl9Db21wbGV4U2VhcmNoQ29udGFpbmVySW5zdGFuY2UuXyRDb21wbGV4U2VhcmNoQnV0dG9uLmJpbmQoXCJjbGlja1wiLCB7XG4gICAgICBcImxpc3RJbnN0YW5jZVwiOiB0aGlzXG4gICAgfSwgdGhpcy5Db21wbGV4U2VhcmNoQ2xpY2tFdmVudCk7XG5cbiAgICB0aGlzLl9Db21wbGV4U2VhcmNoQ29udGFpbmVySW5zdGFuY2UuXyRDbGVhckJ1dHRvbi5iaW5kKFwiY2xpY2tcIiwge1xuICAgICAgXCJsaXN0SW5zdGFuY2VcIjogdGhpc1xuICAgIH0sIHRoaXMuQ29tcGxleFNlYXJjaENsZWFyQ2xpY2tFdmVudCk7XG5cbiAgICB0aGlzLl9Db21wbGV4U2VhcmNoQ29udGFpbmVySW5zdGFuY2UuXyRDbG9zZUJ1dHRvbi5iaW5kKFwiY2xpY2tcIiwge1xuICAgICAgXCJsaXN0SW5zdGFuY2VcIjogdGhpc1xuICAgIH0sIHRoaXMuQ29tcGxleFNlYXJjaENsb3NlQ2xpY2tFdmVudCk7XG5cbiAgICBpZiAodGhpcy5fU2ltcGxlU2VhcmNoQ29udGFpbmVySW5zdGFuY2UuR2V0U3RhdHVzKCkgPT0gXCJkaXNhYmxlXCIpIHtcbiAgICAgIHRoaXMuX1NpbXBsZVNlYXJjaENvbnRhaW5lckluc3RhbmNlLkhpZGUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fQ29tcGxleFNlYXJjaENvbnRhaW5lckluc3RhbmNlLkdldFN0YXR1cygpID09IFwiZGlzYWJsZVwiKSB7XG4gICAgICB0aGlzLl9TaW1wbGVTZWFyY2hDb250YWluZXJJbnN0YW5jZS5IaWRlQ29tcGxleEJ1dHRvbigpO1xuICAgIH1cblxuICAgIHZhciAkdGVtcGxhdGVUYWJsZSA9ICRzaW5nbGVDb250cm9sRWxlbS5maW5kKFwidGFibGVcIik7XG4gICAgdmFyICR0ZW1wbGF0ZVRhYmxlUm93ID0gJHNpbmdsZUNvbnRyb2xFbGVtLmZpbmQoXCJ0YWJsZSB0Ym9keSB0clwiKTtcbiAgICB2YXIgJHRlbXBsYXRlVGFibGVIZWFkZXJSb3dzID0gJHNpbmdsZUNvbnRyb2xFbGVtLmZpbmQoXCJ0YWJsZSB0aGVhZCB0clwiKTtcbiAgICB0aGlzLkFwcGVuZENoZWNrQm94Q29sdW1uVGVtcGxhdGUoJHRlbXBsYXRlVGFibGUsICR0ZW1wbGF0ZVRhYmxlSGVhZGVyUm93cywgJHRlbXBsYXRlVGFibGVSb3cpO1xuICAgIEhUTUxDb250cm9sLlJlbmRlcmVyQ2hhaW4oX3JlbmRlcmVyQ2hhaW5QYXJhcyk7XG4gIH0sXG4gIFJlbmRlcmVyRGF0YUNoYWluOiBmdW5jdGlvbiBSZW5kZXJlckRhdGFDaGFpbihfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcywgaXNSZVJlbmRlcmVyKSB7XG4gICAgdmFyIHVzZWRUb3BEYXRhU2V0ID0gdHJ1ZTtcbiAgICB2YXIgZGF0YVNldElkO1xuICAgIHZhciBwYWdlU2l6ZTtcblxuICAgIGlmICh1c2VkVG9wRGF0YVNldCkge1xuICAgICAgZGF0YVNldElkID0gX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMudG9wRGF0YVNldElkO1xuICAgICAgcGFnZVNpemUgPSBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcy5wby5saXN0RGF0YXNldFBhZ2VTaXplO1xuICAgIH1cblxuICAgIGlmIChSdW50aW1lR2VuZXJhbEluc3RhbmNlLlRyeUdldFVybFBhcmFDaGFuZ2VNYWluRGF0YVNldElkKCkpIHtcbiAgICAgIGRhdGFTZXRJZCA9IFJ1bnRpbWVHZW5lcmFsSW5zdGFuY2UuVHJ5R2V0VXJsUGFyYUNoYW5nZU1haW5EYXRhU2V0SWQoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX0NhY2hlUmVuZGVyZXJEYXRhQ2hhaW5QYXJhcykge1xuICAgICAgdGhpcy5fQ2FjaGVSZW5kZXJlckRhdGFDaGFpblBhcmFzID0gX3JlbmRlcmVyRGF0YUNoYWluUGFyYXM7XG4gICAgICB0aGlzLl9DYWNoZSRTaW5nbGVDb250cm9sRWxlbSA9IF9yZW5kZXJlckRhdGFDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbS5jbG9uZSgpO1xuICAgIH1cblxuICAgIGlmIChpc1JlUmVuZGVyZXIpIHtcbiAgICAgIHZhciBub3RTY3JpcHRIVE1MID0gU3RyaW5nVXRpbGl0eS5SZW1vdmVTY3JpcHQodGhpcy5fQ2FjaGUkU2luZ2xlQ29udHJvbEVsZW0uaHRtbCgpKTtcblxuICAgICAgX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMuJHNpbmdsZUNvbnRyb2xFbGVtLmh0bWwobm90U2NyaXB0SFRNTCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjb25kaXRpb25zID0gdGhpcy5fU2ltcGxlU2VhcmNoQ29udGFpbmVySW5zdGFuY2UuQnVpbGRlclNlYXJjaENvbmRpdGlvbigpO1xuXG4gICAgICB0aGlzLl9RdWVyeVBPTGlzdCA9IGNvbmRpdGlvbnM7XG4gICAgfVxuXG4gICAgaWYgKF9yZW5kZXJlckRhdGFDaGFpblBhcmFzLmxpc3RSdW50aW1lSW5zdGFuY2UuSXNQcmV2aWV3KCkpIHtcbiAgICAgIHZhciBtb2NrRGF0YVNldCA9IHtcbiAgICAgICAgXCJ0b3RhbFwiOiAxMDAwLFxuICAgICAgICBcImxpc3RcIjogW10sXG4gICAgICAgIFwicGFnZU51bVwiOiAxLFxuICAgICAgICBcInBhZ2VTaXplXCI6IDUsXG4gICAgICAgIFwic2l6ZVwiOiA1LFxuICAgICAgICBcInN0YXJ0Um93XCI6IDEsXG4gICAgICAgIFwiZW5kUm93XCI6IDUsXG4gICAgICAgIFwicGFnZXNcIjogMjAwLFxuICAgICAgICBcInByZVBhZ2VcIjogMCxcbiAgICAgICAgXCJuZXh0UGFnZVwiOiAyLFxuICAgICAgICBcImlzRmlyc3RQYWdlXCI6IHRydWUsXG4gICAgICAgIFwiaXNMYXN0UGFnZVwiOiBmYWxzZSxcbiAgICAgICAgXCJoYXNQcmV2aW91c1BhZ2VcIjogZmFsc2UsXG4gICAgICAgIFwiaGFzTmV4dFBhZ2VcIjogdHJ1ZSxcbiAgICAgICAgXCJuYXZpZ2F0ZVBhZ2VzXCI6IDgsXG4gICAgICAgIFwibmF2aWdhdGVwYWdlTnVtc1wiOiBbMSwgMiwgMywgNCwgNSwgNiwgNywgOF0sXG4gICAgICAgIFwibmF2aWdhdGVGaXJzdFBhZ2VcIjogMSxcbiAgICAgICAgXCJuYXZpZ2F0ZUxhc3RQYWdlXCI6IDgsXG4gICAgICAgIFwiZmlyc3RQYWdlXCI6IDEsXG4gICAgICAgIFwibGFzdFBhZ2VcIjogOFxuICAgICAgfTtcbiAgICAgIHRoaXMuX0RhdGFTZXQgPSBtb2NrRGF0YVNldDtcbiAgICAgIHRoaXMuQ3JlYXRlVGFibGUoX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMuJHNpbmdsZUNvbnRyb2xFbGVtLCBtb2NrRGF0YVNldCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnRMb2FkaW5nKHdpbmRvdywgRGlhbG9nVXRpbGl0eS5EaWFsb2dMb2FkaW5nSWQsIHtcbiAgICAgICAgdGl0bGU6IFwi57O757uf5o+Q56S6XCIsXG4gICAgICAgIGhpZGU6IHtcbiAgICAgICAgICBlZmZlY3Q6IFwiZmFkZVwiLFxuICAgICAgICAgIGR1cmF0aW9uOiA1MDBcbiAgICAgICAgfVxuICAgICAgfSwgXCLmlbDmja7liqDovb3kuK0s6K+356iN5YCZLi4uLlwiKTtcbiAgICAgIFJ1bnRpbWVHZW5lcmFsSW5zdGFuY2UuR2V0RGF0YVNldERhdGEoe1xuICAgICAgICBkYXRhU2V0SWQ6IGRhdGFTZXRJZCxcbiAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplLFxuICAgICAgICBwYWdlTnVtOiB0aGlzLl9DdXJyZW50UGFnZU51bSxcbiAgICAgICAgbGlzdFF1ZXJ5UE9MaXN0OiB0aGlzLl9RdWVyeVBPTGlzdCxcbiAgICAgICAgZXhWYWx1ZTE6IFwiXCIsXG4gICAgICAgIGV4VmFsdWUyOiBcIlwiLFxuICAgICAgICBleFZhbHVlMzogXCJcIlxuICAgICAgfSwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcy5kYXRhU2V0ID0gcmVzdWx0LmRhdGE7XG4gICAgICAgIHRoaXMuX0RhdGFTZXQgPSByZXN1bHQuZGF0YTtcbiAgICAgICAgdGhpcy5fQ2hlY2tlZFJlY29yZEFycmF5ID0gW107XG4gICAgICAgIHRoaXMuQ3JlYXRlVGFibGUoX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMuJHNpbmdsZUNvbnRyb2xFbGVtLCB0aGlzLl9EYXRhU2V0LCBmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBEaWFsb2dVdGlsaXR5LkNsb3NlRGlhbG9nKERpYWxvZ1V0aWxpdHkuRGlhbG9nTG9hZGluZ0lkKTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgfSxcbiAgQ3JlYXRlVGFibGU6IGZ1bmN0aW9uIENyZWF0ZVRhYmxlKCRzaW5nbGVDb250cm9sRWxlbSwgZGF0YVNldCwgaXNQcmV2aWV3KSB7XG4gICAgdmFyICR0ZW1wbGF0ZVRhYmxlID0gJHNpbmdsZUNvbnRyb2xFbGVtLmZpbmQoXCJ0YWJsZVwiKTtcbiAgICB2YXIgJHRlbXBsYXRlVGFibGVSb3cgPSAkc2luZ2xlQ29udHJvbEVsZW0uZmluZChcInRhYmxlIHRib2R5IHRyXCIpO1xuICAgIHZhciAkdGVtcGxhdGVUYWJsZUhlYWRlclJvd3MgPSAkc2luZ2xlQ29udHJvbEVsZW0uZmluZChcInRhYmxlIHRoZWFkIHRyXCIpO1xuXG4gICAgaWYgKCR0ZW1wbGF0ZVRhYmxlUm93Lmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciAkdGVtcGxhdGVUYWJsZUJvZHkgPSAkc2luZ2xlQ29udHJvbEVsZW0uZmluZChcInRhYmxlIHRib2R5XCIpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFTZXQubGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAkdGVtcGxhdGVUYWJsZUJvZHkuYXBwZW5kKHRoaXMuUmVuZGVyZXJTaW5nbGVSb3coJHRlbXBsYXRlVGFibGUsICR0ZW1wbGF0ZVRhYmxlUm93LCBkYXRhU2V0LCBkYXRhU2V0Lmxpc3RbaV0pKTtcbiAgICAgIH1cblxuICAgICAgJHRlbXBsYXRlVGFibGVSb3cucmVtb3ZlKCk7XG5cbiAgICAgIGlmIChpc1ByZXZpZXcpIHtcbiAgICAgICAgJHRlbXBsYXRlVGFibGUuZmluZChcIltzaW5nbGVuYW1lPSdXTERDVF9MaXN0VGFibGVJbm5lckJ1dHRvbkNvbnRhaW5lciddXCIpLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgICRzaW5nbGVDb250cm9sRWxlbS5maW5kKFwiLndsZGN0LWxpc3QtdGFibGUtaW5uZXItd3JhcFwiKS5hcHBlbmQodGhpcy5DcmVhdGVQYWdpbmcoKSk7XG4gICAgJHNpbmdsZUNvbnRyb2xFbGVtLmZpbmQoXCIud2xkY3QtbGlzdC10YWJsZS1pbm5lci13cmFwXCIpLndpZHRoKFBhZ2VTdHlsZVV0aWxpdHkuR2V0UGFnZVdpZHRoKCkgLSAyMCk7XG4gICAgJHRlbXBsYXRlVGFibGUuYWRkQ2xhc3MoXCJzdHJpcGUgcm93LWJvcmRlciBvcmRlci1jb2x1bW5cIik7XG4gICAgJHRlbXBsYXRlVGFibGUud2lkdGgoXCIxMDAlXCIpO1xuICAgIHZhciBzY3JvbGxZID0gUGFnZVN0eWxlVXRpbGl0eS5HZXRQYWdlSGVpZ2h0KCk7XG4gICAgc2Nyb2xsWSA9IHNjcm9sbFkgLSAxMTA7XG5cbiAgICBpZiAoJChcIi53bGRjdC1saXN0LWJ1dHRvbi1vdXRlci13cmFwXCIpLmNzcyhcImRpc3BsYXlcIikgIT0gXCJub25lXCIpIHtcbiAgICAgIHNjcm9sbFkgPSBzY3JvbGxZIC0gJChcIi53bGRjdC1saXN0LWJ1dHRvbi1vdXRlci13cmFwXCIpLmhlaWdodCgpIC0gMTI7XG4gICAgfVxuXG4gICAgaWYgKCQoXCIud2xkY3QtbGlzdC1zaW1wbGUtc2VhcmNoLW91dGVyLXdyYXBcIikuY3NzKFwiZGlzcGxheVwiKSAhPSBcIm5vbmVcIikge1xuICAgICAgc2Nyb2xsWSA9IHNjcm9sbFkgLSAkKFwiLndsZGN0LWxpc3Qtc2ltcGxlLXNlYXJjaC1vdXRlci13cmFwXCIpLmhlaWdodCgpIC0gMTA7XG4gICAgfVxuXG4gICAgaWYgKFJ1bnRpbWVHZW5lcmFsSW5zdGFuY2UuVHJ5R2V0VXJsUGFyYVZpZXdPbmx5KCkpIHtcbiAgICAgIGlmICgkc2luZ2xlQ29udHJvbEVsZW0uZmluZChcInRyXCIpLmZpbmQoXCJ0aDpsYXN0XCIpLnRleHQoKSA9PSBcIuaTjeS9nFwiKSB7XG4gICAgICAgICRzaW5nbGVDb250cm9sRWxlbS5maW5kKFwidHJcIikuZmluZChcInRoOmxhc3RcIikuaGlkZSgpO1xuICAgICAgICAkc2luZ2xlQ29udHJvbEVsZW0uZmluZChcInRyXCIpLmZpbmQoXCJ0ZDpsYXN0XCIpLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdGFibGUgPSAkdGVtcGxhdGVUYWJsZS5EYXRhVGFibGUoe1xuICAgICAgc2Nyb2xsWTogc2Nyb2xsWSxcbiAgICAgIHNjcm9sbFg6IHRydWUsXG4gICAgICBwYWdpbmc6IGZhbHNlLFxuICAgICAgXCJvcmRlcmluZ1wiOiBmYWxzZSxcbiAgICAgIFwic2VhcmNoaW5nXCI6IGZhbHNlLFxuICAgICAgXCJpbmZvXCI6IGZhbHNlXG4gICAgfSk7XG4gIH0sXG4gIEFwcGVuZENoZWNrQm94Q29sdW1uVGVtcGxhdGU6IGZ1bmN0aW9uIEFwcGVuZENoZWNrQm94Q29sdW1uVGVtcGxhdGUoJHRlbXBsYXRlVGFibGUsICR0ZW1wbGF0ZVRhYmxlSGVhZGVyUm93cywgJHRlbXBsYXRlVGFibGVSb3cpIHtcbiAgICB2YXIgJHRoID0gJChcIjx0aCBzdHlsZT0nd2lkdGg6IDMwcHgnPumAieaLqTwvdGg+XCIpO1xuXG4gICAgaWYgKCR0ZW1wbGF0ZVRhYmxlSGVhZGVyUm93cy5sZW5ndGggPiAxKSB7XG4gICAgICAkdGguYXR0cihcInJvd3NwYW5cIiwgJHRlbXBsYXRlVGFibGVIZWFkZXJSb3dzLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgdmFyIHByaW1hcnlLZXkgPSB0aGlzLl9MaXN0UnVudGltZUluc3RhbmNlLl9MaXN0UE8ubGlzdERhdGFzZXRQcmltYXJ5S2V5O1xuICAgICQoJHRlbXBsYXRlVGFibGVIZWFkZXJSb3dzWzBdKS5wcmVwZW5kKCR0aCk7XG4gICAgJCgkdGVtcGxhdGVUYWJsZVJvdy5lcSgwKSkucHJlcGVuZChcIjx0ZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbmFsaWduPVxcXCJcXHU1QzQ1XFx1NEUyRFxcdTVCRjlcXHU5RjUwXFxcIiBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5jYXB0aW9uPVwiICsgcHJpbWFyeUtleSArIFwiIFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbmRhdGF0eXBlbmFtZT1cXFwiXFx1NUI1N1xcdTdCMjZcXHU0RTMyXFxcIiBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5uYW1lPVwiICsgcHJpbWFyeUtleSArIFwiIFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnRhYmxlbmFtZT1cXFwiXFxcIiBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sX2NhdGVnb3J5PVxcXCJJbnB1dENvbnRyb2xcXFwiIFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RjbGllbnRyZW5kZXJlcm1ldGhvZD1cXFwiXFxcIiBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0Y2xpZW50cmVuZGVyZXJtZXRob2RwYXJhPVxcXCJcXFwiIFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RzZXJ2ZXJyZXNvbHZlbWV0aG9kPVxcXCJcXFwiIFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RzZXJ2ZXJyZXNvbHZlbWV0aG9kcGFyYT1cXFwiXFxcIiBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0dGV4dD1cXFwiXFxcIiBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0dHlwZT1cXFwiXFxcIiBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0dmFsdWU9XFxcIlxcXCIgXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYz1cXFwiXFxcIiBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cXFwiY2hlY2tfYm94X3RlbXBsYXRlXFxcIiBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc19qYnVpbGQ0ZGNfZGF0YT1cXFwidHJ1ZVxcXCIgXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgamJ1aWxkNGRjX2N1c3RvbT1cXFwidHJ1ZVxcXCIgXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cXFwiY2hlY2tfYm94X3RlbXBsYXRlXFxcIiBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cXFwiXFxcIiBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemU9XFxcInRydWVcXFwiIFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dfcmVtb3ZlX2J1dHRvbj1cXFwidHJ1ZVxcXCIgXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luZ2xlbmFtZT1cXFwiV0xEQ1RfTGlzdFRhYmxlQ2hlY2tCb3hcXFwiIFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPVxcXCJcXFwiIFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldGJ1dHRvbmlkPVxcXCJcXFwiIFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudF9yZXNvbHZlPVxcXCJXTERDVF9MaXN0VGFibGVDaGVja0JveFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XCIpO1xuICB9LFxuICBSZW5kZXJlclNpbmdsZVJvdzogZnVuY3Rpb24gUmVuZGVyZXJTaW5nbGVSb3coJHRlbXBsYXRlVGFibGUsICR0ZW1wbGF0ZVRhYmxlUm93LCBkYXRhU2V0LCByb3dEYXRhKSB7XG4gICAgdmFyICRjbG9uZVJvdyA9ICR0ZW1wbGF0ZVRhYmxlUm93LmNsb25lKCk7XG4gICAgdmFyICR0ZHMgPSAkY2xvbmVSb3cuZmluZChcInRkXCIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkdGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgJHRkID0gJCgkdGRzW2ldKTtcbiAgICAgIHZhciAkZGl2Q1RFbGVtID0gJHRkLmZpbmQoXCJkaXZcIiArIEhUTUxDb250cm9sQXR0cnMuU0VMRUNURURfSkJVSUxENERDX0NVU1RPTSk7XG5cbiAgICAgIGlmICgkZGl2Q1RFbGVtLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIGJpbmRUb0ZpZWxkID0gJGRpdkNURWxlbS5hdHRyKFwiY29sdW1ubmFtZVwiKTtcbiAgICAgICAgdmFyIHZhbCA9IHJvd0RhdGFbYmluZFRvRmllbGRdID8gcm93RGF0YVtiaW5kVG9GaWVsZF0gOiBcIlwiO1xuICAgICAgICB2YXIgY2xpZW50UmVzb2x2ZUluc3RhbmNlTmFtZSA9ICRkaXZDVEVsZW0uYXR0cihIVE1MQ29udHJvbEF0dHJzLkNMSUVOVF9SRVNPTFZFKTtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gV0xEQ1RfTGlzdFRhYmxlQ29udGFpbmVyLkdldEluc3RhbmNlKGNsaWVudFJlc29sdmVJbnN0YW5jZU5hbWUpO1xuICAgICAgICBpbnN0YW5jZS5SZW5kZXJlckRhdGFDaGFpbih7XG4gICAgICAgICAgJHRlbXBsYXRlVGFibGU6ICR0ZW1wbGF0ZVRhYmxlLFxuICAgICAgICAgICR0ZW1wbGF0ZVRhYmxlUm93OiAkdGVtcGxhdGVUYWJsZVJvdyxcbiAgICAgICAgICAkc2luZ2xlQ29udHJvbEVsZW06ICRkaXZDVEVsZW0sXG4gICAgICAgICAgZGF0YVNldDogZGF0YVNldCxcbiAgICAgICAgICByb3dEYXRhOiByb3dEYXRhLFxuICAgICAgICAgICRjbG9uZVJvdzogJGNsb25lUm93LFxuICAgICAgICAgICR0ZDogJHRkLFxuICAgICAgICAgIHZhbDogdmFsLFxuICAgICAgICAgIGxpc3RSdW50aW1lSW5zdGFuY2U6IHRoaXMuX0xpc3RSdW50aW1lSW5zdGFuY2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICRjbG9uZVJvdztcbiAgfSxcbiAgQ3JlYXRlUGFnaW5nOiBmdW5jdGlvbiBDcmVhdGVQYWdpbmcoJHRlbXBsYXRlVGFibGUsICR0ZW1wbGF0ZVRhYmxlUm93LCBkYXRhU2V0LCByb3dEYXRhLCAkcm93LCAkdGQsIHZhbHVlKSB7XG4gICAgdmFyIF9zZWxmID0gdGhpcztcblxuICAgIHZhciBwYWdpbmdPdXRlckVsZW0gPSAkKFwiPGRpdiBjbGFzcz0ndGFibGUtcGFnaW5nLW91dGVyJz48ZGl2IGNsYXNzPSd0YWJsZS1wYWdpbmctaW5uZXInPjwvZGl2PjwvZGl2PlwiKTtcbiAgICB2YXIgcGFnaW5nSW5uZXJFbGVtID0gcGFnaW5nT3V0ZXJFbGVtLmZpbmQoXCJkaXZcIik7XG4gICAgdmFyIGZpcnN0UGFnZSA9ICQoXCI8ZGl2IGNsYXNzPSd0YWJsZS1wYWdpbmctYnV0dG9uJz7nrKzkuIDpobU8L2Rpdj5cIik7XG4gICAgZmlyc3RQYWdlLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIF9zZWxmLkNoYW5nZVBhZ2VOdW0oMSk7XG4gICAgfSk7XG4gICAgdmFyIHByZVBhZ2UgPSAkKFwiPGRpdiBjbGFzcz0ndGFibGUtcGFnaW5nLWJ1dHRvbic+5LiK5LiA6aG1PC9kaXY+XCIpO1xuICAgIHByZVBhZ2UuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF9zZWxmLl9DdXJyZW50UGFnZU51bSA+IDEpIHtcbiAgICAgICAgX3NlbGYuQ2hhbmdlUGFnZU51bShfc2VsZi5fQ3VycmVudFBhZ2VOdW0gLSAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnRUZXh0KFwi5bey57uP5Yiw6L6+56ys5LiA6aG1IVwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgbGFzdFBhZ2UgPSAkKFwiPGRpdiBjbGFzcz0ndGFibGUtcGFnaW5nLWJ1dHRvbic+5pyr6aG1PC9kaXY+XCIpO1xuICAgIGxhc3RQYWdlLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIF9zZWxmLkNoYW5nZVBhZ2VOdW0oX3NlbGYuX0RhdGFTZXQucGFnZXMpO1xuICAgIH0pO1xuICAgIHZhciBuZXh0UGFnZSA9ICQoXCI8ZGl2IGNsYXNzPSd0YWJsZS1wYWdpbmctYnV0dG9uJz7kuIvkuIDpobU8L2Rpdj5cIik7XG4gICAgbmV4dFBhZ2UuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF9zZWxmLl9DdXJyZW50UGFnZU51bSA8IF9zZWxmLl9EYXRhU2V0LnBhZ2VzKSB7XG4gICAgICAgIF9zZWxmLkNoYW5nZVBhZ2VOdW0oX3NlbGYuX0N1cnJlbnRQYWdlTnVtICsgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBEaWFsb2dVdGlsaXR5LkFsZXJ0VGV4dChcIuW3sue7j+WIsOi+vuacgOacq+mhtSFcIik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIGluZm8gPSAkKFwiPGRpdiBjbGFzcz0ndGFibGUtcGFnaW5nLWluZm8nPuaAu+adoeaVsOOAkFwiICsgX3NlbGYuX0RhdGFTZXQudG90YWwgKyBcIuOAkSZuYnNwOyZuYnNwO+mhteaVsOOAkFwiICsgX3NlbGYuX0N1cnJlbnRQYWdlTnVtICsgXCIvXCIgKyBfc2VsZi5fRGF0YVNldC5wYWdlcyArIFwi44CRPC9kaXY+XCIpO1xuICAgIHBhZ2luZ0lubmVyRWxlbS5hcHBlbmQoZmlyc3RQYWdlKS5hcHBlbmQocHJlUGFnZSkuYXBwZW5kKG5leHRQYWdlKS5hcHBlbmQobGFzdFBhZ2UpLmFwcGVuZChpbmZvKTtcbiAgICByZXR1cm4gcGFnaW5nT3V0ZXJFbGVtO1xuICB9LFxuICBDaGFuZ2VQYWdlTnVtOiBmdW5jdGlvbiBDaGFuZ2VQYWdlTnVtKHBhZ2VOdW0pIHtcbiAgICB0aGlzLl9DdXJyZW50UGFnZU51bSA9IHBhZ2VOdW07XG4gICAgdGhpcy5SZW5kZXJlckRhdGFDaGFpbih0aGlzLl9DYWNoZVJlbmRlcmVyRGF0YUNoYWluUGFyYXMsIHRydWUpO1xuICB9LFxuICBUcnlSZWxvYWRGb3JMaXN0Rm9ybUJ1dHRvbjogZnVuY3Rpb24gVHJ5UmVsb2FkRm9yTGlzdEZvcm1CdXR0b24obGlzdEZvcm1CdXR0b25FbGVtSWQpIHtcbiAgICB2YXIgJGxpc3RGb3JtQnV0dG9uRWxlbSA9ICQoXCIjXCIgKyBsaXN0Rm9ybUJ1dHRvbkVsZW1JZCk7XG4gICAgdmFyICRsaXN0VGVtcGxhdGUgPSAkbGlzdEZvcm1CdXR0b25FbGVtLnBhcmVudHNVbnRpbChcIltzaW5nbGVuYW1lPSdXTERDVF9MaXN0VGVtcGxhdGUnXVwiKS5sYXN0KCkucGFyZW50KCk7XG4gICAgdmFyICRsaXN0VGFibGVDb250YWluZXIgPSAkbGlzdFRlbXBsYXRlLmZpbmQoXCJbc2luZ2xlbmFtZT0nV0xEQ1RfTGlzdFRhYmxlQ29udGFpbmVyJ11cIik7XG4gICAgdmFyICRsaXN0VGFibGVDb250YWluZXJJbnN0YW5jZSA9IEhUTUxDb250cm9sLkdldENvbnRyb2xJbnN0YW5jZUJ5RWxlbSgkbGlzdFRhYmxlQ29udGFpbmVyKTtcbiAgICAkbGlzdFRhYmxlQ29udGFpbmVySW5zdGFuY2UuUmVuZGVyZXJEYXRhQ2hhaW4oJGxpc3RUYWJsZUNvbnRhaW5lckluc3RhbmNlLl9DYWNoZVJlbmRlcmVyRGF0YUNoYWluUGFyYXMsIHRydWUpO1xuICB9LFxuICBTaW1wbGVTZWFyY2hDbGlja0V2ZW50OiBmdW5jdGlvbiBTaW1wbGVTZWFyY2hDbGlja0V2ZW50KHNlbmRlcikge1xuICAgIHZhciBfc2VsZiA9IHNlbmRlci5kYXRhLmxpc3RJbnN0YW5jZTtcblxuICAgIHZhciBjb25kaXRpb25zID0gX3NlbGYuX1NpbXBsZVNlYXJjaENvbnRhaW5lckluc3RhbmNlLkJ1aWxkZXJTZWFyY2hDb25kaXRpb24oKTtcblxuICAgIF9zZWxmLl9RdWVyeVBPTGlzdCA9IGNvbmRpdGlvbnM7XG5cbiAgICBfc2VsZi5SZW5kZXJlckRhdGFDaGFpbihfc2VsZi5fQ2FjaGVSZW5kZXJlckRhdGFDaGFpblBhcmFzLCB0cnVlKTtcbiAgfSxcbiAgU2hvd0NvbXBsZXhTZWFyY2hDbGlja0V2ZW50OiBmdW5jdGlvbiBTaG93Q29tcGxleFNlYXJjaENsaWNrRXZlbnQoc2VuZGVyKSB7XG4gICAgdmFyIF9zZWxmID0gc2VuZGVyLmRhdGEubGlzdEluc3RhbmNlO1xuICAgIERpYWxvZ1V0aWxpdHkuRGlhbG9nRWxlbU9iaihfc2VsZi5fQ29tcGxleFNlYXJjaENvbnRhaW5lckluc3RhbmNlLl8kU2luZ2xlQ29udHJvbEVsZW0sIHtcbiAgICAgIHRpdGxlOiBcIumrmOe6p+afpeivolwiLFxuICAgICAgaGVpZ2h0OiA0MTAsXG4gICAgICB3aWR0aDogODAwLFxuICAgICAgbW9kYWw6IHRydWVcbiAgICB9KTtcbiAgfSxcbiAgQ29tcGxleFNlYXJjaENsaWNrRXZlbnQ6IGZ1bmN0aW9uIENvbXBsZXhTZWFyY2hDbGlja0V2ZW50KHNlbmRlcikge1xuICAgIGNvbnNvbGUubG9nKFwi6auY57qn5p+l6K+iLlwiKTtcbiAgICB2YXIgX3NlbGYgPSBzZW5kZXIuZGF0YS5saXN0SW5zdGFuY2U7XG5cbiAgICB2YXIgc2ltcGxlQ29uZGl0aW9ucyA9IF9zZWxmLl9TaW1wbGVTZWFyY2hDb250YWluZXJJbnN0YW5jZS5CdWlsZGVyU2VhcmNoQ29uZGl0aW9uKCk7XG5cbiAgICB2YXIgY29tcGxleENvbmRpdGlvbnMgPSBfc2VsZi5fQ29tcGxleFNlYXJjaENvbnRhaW5lckluc3RhbmNlLkJ1aWxkZXJTZWFyY2hDb25kaXRpb24oKTtcblxuICAgIF9zZWxmLl9RdWVyeVBPTGlzdCA9IGNvbXBsZXhDb25kaXRpb25zLmNvbmNhdChzaW1wbGVDb25kaXRpb25zKTtcblxuICAgIF9zZWxmLlJlbmRlcmVyRGF0YUNoYWluKF9zZWxmLl9DYWNoZVJlbmRlcmVyRGF0YUNoYWluUGFyYXMsIHRydWUpO1xuXG4gICAgRGlhbG9nVXRpbGl0eS5DbG9zZURpYWxvZ0VsZW0oX3NlbGYuX0NvbXBsZXhTZWFyY2hDb250YWluZXJJbnN0YW5jZS5fJFNpbmdsZUNvbnRyb2xFbGVtKTtcbiAgfSxcbiAgQ29tcGxleFNlYXJjaENsb3NlQ2xpY2tFdmVudDogZnVuY3Rpb24gQ29tcGxleFNlYXJjaENsb3NlQ2xpY2tFdmVudChzZW5kZXIpIHtcbiAgICB2YXIgX3NlbGYgPSBzZW5kZXIuZGF0YS5saXN0SW5zdGFuY2U7XG4gICAgRGlhbG9nVXRpbGl0eS5DbG9zZURpYWxvZ0VsZW0oX3NlbGYuX0NvbXBsZXhTZWFyY2hDb250YWluZXJJbnN0YW5jZS5fJFNpbmdsZUNvbnRyb2xFbGVtKTtcbiAgfSxcbiAgQ29tcGxleFNlYXJjaENsZWFyQ2xpY2tFdmVudDogZnVuY3Rpb24gQ29tcGxleFNlYXJjaENsZWFyQ2xpY2tFdmVudChzZW5kZXIpIHtcbiAgICB2YXIgX3NlbGYgPSBzZW5kZXIuZGF0YS5saXN0SW5zdGFuY2U7XG4gICAgRGlhbG9nVXRpbGl0eS5BbGVydFRleHQoXCLmnKrlrp7njrAhXCIpO1xuICB9LFxuICBHZXRSZWNvcmREYXRhOiBmdW5jdGlvbiBHZXRSZWNvcmREYXRhKGlkKSB7XG4gICAgdmFyIHByaW1hcnlLZXkgPSB0aGlzLl9MaXN0UnVudGltZUluc3RhbmNlLkdldFByaW1hcnlLZXkoKTtcblxuICAgIGlmICghdGhpcy5fTGlzdFJ1bnRpbWVJbnN0YW5jZS5DaGVja1ByaW1hcnlLZXlJbkRhdGFTZXQodGhpcy5fRGF0YVNldCwgcHJpbWFyeUtleSkpIHtcbiAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnRUZXh0KFwi5pWw5o2u6ZuG5Lit5om+5LiN5Yiw5Li76ZSuOlwiICsgcHJpbWFyeUtleSArIFwiLOivt+iuvue9rumFjee9ruaYr+WQpuato+ehriFcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coXCLkuLvplK7kuLo6XCIgKyBwcmltYXJ5S2V5KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fRGF0YVNldC5saXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcmVjb3JkRGF0YSA9IHRoaXMuX0RhdGFTZXQubGlzdFtpXTtcblxuICAgICAgaWYgKHJlY29yZERhdGFbcHJpbWFyeUtleV0gPT0gaWQpIHtcbiAgICAgICAgcmV0dXJuIHJlY29yZERhdGE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgRGlhbG9nVXRpbGl0eS5BbGVydFRleHQoXCLmib7kuI3liLDkuLvplK5cIiArIHByaW1hcnlLZXkgKyBcIuS4ujpcIiArIGlkICsgXCLnmoTorrDlvZUhXCIpO1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBTYXZlQ2hlY2tlZFJvd0RhdGE6IGZ1bmN0aW9uIFNhdmVDaGVja2VkUm93RGF0YShpZCkge1xuICAgIHZhciByZWNvcmQgPSB0aGlzLkdldFJlY29yZERhdGEoaWQpO1xuXG4gICAgaWYgKHJlY29yZCAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9DaGVja2VkUmVjb3JkQXJyYXkucHVzaCh7XG4gICAgICAgIFwiSWRcIjogaWQsXG4gICAgICAgIFwiUmVjb3JkXCI6IHJlY29yZFxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBEZWxldGVDaGVja2VkUm93RGF0YTogZnVuY3Rpb24gRGVsZXRlQ2hlY2tlZFJvd0RhdGEoaWQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX0NoZWNrZWRSZWNvcmRBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX0NoZWNrZWRSZWNvcmRBcnJheVtpXS5JZCA9PSBpZCkge1xuICAgICAgICBBcnJheVV0aWxpdHkuRGVsZXRlKHRoaXMuX0NoZWNrZWRSZWNvcmRBcnJheSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBHZXRDaGVja2VkUmVjb3JkOiBmdW5jdGlvbiBHZXRDaGVja2VkUmVjb3JkKCkge1xuICAgIHJldHVybiB0aGlzLl9DaGVja2VkUmVjb3JkQXJyYXk7XG4gIH0sXG4gIEdldExhc3RDaGVja2VkUmVjb3JkOiBmdW5jdGlvbiBHZXRMYXN0Q2hlY2tlZFJlY29yZCgpIHtcbiAgICBpZiAodGhpcy5fQ2hlY2tlZFJlY29yZEFycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLl9DaGVja2VkUmVjb3JkQXJyYXlbdGhpcy5fQ2hlY2tlZFJlY29yZEFycmF5Lmxlbmd0aCAtIDFdO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBDbGVhckFsbENoZWNrQm94OiBmdW5jdGlvbiBDbGVhckFsbENoZWNrQm94KCkge1xuICAgIHRoaXMuXyRFbGVtLmZpbmQoXCI6Y2hlY2tib3hcIikucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcblxuICAgIHRoaXMuX0NoZWNrZWRSZWNvcmRBcnJheSA9IFtdO1xuICB9LFxuICBTZXRDaGVja0JveFRvQ2hlY2tlZFN0YXR1czogZnVuY3Rpb24gU2V0Q2hlY2tCb3hUb0NoZWNrZWRTdGF0dXMoaWQpIHtcbiAgICB0aGlzLl8kRWxlbS5maW5kKFwiW3Jvd19jaGVja2JveF9yZWNvcmRfaWQ9J1wiICsgaWQgKyBcIiddOmNoZWNrYm94XCIpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcblxuICAgIHRoaXMuU2F2ZUNoZWNrZWRSb3dEYXRhKGlkKTtcbiAgfSxcbiAgX19Jbm5lckVsZW1HZXRJbnN0YW5jZTogZnVuY3Rpb24gX19Jbm5lckVsZW1HZXRJbnN0YW5jZSgkaW5uZXJFbGVtKSB7XG4gICAgdmFyICRXTERDVF9MaXN0VGFibGVDb250YWluZXIgPSAkaW5uZXJFbGVtLnBhcmVudHMoXCJbc2luZ2xlbmFtZT0nV0xEQ1RfTGlzdFRhYmxlQ29udGFpbmVyJ11cIik7XG4gICAgdmFyIGxpc3RUYWJsZUNvbnRhaW5lckluc3RhbmNlID0gSFRNTENvbnRyb2wuR2V0Q29udHJvbEluc3RhbmNlQnlFbGVtKCRXTERDVF9MaXN0VGFibGVDb250YWluZXIpO1xuICAgIHJldHVybiBsaXN0VGFibGVDb250YWluZXJJbnN0YW5jZTtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIFdMRENUX0xpc3RUYWJsZUlubmVyQnV0dG9uQ29udGFpbmVyID0ge1xuICBSZW5kZXJlckNoYWluOiBmdW5jdGlvbiBSZW5kZXJlckNoYWluKF9yZW5kZXJlckNoYWluUGFyYXMpIHtcbiAgICB2YXIgJHNpbmdsZUNvbnRyb2xFbGVtID0gX3JlbmRlcmVyQ2hhaW5QYXJhcy4kc2luZ2xlQ29udHJvbEVsZW07XG4gICAgdmFyICRkaXZDVEVsZW0gPSAkc2luZ2xlQ29udHJvbEVsZW0uZmluZChcImRpdlwiICsgSFRNTENvbnRyb2xBdHRycy5TRUxFQ1RFRF9KQlVJTEQ0RENfQ1VTVE9NKTtcbiAgICAkc2luZ2xlQ29udHJvbEVsZW0uaHRtbChcIlwiKTtcbiAgICAkc2luZ2xlQ29udHJvbEVsZW0uYXBwZW5kKCRkaXZDVEVsZW0pO1xuICB9LFxuICBSZW5kZXJlckRhdGFDaGFpbjogSFRNTENvbnRyb2wuUmVuZGVyZXJEYXRhQ2hhaW5cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBXTERDVF9MaXN0VGFibGVJbm5lckJ1dHRvblNpbmdsZSA9IHtcbiAgUmVuZGVyZXJDaGFpbjogZnVuY3Rpb24gUmVuZGVyZXJDaGFpbihfcmVuZGVyZXJDaGFpblBhcmFzKSB7fSxcbiAgX0xpc3RSdW50aW1lSW5zdGFuY2U6IG51bGwsXG4gIFJlbmRlcmVyRGF0YUNoYWluOiBmdW5jdGlvbiBSZW5kZXJlckRhdGFDaGFpbihfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcykge1xuICAgIHZhciAkc2luZ2xlQ29udHJvbEVsZW0gPSBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcy4kc2luZ2xlQ29udHJvbEVsZW07XG4gICAgdGhpcy5fTGlzdFJ1bnRpbWVJbnN0YW5jZSA9IF9yZW5kZXJlckRhdGFDaGFpblBhcmFzLmxpc3RSdW50aW1lSW5zdGFuY2U7XG4gICAgJHNpbmdsZUNvbnRyb2xFbGVtLmJpbmQoXCJjbGlja1wiLCB7XG4gICAgICBcInNlbGZJbnN0YW5jZVwiOiB0aGlzLFxuICAgICAgXCIkZWxlbVwiOiAkc2luZ2xlQ29udHJvbEVsZW0sXG4gICAgICByb3dEYXRhOiBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcy5yb3dEYXRhXG4gICAgfSwgdGhpcy5DbGlja0V2ZW50KTtcbiAgICAkc2luZ2xlQ29udHJvbEVsZW0uaHRtbChcIlwiKTtcbiAgICAkc2luZ2xlQ29udHJvbEVsZW0uYXR0cihcInRpdGxlXCIsICRzaW5nbGVDb250cm9sRWxlbS5hdHRyKFwiY2FwdGlvblwiKSk7XG4gIH0sXG4gIENsaWNrRXZlbnQ6IGZ1bmN0aW9uIENsaWNrRXZlbnQoc2VuZGVyKSB7XG4gICAgdmFyICRlbGVtID0gc2VuZGVyLmRhdGEuJGVsZW07XG4gICAgdmFyIHRhcmdldGJ1dHRvbmlkID0gJGVsZW0uYXR0cihcInRhcmdldGJ1dHRvbmlkXCIpO1xuICAgIHZhciAkbGlzdFRhYmxlQ29udGFpbmVyID0gJGVsZW0ucGFyZW50c1VudGlsKFwiW3NpbmdsZW5hbWU9J1dMRENUX0xpc3RUYWJsZUNvbnRhaW5lciddXCIpLmxhc3QoKS5wYXJlbnQoKTtcbiAgICB2YXIgbGlzdFRhYmxlQ29udGFpbmVySW5zdGFuY2UgPSBIVE1MQ29udHJvbC5HZXRDb250cm9sSW5zdGFuY2VCeUVsZW0oJGxpc3RUYWJsZUNvbnRhaW5lcik7XG4gICAgbGlzdFRhYmxlQ29udGFpbmVySW5zdGFuY2UuQ2xlYXJBbGxDaGVja0JveCgpO1xuXG4gICAgdmFyIHByaW1hcnlLZXkgPSBzZW5kZXIuZGF0YS5zZWxmSW5zdGFuY2UuX0xpc3RSdW50aW1lSW5zdGFuY2UuR2V0UHJpbWFyeUtleSgpO1xuXG4gICAgbGlzdFRhYmxlQ29udGFpbmVySW5zdGFuY2UuU2V0Q2hlY2tCb3hUb0NoZWNrZWRTdGF0dXMoc2VuZGVyLmRhdGEucm93RGF0YVtwcmltYXJ5S2V5XSk7XG4gICAgY29uc29sZS5sb2codGFyZ2V0YnV0dG9uaWQpO1xuICAgICQoXCJidXR0b24jXCIgKyB0YXJnZXRidXR0b25pZCkudHJpZ2dlcihcImNsaWNrXCIpO1xuICAgIGNvbnNvbGUubG9nKGxpc3RUYWJsZUNvbnRhaW5lckluc3RhbmNlKTtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIFdMRENUX0xpc3RUYWJsZUxhYmVsID0ge1xuICBfb2JqZWN0VHlwZTogXCJTdGF0aWNcIixcbiAgX3Byb3BNYXA6IHt9LFxuICBfcHJvcDoge1xuICAgICRzaW5nbGVDb250cm9sRWxlbTogbnVsbCxcbiAgICBpbnN0YW5jZU5hbWU6IG51bGwsXG4gICAgZWxlbUlkOiBudWxsLFxuICAgIGNvbHVtbkFsaWduOiBudWxsLFxuICAgIGRlZkZvcm1hdDogbnVsbCxcbiAgICB0YXJnZXRCdXR0b25JZDogbnVsbCxcbiAgICBkaWN0aW9uYXJ5R3JvdXBEYXRhU291cmNlSWQ6IG51bGwsXG4gICAgb21pdExlbmd0aDogbnVsbFxuICB9LFxuICBSZW5kZXJlckNoYWluOiBIVE1MQ29udHJvbC5SZW5kZXJlckNoYWluLFxuICBSZW5kZXJlckRhdGFDaGFpbjogZnVuY3Rpb24gUmVuZGVyZXJEYXRhQ2hhaW4oX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMpIHtcbiAgICB2YXIgJHNpbmdsZUNvbnRyb2xFbGVtID0gX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMuJHNpbmdsZUNvbnRyb2xFbGVtO1xuICAgIHZhciB2YWx1ZSA9IF9yZW5kZXJlckRhdGFDaGFpblBhcmFzLnZhbDtcbiAgICB2YXIgZWxlbUlkID0gJHNpbmdsZUNvbnRyb2xFbGVtLmF0dHIoXCJpZFwiKTtcbiAgICB2YXIgX3Byb3AgPSB0aGlzLl9wcm9wTWFwW2VsZW1JZF07XG4gICAgX3Byb3AuX0xpc3RSdW50aW1lSW5zdGFuY2UgPSBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcy5saXN0UnVudGltZUluc3RhbmNlO1xuICAgIHZhciAkdGQgPSBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcy4kdGQ7XG5cbiAgICBpZiAoX3Byb3AuY29sdW1uQWxpZ24gPT0gXCLlsYXkuK3lr7npvZBcIikge1xuICAgICAgJHRkLmNzcyhcInRleHRBbGlnblwiLCBcImNlbnRlclwiKTtcbiAgICB9IGVsc2UgaWYgKF9wcm9wLmNvbHVtbkFsaWduID09IFwi5bem5a+56b2QXCIpIHtcbiAgICAgICR0ZC5jc3MoXCJ0ZXh0QWxpZ25cIiwgXCJsZWZ0XCIpO1xuICAgIH1cblxuICAgIGlmIChfcHJvcC5kZWZGb3JtYXQgPT0gXCJ5eXl5LU1NLWRkXCIpIHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgY3REYXRlID0gRGF0ZVV0aWxpdHkuQ29udmVydEZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICB2YWx1ZSA9IERhdGVVdGlsaXR5LkZvcm1hdChjdERhdGUsIF9wcm9wLmRlZkZvcm1hdCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcHJvcC5kZWZGb3JtYXQgPT0gXCJjb252ZXJ0T3JnYW5JZFRvT3JnYW5OYW1lXCIpIHtcbiAgICAgIGlmIChTdHJpbmdVdGlsaXR5LklzTm90TnVsbE9yRW1wdHkodmFsdWUpKSB7XG4gICAgICAgIHZhciBvcmdhbkRhdGEgPSBfcmVuZGVyZXJEYXRhQ2hhaW5QYXJhcy5saXN0UnVudGltZUluc3RhbmNlLl9MaXN0UE8uZXhEYXRhLm1pbk9yZ2FuRGF0YVt2YWx1ZV07XG5cbiAgICAgICAgaWYgKG9yZ2FuRGF0YSAhPSBudWxsICYmIG9yZ2FuRGF0YSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgb3JnYW5OYW1lID0gb3JnYW5EYXRhLm9yZ2FuTmFtZTtcbiAgICAgICAgICB2YWx1ZSA9IG9yZ2FuTmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Byb3AuZGVmRm9ybWF0ID09IFwiY29udmVydEREVmFsdWVUb0REVGV4dFwiKSB7XG4gICAgICBpZiAoU3RyaW5nVXRpbGl0eS5Jc05vdE51bGxPckVtcHR5KHZhbHVlKSAmJiBfcHJvcC5kaWN0aW9uYXJ5R3JvdXBEYXRhU291cmNlSWQpIHtcbiAgICAgICAgdmFyIGtleSA9IF9wcm9wLmRpY3Rpb25hcnlHcm91cERhdGFTb3VyY2VJZCArIFwiX1wiICsgdmFsdWU7XG4gICAgICAgIHZhbHVlID0gX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMubGlzdFJ1bnRpbWVJbnN0YW5jZS5fTGlzdFBPLmV4RGF0YS5taW5EaWN0aW9uYXJ5RGF0YVtrZXldLlRFWFQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKF9wcm9wLnRhcmdldEJ1dHRvbklkKSB7XG4gICAgICAkdGQuYWRkQ2xhc3MoXCJsaXN0LXRkLWNsaWNrLWVuYWJsZVwiKTtcbiAgICAgICR0ZC5iaW5kKFwiY2xpY2tcIiwge1xuICAgICAgICBcInByb3BcIjogX3Byb3AsXG4gICAgICAgIHJvd0RhdGE6IF9yZW5kZXJlckRhdGFDaGFpblBhcmFzLnJvd0RhdGFcbiAgICAgIH0sIHRoaXMuQ2xpY2tFdmVudCk7XG4gICAgfVxuXG4gICAgaWYgKF9wcm9wLm9taXRMZW5ndGggJiYgdmFsdWUpIHtcbiAgICAgIHZhciBpbnRPbWl0TGVuZ3RoID0gcGFyc2VJbnQoX3Byb3Aub21pdExlbmd0aCk7XG5cbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiBpbnRPbWl0TGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDAsIGludE9taXRMZW5ndGgpICsgXCIuLi5cIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkdGQuaHRtbCh2YWx1ZSk7XG4gIH0sXG4gIENsaWNrRXZlbnQ6IGZ1bmN0aW9uIENsaWNrRXZlbnQoc2VuZGVyKSB7XG4gICAgdmFyIF9wcm9wID0gc2VuZGVyLmRhdGEucHJvcDtcbiAgICB2YXIgcm93RGF0YSA9IHNlbmRlci5kYXRhLnJvd0RhdGE7XG4gICAgdmFyIHRhcmdldGJ1dHRvbmlkID0gX3Byb3AudGFyZ2V0QnV0dG9uSWQ7XG4gICAgdmFyICRsaXN0VGFibGVDb250YWluZXIgPSAkKHRoaXMpLnBhcmVudHNVbnRpbChcIltzaW5nbGVuYW1lPSdXTERDVF9MaXN0VGFibGVDb250YWluZXInXVwiKS5sYXN0KCkucGFyZW50KCk7XG4gICAgdmFyIGxpc3RUYWJsZUNvbnRhaW5lckluc3RhbmNlID0gSFRNTENvbnRyb2wuR2V0Q29udHJvbEluc3RhbmNlQnlFbGVtKCRsaXN0VGFibGVDb250YWluZXIpO1xuICAgIGxpc3RUYWJsZUNvbnRhaW5lckluc3RhbmNlLkNsZWFyQWxsQ2hlY2tCb3goKTtcblxuICAgIHZhciBwcmltYXJ5S2V5ID0gX3Byb3AuX0xpc3RSdW50aW1lSW5zdGFuY2UuR2V0UHJpbWFyeUtleSgpO1xuXG4gICAgbGlzdFRhYmxlQ29udGFpbmVySW5zdGFuY2UuU2V0Q2hlY2tCb3hUb0NoZWNrZWRTdGF0dXMocm93RGF0YVtwcmltYXJ5S2V5XSk7XG4gICAgY29uc29sZS5sb2codGFyZ2V0YnV0dG9uaWQpO1xuICAgICQoXCJidXR0b24jXCIgKyB0YXJnZXRidXR0b25pZCkudHJpZ2dlcihcImNsaWNrXCIpO1xuICAgIGNvbnNvbGUubG9nKGxpc3RUYWJsZUNvbnRhaW5lckluc3RhbmNlKTtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIFdMRENUX1ByaW50QnV0dG9uID0ge1xuICBfTGlzdFRhYmxlQ29udGFpbmVySW5zdGFuY2U6IG51bGwsXG4gIFJlbmRlcmVyQ2hhaW46IEhUTUxDb250cm9sLlJlbmRlcmVyQ2hhaW4sXG4gIFJlc29sdmVTZWxmOiBmdW5jdGlvbiBSZXNvbHZlU2VsZihfcmVuZGVyZXJDaGFpblBhcmFzKSB7XG4gICAgdmFyICRzaW5nbGVDb250cm9sRWxlbSA9IF9yZW5kZXJlckNoYWluUGFyYXMuJHNpbmdsZUNvbnRyb2xFbGVtO1xuICAgIHZhciBjYXB0aW9uID0gJHNpbmdsZUNvbnRyb2xFbGVtLmF0dHIoXCJidXR0b25jYXB0aW9uXCIpO1xuICAgIHZhciAkYnV0dG9uID0gJChcIjxidXR0b24gY2xhc3M9J3dsZGN0LWxpc3QtYnV0dG9uJz5cIiArIGNhcHRpb24gKyBcIjwvYnV0dG9uPlwiKTtcbiAgICB2YXIgYXR0cmlidXRlcyA9ICRzaW5nbGVDb250cm9sRWxlbS5wcm9wKFwiYXR0cmlidXRlc1wiKTtcbiAgICAkLmVhY2goYXR0cmlidXRlcywgZnVuY3Rpb24gKCkge1xuICAgICAgJGJ1dHRvbi5hdHRyKHRoaXMubmFtZSwgdGhpcy52YWx1ZSk7XG4gICAgfSk7XG4gICAgJGJ1dHRvbi5iaW5kKFwiY2xpY2tcIiwge1xuICAgICAgXCJidXR0b25FbGVtXCI6ICRidXR0b24sXG4gICAgICBcInNlbGZJbnN0YW5jZVwiOiB0aGlzXG4gICAgfSwgdGhpcy5DbGlja0V2ZW50KTtcbiAgICB2YXIgaXNzaG93ID0gJGJ1dHRvbi5hdHRyKFwiaXNzaG93XCIpO1xuXG4gICAgaWYgKGlzc2hvdyA9PSBcImZhbHNlXCIpIHtcbiAgICAgICRidXR0b24uaGlkZSgpO1xuICAgIH1cblxuICAgIHJldHVybiAkYnV0dG9uO1xuICB9LFxuICBSZW5kZXJlckRhdGFDaGFpbjogZnVuY3Rpb24gUmVuZGVyZXJEYXRhQ2hhaW4oX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMpIHtcbiAgICB2YXIgJHNpbmdsZUNvbnRyb2xFbGVtID0gX3JlbmRlcmVyRGF0YUNoYWluUGFyYXMuJHNpbmdsZUNvbnRyb2xFbGVtO1xuICAgIHZhciAkV0xEQ1RfTGlzdEJ1dHRvbkNvbnRhaW5lciA9ICRzaW5nbGVDb250cm9sRWxlbS5wYXJlbnRzKFwiW3NpbmdsZW5hbWU9J1dMRENUX0xpc3RCdXR0b25Db250YWluZXInXVwiKTtcbiAgICB2YXIgJFdMRENUX0xpc3RUYWJsZUNvbnRhaW5lckVsZW0gPSAkV0xEQ1RfTGlzdEJ1dHRvbkNvbnRhaW5lci5uZXh0QWxsKFwiW2NsaWVudF9yZXNvbHZlPSdXTERDVF9MaXN0VGFibGVDb250YWluZXInXVwiKTtcbiAgICB0aGlzLl9MaXN0VGFibGVDb250YWluZXJJbnN0YW5jZSA9IEhUTUxDb250cm9sLkdldENvbnRyb2xJbnN0YW5jZUJ5RWxlbSgkV0xEQ1RfTGlzdFRhYmxlQ29udGFpbmVyRWxlbSk7XG4gIH0sXG4gIENsaWNrRXZlbnQ6IGZ1bmN0aW9uIENsaWNrRXZlbnQoc2VuZGVyKSB7XG4gICAgdmFyICRidXR0b24gPSBzZW5kZXIuZGF0YS5idXR0b25FbGVtO1xuICAgIHZhciBfc2VsZiA9IHNlbmRlci5kYXRhLnNlbGZJbnN0YW5jZTtcbiAgICB2YXIgYmluZGF1dGhvcml0eSA9ICRidXR0b24uYXR0cihcImJpbmRhdXRob3JpdHlcIik7XG4gICAgdmFyIGJ1dHRvbmNhcHRpb24gPSAkYnV0dG9uLmF0dHIoXCJidXR0b25jYXB0aW9uXCIpO1xuICAgIHZhciBidXR0b250eXBlID0gJGJ1dHRvbi5hdHRyKFwiYnV0dG9udHlwZVwiKTtcbiAgICB2YXIgY3VzdGNsaWVudGNsaWNrYmVmb3JlbWV0aG9kID0gJGJ1dHRvbi5hdHRyKFwiY3VzdGNsaWVudGNsaWNrYmVmb3JlbWV0aG9kXCIpO1xuICAgIHZhciBjdXN0Y2xpZW50Y2xpY2tiZWZvcmVtZXRob2RwYXJhID0gJGJ1dHRvbi5hdHRyKFwiY3VzdGNsaWVudGNsaWNrYmVmb3JlbWV0aG9kcGFyYVwiKTtcbiAgICB2YXIgY3VzdGNsaWVudHJlbmRlcmVyYWZ0ZXJtZXRob2RwYXJhID0gJGJ1dHRvbi5hdHRyKFwiY3VzdGNsaWVudHJlbmRlcmVyYWZ0ZXJtZXRob2RwYXJhXCIpO1xuICAgIHZhciBjdXN0Y2xpZW50cmVuZGVyZXJhZnRlcm1ldGhvZHBhcmFwYXJhID0gJGJ1dHRvbi5hdHRyKFwiY3VzdGNsaWVudHJlbmRlcmVyYWZ0ZXJtZXRob2RwYXJhcGFyYVwiKTtcbiAgICB2YXIgY3VzdGNsaWVudHJlbmRlcmVybWV0aG9kID0gJGJ1dHRvbi5hdHRyKFwiY3VzdGNsaWVudHJlbmRlcmVybWV0aG9kXCIpO1xuICAgIHZhciBjdXN0Y2xpZW50cmVuZGVyZXJtZXRob2RwYXJhID0gJGJ1dHRvbi5hdHRyKFwiY3VzdGNsaWVudHJlbmRlcmVybWV0aG9kcGFyYVwiKTtcbiAgICB2YXIgY3VzdHNlcnZlcnJlc29sdmVtZXRob2QgPSAkYnV0dG9uLmF0dHIoXCJjdXN0c2VydmVycmVzb2x2ZW1ldGhvZFwiKTtcbiAgICB2YXIgY3VzdHNlcnZlcnJlc29sdmVtZXRob2RwYXJhID0gJGJ1dHRvbi5hdHRyKFwiY3VzdHNlcnZlcnJlc29sdmVtZXRob2RwYXJhXCIpO1xuICAgIHZhciBmb3JtY29kZSA9ICRidXR0b24uYXR0cihcImZvcm1jb2RlXCIpO1xuICAgIHZhciBmb3JtaWQgPSAkYnV0dG9uLmF0dHIoXCJmb3JtaWRcIik7XG4gICAgdmFyIGZvcm1tb2R1bGVpZCA9ICRidXR0b24uYXR0cihcImZvcm1tb2R1bGVpZFwiKTtcbiAgICB2YXIgZm9ybW1vZHVsZW5hbWUgPSAkYnV0dG9uLmF0dHIoXCJmb3JtbW9kdWxlbmFtZVwiKTtcbiAgICB2YXIgZm9ybW5hbWUgPSAkYnV0dG9uLmF0dHIoXCJmb3JtbmFtZVwiKTtcbiAgICB2YXIgZWxlbWlkID0gJGJ1dHRvbi5hdHRyKFwiaWRcIik7XG4gICAgdmFyIGJ1dHRvbmlkID0gJGJ1dHRvbi5hdHRyKFwiYnV0dG9uaWRcIik7XG4gICAgdmFyIGlubmVyYnV0dG9uanNvbnN0cmluZyA9ICRidXR0b24uYXR0cihcImlubmVyYnV0dG9uanNvbnN0cmluZ1wiKTtcbiAgICB2YXIgb3BlbnR5cGUgPSAkYnV0dG9uLmF0dHIoXCJvcGVudHlwZVwiKTtcbiAgICB2YXIgb3BlcmF0aW9uID0gJGJ1dHRvbi5hdHRyKFwib3BlcmF0aW9uXCIpO1xuICAgIHZhciBzaW5nbGVuYW1lID0gJGJ1dHRvbi5hdHRyKFwic2luZ2xlbmFtZVwiKTtcbiAgICB2YXIgd2luZG93Y2FwdGlvbiA9ICRidXR0b24uYXR0cihcIndpbmRvd2NhcHRpb25cIik7XG4gICAgdmFyIHdpbmRvd2hlaWdodCA9ICRidXR0b24uYXR0cihcIndpbmRvd2hlaWdodFwiKTtcbiAgICB2YXIgd2luZG93d2lkdGggPSAkYnV0dG9uLmF0dHIoXCJ3aW5kb3d3aWR0aFwiKTtcbiAgICB2YXIgY2xpZW50X3Jlc29sdmUgPSAkYnV0dG9uLmF0dHIoXCJjbGllbnRfcmVzb2x2ZVwiKTtcbiAgICB2YXIgcmVjb3JkSWQgPSBcIlwiO1xuXG4gICAgaWYgKG9wZXJhdGlvbiA9PSBcInVwZGF0ZVwiIHx8IG9wZXJhdGlvbiA9PSBcInZpZXdcIikge1xuICAgICAgdmFyIGNoZWNrZWRSZWNvcmRPYmpzID0gX3NlbGYuX0xpc3RUYWJsZUNvbnRhaW5lckluc3RhbmNlLkdldENoZWNrZWRSZWNvcmQoKTtcblxuICAgICAgaWYgKGNoZWNrZWRSZWNvcmRPYmpzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnRUZXh0KFwi6K+36YCJ5oup6ZyA6KaB6L+b6KGM5pON5L2c55qE6K6w5b2VIVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChjaGVja2VkUmVjb3JkT2Jqcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIERpYWxvZ1V0aWxpdHkuQWxlcnRUZXh0KFwi5LiA5qyh5Y+q6IO95pON5L2c5LiA5p2h6K6w5b2VIVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVjb3JkSWQgPSBjaGVja2VkUmVjb3JkT2Jqc1swXS5JZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcGFyYVN0ciA9IEJhc2VVdGlsaXR5LkdldFVybFBhcmFWYWx1ZShcIm1lbnVSaWdodFVybFBhcmFcIik7XG4gICAgdmFyIHVybCA9IEJhc2VVdGlsaXR5LkJ1aWxkVmlldyhcIi9IVE1ML0J1aWxkZXIvUnVudGltZS9XZWJGb3JtUnVudGltZVByaW50Lmh0bWxcIiwge1xuICAgICAgXCJmb3JtSWRcIjogZm9ybWlkLFxuICAgICAgXCJidXR0b25JZFwiOiBidXR0b25pZCxcbiAgICAgIFwibGlzdEZvcm1CdXR0b25FbGVtSWRcIjogZWxlbWlkLFxuICAgICAgXCJyZWNvcmRJZFwiOiByZWNvcmRJZCxcbiAgICAgIFwib3BlcmF0aW9uVHlwZVwiOiBvcGVyYXRpb24sXG4gICAgICBcIndpbmRvd1dpZHRoXCI6IHdpbmRvd3dpZHRoLFxuICAgICAgXCJ3aW5kb3dIZWlnaHRcIjogd2luZG93aGVpZ2h0LFxuICAgICAgXCJtZW51UmlnaHRVcmxQYXJhXCI6IHBhcmFTdHJcbiAgICB9KTtcbiAgICBEaWFsb2dVdGlsaXR5Lk9wZW5OZXdUYWJXaW5kb3codXJsKTtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIFdMRENUX1NlYXJjaF9Ecm9wRG93blNlbGVjdCA9IHtcbiAgUmVuZGVyZXJDaGFpbjogZnVuY3Rpb24gUmVuZGVyZXJDaGFpbihfcmVuZGVyZXJDaGFpblBhcmFzKSB7fSxcbiAgUmVuZGVyZXJEYXRhQ2hhaW46IGZ1bmN0aW9uIFJlbmRlcmVyRGF0YUNoYWluKF9yZW5kZXJlckRhdGFDaGFpblBhcmFzKSB7XG4gICAgdmFyICRzaW5nbGVDb250cm9sRWxlbSA9IF9yZW5kZXJlckRhdGFDaGFpblBhcmFzLiRzaW5nbGVDb250cm9sRWxlbTtcbiAgfSxcbiAgR2V0VmFsdWU6IEhUTUxDb250cm9sLkdldFZhbHVlLFxuICBUcnlCaW5kVXJsVmFsdWU6IEhUTUxDb250cm9sLlRyeUJpbmRVcmxWYWx1ZVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIFdMRENUX1NlYXJjaF9UZXh0Qm94ID0ge1xuICBSZW5kZXJlckNoYWluOiBIVE1MQ29udHJvbC5SZW5kZXJlckNoYWluLFxuICBSZW5kZXJlckRhdGFDaGFpbjogSFRNTENvbnRyb2wuUmVuZGVyZXJEYXRhQ2hhaW4sXG4gIEdldFZhbHVlOiBIVE1MQ29udHJvbC5HZXRWYWx1ZSxcbiAgVHJ5QmluZFVybFZhbHVlOiBIVE1MQ29udHJvbC5UcnlCaW5kVXJsVmFsdWVcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBXTERDVF9TZWFyY2hfVGV4dERhdGVUaW1lID0ge1xuICBSZW5kZXJlckNoYWluOiBIVE1MQ29udHJvbC5SZW5kZXJlckNoYWluLFxuICBSZW5kZXJlckRhdGFDaGFpbjogSFRNTENvbnRyb2wuUmVuZGVyZXJEYXRhQ2hhaW4sXG4gIEdldFZhbHVlOiBIVE1MQ29udHJvbC5HZXRWYWx1ZSxcbiAgVHJ5QmluZFVybFZhbHVlOiBIVE1MQ29udHJvbC5UcnlCaW5kVXJsVmFsdWVcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbihmdW5jdGlvbiAoZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnanF1ZXJ5JywgJ2RhdGF0YWJsZXMubmV0J10sIGZ1bmN0aW9uICgkKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSgkLCB3aW5kb3csIGRvY3VtZW50KTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICgodHlwZW9mIGV4cG9ydHMgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihleHBvcnRzKSkgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdCwgJCkge1xuICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgIHJvb3QgPSB3aW5kb3c7XG4gICAgICB9XG5cbiAgICAgIGlmICghJCB8fCAhJC5mbi5kYXRhVGFibGUpIHtcbiAgICAgICAgJCA9IHJlcXVpcmUoJ2RhdGF0YWJsZXMubmV0Jykocm9vdCwgJCkuJDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhY3RvcnkoJCwgcm9vdCwgcm9vdC5kb2N1bWVudCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBmYWN0b3J5KGpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG4gIH1cbn0pKGZ1bmN0aW9uICgkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBEYXRhVGFibGUgPSAkLmZuLmRhdGFUYWJsZTtcblxuICB2YXIgX2ZpcmVmb3hTY3JvbGw7XG5cbiAgdmFyIEZpeGVkQ29sdW1ucyA9IGZ1bmN0aW9uIEZpeGVkQ29sdW1ucyhkdCwgaW5pdCkge1xuICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBGaXhlZENvbHVtbnMpKSB7XG4gICAgICBhbGVydChcIkZpeGVkQ29sdW1ucyB3YXJuaW5nOiBGaXhlZENvbHVtbnMgbXVzdCBiZSBpbml0aWFsaXNlZCB3aXRoIHRoZSAnbmV3JyBrZXl3b3JkLlwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5pdCA9PT0gdW5kZWZpbmVkIHx8IGluaXQgPT09IHRydWUpIHtcbiAgICAgIGluaXQgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgY2FtZWxUb0h1bmdhcmlhbiA9ICQuZm4uZGF0YVRhYmxlLmNhbWVsVG9IdW5nYXJpYW47XG5cbiAgICBpZiAoY2FtZWxUb0h1bmdhcmlhbikge1xuICAgICAgY2FtZWxUb0h1bmdhcmlhbihGaXhlZENvbHVtbnMuZGVmYXVsdHMsIEZpeGVkQ29sdW1ucy5kZWZhdWx0cywgdHJ1ZSk7XG4gICAgICBjYW1lbFRvSHVuZ2FyaWFuKEZpeGVkQ29sdW1ucy5kZWZhdWx0cywgaW5pdCk7XG4gICAgfVxuXG4gICAgdmFyIGR0U2V0dGluZ3MgPSBuZXcgJC5mbi5kYXRhVGFibGUuQXBpKGR0KS5zZXR0aW5ncygpWzBdO1xuICAgIHRoaXMucyA9IHtcbiAgICAgIFwiZHRcIjogZHRTZXR0aW5ncyxcbiAgICAgIFwiaVRhYmxlQ29sdW1uc1wiOiBkdFNldHRpbmdzLmFvQ29sdW1ucy5sZW5ndGgsXG4gICAgICBcImFpT3V0ZXJXaWR0aHNcIjogW10sXG4gICAgICBcImFpSW5uZXJXaWR0aHNcIjogW10sXG4gICAgICBydGw6ICQoZHRTZXR0aW5ncy5uVGFibGUpLmNzcygnZGlyZWN0aW9uJykgPT09ICdydGwnXG4gICAgfTtcbiAgICB0aGlzLmRvbSA9IHtcbiAgICAgIFwic2Nyb2xsZXJcIjogbnVsbCxcbiAgICAgIFwiaGVhZGVyXCI6IG51bGwsXG4gICAgICBcImJvZHlcIjogbnVsbCxcbiAgICAgIFwiZm9vdGVyXCI6IG51bGwsXG4gICAgICBcImdyaWRcIjoge1xuICAgICAgICBcIndyYXBwZXJcIjogbnVsbCxcbiAgICAgICAgXCJkdFwiOiBudWxsLFxuICAgICAgICBcImxlZnRcIjoge1xuICAgICAgICAgIFwid3JhcHBlclwiOiBudWxsLFxuICAgICAgICAgIFwiaGVhZFwiOiBudWxsLFxuICAgICAgICAgIFwiYm9keVwiOiBudWxsLFxuICAgICAgICAgIFwiZm9vdFwiOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIFwicmlnaHRcIjoge1xuICAgICAgICAgIFwid3JhcHBlclwiOiBudWxsLFxuICAgICAgICAgIFwiaGVhZFwiOiBudWxsLFxuICAgICAgICAgIFwiYm9keVwiOiBudWxsLFxuICAgICAgICAgIFwiZm9vdFwiOiBudWxsXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImNsb25lXCI6IHtcbiAgICAgICAgXCJsZWZ0XCI6IHtcbiAgICAgICAgICBcImhlYWRlclwiOiBudWxsLFxuICAgICAgICAgIFwiYm9keVwiOiBudWxsLFxuICAgICAgICAgIFwiZm9vdGVyXCI6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgXCJyaWdodFwiOiB7XG4gICAgICAgICAgXCJoZWFkZXJcIjogbnVsbCxcbiAgICAgICAgICBcImJvZHlcIjogbnVsbCxcbiAgICAgICAgICBcImZvb3RlclwiOiBudWxsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKGR0U2V0dGluZ3MuX29GaXhlZENvbHVtbnMpIHtcbiAgICAgIHRocm93ICdGaXhlZENvbHVtbnMgYWxyZWFkeSBpbml0aWFsaXNlZCBvbiB0aGlzIHRhYmxlJztcbiAgICB9XG5cbiAgICBkdFNldHRpbmdzLl9vRml4ZWRDb2x1bW5zID0gdGhpcztcblxuICAgIGlmICghZHRTZXR0aW5ncy5fYkluaXRDb21wbGV0ZSkge1xuICAgICAgZHRTZXR0aW5ncy5vQXBpLl9mbkNhbGxiYWNrUmVnKGR0U2V0dGluZ3MsICdhb0luaXRDb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5fZm5Db25zdHJ1Y3QoaW5pdCk7XG4gICAgICB9LCAnRml4ZWRDb2x1bW5zJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2ZuQ29uc3RydWN0KGluaXQpO1xuICAgIH1cbiAgfTtcblxuICAkLmV4dGVuZChGaXhlZENvbHVtbnMucHJvdG90eXBlLCB7XG4gICAgXCJmblVwZGF0ZVwiOiBmdW5jdGlvbiBmblVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuX2ZuRHJhdyh0cnVlKTtcbiAgICB9LFxuICAgIFwiZm5SZWRyYXdMYXlvdXRcIjogZnVuY3Rpb24gZm5SZWRyYXdMYXlvdXQoKSB7XG4gICAgICB0aGlzLl9mbkNvbENhbGMoKTtcblxuICAgICAgdGhpcy5fZm5HcmlkTGF5b3V0KCk7XG5cbiAgICAgIHRoaXMuZm5VcGRhdGUoKTtcbiAgICB9LFxuICAgIFwiZm5SZWNhbGN1bGF0ZUhlaWdodFwiOiBmdW5jdGlvbiBmblJlY2FsY3VsYXRlSGVpZ2h0KG5Ucikge1xuICAgICAgZGVsZXRlIG5Uci5fRFRUQ19pSGVpZ2h0O1xuICAgICAgblRyLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcbiAgICB9LFxuICAgIFwiZm5TZXRSb3dIZWlnaHRcIjogZnVuY3Rpb24gZm5TZXRSb3dIZWlnaHQoblRhcmdldCwgaUhlaWdodCkge1xuICAgICAgblRhcmdldC5zdHlsZS5oZWlnaHQgPSBpSGVpZ2h0ICsgXCJweFwiO1xuICAgIH0sXG4gICAgXCJmbkdldFBvc2l0aW9uXCI6IGZ1bmN0aW9uIGZuR2V0UG9zaXRpb24obm9kZSkge1xuICAgICAgdmFyIGlkeDtcbiAgICAgIHZhciBpbnN0ID0gdGhpcy5zLmR0Lm9JbnN0YW5jZTtcblxuICAgICAgaWYgKCEkKG5vZGUpLnBhcmVudHMoJy5EVEZDX0Nsb25lZCcpLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gaW5zdC5mbkdldFBvc2l0aW9uKG5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RyJykge1xuICAgICAgICAgIGlkeCA9ICQobm9kZSkuaW5kZXgoKTtcbiAgICAgICAgICByZXR1cm4gaW5zdC5mbkdldFBvc2l0aW9uKCQoJ3RyJywgdGhpcy5zLmR0Lm5UQm9keSlbaWR4XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGNvbElkeCA9ICQobm9kZSkuaW5kZXgoKTtcbiAgICAgICAgICBpZHggPSAkKG5vZGUucGFyZW50Tm9kZSkuaW5kZXgoKTtcbiAgICAgICAgICB2YXIgcm93ID0gaW5zdC5mbkdldFBvc2l0aW9uKCQoJ3RyJywgdGhpcy5zLmR0Lm5UQm9keSlbaWR4XSk7XG4gICAgICAgICAgcmV0dXJuIFtyb3csIGNvbElkeCwgaW5zdC5vQXBpLl9mblZpc2libGVUb0NvbHVtbkluZGV4KHRoaXMucy5kdCwgY29sSWR4KV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiX2ZuQ29uc3RydWN0XCI6IGZ1bmN0aW9uIF9mbkNvbnN0cnVjdChvSW5pdCkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgaUxlbixcbiAgICAgICAgICBpV2lkdGgsXG4gICAgICAgICAgdGhhdCA9IHRoaXM7XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5zLmR0Lm9JbnN0YW5jZS5mblZlcnNpb25DaGVjayAhPSAnZnVuY3Rpb24nIHx8IHRoaXMucy5kdC5vSW5zdGFuY2UuZm5WZXJzaW9uQ2hlY2soJzEuOC4wJykgIT09IHRydWUpIHtcbiAgICAgICAgYWxlcnQoXCJGaXhlZENvbHVtbnMgXCIgKyBGaXhlZENvbHVtbnMuVkVSU0lPTiArIFwiIHJlcXVpcmVkIERhdGFUYWJsZXMgMS44LjAgb3IgbGF0ZXIuIFwiICsgXCJQbGVhc2UgdXBncmFkZSB5b3VyIERhdGFUYWJsZXMgaW5zdGFsbGF0aW9uXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnMuZHQub1Njcm9sbC5zWCA9PT0gXCJcIikge1xuICAgICAgICB0aGlzLnMuZHQub0luc3RhbmNlLm9BcGkuX2ZuTG9nKHRoaXMucy5kdCwgMSwgXCJGaXhlZENvbHVtbnMgaXMgbm90IG5lZWRlZCAobm8gXCIgKyBcIngtc2Nyb2xsaW5nIGluIERhdGFUYWJsZXMgZW5hYmxlZCksIHNvIG5vIGFjdGlvbiB3aWxsIGJlIHRha2VuLiBVc2UgJ0ZpeGVkSGVhZGVyJyBmb3IgXCIgKyBcImNvbHVtbiBmaXhpbmcgd2hlbiBzY3JvbGxpbmcgaXMgbm90IGVuYWJsZWRcIik7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnMgPSAkLmV4dGVuZCh0cnVlLCB0aGlzLnMsIEZpeGVkQ29sdW1ucy5kZWZhdWx0cywgb0luaXQpO1xuICAgICAgdmFyIGNsYXNzZXMgPSB0aGlzLnMuZHQub0NsYXNzZXM7XG4gICAgICB0aGlzLmRvbS5ncmlkLmR0ID0gJCh0aGlzLnMuZHQublRhYmxlKS5wYXJlbnRzKCdkaXYuJyArIGNsYXNzZXMuc1Njcm9sbFdyYXBwZXIpWzBdO1xuICAgICAgdGhpcy5kb20uc2Nyb2xsZXIgPSAkKCdkaXYuJyArIGNsYXNzZXMuc1Njcm9sbEJvZHksIHRoaXMuZG9tLmdyaWQuZHQpWzBdO1xuXG4gICAgICB0aGlzLl9mbkNvbENhbGMoKTtcblxuICAgICAgdGhpcy5fZm5HcmlkU2V0dXAoKTtcblxuICAgICAgdmFyIG1vdXNlQ29udHJvbGxlcjtcbiAgICAgIHZhciBtb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICQodGhpcy5zLmR0Lm5UYWJsZVdyYXBwZXIpLm9uKCdtb3VzZWRvd24uRFRGQycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChlLmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICAgIG1vdXNlRG93biA9IHRydWU7XG4gICAgICAgICAgJChkb2N1bWVudCkub25lKCdtb3VzZXVwJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgJCh0aGlzLmRvbS5zY3JvbGxlcikub24oJ21vdXNlb3Zlci5EVEZDIHRvdWNoc3RhcnQuRFRGQycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFtb3VzZURvd24pIHtcbiAgICAgICAgICBtb3VzZUNvbnRyb2xsZXIgPSAnbWFpbic7XG4gICAgICAgIH1cbiAgICAgIH0pLm9uKCdzY3JvbGwuRFRGQycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghbW91c2VDb250cm9sbGVyICYmIGUub3JpZ2luYWxFdmVudCkge1xuICAgICAgICAgIG1vdXNlQ29udHJvbGxlciA9ICdtYWluJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb3VzZUNvbnRyb2xsZXIgPT09ICdtYWluJykge1xuICAgICAgICAgIGlmICh0aGF0LnMuaUxlZnRDb2x1bW5zID4gMCkge1xuICAgICAgICAgICAgdGhhdC5kb20uZ3JpZC5sZWZ0LmxpbmVyLnNjcm9sbFRvcCA9IHRoYXQuZG9tLnNjcm9sbGVyLnNjcm9sbFRvcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhhdC5zLmlSaWdodENvbHVtbnMgPiAwKSB7XG4gICAgICAgICAgICB0aGF0LmRvbS5ncmlkLnJpZ2h0LmxpbmVyLnNjcm9sbFRvcCA9IHRoYXQuZG9tLnNjcm9sbGVyLnNjcm9sbFRvcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmFyIHdoZWVsVHlwZSA9ICdvbndoZWVsJyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA/ICd3aGVlbC5EVEZDJyA6ICdtb3VzZXdoZWVsLkRURkMnO1xuXG4gICAgICBpZiAodGhhdC5zLmlMZWZ0Q29sdW1ucyA+IDApIHtcbiAgICAgICAgJCh0aGF0LmRvbS5ncmlkLmxlZnQubGluZXIpLm9uKCdtb3VzZW92ZXIuRFRGQyB0b3VjaHN0YXJ0LkRURkMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFtb3VzZURvd24pIHtcbiAgICAgICAgICAgIG1vdXNlQ29udHJvbGxlciA9ICdsZWZ0JztcbiAgICAgICAgICB9XG4gICAgICAgIH0pLm9uKCdzY3JvbGwuRFRGQycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgaWYgKCFtb3VzZUNvbnRyb2xsZXIgJiYgZS5vcmlnaW5hbEV2ZW50KSB7XG4gICAgICAgICAgICBtb3VzZUNvbnRyb2xsZXIgPSAnbGVmdCc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG1vdXNlQ29udHJvbGxlciA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICB0aGF0LmRvbS5zY3JvbGxlci5zY3JvbGxUb3AgPSB0aGF0LmRvbS5ncmlkLmxlZnQubGluZXIuc2Nyb2xsVG9wO1xuXG4gICAgICAgICAgICBpZiAodGhhdC5zLmlSaWdodENvbHVtbnMgPiAwKSB7XG4gICAgICAgICAgICAgIHRoYXQuZG9tLmdyaWQucmlnaHQubGluZXIuc2Nyb2xsVG9wID0gdGhhdC5kb20uZ3JpZC5sZWZ0LmxpbmVyLnNjcm9sbFRvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pLm9uKHdoZWVsVHlwZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgeERlbHRhID0gZS50eXBlID09PSAnd2hlZWwnID8gLWUub3JpZ2luYWxFdmVudC5kZWx0YVggOiBlLm9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YVg7XG4gICAgICAgICAgdGhhdC5kb20uc2Nyb2xsZXIuc2Nyb2xsTGVmdCAtPSB4RGVsdGE7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhhdC5zLmlSaWdodENvbHVtbnMgPiAwKSB7XG4gICAgICAgICQodGhhdC5kb20uZ3JpZC5yaWdodC5saW5lcikub24oJ21vdXNlb3Zlci5EVEZDIHRvdWNoc3RhcnQuRFRGQycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIW1vdXNlRG93bikge1xuICAgICAgICAgICAgbW91c2VDb250cm9sbGVyID0gJ3JpZ2h0JztcbiAgICAgICAgICB9XG4gICAgICAgIH0pLm9uKCdzY3JvbGwuRFRGQycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgaWYgKCFtb3VzZUNvbnRyb2xsZXIgJiYgZS5vcmlnaW5hbEV2ZW50KSB7XG4gICAgICAgICAgICBtb3VzZUNvbnRyb2xsZXIgPSAncmlnaHQnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtb3VzZUNvbnRyb2xsZXIgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIHRoYXQuZG9tLnNjcm9sbGVyLnNjcm9sbFRvcCA9IHRoYXQuZG9tLmdyaWQucmlnaHQubGluZXIuc2Nyb2xsVG9wO1xuXG4gICAgICAgICAgICBpZiAodGhhdC5zLmlMZWZ0Q29sdW1ucyA+IDApIHtcbiAgICAgICAgICAgICAgdGhhdC5kb20uZ3JpZC5sZWZ0LmxpbmVyLnNjcm9sbFRvcCA9IHRoYXQuZG9tLmdyaWQucmlnaHQubGluZXIuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSkub24od2hlZWxUeXBlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciB4RGVsdGEgPSBlLnR5cGUgPT09ICd3aGVlbCcgPyAtZS5vcmlnaW5hbEV2ZW50LmRlbHRhWCA6IGUub3JpZ2luYWxFdmVudC53aGVlbERlbHRhWDtcbiAgICAgICAgICB0aGF0LmRvbS5zY3JvbGxlci5zY3JvbGxMZWZ0IC09IHhEZWx0YTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgICQod2luZG93KS5vbigncmVzaXplLkRURkMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoYXQuX2ZuR3JpZExheW91dC5jYWxsKHRoYXQpO1xuICAgICAgfSk7XG4gICAgICB2YXIgYkZpcnN0RHJhdyA9IHRydWU7XG4gICAgICB2YXIganFUYWJsZSA9ICQodGhpcy5zLmR0Lm5UYWJsZSk7XG4gICAgICBqcVRhYmxlLm9uKCdkcmF3LmR0LkRURkMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoYXQuX2ZuQ29sQ2FsYygpO1xuXG4gICAgICAgIHRoYXQuX2ZuRHJhdy5jYWxsKHRoYXQsIGJGaXJzdERyYXcpO1xuXG4gICAgICAgIGJGaXJzdERyYXcgPSBmYWxzZTtcbiAgICAgIH0pLm9uKCdjb2x1bW4tc2l6aW5nLmR0LkRURkMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoYXQuX2ZuQ29sQ2FsYygpO1xuXG4gICAgICAgIHRoYXQuX2ZuR3JpZExheW91dCh0aGF0KTtcbiAgICAgIH0pLm9uKCdjb2x1bW4tdmlzaWJpbGl0eS5kdC5EVEZDJywgZnVuY3Rpb24gKGUsIHNldHRpbmdzLCBjb2x1bW4sIHZpcywgcmVjYWxjKSB7XG4gICAgICAgIGlmIChyZWNhbGMgPT09IHVuZGVmaW5lZCB8fCByZWNhbGMpIHtcbiAgICAgICAgICB0aGF0Ll9mbkNvbENhbGMoKTtcblxuICAgICAgICAgIHRoYXQuX2ZuR3JpZExheW91dCh0aGF0KTtcblxuICAgICAgICAgIHRoYXQuX2ZuRHJhdyh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSkub24oJ3NlbGVjdC5kdC5EVEZDIGRlc2VsZWN0LmR0LkRURkMnLCBmdW5jdGlvbiAoZSwgZHQsIHR5cGUsIGluZGV4ZXMpIHtcbiAgICAgICAgaWYgKGUubmFtZXNwYWNlID09PSAnZHQnKSB7XG4gICAgICAgICAgdGhhdC5fZm5EcmF3KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSkub24oJ2Rlc3Ryb3kuZHQuRFRGQycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAganFUYWJsZS5vZmYoJy5EVEZDJyk7XG4gICAgICAgICQodGhhdC5kb20uc2Nyb2xsZXIpLm9mZignLkRURkMnKTtcbiAgICAgICAgJCh3aW5kb3cpLm9mZignLkRURkMnKTtcbiAgICAgICAgJCh0aGF0LnMuZHQublRhYmxlV3JhcHBlcikub2ZmKCcuRFRGQycpO1xuICAgICAgICAkKHRoYXQuZG9tLmdyaWQubGVmdC5saW5lcikub2ZmKCcuRFRGQyAnICsgd2hlZWxUeXBlKTtcbiAgICAgICAgJCh0aGF0LmRvbS5ncmlkLmxlZnQud3JhcHBlcikucmVtb3ZlKCk7XG4gICAgICAgICQodGhhdC5kb20uZ3JpZC5yaWdodC5saW5lcikub2ZmKCcuRFRGQyAnICsgd2hlZWxUeXBlKTtcbiAgICAgICAgJCh0aGF0LmRvbS5ncmlkLnJpZ2h0LndyYXBwZXIpLnJlbW92ZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX2ZuR3JpZExheW91dCgpO1xuXG4gICAgICB0aGlzLnMuZHQub0luc3RhbmNlLmZuRHJhdyhmYWxzZSk7XG4gICAgfSxcbiAgICBcIl9mbkNvbENhbGNcIjogZnVuY3Rpb24gX2ZuQ29sQ2FsYygpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBpTGVmdFdpZHRoID0gMDtcbiAgICAgIHZhciBpUmlnaHRXaWR0aCA9IDA7XG4gICAgICB0aGlzLnMuYWlJbm5lcldpZHRocyA9IFtdO1xuICAgICAgdGhpcy5zLmFpT3V0ZXJXaWR0aHMgPSBbXTtcbiAgICAgICQuZWFjaCh0aGlzLnMuZHQuYW9Db2x1bW5zLCBmdW5jdGlvbiAoaSwgY29sKSB7XG4gICAgICAgIHZhciB0aCA9ICQoY29sLm5UaCk7XG4gICAgICAgIHZhciBib3JkZXI7XG5cbiAgICAgICAgaWYgKCF0aC5maWx0ZXIoJzp2aXNpYmxlJykubGVuZ3RoKSB7XG4gICAgICAgICAgdGhhdC5zLmFpSW5uZXJXaWR0aHMucHVzaCgwKTtcbiAgICAgICAgICB0aGF0LnMuYWlPdXRlcldpZHRocy5wdXNoKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpV2lkdGggPSB0aC5vdXRlcldpZHRoKCk7XG5cbiAgICAgICAgICBpZiAodGhhdC5zLmFpT3V0ZXJXaWR0aHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBib3JkZXIgPSAkKHRoYXQucy5kdC5uVGFibGUpLmNzcygnYm9yZGVyLWxlZnQtd2lkdGgnKTtcbiAgICAgICAgICAgIGlXaWR0aCArPSB0eXBlb2YgYm9yZGVyID09PSAnc3RyaW5nJyAmJiBib3JkZXIuaW5kZXhPZigncHgnKSA9PT0gLTEgPyAxIDogcGFyc2VJbnQoYm9yZGVyLCAxMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoYXQucy5haU91dGVyV2lkdGhzLmxlbmd0aCA9PT0gdGhhdC5zLmR0LmFvQ29sdW1ucy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBib3JkZXIgPSAkKHRoYXQucy5kdC5uVGFibGUpLmNzcygnYm9yZGVyLXJpZ2h0LXdpZHRoJyk7XG4gICAgICAgICAgICBpV2lkdGggKz0gdHlwZW9mIGJvcmRlciA9PT0gJ3N0cmluZycgJiYgYm9yZGVyLmluZGV4T2YoJ3B4JykgPT09IC0xID8gMSA6IHBhcnNlSW50KGJvcmRlciwgMTApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoYXQucy5haU91dGVyV2lkdGhzLnB1c2goaVdpZHRoKTtcbiAgICAgICAgICB0aGF0LnMuYWlJbm5lcldpZHRocy5wdXNoKHRoLndpZHRoKCkpO1xuXG4gICAgICAgICAgaWYgKGkgPCB0aGF0LnMuaUxlZnRDb2x1bW5zKSB7XG4gICAgICAgICAgICBpTGVmdFdpZHRoICs9IGlXaWR0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhhdC5zLmlUYWJsZUNvbHVtbnMgLSB0aGF0LnMuaVJpZ2h0Q29sdW1ucyA8PSBpKSB7XG4gICAgICAgICAgICBpUmlnaHRXaWR0aCArPSBpV2lkdGg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMucy5pTGVmdFdpZHRoID0gaUxlZnRXaWR0aDtcbiAgICAgIHRoaXMucy5pUmlnaHRXaWR0aCA9IGlSaWdodFdpZHRoO1xuICAgIH0sXG4gICAgXCJfZm5HcmlkU2V0dXBcIjogZnVuY3Rpb24gX2ZuR3JpZFNldHVwKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICB2YXIgb092ZXJmbG93ID0gdGhpcy5fZm5EVE92ZXJmbG93KCk7XG5cbiAgICAgIHZhciBibG9jaztcbiAgICAgIHRoaXMuZG9tLmJvZHkgPSB0aGlzLnMuZHQublRhYmxlO1xuICAgICAgdGhpcy5kb20uaGVhZGVyID0gdGhpcy5zLmR0Lm5USGVhZC5wYXJlbnROb2RlO1xuICAgICAgdGhpcy5kb20uaGVhZGVyLnBhcmVudE5vZGUucGFyZW50Tm9kZS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcbiAgICAgIHZhciBuU1dyYXBwZXIgPSAkKCc8ZGl2IGNsYXNzPVwiRFRGQ19TY3JvbGxXcmFwcGVyXCIgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZTsgY2xlYXI6Ym90aDtcIj4nICsgJzxkaXYgY2xhc3M9XCJEVEZDX0xlZnRXcmFwcGVyXCIgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTsgdG9wOjA7IGxlZnQ6MDtcIiBhcmlhLWhpZGRlbj1cInRydWVcIj4nICsgJzxkaXYgY2xhc3M9XCJEVEZDX0xlZnRIZWFkV3JhcHBlclwiIHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmU7IHRvcDowOyBsZWZ0OjA7IG92ZXJmbG93OmhpZGRlbjtcIj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJEVEZDX0xlZnRCb2R5V3JhcHBlclwiIHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmU7IHRvcDowOyBsZWZ0OjA7IG92ZXJmbG93OmhpZGRlbjtcIj4nICsgJzxkaXYgY2xhc3M9XCJEVEZDX0xlZnRCb2R5TGluZXJcIiBzdHlsZT1cInBvc2l0aW9uOnJlbGF0aXZlOyB0b3A6MDsgbGVmdDowOyBvdmVyZmxvdy15OnNjcm9sbDtcIj48L2Rpdj4nICsgJzwvZGl2PicgKyAnPGRpdiBjbGFzcz1cIkRURkNfTGVmdEZvb3RXcmFwcGVyXCIgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZTsgdG9wOjA7IGxlZnQ6MDsgb3ZlcmZsb3c6aGlkZGVuO1wiPjwvZGl2PicgKyAnPC9kaXY+JyArICc8ZGl2IGNsYXNzPVwiRFRGQ19SaWdodFdyYXBwZXJcIiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlOyB0b3A6MDsgcmlnaHQ6MDtcIiBhcmlhLWhpZGRlbj1cInRydWVcIj4nICsgJzxkaXYgY2xhc3M9XCJEVEZDX1JpZ2h0SGVhZFdyYXBwZXJcIiBzdHlsZT1cInBvc2l0aW9uOnJlbGF0aXZlOyB0b3A6MDsgbGVmdDowO1wiPicgKyAnPGRpdiBjbGFzcz1cIkRURkNfUmlnaHRIZWFkQmxvY2tlciBEVEZDX0Jsb2NrZXJcIiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlOyB0b3A6MDsgYm90dG9tOjA7XCI+PC9kaXY+JyArICc8L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJEVEZDX1JpZ2h0Qm9keVdyYXBwZXJcIiBzdHlsZT1cInBvc2l0aW9uOnJlbGF0aXZlOyB0b3A6MDsgbGVmdDowOyBvdmVyZmxvdzpoaWRkZW47XCI+JyArICc8ZGl2IGNsYXNzPVwiRFRGQ19SaWdodEJvZHlMaW5lclwiIHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmU7IHRvcDowOyBsZWZ0OjA7IG92ZXJmbG93LXk6c2Nyb2xsO1wiPjwvZGl2PicgKyAnPC9kaXY+JyArICc8ZGl2IGNsYXNzPVwiRFRGQ19SaWdodEZvb3RXcmFwcGVyXCIgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZTsgdG9wOjA7IGxlZnQ6MDtcIj4nICsgJzxkaXYgY2xhc3M9XCJEVEZDX1JpZ2h0Rm9vdEJsb2NrZXIgRFRGQ19CbG9ja2VyXCIgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTsgdG9wOjA7IGJvdHRvbTowO1wiPjwvZGl2PicgKyAnPC9kaXY+JyArICc8L2Rpdj4nICsgJzwvZGl2PicpWzBdO1xuICAgICAgdmFyIG5MZWZ0ID0gblNXcmFwcGVyLmNoaWxkTm9kZXNbMF07XG4gICAgICB2YXIgblJpZ2h0ID0gblNXcmFwcGVyLmNoaWxkTm9kZXNbMV07XG4gICAgICB0aGlzLmRvbS5ncmlkLmR0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5TV3JhcHBlciwgdGhpcy5kb20uZ3JpZC5kdCk7XG4gICAgICBuU1dyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5kb20uZ3JpZC5kdCk7XG4gICAgICB0aGlzLmRvbS5ncmlkLndyYXBwZXIgPSBuU1dyYXBwZXI7XG5cbiAgICAgIGlmICh0aGlzLnMuaUxlZnRDb2x1bW5zID4gMCkge1xuICAgICAgICB0aGlzLmRvbS5ncmlkLmxlZnQud3JhcHBlciA9IG5MZWZ0O1xuICAgICAgICB0aGlzLmRvbS5ncmlkLmxlZnQuaGVhZCA9IG5MZWZ0LmNoaWxkTm9kZXNbMF07XG4gICAgICAgIHRoaXMuZG9tLmdyaWQubGVmdC5ib2R5ID0gbkxlZnQuY2hpbGROb2Rlc1sxXTtcbiAgICAgICAgdGhpcy5kb20uZ3JpZC5sZWZ0LmxpbmVyID0gJCgnZGl2LkRURkNfTGVmdEJvZHlMaW5lcicsIG5TV3JhcHBlcilbMF07XG4gICAgICAgIG5TV3JhcHBlci5hcHBlbmRDaGlsZChuTGVmdCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnMuaVJpZ2h0Q29sdW1ucyA+IDApIHtcbiAgICAgICAgdGhpcy5kb20uZ3JpZC5yaWdodC53cmFwcGVyID0gblJpZ2h0O1xuICAgICAgICB0aGlzLmRvbS5ncmlkLnJpZ2h0LmhlYWQgPSBuUmlnaHQuY2hpbGROb2Rlc1swXTtcbiAgICAgICAgdGhpcy5kb20uZ3JpZC5yaWdodC5ib2R5ID0gblJpZ2h0LmNoaWxkTm9kZXNbMV07XG4gICAgICAgIHRoaXMuZG9tLmdyaWQucmlnaHQubGluZXIgPSAkKCdkaXYuRFRGQ19SaWdodEJvZHlMaW5lcicsIG5TV3JhcHBlcilbMF07XG4gICAgICAgIG5SaWdodC5zdHlsZS5yaWdodCA9IG9PdmVyZmxvdy5iYXIgKyBcInB4XCI7XG4gICAgICAgIGJsb2NrID0gJCgnZGl2LkRURkNfUmlnaHRIZWFkQmxvY2tlcicsIG5TV3JhcHBlcilbMF07XG4gICAgICAgIGJsb2NrLnN0eWxlLndpZHRoID0gb092ZXJmbG93LmJhciArIFwicHhcIjtcbiAgICAgICAgYmxvY2suc3R5bGUucmlnaHQgPSAtb092ZXJmbG93LmJhciArIFwicHhcIjtcbiAgICAgICAgdGhpcy5kb20uZ3JpZC5yaWdodC5oZWFkQmxvY2sgPSBibG9jaztcbiAgICAgICAgYmxvY2sgPSAkKCdkaXYuRFRGQ19SaWdodEZvb3RCbG9ja2VyJywgblNXcmFwcGVyKVswXTtcbiAgICAgICAgYmxvY2suc3R5bGUud2lkdGggPSBvT3ZlcmZsb3cuYmFyICsgXCJweFwiO1xuICAgICAgICBibG9jay5zdHlsZS5yaWdodCA9IC1vT3ZlcmZsb3cuYmFyICsgXCJweFwiO1xuICAgICAgICB0aGlzLmRvbS5ncmlkLnJpZ2h0LmZvb3RCbG9jayA9IGJsb2NrO1xuICAgICAgICBuU1dyYXBwZXIuYXBwZW5kQ2hpbGQoblJpZ2h0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucy5kdC5uVEZvb3QpIHtcbiAgICAgICAgdGhpcy5kb20uZm9vdGVyID0gdGhpcy5zLmR0Lm5URm9vdC5wYXJlbnROb2RlO1xuXG4gICAgICAgIGlmICh0aGlzLnMuaUxlZnRDb2x1bW5zID4gMCkge1xuICAgICAgICAgIHRoaXMuZG9tLmdyaWQubGVmdC5mb290ID0gbkxlZnQuY2hpbGROb2Rlc1syXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnMuaVJpZ2h0Q29sdW1ucyA+IDApIHtcbiAgICAgICAgICB0aGlzLmRvbS5ncmlkLnJpZ2h0LmZvb3QgPSBuUmlnaHQuY2hpbGROb2Rlc1syXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zLnJ0bCkge1xuICAgICAgICAkKCdkaXYuRFRGQ19SaWdodEhlYWRCbG9ja2VyJywgblNXcmFwcGVyKS5jc3Moe1xuICAgICAgICAgIGxlZnQ6IC1vT3ZlcmZsb3cuYmFyICsgJ3B4JyxcbiAgICAgICAgICByaWdodDogJydcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBcIl9mbkdyaWRMYXlvdXRcIjogZnVuY3Rpb24gX2ZuR3JpZExheW91dCgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBvR3JpZCA9IHRoaXMuZG9tLmdyaWQ7XG4gICAgICB2YXIgaVdpZHRoID0gJChvR3JpZC53cmFwcGVyKS53aWR0aCgpO1xuICAgICAgdmFyIGlCb2R5SGVpZ2h0ID0gdGhpcy5zLmR0Lm5UYWJsZS5wYXJlbnROb2RlLm9mZnNldEhlaWdodDtcbiAgICAgIHZhciBpRnVsbEhlaWdodCA9IHRoaXMucy5kdC5uVGFibGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLm9mZnNldEhlaWdodDtcblxuICAgICAgdmFyIG9PdmVyZmxvdyA9IHRoaXMuX2ZuRFRPdmVyZmxvdygpO1xuXG4gICAgICB2YXIgaUxlZnRXaWR0aCA9IHRoaXMucy5pTGVmdFdpZHRoO1xuICAgICAgdmFyIGlSaWdodFdpZHRoID0gdGhpcy5zLmlSaWdodFdpZHRoO1xuICAgICAgdmFyIHJ0bCA9ICQodGhpcy5kb20uYm9keSkuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCc7XG4gICAgICB2YXIgd3JhcHBlcjtcblxuICAgICAgdmFyIHNjcm9sbGJhckFkanVzdCA9IGZ1bmN0aW9uIHNjcm9sbGJhckFkanVzdChub2RlLCB3aWR0aCkge1xuICAgICAgICBpZiAoIW9PdmVyZmxvdy5iYXIpIHtcbiAgICAgICAgICBub2RlLnN0eWxlLndpZHRoID0gd2lkdGggKyAyMCArIFwicHhcIjtcbiAgICAgICAgICBub2RlLnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiMjBweFwiO1xuICAgICAgICAgIG5vZGUuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGhhdC5fZmlyZWZveFNjcm9sbEVycm9yKCkpIHtcbiAgICAgICAgICBpZiAoJChub2RlKS5oZWlnaHQoKSA+IDM0KSB7XG4gICAgICAgICAgICBub2RlLnN0eWxlLndpZHRoID0gd2lkdGggKyBvT3ZlcmZsb3cuYmFyICsgXCJweFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnN0eWxlLndpZHRoID0gd2lkdGggKyBvT3ZlcmZsb3cuYmFyICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAob092ZXJmbG93LngpIHtcbiAgICAgICAgaUJvZHlIZWlnaHQgLT0gb092ZXJmbG93LmJhcjtcbiAgICAgIH1cblxuICAgICAgb0dyaWQud3JhcHBlci5zdHlsZS5oZWlnaHQgPSBpRnVsbEhlaWdodCArIFwicHhcIjtcblxuICAgICAgaWYgKHRoaXMucy5pTGVmdENvbHVtbnMgPiAwKSB7XG4gICAgICAgIHdyYXBwZXIgPSBvR3JpZC5sZWZ0LndyYXBwZXI7XG4gICAgICAgIHdyYXBwZXIuc3R5bGUud2lkdGggPSBpTGVmdFdpZHRoICsgJ3B4JztcbiAgICAgICAgd3JhcHBlci5zdHlsZS5oZWlnaHQgPSAnMXB4JztcblxuICAgICAgICBpZiAocnRsKSB7XG4gICAgICAgICAgd3JhcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgICAgICAgd3JhcHBlci5zdHlsZS5yaWdodCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd3JhcHBlci5zdHlsZS5sZWZ0ID0gMDtcbiAgICAgICAgICB3cmFwcGVyLnN0eWxlLnJpZ2h0ID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBvR3JpZC5sZWZ0LmJvZHkuc3R5bGUuaGVpZ2h0ID0gaUJvZHlIZWlnaHQgKyBcInB4XCI7XG5cbiAgICAgICAgaWYgKG9HcmlkLmxlZnQuZm9vdCkge1xuICAgICAgICAgIG9HcmlkLmxlZnQuZm9vdC5zdHlsZS50b3AgPSAob092ZXJmbG93LnggPyBvT3ZlcmZsb3cuYmFyIDogMCkgKyBcInB4XCI7XG4gICAgICAgIH1cblxuICAgICAgICBzY3JvbGxiYXJBZGp1c3Qob0dyaWQubGVmdC5saW5lciwgaUxlZnRXaWR0aCk7XG4gICAgICAgIG9HcmlkLmxlZnQubGluZXIuc3R5bGUuaGVpZ2h0ID0gaUJvZHlIZWlnaHQgKyBcInB4XCI7XG4gICAgICAgIG9HcmlkLmxlZnQubGluZXIuc3R5bGUubWF4SGVpZ2h0ID0gaUJvZHlIZWlnaHQgKyBcInB4XCI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnMuaVJpZ2h0Q29sdW1ucyA+IDApIHtcbiAgICAgICAgd3JhcHBlciA9IG9HcmlkLnJpZ2h0LndyYXBwZXI7XG4gICAgICAgIHdyYXBwZXIuc3R5bGUud2lkdGggPSBpUmlnaHRXaWR0aCArICdweCc7XG4gICAgICAgIHdyYXBwZXIuc3R5bGUuaGVpZ2h0ID0gJzFweCc7XG5cbiAgICAgICAgaWYgKHRoaXMucy5ydGwpIHtcbiAgICAgICAgICB3cmFwcGVyLnN0eWxlLmxlZnQgPSBvT3ZlcmZsb3cueSA/IG9PdmVyZmxvdy5iYXIgKyAncHgnIDogMDtcbiAgICAgICAgICB3cmFwcGVyLnN0eWxlLnJpZ2h0ID0gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd3JhcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgICAgICAgd3JhcHBlci5zdHlsZS5yaWdodCA9IG9PdmVyZmxvdy55ID8gb092ZXJmbG93LmJhciArICdweCcgOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgb0dyaWQucmlnaHQuYm9keS5zdHlsZS5oZWlnaHQgPSBpQm9keUhlaWdodCArIFwicHhcIjtcblxuICAgICAgICBpZiAob0dyaWQucmlnaHQuZm9vdCkge1xuICAgICAgICAgIG9HcmlkLnJpZ2h0LmZvb3Quc3R5bGUudG9wID0gKG9PdmVyZmxvdy54ID8gb092ZXJmbG93LmJhciA6IDApICsgXCJweFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgc2Nyb2xsYmFyQWRqdXN0KG9HcmlkLnJpZ2h0LmxpbmVyLCBpUmlnaHRXaWR0aCk7XG4gICAgICAgIG9HcmlkLnJpZ2h0LmxpbmVyLnN0eWxlLmhlaWdodCA9IGlCb2R5SGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICBvR3JpZC5yaWdodC5saW5lci5zdHlsZS5tYXhIZWlnaHQgPSBpQm9keUhlaWdodCArIFwicHhcIjtcbiAgICAgICAgb0dyaWQucmlnaHQuaGVhZEJsb2NrLnN0eWxlLmRpc3BsYXkgPSBvT3ZlcmZsb3cueSA/ICdibG9jaycgOiAnbm9uZSc7XG4gICAgICAgIG9HcmlkLnJpZ2h0LmZvb3RCbG9jay5zdHlsZS5kaXNwbGF5ID0gb092ZXJmbG93LnkgPyAnYmxvY2snIDogJ25vbmUnO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJfZm5EVE92ZXJmbG93XCI6IGZ1bmN0aW9uIF9mbkRUT3ZlcmZsb3coKSB7XG4gICAgICB2YXIgblRhYmxlID0gdGhpcy5zLmR0Lm5UYWJsZTtcbiAgICAgIHZhciBuVGFibGVTY3JvbGxCb2R5ID0gblRhYmxlLnBhcmVudE5vZGU7XG4gICAgICB2YXIgb3V0ID0ge1xuICAgICAgICBcInhcIjogZmFsc2UsXG4gICAgICAgIFwieVwiOiBmYWxzZSxcbiAgICAgICAgXCJiYXJcIjogdGhpcy5zLmR0Lm9TY3JvbGwuaUJhcldpZHRoXG4gICAgICB9O1xuXG4gICAgICBpZiAoblRhYmxlLm9mZnNldFdpZHRoID4gblRhYmxlU2Nyb2xsQm9keS5jbGllbnRXaWR0aCkge1xuICAgICAgICBvdXQueCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChuVGFibGUub2Zmc2V0SGVpZ2h0ID4gblRhYmxlU2Nyb2xsQm9keS5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgb3V0LnkgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3V0O1xuICAgIH0sXG4gICAgXCJfZm5EcmF3XCI6IGZ1bmN0aW9uIF9mbkRyYXcoYkFsbCkge1xuICAgICAgdGhpcy5fZm5HcmlkTGF5b3V0KCk7XG5cbiAgICAgIHRoaXMuX2ZuQ2xvbmVMZWZ0KGJBbGwpO1xuXG4gICAgICB0aGlzLl9mbkNsb25lUmlnaHQoYkFsbCk7XG5cbiAgICAgIGlmICh0aGlzLnMuZm5EcmF3Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5zLmZuRHJhd0NhbGxiYWNrLmNhbGwodGhpcywgdGhpcy5kb20uY2xvbmUubGVmdCwgdGhpcy5kb20uY2xvbmUucmlnaHQpO1xuICAgICAgfVxuXG4gICAgICAkKHRoaXMpLnRyaWdnZXIoJ2RyYXcuZHRmYycsIHtcbiAgICAgICAgXCJsZWZ0Q2xvbmVcIjogdGhpcy5kb20uY2xvbmUubGVmdCxcbiAgICAgICAgXCJyaWdodENsb25lXCI6IHRoaXMuZG9tLmNsb25lLnJpZ2h0XG4gICAgICB9KTtcbiAgICB9LFxuICAgIFwiX2ZuQ2xvbmVSaWdodFwiOiBmdW5jdGlvbiBfZm5DbG9uZVJpZ2h0KGJBbGwpIHtcbiAgICAgIGlmICh0aGlzLnMuaVJpZ2h0Q29sdW1ucyA8PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgIGksXG4gICAgICAgICAganEsXG4gICAgICAgICAgYWlDb2x1bW5zID0gW107XG5cbiAgICAgIGZvciAoaSA9IHRoaXMucy5pVGFibGVDb2x1bW5zIC0gdGhpcy5zLmlSaWdodENvbHVtbnM7IGkgPCB0aGlzLnMuaVRhYmxlQ29sdW1uczsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLnMuZHQuYW9Db2x1bW5zW2ldLmJWaXNpYmxlKSB7XG4gICAgICAgICAgYWlDb2x1bW5zLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fZm5DbG9uZSh0aGlzLmRvbS5jbG9uZS5yaWdodCwgdGhpcy5kb20uZ3JpZC5yaWdodCwgYWlDb2x1bW5zLCBiQWxsKTtcbiAgICB9LFxuICAgIFwiX2ZuQ2xvbmVMZWZ0XCI6IGZ1bmN0aW9uIF9mbkNsb25lTGVmdChiQWxsKSB7XG4gICAgICBpZiAodGhpcy5zLmlMZWZ0Q29sdW1ucyA8PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgIGksXG4gICAgICAgICAganEsXG4gICAgICAgICAgYWlDb2x1bW5zID0gW107XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnMuaUxlZnRDb2x1bW5zOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMucy5kdC5hb0NvbHVtbnNbaV0uYlZpc2libGUpIHtcbiAgICAgICAgICBhaUNvbHVtbnMucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9mbkNsb25lKHRoaXMuZG9tLmNsb25lLmxlZnQsIHRoaXMuZG9tLmdyaWQubGVmdCwgYWlDb2x1bW5zLCBiQWxsKTtcbiAgICB9LFxuICAgIFwiX2ZuQ29weUxheW91dFwiOiBmdW5jdGlvbiBfZm5Db3B5TGF5b3V0KGFvT3JpZ2luYWwsIGFpQ29sdW1ucywgZXZlbnRzKSB7XG4gICAgICB2YXIgYVJldHVybiA9IFtdO1xuICAgICAgdmFyIGFDbG9uZXMgPSBbXTtcbiAgICAgIHZhciBhQ2xvbmVkID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBpTGVuID0gYW9PcmlnaW5hbC5sZW5ndGg7IGkgPCBpTGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGFSb3cgPSBbXTtcbiAgICAgICAgYVJvdy5uVHIgPSAkKGFvT3JpZ2luYWxbaV0ublRyKS5jbG9uZShldmVudHMsIGZhbHNlKVswXTtcblxuICAgICAgICBmb3IgKHZhciBqID0gMCwgakxlbiA9IHRoaXMucy5pVGFibGVDb2x1bW5zOyBqIDwgakxlbjsgaisrKSB7XG4gICAgICAgICAgaWYgKCQuaW5BcnJheShqLCBhaUNvbHVtbnMpID09PSAtMSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGlDbG9uZWQgPSAkLmluQXJyYXkoYW9PcmlnaW5hbFtpXVtqXS5jZWxsLCBhQ2xvbmVkKTtcblxuICAgICAgICAgIGlmIChpQ2xvbmVkID09PSAtMSkge1xuICAgICAgICAgICAgdmFyIG5DbG9uZSA9ICQoYW9PcmlnaW5hbFtpXVtqXS5jZWxsKS5jbG9uZShldmVudHMsIGZhbHNlKVswXTtcbiAgICAgICAgICAgIGFDbG9uZXMucHVzaChuQ2xvbmUpO1xuICAgICAgICAgICAgYUNsb25lZC5wdXNoKGFvT3JpZ2luYWxbaV1bal0uY2VsbCk7XG4gICAgICAgICAgICBhUm93LnB1c2goe1xuICAgICAgICAgICAgICBcImNlbGxcIjogbkNsb25lLFxuICAgICAgICAgICAgICBcInVuaXF1ZVwiOiBhb09yaWdpbmFsW2ldW2pdLnVuaXF1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFSb3cucHVzaCh7XG4gICAgICAgICAgICAgIFwiY2VsbFwiOiBhQ2xvbmVzW2lDbG9uZWRdLFxuICAgICAgICAgICAgICBcInVuaXF1ZVwiOiBhb09yaWdpbmFsW2ldW2pdLnVuaXF1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYVJldHVybi5wdXNoKGFSb3cpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYVJldHVybjtcbiAgICB9LFxuICAgIFwiX2ZuQ2xvbmVcIjogZnVuY3Rpb24gX2ZuQ2xvbmUob0Nsb25lLCBvR3JpZCwgYWlDb2x1bW5zLCBiQWxsKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBpTGVuLFxuICAgICAgICAgIGosXG4gICAgICAgICAgakxlbixcbiAgICAgICAgICBqcSxcbiAgICAgICAgICBuVGFyZ2V0LFxuICAgICAgICAgIGlDb2x1bW4sXG4gICAgICAgICAgbkNsb25lLFxuICAgICAgICAgIGlJbmRleCxcbiAgICAgICAgICBhb0Nsb25lTGF5b3V0LFxuICAgICAgICAgIGpxQ2xvbmVUaGVhZCxcbiAgICAgICAgICBhb0ZpeGVkSGVhZGVyLFxuICAgICAgICAgIGR0ID0gdGhpcy5zLmR0O1xuXG4gICAgICBpZiAoYkFsbCkge1xuICAgICAgICAkKG9DbG9uZS5oZWFkZXIpLnJlbW92ZSgpO1xuICAgICAgICBvQ2xvbmUuaGVhZGVyID0gJCh0aGlzLmRvbS5oZWFkZXIpLmNsb25lKHRydWUsIGZhbHNlKVswXTtcbiAgICAgICAgb0Nsb25lLmhlYWRlci5jbGFzc05hbWUgKz0gXCIgRFRGQ19DbG9uZWRcIjtcbiAgICAgICAgb0Nsb25lLmhlYWRlci5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgICBvR3JpZC5oZWFkLmFwcGVuZENoaWxkKG9DbG9uZS5oZWFkZXIpO1xuICAgICAgICBhb0Nsb25lTGF5b3V0ID0gdGhpcy5fZm5Db3B5TGF5b3V0KGR0LmFvSGVhZGVyLCBhaUNvbHVtbnMsIHRydWUpO1xuICAgICAgICBqcUNsb25lVGhlYWQgPSAkKCc+dGhlYWQnLCBvQ2xvbmUuaGVhZGVyKTtcbiAgICAgICAganFDbG9uZVRoZWFkLmVtcHR5KCk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgaUxlbiA9IGFvQ2xvbmVMYXlvdXQubGVuZ3RoOyBpIDwgaUxlbjsgaSsrKSB7XG4gICAgICAgICAganFDbG9uZVRoZWFkWzBdLmFwcGVuZENoaWxkKGFvQ2xvbmVMYXlvdXRbaV0ublRyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGR0Lm9BcGkuX2ZuRHJhd0hlYWQoZHQsIGFvQ2xvbmVMYXlvdXQsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYW9DbG9uZUxheW91dCA9IHRoaXMuX2ZuQ29weUxheW91dChkdC5hb0hlYWRlciwgYWlDb2x1bW5zLCBmYWxzZSk7XG4gICAgICAgIGFvRml4ZWRIZWFkZXIgPSBbXTtcblxuICAgICAgICBkdC5vQXBpLl9mbkRldGVjdEhlYWRlcihhb0ZpeGVkSGVhZGVyLCAkKCc+dGhlYWQnLCBvQ2xvbmUuaGVhZGVyKVswXSk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgaUxlbiA9IGFvQ2xvbmVMYXlvdXQubGVuZ3RoOyBpIDwgaUxlbjsgaSsrKSB7XG4gICAgICAgICAgZm9yIChqID0gMCwgakxlbiA9IGFvQ2xvbmVMYXlvdXRbaV0ubGVuZ3RoOyBqIDwgakxlbjsgaisrKSB7XG4gICAgICAgICAgICBhb0ZpeGVkSGVhZGVyW2ldW2pdLmNlbGwuY2xhc3NOYW1lID0gYW9DbG9uZUxheW91dFtpXVtqXS5jZWxsLmNsYXNzTmFtZTtcbiAgICAgICAgICAgICQoJ3NwYW4uRGF0YVRhYmxlc19zb3J0X2ljb24nLCBhb0ZpeGVkSGVhZGVyW2ldW2pdLmNlbGwpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICQoJ3NwYW4uRGF0YVRhYmxlc19zb3J0X2ljb24nLCBhb0Nsb25lTGF5b3V0W2ldW2pdLmNlbGwpWzBdLmNsYXNzTmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9mbkVxdWFsaXNlSGVpZ2h0cygndGhlYWQnLCB0aGlzLmRvbS5oZWFkZXIsIG9DbG9uZS5oZWFkZXIpO1xuXG4gICAgICBpZiAodGhpcy5zLnNIZWlnaHRNYXRjaCA9PSAnYXV0bycpIHtcbiAgICAgICAgJCgnPnRib2R5PnRyJywgdGhhdC5kb20uYm9keSkuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuICAgICAgfVxuXG4gICAgICBpZiAob0Nsb25lLmJvZHkgIT09IG51bGwpIHtcbiAgICAgICAgJChvQ2xvbmUuYm9keSkucmVtb3ZlKCk7XG4gICAgICAgIG9DbG9uZS5ib2R5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgb0Nsb25lLmJvZHkgPSAkKHRoaXMuZG9tLmJvZHkpLmNsb25lKHRydWUpWzBdO1xuICAgICAgb0Nsb25lLmJvZHkuY2xhc3NOYW1lICs9IFwiIERURkNfQ2xvbmVkXCI7XG4gICAgICBvQ2xvbmUuYm9keS5zdHlsZS5wYWRkaW5nQm90dG9tID0gZHQub1Njcm9sbC5pQmFyV2lkdGggKyBcInB4XCI7XG4gICAgICBvQ2xvbmUuYm9keS5zdHlsZS5tYXJnaW5Cb3R0b20gPSBkdC5vU2Nyb2xsLmlCYXJXaWR0aCAqIDIgKyBcInB4XCI7XG5cbiAgICAgIGlmIChvQ2xvbmUuYm9keS5nZXRBdHRyaWJ1dGUoJ2lkJykgIT09IG51bGwpIHtcbiAgICAgICAgb0Nsb25lLmJvZHkucmVtb3ZlQXR0cmlidXRlKCdpZCcpO1xuICAgICAgfVxuXG4gICAgICAkKCc+dGhlYWQ+dHInLCBvQ2xvbmUuYm9keSkuZW1wdHkoKTtcbiAgICAgICQoJz50Zm9vdCcsIG9DbG9uZS5ib2R5KS5yZW1vdmUoKTtcbiAgICAgIHZhciBuQm9keSA9ICQoJ3Rib2R5Jywgb0Nsb25lLmJvZHkpWzBdO1xuICAgICAgJChuQm9keSkuZW1wdHkoKTtcblxuICAgICAgaWYgKGR0LmFpRGlzcGxheS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBuSW5uZXJUaGVhZCA9ICQoJz50aGVhZD50cicsIG9DbG9uZS5ib2R5KVswXTtcblxuICAgICAgICBmb3IgKGlJbmRleCA9IDA7IGlJbmRleCA8IGFpQ29sdW1ucy5sZW5ndGg7IGlJbmRleCsrKSB7XG4gICAgICAgICAgaUNvbHVtbiA9IGFpQ29sdW1uc1tpSW5kZXhdO1xuICAgICAgICAgIG5DbG9uZSA9ICQoZHQuYW9Db2x1bW5zW2lDb2x1bW5dLm5UaCkuY2xvbmUodHJ1ZSlbMF07XG4gICAgICAgICAgbkNsb25lLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgICAgdmFyIG9TdHlsZSA9IG5DbG9uZS5zdHlsZTtcbiAgICAgICAgICBvU3R5bGUucGFkZGluZ1RvcCA9IFwiMFwiO1xuICAgICAgICAgIG9TdHlsZS5wYWRkaW5nQm90dG9tID0gXCIwXCI7XG4gICAgICAgICAgb1N0eWxlLmJvcmRlclRvcFdpZHRoID0gXCIwXCI7XG4gICAgICAgICAgb1N0eWxlLmJvcmRlckJvdHRvbVdpZHRoID0gXCIwXCI7XG4gICAgICAgICAgb1N0eWxlLmhlaWdodCA9IDA7XG4gICAgICAgICAgb1N0eWxlLndpZHRoID0gdGhhdC5zLmFpSW5uZXJXaWR0aHNbaUNvbHVtbl0gKyBcInB4XCI7XG4gICAgICAgICAgbklubmVyVGhlYWQuYXBwZW5kQ2hpbGQobkNsb25lKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQoJz50Ym9keT50cicsIHRoYXQuZG9tLmJvZHkpLmVhY2goZnVuY3Rpb24gKHopIHtcbiAgICAgICAgICB2YXIgaSA9IHRoYXQucy5kdC5vRmVhdHVyZXMuYlNlcnZlclNpZGUgPT09IGZhbHNlID8gdGhhdC5zLmR0LmFpRGlzcGxheVt0aGF0LnMuZHQuX2lEaXNwbGF5U3RhcnQgKyB6XSA6IHo7XG4gICAgICAgICAgdmFyIGFUZHMgPSB0aGF0LnMuZHQuYW9EYXRhW2ldLmFuQ2VsbHMgfHwgJCh0aGlzKS5jaGlsZHJlbigndGQsIHRoJyk7XG4gICAgICAgICAgdmFyIG4gPSB0aGlzLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgbi5yZW1vdmVBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICAgICAgbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtZHQtcm93JywgaSk7XG5cbiAgICAgICAgICBmb3IgKGlJbmRleCA9IDA7IGlJbmRleCA8IGFpQ29sdW1ucy5sZW5ndGg7IGlJbmRleCsrKSB7XG4gICAgICAgICAgICBpQ29sdW1uID0gYWlDb2x1bW5zW2lJbmRleF07XG5cbiAgICAgICAgICAgIGlmIChhVGRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgbkNsb25lID0gJChhVGRzW2lDb2x1bW5dKS5jbG9uZSh0cnVlLCB0cnVlKVswXTtcbiAgICAgICAgICAgICAgbkNsb25lLnJlbW92ZUF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgICAgICAgbkNsb25lLnNldEF0dHJpYnV0ZSgnZGF0YS1kdC1yb3cnLCBpKTtcbiAgICAgICAgICAgICAgbkNsb25lLnNldEF0dHJpYnV0ZSgnZGF0YS1kdC1jb2x1bW4nLCBpQ29sdW1uKTtcbiAgICAgICAgICAgICAgbi5hcHBlbmRDaGlsZChuQ2xvbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5Cb2R5LmFwcGVuZENoaWxkKG4pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoJz50Ym9keT50cicsIHRoYXQuZG9tLmJvZHkpLmVhY2goZnVuY3Rpb24gKHopIHtcbiAgICAgICAgICBuQ2xvbmUgPSB0aGlzLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICBuQ2xvbmUuY2xhc3NOYW1lICs9ICcgRFRGQ19Ob0RhdGEnO1xuICAgICAgICAgICQoJ3RkJywgbkNsb25lKS5odG1sKCcnKTtcbiAgICAgICAgICBuQm9keS5hcHBlbmRDaGlsZChuQ2xvbmUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgb0Nsb25lLmJvZHkuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgIG9DbG9uZS5ib2R5LnN0eWxlLm1hcmdpbiA9IFwiMFwiO1xuICAgICAgb0Nsb25lLmJvZHkuc3R5bGUucGFkZGluZyA9IFwiMFwiO1xuXG4gICAgICBpZiAoZHQub1Njcm9sbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIHNjcm9sbGVyRm9yY2VyID0gZHQub1Njcm9sbGVyLmRvbS5mb3JjZTtcblxuICAgICAgICBpZiAoIW9HcmlkLmZvcmNlcikge1xuICAgICAgICAgIG9HcmlkLmZvcmNlciA9IHNjcm9sbGVyRm9yY2VyLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICBvR3JpZC5saW5lci5hcHBlbmRDaGlsZChvR3JpZC5mb3JjZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9HcmlkLmZvcmNlci5zdHlsZS5oZWlnaHQgPSBzY3JvbGxlckZvcmNlci5zdHlsZS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgb0dyaWQubGluZXIuYXBwZW5kQ2hpbGQob0Nsb25lLmJvZHkpO1xuXG4gICAgICB0aGlzLl9mbkVxdWFsaXNlSGVpZ2h0cygndGJvZHknLCB0aGF0LmRvbS5ib2R5LCBvQ2xvbmUuYm9keSk7XG5cbiAgICAgIGlmIChkdC5uVEZvb3QgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKGJBbGwpIHtcbiAgICAgICAgICBpZiAob0Nsb25lLmZvb3RlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgb0Nsb25lLmZvb3Rlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9DbG9uZS5mb290ZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG9DbG9uZS5mb290ZXIgPSAkKHRoaXMuZG9tLmZvb3RlcikuY2xvbmUodHJ1ZSwgdHJ1ZSlbMF07XG4gICAgICAgICAgb0Nsb25lLmZvb3Rlci5jbGFzc05hbWUgKz0gXCIgRFRGQ19DbG9uZWRcIjtcbiAgICAgICAgICBvQ2xvbmUuZm9vdGVyLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgICAgb0dyaWQuZm9vdC5hcHBlbmRDaGlsZChvQ2xvbmUuZm9vdGVyKTtcbiAgICAgICAgICBhb0Nsb25lTGF5b3V0ID0gdGhpcy5fZm5Db3B5TGF5b3V0KGR0LmFvRm9vdGVyLCBhaUNvbHVtbnMsIHRydWUpO1xuICAgICAgICAgIHZhciBqcUNsb25lVGZvb3QgPSAkKCc+dGZvb3QnLCBvQ2xvbmUuZm9vdGVyKTtcbiAgICAgICAgICBqcUNsb25lVGZvb3QuZW1wdHkoKTtcblxuICAgICAgICAgIGZvciAoaSA9IDAsIGlMZW4gPSBhb0Nsb25lTGF5b3V0Lmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgICAgICAganFDbG9uZVRmb290WzBdLmFwcGVuZENoaWxkKGFvQ2xvbmVMYXlvdXRbaV0ublRyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkdC5vQXBpLl9mbkRyYXdIZWFkKGR0LCBhb0Nsb25lTGF5b3V0LCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhb0Nsb25lTGF5b3V0ID0gdGhpcy5fZm5Db3B5TGF5b3V0KGR0LmFvRm9vdGVyLCBhaUNvbHVtbnMsIGZhbHNlKTtcbiAgICAgICAgICB2YXIgYW9DdXJyRm9vdGVyID0gW107XG5cbiAgICAgICAgICBkdC5vQXBpLl9mbkRldGVjdEhlYWRlcihhb0N1cnJGb290ZXIsICQoJz50Zm9vdCcsIG9DbG9uZS5mb290ZXIpWzBdKTtcblxuICAgICAgICAgIGZvciAoaSA9IDAsIGlMZW4gPSBhb0Nsb25lTGF5b3V0Lmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgICAgICAgZm9yIChqID0gMCwgakxlbiA9IGFvQ2xvbmVMYXlvdXRbaV0ubGVuZ3RoOyBqIDwgakxlbjsgaisrKSB7XG4gICAgICAgICAgICAgIGFvQ3VyckZvb3RlcltpXVtqXS5jZWxsLmNsYXNzTmFtZSA9IGFvQ2xvbmVMYXlvdXRbaV1bal0uY2VsbC5jbGFzc05hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZm5FcXVhbGlzZUhlaWdodHMoJ3Rmb290JywgdGhpcy5kb20uZm9vdGVyLCBvQ2xvbmUuZm9vdGVyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFuVW5pcXVlID0gZHQub0FwaS5fZm5HZXRVbmlxdWVUaHMoZHQsICQoJz50aGVhZCcsIG9DbG9uZS5oZWFkZXIpWzBdKTtcblxuICAgICAgJChhblVuaXF1ZSkuZWFjaChmdW5jdGlvbiAoaSkge1xuICAgICAgICBpQ29sdW1uID0gYWlDb2x1bW5zW2ldO1xuICAgICAgICB0aGlzLnN0eWxlLndpZHRoID0gdGhhdC5zLmFpSW5uZXJXaWR0aHNbaUNvbHVtbl0gKyBcInB4XCI7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoYXQucy5kdC5uVEZvb3QgIT09IG51bGwpIHtcbiAgICAgICAgYW5VbmlxdWUgPSBkdC5vQXBpLl9mbkdldFVuaXF1ZVRocyhkdCwgJCgnPnRmb290Jywgb0Nsb25lLmZvb3RlcilbMF0pO1xuICAgICAgICAkKGFuVW5pcXVlKS5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgaUNvbHVtbiA9IGFpQ29sdW1uc1tpXTtcbiAgICAgICAgICB0aGlzLnN0eWxlLndpZHRoID0gdGhhdC5zLmFpSW5uZXJXaWR0aHNbaUNvbHVtbl0gKyBcInB4XCI7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJfZm5HZXRUck5vZGVzXCI6IGZ1bmN0aW9uIF9mbkdldFRyTm9kZXMobkluKSB7XG4gICAgICB2YXIgYU91dCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgaUxlbiA9IG5Jbi5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgICBpZiAobkluLmNoaWxkTm9kZXNbaV0ubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PSBcIlRSXCIpIHtcbiAgICAgICAgICBhT3V0LnB1c2gobkluLmNoaWxkTm9kZXNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhT3V0O1xuICAgIH0sXG4gICAgXCJfZm5FcXVhbGlzZUhlaWdodHNcIjogZnVuY3Rpb24gX2ZuRXF1YWxpc2VIZWlnaHRzKG5vZGVOYW1lLCBvcmlnaW5hbCwgY2xvbmUpIHtcbiAgICAgIGlmICh0aGlzLnMuc0hlaWdodE1hdGNoID09ICdub25lJyAmJiBub2RlTmFtZSAhPT0gJ3RoZWFkJyAmJiBub2RlTmFtZSAhPT0gJ3Rmb290Jykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGlMZW4sXG4gICAgICAgICAgaUhlaWdodCxcbiAgICAgICAgICBpSGVpZ2h0MixcbiAgICAgICAgICBpSGVpZ2h0T3JpZ2luYWwsXG4gICAgICAgICAgaUhlaWdodENsb25lLFxuICAgICAgICAgIHJvb3RPcmlnaW5hbCA9IG9yaWdpbmFsLmdldEVsZW1lbnRzQnlUYWdOYW1lKG5vZGVOYW1lKVswXSxcbiAgICAgICAgICByb290Q2xvbmUgPSBjbG9uZS5nZXRFbGVtZW50c0J5VGFnTmFtZShub2RlTmFtZSlbMF0sXG4gICAgICAgICAganFCb3hIYWNrID0gJCgnPicgKyBub2RlTmFtZSArICc+dHI6ZXEoMCknLCBvcmlnaW5hbCkuY2hpbGRyZW4oJzpmaXJzdCcpLFxuICAgICAgICAgIGlCb3hIYWNrID0ganFCb3hIYWNrLm91dGVySGVpZ2h0KCkgLSBqcUJveEhhY2suaGVpZ2h0KCksXG4gICAgICAgICAgYW5PcmlnaW5hbCA9IHRoaXMuX2ZuR2V0VHJOb2Rlcyhyb290T3JpZ2luYWwpLFxuICAgICAgICAgIGFuQ2xvbmUgPSB0aGlzLl9mbkdldFRyTm9kZXMocm9vdENsb25lKSxcbiAgICAgICAgICBoZWlnaHRzID0gW107XG5cbiAgICAgIGZvciAoaSA9IDAsIGlMZW4gPSBhbkNsb25lLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgICBpSGVpZ2h0T3JpZ2luYWwgPSBhbk9yaWdpbmFsW2ldLm9mZnNldEhlaWdodDtcbiAgICAgICAgaUhlaWdodENsb25lID0gYW5DbG9uZVtpXS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIGlIZWlnaHQgPSBpSGVpZ2h0Q2xvbmUgPiBpSGVpZ2h0T3JpZ2luYWwgPyBpSGVpZ2h0Q2xvbmUgOiBpSGVpZ2h0T3JpZ2luYWw7XG5cbiAgICAgICAgaWYgKHRoaXMucy5zSGVpZ2h0TWF0Y2ggPT0gJ3NlbWlhdXRvJykge1xuICAgICAgICAgIGFuT3JpZ2luYWxbaV0uX0RUVENfaUhlaWdodCA9IGlIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBoZWlnaHRzLnB1c2goaUhlaWdodCk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDAsIGlMZW4gPSBhbkNsb25lLmxlbmd0aDsgaSA8IGlMZW47IGkrKykge1xuICAgICAgICBhbkNsb25lW2ldLnN0eWxlLmhlaWdodCA9IGhlaWdodHNbaV0gKyBcInB4XCI7XG4gICAgICAgIGFuT3JpZ2luYWxbaV0uc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0c1tpXSArIFwicHhcIjtcbiAgICAgIH1cbiAgICB9LFxuICAgIF9maXJlZm94U2Nyb2xsRXJyb3I6IGZ1bmN0aW9uIF9maXJlZm94U2Nyb2xsRXJyb3IoKSB7XG4gICAgICBpZiAoX2ZpcmVmb3hTY3JvbGwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgdGVzdCA9ICQoJzxkaXYvPicpLmNzcyh7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgaGVpZ2h0OiAxMCxcbiAgICAgICAgICB3aWR0aDogNTAsXG4gICAgICAgICAgb3ZlcmZsb3c6ICdzY3JvbGwnXG4gICAgICAgIH0pLmFwcGVuZFRvKCdib2R5Jyk7XG4gICAgICAgIF9maXJlZm94U2Nyb2xsID0gdGVzdFswXS5jbGllbnRXaWR0aCA9PT0gdGVzdFswXS5vZmZzZXRXaWR0aCAmJiB0aGlzLl9mbkRUT3ZlcmZsb3coKS5iYXIgIT09IDA7XG4gICAgICAgIHRlc3QucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfZmlyZWZveFNjcm9sbDtcbiAgICB9XG4gIH0pO1xuICBGaXhlZENvbHVtbnMuZGVmYXVsdHMgPSB7XG4gICAgXCJpTGVmdENvbHVtbnNcIjogMSxcbiAgICBcImlSaWdodENvbHVtbnNcIjogMCxcbiAgICBcImZuRHJhd0NhbGxiYWNrXCI6IG51bGwsXG4gICAgXCJzSGVpZ2h0TWF0Y2hcIjogXCJzZW1pYXV0b1wiXG4gIH07XG4gIEZpeGVkQ29sdW1ucy52ZXJzaW9uID0gXCIzLjIuNVwiO1xuICBEYXRhVGFibGUuQXBpLnJlZ2lzdGVyKCdmaXhlZENvbHVtbnMoKScsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIERhdGFUYWJsZS5BcGkucmVnaXN0ZXIoJ2ZpeGVkQ29sdW1ucygpLnVwZGF0ZSgpJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCd0YWJsZScsIGZ1bmN0aW9uIChjdHgpIHtcbiAgICAgIGlmIChjdHguX29GaXhlZENvbHVtbnMpIHtcbiAgICAgICAgY3R4Ll9vRml4ZWRDb2x1bW5zLmZuVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBEYXRhVGFibGUuQXBpLnJlZ2lzdGVyKCdmaXhlZENvbHVtbnMoKS5yZWxheW91dCgpJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCd0YWJsZScsIGZ1bmN0aW9uIChjdHgpIHtcbiAgICAgIGlmIChjdHguX29GaXhlZENvbHVtbnMpIHtcbiAgICAgICAgY3R4Ll9vRml4ZWRDb2x1bW5zLmZuUmVkcmF3TGF5b3V0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBEYXRhVGFibGUuQXBpLnJlZ2lzdGVyKCdyb3dzKCkucmVjYWxjSGVpZ2h0KCknLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ3JvdycsIGZ1bmN0aW9uIChjdHgsIGlkeCkge1xuICAgICAgaWYgKGN0eC5fb0ZpeGVkQ29sdW1ucykge1xuICAgICAgICBjdHguX29GaXhlZENvbHVtbnMuZm5SZWNhbGN1bGF0ZUhlaWdodCh0aGlzLnJvdyhpZHgpLm5vZGUoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBEYXRhVGFibGUuQXBpLnJlZ2lzdGVyKCdmaXhlZENvbHVtbnMoKS5yb3dJbmRleCgpJywgZnVuY3Rpb24gKHJvdykge1xuICAgIHJvdyA9ICQocm93KTtcbiAgICByZXR1cm4gcm93LnBhcmVudHMoJy5EVEZDX0Nsb25lZCcpLmxlbmd0aCA/IHRoaXMucm93cyh7XG4gICAgICBwYWdlOiAnY3VycmVudCdcbiAgICB9KS5pbmRleGVzKClbcm93LmluZGV4KCldIDogdGhpcy5yb3cocm93KS5pbmRleCgpO1xuICB9KTtcbiAgRGF0YVRhYmxlLkFwaS5yZWdpc3RlcignZml4ZWRDb2x1bW5zKCkuY2VsbEluZGV4KCknLCBmdW5jdGlvbiAoY2VsbCkge1xuICAgIGNlbGwgPSAkKGNlbGwpO1xuXG4gICAgaWYgKGNlbGwucGFyZW50cygnLkRURkNfQ2xvbmVkJykubGVuZ3RoKSB7XG4gICAgICB2YXIgcm93Q2xvbmVkSWR4ID0gY2VsbC5wYXJlbnQoKS5pbmRleCgpO1xuICAgICAgdmFyIHJvd0lkeCA9IHRoaXMucm93cyh7XG4gICAgICAgIHBhZ2U6ICdjdXJyZW50J1xuICAgICAgfSkuaW5kZXhlcygpW3Jvd0Nsb25lZElkeF07XG4gICAgICB2YXIgY29sdW1uSWR4O1xuXG4gICAgICBpZiAoY2VsbC5wYXJlbnRzKCcuRFRGQ19MZWZ0V3JhcHBlcicpLmxlbmd0aCkge1xuICAgICAgICBjb2x1bW5JZHggPSBjZWxsLmluZGV4KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY29sdW1ucyA9IHRoaXMuY29sdW1ucygpLmZsYXR0ZW4oKS5sZW5ndGg7XG4gICAgICAgIGNvbHVtbklkeCA9IGNvbHVtbnMgLSB0aGlzLmNvbnRleHRbMF0uX29GaXhlZENvbHVtbnMucy5pUmlnaHRDb2x1bW5zICsgY2VsbC5pbmRleCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICByb3c6IHJvd0lkeCxcbiAgICAgICAgY29sdW1uOiB0aGlzLmNvbHVtbi5pbmRleCgndG9EYXRhJywgY29sdW1uSWR4KSxcbiAgICAgICAgY29sdW1uVmlzaWJsZTogY29sdW1uSWR4XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jZWxsKGNlbGwpLmluZGV4KCk7XG4gICAgfVxuICB9KTtcbiAgJChkb2N1bWVudCkub24oJ2luaXQuZHQuZml4ZWRDb2x1bW5zJywgZnVuY3Rpb24gKGUsIHNldHRpbmdzKSB7XG4gICAgaWYgKGUubmFtZXNwYWNlICE9PSAnZHQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGluaXQgPSBzZXR0aW5ncy5vSW5pdC5maXhlZENvbHVtbnM7XG4gICAgdmFyIGRlZmF1bHRzID0gRGF0YVRhYmxlLmRlZmF1bHRzLmZpeGVkQ29sdW1ucztcblxuICAgIGlmIChpbml0IHx8IGRlZmF1bHRzKSB7XG4gICAgICB2YXIgb3B0cyA9ICQuZXh0ZW5kKHt9LCBpbml0LCBkZWZhdWx0cyk7XG5cbiAgICAgIGlmIChpbml0ICE9PSBmYWxzZSkge1xuICAgICAgICBuZXcgRml4ZWRDb2x1bW5zKHNldHRpbmdzLCBvcHRzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICAkLmZuLmRhdGFUYWJsZS5GaXhlZENvbHVtbnMgPSBGaXhlZENvbHVtbnM7XG4gICQuZm4uRGF0YVRhYmxlLkZpeGVkQ29sdW1ucyA9IEZpeGVkQ29sdW1ucztcbiAgcmV0dXJuIEZpeGVkQ29sdW1ucztcbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2pxdWVyeScsICdkYXRhdGFibGVzLm5ldCddLCBmdW5jdGlvbiAoJCkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoJCwgd2luZG93LCBkb2N1bWVudCk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoKHR5cGVvZiBleHBvcnRzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZXhwb3J0cykpID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3QsICQpIHtcbiAgICAgIGlmICghcm9vdCkge1xuICAgICAgICByb290ID0gd2luZG93O1xuICAgICAgfVxuXG4gICAgICBpZiAoISQgfHwgISQuZm4uZGF0YVRhYmxlKSB7XG4gICAgICAgICQgPSByZXF1aXJlKCdkYXRhdGFibGVzLm5ldCcpKHJvb3QsICQpLiQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWN0b3J5KCQsIHJvb3QsIHJvb3QuZG9jdW1lbnQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZmFjdG9yeShqUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xuICB9XG59KShmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgRGF0YVRhYmxlID0gJC5mbi5kYXRhVGFibGU7XG4gIHZhciBfaW5zdENvdW50ZXIgPSAwO1xuXG4gIHZhciBGaXhlZEhlYWRlciA9IGZ1bmN0aW9uIEZpeGVkSGVhZGVyKGR0LCBjb25maWcpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRml4ZWRIZWFkZXIpKSB7XG4gICAgICB0aHJvdyBcIkZpeGVkSGVhZGVyIG11c3QgYmUgaW5pdGlhbGlzZWQgd2l0aCB0aGUgJ25ldycga2V5d29yZC5cIjtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnID09PSB0cnVlKSB7XG4gICAgICBjb25maWcgPSB7fTtcbiAgICB9XG5cbiAgICBkdCA9IG5ldyBEYXRhVGFibGUuQXBpKGR0KTtcbiAgICB0aGlzLmMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgRml4ZWRIZWFkZXIuZGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgdGhpcy5zID0ge1xuICAgICAgZHQ6IGR0LFxuICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgdGhlYWRUb3A6IDAsXG4gICAgICAgIHRib2R5VG9wOiAwLFxuICAgICAgICB0Zm9vdFRvcDogMCxcbiAgICAgICAgdGZvb3RCb3R0b206IDAsXG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0Zm9vdEhlaWdodDogMCxcbiAgICAgICAgdGhlYWRIZWlnaHQ6IDAsXG4gICAgICAgIHdpbmRvd0hlaWdodDogJCh3aW5kb3cpLmhlaWdodCgpLFxuICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgaGVhZGVyTW9kZTogbnVsbCxcbiAgICAgIGZvb3Rlck1vZGU6IG51bGwsXG4gICAgICBhdXRvV2lkdGg6IGR0LnNldHRpbmdzKClbMF0ub0ZlYXR1cmVzLmJBdXRvV2lkdGgsXG4gICAgICBuYW1lc3BhY2U6ICcuZHRmYycgKyBfaW5zdENvdW50ZXIrKyxcbiAgICAgIHNjcm9sbExlZnQ6IHtcbiAgICAgICAgaGVhZGVyOiAtMSxcbiAgICAgICAgZm9vdGVyOiAtMVxuICAgICAgfSxcbiAgICAgIGVuYWJsZTogdHJ1ZVxuICAgIH07XG4gICAgdGhpcy5kb20gPSB7XG4gICAgICBmbG9hdGluZ0hlYWRlcjogbnVsbCxcbiAgICAgIHRoZWFkOiAkKGR0LnRhYmxlKCkuaGVhZGVyKCkpLFxuICAgICAgdGJvZHk6ICQoZHQudGFibGUoKS5ib2R5KCkpLFxuICAgICAgdGZvb3Q6ICQoZHQudGFibGUoKS5mb290ZXIoKSksXG4gICAgICBoZWFkZXI6IHtcbiAgICAgICAgaG9zdDogbnVsbCxcbiAgICAgICAgZmxvYXRpbmc6IG51bGwsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBudWxsXG4gICAgICB9LFxuICAgICAgZm9vdGVyOiB7XG4gICAgICAgIGhvc3Q6IG51bGwsXG4gICAgICAgIGZsb2F0aW5nOiBudWxsLFxuICAgICAgICBwbGFjZWhvbGRlcjogbnVsbFxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5kb20uaGVhZGVyLmhvc3QgPSB0aGlzLmRvbS50aGVhZC5wYXJlbnQoKTtcbiAgICB0aGlzLmRvbS5mb290ZXIuaG9zdCA9IHRoaXMuZG9tLnRmb290LnBhcmVudCgpO1xuICAgIHZhciBkdFNldHRpbmdzID0gZHQuc2V0dGluZ3MoKVswXTtcblxuICAgIGlmIChkdFNldHRpbmdzLl9maXhlZEhlYWRlcikge1xuICAgICAgdGhyb3cgXCJGaXhlZEhlYWRlciBhbHJlYWR5IGluaXRpYWxpc2VkIG9uIHRhYmxlIFwiICsgZHRTZXR0aW5ncy5uVGFibGUuaWQ7XG4gICAgfVxuXG4gICAgZHRTZXR0aW5ncy5fZml4ZWRIZWFkZXIgPSB0aGlzO1xuXG4gICAgdGhpcy5fY29uc3RydWN0b3IoKTtcbiAgfTtcblxuICAkLmV4dGVuZChGaXhlZEhlYWRlci5wcm90b3R5cGUsIHtcbiAgICBlbmFibGU6IGZ1bmN0aW9uIGVuYWJsZShfZW5hYmxlKSB7XG4gICAgICB0aGlzLnMuZW5hYmxlID0gX2VuYWJsZTtcblxuICAgICAgaWYgKHRoaXMuYy5oZWFkZXIpIHtcbiAgICAgICAgdGhpcy5fbW9kZUNoYW5nZSgnaW4tcGxhY2UnLCAnaGVhZGVyJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmMuZm9vdGVyICYmIHRoaXMuZG9tLnRmb290Lmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9tb2RlQ2hhbmdlKCdpbi1wbGFjZScsICdmb290ZXInLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9LFxuICAgIGhlYWRlck9mZnNldDogZnVuY3Rpb24gaGVhZGVyT2Zmc2V0KG9mZnNldCkge1xuICAgICAgaWYgKG9mZnNldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuYy5oZWFkZXJPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmMuaGVhZGVyT2Zmc2V0O1xuICAgIH0sXG4gICAgZm9vdGVyT2Zmc2V0OiBmdW5jdGlvbiBmb290ZXJPZmZzZXQob2Zmc2V0KSB7XG4gICAgICBpZiAob2Zmc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5jLmZvb3Rlck9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuYy5mb290ZXJPZmZzZXQ7XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuX3Bvc2l0aW9ucygpO1xuXG4gICAgICB0aGlzLl9zY3JvbGwodHJ1ZSk7XG4gICAgfSxcbiAgICBfY29uc3RydWN0b3I6IGZ1bmN0aW9uIF9jb25zdHJ1Y3RvcigpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBkdCA9IHRoaXMucy5kdDtcbiAgICAgICQod2luZG93KS5vbignc2Nyb2xsJyArIHRoaXMucy5uYW1lc3BhY2UsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5fc2Nyb2xsKCk7XG4gICAgICB9KS5vbigncmVzaXplJyArIHRoaXMucy5uYW1lc3BhY2UsIERhdGFUYWJsZS51dGlsLnRocm90dGxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5zLnBvc2l0aW9uLndpbmRvd0hlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKTtcbiAgICAgICAgdGhhdC51cGRhdGUoKTtcbiAgICAgIH0sIDUwKSk7XG4gICAgICB2YXIgYXV0b0hlYWRlciA9ICQoJy5maC1maXhlZEhlYWRlcicpO1xuXG4gICAgICBpZiAoIXRoaXMuYy5oZWFkZXJPZmZzZXQgJiYgYXV0b0hlYWRlci5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5jLmhlYWRlck9mZnNldCA9IGF1dG9IZWFkZXIub3V0ZXJIZWlnaHQoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGF1dG9Gb290ZXIgPSAkKCcuZmgtZml4ZWRGb290ZXInKTtcblxuICAgICAgaWYgKCF0aGlzLmMuZm9vdGVyT2Zmc2V0ICYmIGF1dG9Gb290ZXIubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYy5mb290ZXJPZmZzZXQgPSBhdXRvRm9vdGVyLm91dGVySGVpZ2h0KCk7XG4gICAgICB9XG5cbiAgICAgIGR0Lm9uKCdjb2x1bW4tcmVvcmRlci5kdC5kdGZjIGNvbHVtbi12aXNpYmlsaXR5LmR0LmR0ZmMgZHJhdy5kdC5kdGZjIGNvbHVtbi1zaXppbmcuZHQuZHRmYyByZXNwb25zaXZlLWRpc3BsYXkuZHQuZHRmYycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC51cGRhdGUoKTtcbiAgICAgIH0pO1xuICAgICAgZHQub24oJ2Rlc3Ryb3kuZHRmYycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoYXQuYy5oZWFkZXIpIHtcbiAgICAgICAgICB0aGF0Ll9tb2RlQ2hhbmdlKCdpbi1wbGFjZScsICdoZWFkZXInLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGF0LmMuZm9vdGVyICYmIHRoYXQuZG9tLnRmb290Lmxlbmd0aCkge1xuICAgICAgICAgIHRoYXQuX21vZGVDaGFuZ2UoJ2luLXBsYWNlJywgJ2Zvb3RlcicsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZHQub2ZmKCcuZHRmYycpO1xuICAgICAgICAkKHdpbmRvdykub2ZmKHRoYXQucy5uYW1lc3BhY2UpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3Bvc2l0aW9ucygpO1xuXG4gICAgICB0aGlzLl9zY3JvbGwoKTtcbiAgICB9LFxuICAgIF9jbG9uZTogZnVuY3Rpb24gX2Nsb25lKGl0ZW0sIGZvcmNlKSB7XG4gICAgICB2YXIgZHQgPSB0aGlzLnMuZHQ7XG4gICAgICB2YXIgaXRlbURvbSA9IHRoaXMuZG9tW2l0ZW1dO1xuICAgICAgdmFyIGl0ZW1FbGVtZW50ID0gaXRlbSA9PT0gJ2hlYWRlcicgPyB0aGlzLmRvbS50aGVhZCA6IHRoaXMuZG9tLnRmb290O1xuXG4gICAgICBpZiAoIWZvcmNlICYmIGl0ZW1Eb20uZmxvYXRpbmcpIHtcbiAgICAgICAgaXRlbURvbS5mbG9hdGluZy5yZW1vdmVDbGFzcygnZml4ZWRIZWFkZXItZmxvYXRpbmcgZml4ZWRIZWFkZXItbG9ja2VkJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXRlbURvbS5mbG9hdGluZykge1xuICAgICAgICAgIGl0ZW1Eb20ucGxhY2Vob2xkZXIucmVtb3ZlKCk7XG5cbiAgICAgICAgICB0aGlzLl91bnNpemUoaXRlbSk7XG5cbiAgICAgICAgICBpdGVtRG9tLmZsb2F0aW5nLmNoaWxkcmVuKCkuZGV0YWNoKCk7XG4gICAgICAgICAgaXRlbURvbS5mbG9hdGluZy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGl0ZW1Eb20uZmxvYXRpbmcgPSAkKGR0LnRhYmxlKCkubm9kZSgpLmNsb25lTm9kZShmYWxzZSkpLmNzcygndGFibGUtbGF5b3V0JywgJ2ZpeGVkJykuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpLnJlbW92ZUF0dHIoJ2lkJykuYXBwZW5kKGl0ZW1FbGVtZW50KS5hcHBlbmRUbygnYm9keScpO1xuICAgICAgICBpdGVtRG9tLnBsYWNlaG9sZGVyID0gaXRlbUVsZW1lbnQuY2xvbmUoZmFsc2UpO1xuICAgICAgICBpdGVtRG9tLnBsYWNlaG9sZGVyLmZpbmQoJypbaWRdJykucmVtb3ZlQXR0cignaWQnKTtcbiAgICAgICAgaXRlbURvbS5ob3N0LnByZXBlbmQoaXRlbURvbS5wbGFjZWhvbGRlcik7XG5cbiAgICAgICAgdGhpcy5fbWF0Y2hXaWR0aHMoaXRlbURvbS5wbGFjZWhvbGRlciwgaXRlbURvbS5mbG9hdGluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBfbWF0Y2hXaWR0aHM6IGZ1bmN0aW9uIF9tYXRjaFdpZHRocyhmcm9tLCB0bykge1xuICAgICAgdmFyIGdldCA9IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgICAgIHJldHVybiAkKG5hbWUsIGZyb20pLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuICQodGhpcykud2lkdGgoKTtcbiAgICAgICAgfSkudG9BcnJheSgpO1xuICAgICAgfTtcblxuICAgICAgdmFyIHNldCA9IGZ1bmN0aW9uIHNldChuYW1lLCB0b1dpZHRocykge1xuICAgICAgICAkKG5hbWUsIHRvKS5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgJCh0aGlzKS5jc3Moe1xuICAgICAgICAgICAgd2lkdGg6IHRvV2lkdGhzW2ldLFxuICAgICAgICAgICAgbWluV2lkdGg6IHRvV2lkdGhzW2ldXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdmFyIHRoV2lkdGhzID0gZ2V0KCd0aCcpO1xuICAgICAgdmFyIHRkV2lkdGhzID0gZ2V0KCd0ZCcpO1xuICAgICAgc2V0KCd0aCcsIHRoV2lkdGhzKTtcbiAgICAgIHNldCgndGQnLCB0ZFdpZHRocyk7XG4gICAgfSxcbiAgICBfdW5zaXplOiBmdW5jdGlvbiBfdW5zaXplKGl0ZW0pIHtcbiAgICAgIHZhciBlbCA9IHRoaXMuZG9tW2l0ZW1dLmZsb2F0aW5nO1xuXG4gICAgICBpZiAoZWwgJiYgKGl0ZW0gPT09ICdmb290ZXInIHx8IGl0ZW0gPT09ICdoZWFkZXInICYmICF0aGlzLnMuYXV0b1dpZHRoKSkge1xuICAgICAgICAkKCd0aCwgdGQnLCBlbCkuY3NzKHtcbiAgICAgICAgICB3aWR0aDogJycsXG4gICAgICAgICAgbWluV2lkdGg6ICcnXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChlbCAmJiBpdGVtID09PSAnaGVhZGVyJykge1xuICAgICAgICAkKCd0aCwgdGQnLCBlbCkuY3NzKCdtaW4td2lkdGgnLCAnJyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBfaG9yaXpvbnRhbDogZnVuY3Rpb24gX2hvcml6b250YWwoaXRlbSwgc2Nyb2xsTGVmdCkge1xuICAgICAgdmFyIGl0ZW1Eb20gPSB0aGlzLmRvbVtpdGVtXTtcbiAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMucy5wb3NpdGlvbjtcbiAgICAgIHZhciBsYXN0U2Nyb2xsTGVmdCA9IHRoaXMucy5zY3JvbGxMZWZ0O1xuXG4gICAgICBpZiAoaXRlbURvbS5mbG9hdGluZyAmJiBsYXN0U2Nyb2xsTGVmdFtpdGVtXSAhPT0gc2Nyb2xsTGVmdCkge1xuICAgICAgICBpdGVtRG9tLmZsb2F0aW5nLmNzcygnbGVmdCcsIHBvc2l0aW9uLmxlZnQgLSBzY3JvbGxMZWZ0KTtcbiAgICAgICAgbGFzdFNjcm9sbExlZnRbaXRlbV0gPSBzY3JvbGxMZWZ0O1xuICAgICAgfVxuICAgIH0sXG4gICAgX21vZGVDaGFuZ2U6IGZ1bmN0aW9uIF9tb2RlQ2hhbmdlKG1vZGUsIGl0ZW0sIGZvcmNlQ2hhbmdlKSB7XG4gICAgICB2YXIgZHQgPSB0aGlzLnMuZHQ7XG4gICAgICB2YXIgaXRlbURvbSA9IHRoaXMuZG9tW2l0ZW1dO1xuICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5zLnBvc2l0aW9uO1xuICAgICAgdmFyIHRhYmxlUGFydCA9IHRoaXMuZG9tW2l0ZW0gPT09ICdmb290ZXInID8gJ3Rmb290JyA6ICd0aGVhZCddO1xuICAgICAgdmFyIGZvY3VzID0gJC5jb250YWlucyh0YWJsZVBhcnRbMF0sIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpID8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA6IG51bGw7XG5cbiAgICAgIGlmIChmb2N1cykge1xuICAgICAgICBmb2N1cy5ibHVyKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlID09PSAnaW4tcGxhY2UnKSB7XG4gICAgICAgIGlmIChpdGVtRG9tLnBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgaXRlbURvbS5wbGFjZWhvbGRlci5yZW1vdmUoKTtcbiAgICAgICAgICBpdGVtRG9tLnBsYWNlaG9sZGVyID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3Vuc2l6ZShpdGVtKTtcblxuICAgICAgICBpZiAoaXRlbSA9PT0gJ2hlYWRlcicpIHtcbiAgICAgICAgICBpdGVtRG9tLmhvc3QucHJlcGVuZCh0YWJsZVBhcnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1Eb20uaG9zdC5hcHBlbmQodGFibGVQYXJ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpdGVtRG9tLmZsb2F0aW5nKSB7XG4gICAgICAgICAgaXRlbURvbS5mbG9hdGluZy5yZW1vdmUoKTtcbiAgICAgICAgICBpdGVtRG9tLmZsb2F0aW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnaW4nKSB7XG4gICAgICAgIHRoaXMuX2Nsb25lKGl0ZW0sIGZvcmNlQ2hhbmdlKTtcblxuICAgICAgICBpdGVtRG9tLmZsb2F0aW5nLmFkZENsYXNzKCdmaXhlZEhlYWRlci1mbG9hdGluZycpLmNzcyhpdGVtID09PSAnaGVhZGVyJyA/ICd0b3AnIDogJ2JvdHRvbScsIHRoaXMuY1tpdGVtICsgJ09mZnNldCddKS5jc3MoJ2xlZnQnLCBwb3NpdGlvbi5sZWZ0ICsgJ3B4JykuY3NzKCd3aWR0aCcsIHBvc2l0aW9uLndpZHRoICsgJ3B4Jyk7XG5cbiAgICAgICAgaWYgKGl0ZW0gPT09ICdmb290ZXInKSB7XG4gICAgICAgICAgaXRlbURvbS5mbG9hdGluZy5jc3MoJ3RvcCcsICcnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnYmVsb3cnKSB7XG4gICAgICAgIHRoaXMuX2Nsb25lKGl0ZW0sIGZvcmNlQ2hhbmdlKTtcblxuICAgICAgICBpdGVtRG9tLmZsb2F0aW5nLmFkZENsYXNzKCdmaXhlZEhlYWRlci1sb2NrZWQnKS5jc3MoJ3RvcCcsIHBvc2l0aW9uLnRmb290VG9wIC0gcG9zaXRpb24udGhlYWRIZWlnaHQpLmNzcygnbGVmdCcsIHBvc2l0aW9uLmxlZnQgKyAncHgnKS5jc3MoJ3dpZHRoJywgcG9zaXRpb24ud2lkdGggKyAncHgnKTtcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2Fib3ZlJykge1xuICAgICAgICB0aGlzLl9jbG9uZShpdGVtLCBmb3JjZUNoYW5nZSk7XG5cbiAgICAgICAgaXRlbURvbS5mbG9hdGluZy5hZGRDbGFzcygnZml4ZWRIZWFkZXItbG9ja2VkJykuY3NzKCd0b3AnLCBwb3NpdGlvbi50Ym9keVRvcCkuY3NzKCdsZWZ0JywgcG9zaXRpb24ubGVmdCArICdweCcpLmNzcygnd2lkdGgnLCBwb3NpdGlvbi53aWR0aCArICdweCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9jdXMgJiYgZm9jdXMgIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm9jdXMuZm9jdXMoKTtcbiAgICAgICAgfSwgMTApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnMuc2Nyb2xsTGVmdC5oZWFkZXIgPSAtMTtcbiAgICAgIHRoaXMucy5zY3JvbGxMZWZ0LmZvb3RlciA9IC0xO1xuICAgICAgdGhpcy5zW2l0ZW0gKyAnTW9kZSddID0gbW9kZTtcbiAgICB9LFxuICAgIF9wb3NpdGlvbnM6IGZ1bmN0aW9uIF9wb3NpdGlvbnMoKSB7XG4gICAgICB2YXIgZHQgPSB0aGlzLnMuZHQ7XG4gICAgICB2YXIgdGFibGUgPSBkdC50YWJsZSgpO1xuICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5zLnBvc2l0aW9uO1xuICAgICAgdmFyIGRvbSA9IHRoaXMuZG9tO1xuICAgICAgdmFyIHRhYmxlTm9kZSA9ICQodGFibGUubm9kZSgpKTtcbiAgICAgIHZhciB0aGVhZCA9IHRhYmxlTm9kZS5jaGlsZHJlbigndGhlYWQnKTtcbiAgICAgIHZhciB0Zm9vdCA9IHRhYmxlTm9kZS5jaGlsZHJlbigndGZvb3QnKTtcbiAgICAgIHZhciB0Ym9keSA9IGRvbS50Ym9keTtcbiAgICAgIHBvc2l0aW9uLnZpc2libGUgPSB0YWJsZU5vZGUuaXMoJzp2aXNpYmxlJyk7XG4gICAgICBwb3NpdGlvbi53aWR0aCA9IHRhYmxlTm9kZS5vdXRlcldpZHRoKCk7XG4gICAgICBwb3NpdGlvbi5sZWZ0ID0gdGFibGVOb2RlLm9mZnNldCgpLmxlZnQ7XG4gICAgICBwb3NpdGlvbi50aGVhZFRvcCA9IHRoZWFkLm9mZnNldCgpLnRvcDtcbiAgICAgIHBvc2l0aW9uLnRib2R5VG9wID0gdGJvZHkub2Zmc2V0KCkudG9wO1xuICAgICAgcG9zaXRpb24udGhlYWRIZWlnaHQgPSBwb3NpdGlvbi50Ym9keVRvcCAtIHBvc2l0aW9uLnRoZWFkVG9wO1xuXG4gICAgICBpZiAodGZvb3QubGVuZ3RoKSB7XG4gICAgICAgIHBvc2l0aW9uLnRmb290VG9wID0gdGZvb3Qub2Zmc2V0KCkudG9wO1xuICAgICAgICBwb3NpdGlvbi50Zm9vdEJvdHRvbSA9IHBvc2l0aW9uLnRmb290VG9wICsgdGZvb3Qub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgcG9zaXRpb24udGZvb3RIZWlnaHQgPSBwb3NpdGlvbi50Zm9vdEJvdHRvbSAtIHBvc2l0aW9uLnRmb290VG9wO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcG9zaXRpb24udGZvb3RUb3AgPSBwb3NpdGlvbi50Ym9keVRvcCArIHRib2R5Lm91dGVySGVpZ2h0KCk7XG4gICAgICAgIHBvc2l0aW9uLnRmb290Qm90dG9tID0gcG9zaXRpb24udGZvb3RUb3A7XG4gICAgICAgIHBvc2l0aW9uLnRmb290SGVpZ2h0ID0gcG9zaXRpb24udGZvb3RUb3A7XG4gICAgICB9XG4gICAgfSxcbiAgICBfc2Nyb2xsOiBmdW5jdGlvbiBfc2Nyb2xsKGZvcmNlQ2hhbmdlKSB7XG4gICAgICB2YXIgd2luZG93VG9wID0gJChkb2N1bWVudCkuc2Nyb2xsVG9wKCk7XG4gICAgICB2YXIgd2luZG93TGVmdCA9ICQoZG9jdW1lbnQpLnNjcm9sbExlZnQoKTtcbiAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMucy5wb3NpdGlvbjtcbiAgICAgIHZhciBoZWFkZXJNb2RlLCBmb290ZXJNb2RlO1xuXG4gICAgICBpZiAoIXRoaXMucy5lbmFibGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jLmhlYWRlcikge1xuICAgICAgICBpZiAoIXBvc2l0aW9uLnZpc2libGUgfHwgd2luZG93VG9wIDw9IHBvc2l0aW9uLnRoZWFkVG9wIC0gdGhpcy5jLmhlYWRlck9mZnNldCkge1xuICAgICAgICAgIGhlYWRlck1vZGUgPSAnaW4tcGxhY2UnO1xuICAgICAgICB9IGVsc2UgaWYgKHdpbmRvd1RvcCA8PSBwb3NpdGlvbi50Zm9vdFRvcCAtIHBvc2l0aW9uLnRoZWFkSGVpZ2h0IC0gdGhpcy5jLmhlYWRlck9mZnNldCkge1xuICAgICAgICAgIGhlYWRlck1vZGUgPSAnaW4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhlYWRlck1vZGUgPSAnYmVsb3cnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZvcmNlQ2hhbmdlIHx8IGhlYWRlck1vZGUgIT09IHRoaXMucy5oZWFkZXJNb2RlKSB7XG4gICAgICAgICAgdGhpcy5fbW9kZUNoYW5nZShoZWFkZXJNb2RlLCAnaGVhZGVyJywgZm9yY2VDaGFuZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faG9yaXpvbnRhbCgnaGVhZGVyJywgd2luZG93TGVmdCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmMuZm9vdGVyICYmIHRoaXMuZG9tLnRmb290Lmxlbmd0aCkge1xuICAgICAgICBpZiAoIXBvc2l0aW9uLnZpc2libGUgfHwgd2luZG93VG9wICsgcG9zaXRpb24ud2luZG93SGVpZ2h0ID49IHBvc2l0aW9uLnRmb290Qm90dG9tICsgdGhpcy5jLmZvb3Rlck9mZnNldCkge1xuICAgICAgICAgIGZvb3Rlck1vZGUgPSAnaW4tcGxhY2UnO1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uLndpbmRvd0hlaWdodCArIHdpbmRvd1RvcCA+IHBvc2l0aW9uLnRib2R5VG9wICsgcG9zaXRpb24udGZvb3RIZWlnaHQgKyB0aGlzLmMuZm9vdGVyT2Zmc2V0KSB7XG4gICAgICAgICAgZm9vdGVyTW9kZSA9ICdpbic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9vdGVyTW9kZSA9ICdhYm92ZSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZm9yY2VDaGFuZ2UgfHwgZm9vdGVyTW9kZSAhPT0gdGhpcy5zLmZvb3Rlck1vZGUpIHtcbiAgICAgICAgICB0aGlzLl9tb2RlQ2hhbmdlKGZvb3Rlck1vZGUsICdmb290ZXInLCBmb3JjZUNoYW5nZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9ob3Jpem9udGFsKCdmb290ZXInLCB3aW5kb3dMZWZ0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBGaXhlZEhlYWRlci52ZXJzaW9uID0gXCIzLjEuNFwiO1xuICBGaXhlZEhlYWRlci5kZWZhdWx0cyA9IHtcbiAgICBoZWFkZXI6IHRydWUsXG4gICAgZm9vdGVyOiBmYWxzZSxcbiAgICBoZWFkZXJPZmZzZXQ6IDAsXG4gICAgZm9vdGVyT2Zmc2V0OiAwXG4gIH07XG4gICQuZm4uZGF0YVRhYmxlLkZpeGVkSGVhZGVyID0gRml4ZWRIZWFkZXI7XG4gICQuZm4uRGF0YVRhYmxlLkZpeGVkSGVhZGVyID0gRml4ZWRIZWFkZXI7XG4gICQoZG9jdW1lbnQpLm9uKCdpbml0LmR0LmR0ZmgnLCBmdW5jdGlvbiAoZSwgc2V0dGluZ3MsIGpzb24pIHtcbiAgICBpZiAoZS5uYW1lc3BhY2UgIT09ICdkdCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaW5pdCA9IHNldHRpbmdzLm9Jbml0LmZpeGVkSGVhZGVyO1xuICAgIHZhciBkZWZhdWx0cyA9IERhdGFUYWJsZS5kZWZhdWx0cy5maXhlZEhlYWRlcjtcblxuICAgIGlmICgoaW5pdCB8fCBkZWZhdWx0cykgJiYgIXNldHRpbmdzLl9maXhlZEhlYWRlcikge1xuICAgICAgdmFyIG9wdHMgPSAkLmV4dGVuZCh7fSwgZGVmYXVsdHMsIGluaXQpO1xuXG4gICAgICBpZiAoaW5pdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgbmV3IEZpeGVkSGVhZGVyKHNldHRpbmdzLCBvcHRzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBEYXRhVGFibGUuQXBpLnJlZ2lzdGVyKCdmaXhlZEhlYWRlcigpJywgZnVuY3Rpb24gKCkge30pO1xuICBEYXRhVGFibGUuQXBpLnJlZ2lzdGVyKCdmaXhlZEhlYWRlci5hZGp1c3QoKScsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigndGFibGUnLCBmdW5jdGlvbiAoY3R4KSB7XG4gICAgICB2YXIgZmggPSBjdHguX2ZpeGVkSGVhZGVyO1xuXG4gICAgICBpZiAoZmgpIHtcbiAgICAgICAgZmgudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBEYXRhVGFibGUuQXBpLnJlZ2lzdGVyKCdmaXhlZEhlYWRlci5lbmFibGUoKScsIGZ1bmN0aW9uIChmbGFnKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoJ3RhYmxlJywgZnVuY3Rpb24gKGN0eCkge1xuICAgICAgdmFyIGZoID0gY3R4Ll9maXhlZEhlYWRlcjtcbiAgICAgIGZsYWcgPSBmbGFnICE9PSB1bmRlZmluZWQgPyBmbGFnIDogdHJ1ZTtcblxuICAgICAgaWYgKGZoICYmIGZsYWcgIT09IGZoLnMuZW5hYmxlKSB7XG4gICAgICAgIGZoLmVuYWJsZShmbGFnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIERhdGFUYWJsZS5BcGkucmVnaXN0ZXIoJ2ZpeGVkSGVhZGVyLmRpc2FibGUoKScsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigndGFibGUnLCBmdW5jdGlvbiAoY3R4KSB7XG4gICAgICB2YXIgZmggPSBjdHguX2ZpeGVkSGVhZGVyO1xuXG4gICAgICBpZiAoZmggJiYgZmgucy5lbmFibGUpIHtcbiAgICAgICAgZmguZW5hYmxlKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gICQuZWFjaChbJ2hlYWRlcicsICdmb290ZXInXSwgZnVuY3Rpb24gKGksIGVsKSB7XG4gICAgRGF0YVRhYmxlLkFwaS5yZWdpc3RlcignZml4ZWRIZWFkZXIuJyArIGVsICsgJ09mZnNldCgpJywgZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgdmFyIGN0eCA9IHRoaXMuY29udGV4dDtcblxuICAgICAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBjdHgubGVuZ3RoICYmIGN0eFswXS5fZml4ZWRIZWFkZXIgPyBjdHhbMF0uX2ZpeGVkSGVhZGVyW2VsICsgJ09mZnNldCddKCkgOiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCd0YWJsZScsIGZ1bmN0aW9uIChjdHgpIHtcbiAgICAgICAgdmFyIGZoID0gY3R4Ll9maXhlZEhlYWRlcjtcblxuICAgICAgICBpZiAoZmgpIHtcbiAgICAgICAgICBmaFtlbCArICdPZmZzZXQnXShvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBGaXhlZEhlYWRlcjtcbn0pOyJdfQ==
